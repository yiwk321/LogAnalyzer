<Events startTimestamp="1614649085217" logVersion="1.0.0.202102091426">
  <Command __id="7" _type="ShellCommand" date="Mon Mar 01 20:38:10 EST 2021" starttimestamp="1614649085217" timestamp="5325" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10" _type="PauseCommand" date="Mon Mar 01 20:38:32 EST 2021" range="20s-30s" starttimestamp="1614649085217" timestamp="26991">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21666]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="37" _type="PauseCommand" date="Mon Mar 01 20:39:31 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="86085">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4889]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="38" _type="MoveCaretCommand" caretOffset="428" date="Mon Mar 01 20:39:31 EST 2021" docOffset="481" starttimestamp="1614649085217" timestamp="86188" />
  <Command __id="40" _type="MoveCaretCommand" caretOffset="8981" date="Mon Mar 01 20:39:32 EST 2021" docOffset="10462" starttimestamp="1614649085217" timestamp="86866" />
  <Command __id="42" _type="PauseCommand" date="Mon Mar 01 20:39:40 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="95247">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8381]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="41" _type="MoveCaretCommand" caretOffset="1505" date="Mon Mar 01 20:39:40 EST 2021" docOffset="2986" starttimestamp="1614649085217" timestamp="95247" />
  <Command __id="44" _type="PauseCommand" date="Mon Mar 01 20:39:55 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="110659">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15412]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="43" _type="MoveCaretCommand" caretOffset="912" date="Mon Mar 01 20:39:55 EST 2021" docOffset="25394" starttimestamp="1614649085217" timestamp="110659" />
  <Command __id="46" _type="PauseCommand" date="Mon Mar 01 20:40:50 EST 2021" range="30s-1m" starttimestamp="1614649085217" timestamp="164798">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[54139]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="45" _type="MoveCaretCommand" caretOffset="5863" date="Mon Mar 01 20:40:50 EST 2021" docOffset="30345" starttimestamp="1614649085217" timestamp="164798" />
  <Command __id="48" _type="PauseCommand" date="Mon Mar 01 20:41:20 EST 2021" range="30s-1m" starttimestamp="1614649085217" timestamp="195055">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[30256]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="47" _type="MoveCaretCommand" caretOffset="5424" date="Mon Mar 01 20:41:20 EST 2021" docOffset="29906" starttimestamp="1614649085217" timestamp="195054" />
  <Command __id="50" _type="PauseCommand" date="Mon Mar 01 20:41:21 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="196172">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1118]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="49" _type="MoveCaretCommand" caretOffset="5380" date="Mon Mar 01 20:41:21 EST 2021" docOffset="29862" starttimestamp="1614649085217" timestamp="196172" />
  <Command __id="51" _type="MoveCaretCommand" caretOffset="5420" date="Mon Mar 01 20:41:21 EST 2021" docOffset="29902" starttimestamp="1614649085217" timestamp="196700" />
  <Command __id="53" _type="PauseCommand" date="Mon Mar 01 20:41:24 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="198906">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2206]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="52" _type="MoveCaretCommand" caretOffset="5430" date="Mon Mar 01 20:41:24 EST 2021" docOffset="29912" starttimestamp="1614649085217" timestamp="198906" />
  <Command __id="54" _type="MoveCaretCommand" caretOffset="5417" date="Mon Mar 01 20:41:25 EST 2021" docOffset="29899" starttimestamp="1614649085217" timestamp="199798" />
  <Command __id="56" _type="PauseCommand" date="Mon Mar 01 20:41:27 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="201907">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2109]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="55" _type="MoveCaretCommand" caretOffset="5453" date="Mon Mar 01 20:41:27 EST 2021" docOffset="29935" starttimestamp="1614649085217" timestamp="201907" />
  <Command __id="58" _type="PauseCommand" date="Mon Mar 01 20:41:33 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="208685">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6778]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="57" _type="MoveCaretCommand" caretOffset="5751" date="Mon Mar 01 20:41:33 EST 2021" docOffset="30233" starttimestamp="1614649085217" timestamp="208685" />
  <Command __id="60" _type="PauseCommand" date="Mon Mar 01 20:41:51 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="225790">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[17105]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="59" _type="ShellCommand" date="Mon Mar 01 20:41:51 EST 2021" starttimestamp="1614649085217" timestamp="225790" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="62" _type="PauseCommand" date="Mon Mar 01 20:42:02 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="237233">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11443]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="61" _type="ShellCommand" date="Mon Mar 01 20:42:02 EST 2021" starttimestamp="1614649085217" timestamp="237233" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="63" _type="MoveCaretCommand" caretOffset="5485" date="Mon Mar 01 20:42:02 EST 2021" docOffset="29967" starttimestamp="1614649085217" timestamp="237321" />
  <Command __id="65" _type="PauseCommand" date="Mon Mar 01 20:42:06 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="241775">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4454]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="64" _type="MoveCaretCommand" caretOffset="985" date="Mon Mar 01 20:42:06 EST 2021" docOffset="25467" starttimestamp="1614649085217" timestamp="241775" />
  <Command __id="67" _type="PauseCommand" date="Mon Mar 01 20:42:12 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="247470">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5695]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="66" _type="MoveCaretCommand" caretOffset="5761" date="Mon Mar 01 20:42:12 EST 2021" docOffset="30243" starttimestamp="1614649085217" timestamp="247470" />
  <Command __id="69" _type="PauseCommand" date="Mon Mar 01 20:42:17 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="252298">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4828]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="68" _type="ShellCommand" date="Mon Mar 01 20:42:17 EST 2021" starttimestamp="1614649085217" timestamp="252298" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="71" _type="PauseCommand" date="Mon Mar 01 20:42:20 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="254904">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2606]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="70" _type="ShellCommand" date="Mon Mar 01 20:42:20 EST 2021" starttimestamp="1614649085217" timestamp="254904" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="72" _type="MoveCaretCommand" caretOffset="5668" date="Mon Mar 01 20:42:20 EST 2021" docOffset="30150" starttimestamp="1614649085217" timestamp="254986" />
  <Command __id="74" _type="PauseCommand" date="Mon Mar 01 20:42:29 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="264101">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9115]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="73" _type="MoveCaretCommand" caretOffset="5405" date="Mon Mar 01 20:42:29 EST 2021" docOffset="29887" starttimestamp="1614649085217" timestamp="264101" />
  <Command __id="76" _type="PauseCommand" date="Mon Mar 01 20:42:40 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="275073">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10972]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="75" _type="MoveCaretCommand" caretOffset="5134" date="Mon Mar 01 20:42:40 EST 2021" docOffset="29616" starttimestamp="1614649085217" timestamp="275073" />
  <Command __id="78" _type="PauseCommand" date="Mon Mar 01 20:42:42 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="277526">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2453]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="77" _type="ShellCommand" date="Mon Mar 01 20:42:42 EST 2021" starttimestamp="1614649085217" timestamp="277526" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="80" _type="PauseCommand" date="Mon Mar 01 20:42:44 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="279445">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1919]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="79" _type="ShellCommand" date="Mon Mar 01 20:42:44 EST 2021" starttimestamp="1614649085217" timestamp="279445" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="84" _type="PauseCommand" date="Mon Mar 01 20:43:08 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="302798">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2943]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="83" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:43:08 EST 2021" starttimestamp="1614649085217" timestamp="302798" />
  <Command __id="85" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:43:08 EST 2021" starttimestamp="1614649085217" timestamp="302800" />
  <Command __id="86" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:43:08 EST 2021" starttimestamp="1614649085217" timestamp="302800" />
  <Command __id="87" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:43:08 EST 2021" starttimestamp="1614649085217" timestamp="302803" />
  <Command __id="88" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:43:08 EST 2021" starttimestamp="1614649085217" timestamp="302803" />
  <Command __id="89" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:43:08 EST 2021" starttimestamp="1614649085217" timestamp="302805" />
  <Command __id="91" _type="PauseCommand" date="Mon Mar 01 20:43:11 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="306001">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3196]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="90" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:43:11 EST 2021" starttimestamp="1614649085217" timestamp="306001" />
  <Command __id="92" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:43:11 EST 2021" starttimestamp="1614649085217" timestamp="306114" />
  <Command __id="93" _type="InsertStringCommand" date="Mon Mar 01 20:43:12 EST 2021" starttimestamp="1614649085217" timestamp="307008" timestamp2="307008">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="95" _type="PauseCommand" date="Mon Mar 01 20:43:16 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="311519">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4511]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="94" _type="MoveCaretCommand" caretOffset="5887" date="Mon Mar 01 20:43:16 EST 2021" docOffset="30369" starttimestamp="1614649085217" timestamp="311519" />
  <Command __id="97" _type="PauseCommand" date="Mon Mar 01 20:43:18 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="313638">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2119]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="96" _type="MoveCaretCommand" caretOffset="5885" date="Mon Mar 01 20:43:18 EST 2021" docOffset="30367" starttimestamp="1614649085217" timestamp="313638" />
  <Command __id="99" _type="PauseCommand" date="Mon Mar 01 20:43:20 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="315225">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1587]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="98" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:43:20 EST 2021" starttimestamp="1614649085217" timestamp="315225" />
  <Command __id="101" _type="PauseCommand" date="Mon Mar 01 20:43:21 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="316565">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1340]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="100" _type="InsertStringCommand" date="Mon Mar 01 20:43:21 EST 2021" starttimestamp="1614649085217" timestamp="316565" timestamp2="316565">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="103" _type="PauseCommand" date="Mon Mar 01 20:43:25 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="319886">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3321]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="102" _type="MoveCaretCommand" caretOffset="5134" date="Mon Mar 01 20:43:25 EST 2021" docOffset="29616" starttimestamp="1614649085217" timestamp="319886" />
  <Command __id="105" _type="PauseCommand" date="Mon Mar 01 20:43:27 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="322001">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2115]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="104" _type="MoveCaretCommand" caretOffset="5019" date="Mon Mar 01 20:43:27 EST 2021" docOffset="29501" starttimestamp="1614649085217" timestamp="322001" />
  <Command __id="107" _type="PauseCommand" date="Mon Mar 01 20:43:30 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="325678">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3677]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="106" _type="MoveCaretCommand" caretOffset="5019" date="Mon Mar 01 20:43:30 EST 2021" docOffset="29501" starttimestamp="1614649085217" timestamp="325678" />
  <Command __id="108" _type="SelectTextCommand" caretOffset="5023" date="Mon Mar 01 20:43:31 EST 2021" end="5023" start="5015" starttimestamp="1614649085217" timestamp="325850" />
  <Command __id="110" _type="PauseCommand" date="Mon Mar 01 20:43:34 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="329544">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3694]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="109" _type="MoveCaretCommand" caretOffset="1690" date="Mon Mar 01 20:43:34 EST 2021" docOffset="26172" starttimestamp="1614649085217" timestamp="329544" />
  <Command __id="112" _type="PauseCommand" date="Mon Mar 01 20:43:49 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="343917">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14373]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="111" _type="MoveCaretCommand" caretOffset="5134" date="Mon Mar 01 20:43:49 EST 2021" docOffset="29616" starttimestamp="1614649085217" timestamp="343917" />
  <Command __id="114" _type="PauseCommand" date="Mon Mar 01 20:43:51 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="346369">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2452]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="113" _type="ShellCommand" date="Mon Mar 01 20:43:51 EST 2021" starttimestamp="1614649085217" timestamp="346369" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="116" _type="PauseCommand" date="Mon Mar 01 20:43:53 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="348233">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1864]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="115" _type="ShellCommand" date="Mon Mar 01 20:43:53 EST 2021" starttimestamp="1614649085217" timestamp="348233" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="118" _type="PauseCommand" date="Mon Mar 01 20:43:54 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="349348">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1115]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="117" _type="ShellCommand" date="Mon Mar 01 20:43:54 EST 2021" starttimestamp="1614649085217" timestamp="349348" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="120" _type="PauseCommand" date="Mon Mar 01 20:44:11 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="365824">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16476]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="119" _type="ShellCommand" date="Mon Mar 01 20:44:11 EST 2021" starttimestamp="1614649085217" timestamp="365824" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="121" _type="MoveCaretCommand" caretOffset="5433" date="Mon Mar 01 20:44:11 EST 2021" docOffset="29915" starttimestamp="1614649085217" timestamp="365900" />
  <Command __id="123" _type="PauseCommand" date="Mon Mar 01 20:44:12 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="367349">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1449]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="122" _type="MoveCaretCommand" caretOffset="5113" date="Mon Mar 01 20:44:12 EST 2021" docOffset="29595" starttimestamp="1614649085217" timestamp="367349" />
  <Command __id="124" _type="InsertStringCommand" date="Mon Mar 01 20:44:13 EST 2021" starttimestamp="1614649085217" timestamp="367941" timestamp2="367941">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="125" _type="InsertStringCommand" date="Mon Mar 01 20:44:13 EST 2021" starttimestamp="1614649085217" timestamp="368193" timestamp2="368193">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="126" _type="InsertStringCommand" date="Mon Mar 01 20:44:13 EST 2021" starttimestamp="1614649085217" timestamp="368459" timestamp2="368459">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="127" _type="InsertStringCommand" date="Mon Mar 01 20:44:13 EST 2021" starttimestamp="1614649085217" timestamp="368657" timestamp2="368657">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="128" _type="InsertStringCommand" date="Mon Mar 01 20:44:13 EST 2021" starttimestamp="1614649085217" timestamp="368761" timestamp2="368761">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="129" _type="InsertStringCommand" date="Mon Mar 01 20:44:14 EST 2021" starttimestamp="1614649085217" timestamp="369065" timestamp2="369065">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="131" _type="PauseCommand" date="Mon Mar 01 20:44:16 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="371340">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2275]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="130" _type="InsertStringCommand" date="Mon Mar 01 20:44:16 EST 2021" starttimestamp="1614649085217" timestamp="371340" timestamp2="371340">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="132" _type="InsertStringCommand" date="Mon Mar 01 20:44:16 EST 2021" starttimestamp="1614649085217" timestamp="371443" timestamp2="371443">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="133" _type="InsertStringCommand" date="Mon Mar 01 20:44:17 EST 2021" starttimestamp="1614649085217" timestamp="372276" timestamp2="372276">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="135" _type="PauseCommand" date="Mon Mar 01 20:44:18 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="373447">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1171]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="134" _type="InsertStringCommand" date="Mon Mar 01 20:44:18 EST 2021" starttimestamp="1614649085217" timestamp="373447" timestamp2="373447">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="136" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:44:19 EST 2021" starttimestamp="1614649085217" timestamp="374078" />
  <Command __id="137" _type="InsertStringCommand" date="Mon Mar 01 20:44:19 EST 2021" starttimestamp="1614649085217" timestamp="374342" timestamp2="374342">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="138" _type="InsertStringCommand" date="Mon Mar 01 20:44:19 EST 2021" starttimestamp="1614649085217" timestamp="374675" timestamp2="374675">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="139" _type="InsertStringCommand" date="Mon Mar 01 20:44:19 EST 2021" starttimestamp="1614649085217" timestamp="374767" timestamp2="374767">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="140" _type="InsertStringCommand" date="Mon Mar 01 20:44:20 EST 2021" starttimestamp="1614649085217" timestamp="374838" timestamp2="374838">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="141" _type="InsertStringCommand" date="Mon Mar 01 20:44:20 EST 2021" starttimestamp="1614649085217" timestamp="375187" timestamp2="375187">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="142" _type="InsertStringCommand" date="Mon Mar 01 20:44:20 EST 2021" starttimestamp="1614649085217" timestamp="375274" timestamp2="375274">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="143" _type="InsertStringCommand" date="Mon Mar 01 20:44:20 EST 2021" starttimestamp="1614649085217" timestamp="375419" timestamp2="375419">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="144" _type="InsertStringCommand" date="Mon Mar 01 20:44:20 EST 2021" starttimestamp="1614649085217" timestamp="375581" timestamp2="375581">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="145" _type="InsertStringCommand" date="Mon Mar 01 20:44:20 EST 2021" starttimestamp="1614649085217" timestamp="375730" timestamp2="375730">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="147" _type="PauseCommand" date="Mon Mar 01 20:44:22 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="377319">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1589]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="146" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Mar 01 20:44:22 EST 2021" starttimestamp="1614649085217" timestamp="377319" />
  <Command __id="148" _type="InsertStringCommand" date="Mon Mar 01 20:44:22 EST 2021" starttimestamp="1614649085217" timestamp="377685" timestamp2="377685">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="149" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Mar 01 20:44:23 EST 2021" starttimestamp="1614649085217" timestamp="378169" />
  <Command __id="151" _type="PauseCommand" date="Mon Mar 01 20:44:25 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="379967">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1798]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="150" _type="MoveCaretCommand" caretOffset="5178" date="Mon Mar 01 20:44:25 EST 2021" docOffset="29660" starttimestamp="1614649085217" timestamp="379967" />
  <Command __id="152" _type="MoveCaretCommand" caretOffset="5164" date="Mon Mar 01 20:44:25 EST 2021" docOffset="29646" starttimestamp="1614649085217" timestamp="380635" />
  <Command __id="153" _type="InsertStringCommand" date="Mon Mar 01 20:44:26 EST 2021" starttimestamp="1614649085217" timestamp="380837" timestamp2="380837">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="154" _type="InsertStringCommand" date="Mon Mar 01 20:44:26 EST 2021" starttimestamp="1614649085217" timestamp="381235" timestamp2="381235">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="155" _type="InsertStringCommand" date="Mon Mar 01 20:44:26 EST 2021" starttimestamp="1614649085217" timestamp="381459" timestamp2="381459">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="156" _type="InsertStringCommand" date="Mon Mar 01 20:44:26 EST 2021" starttimestamp="1614649085217" timestamp="381469" timestamp2="381469">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="157" _type="InsertStringCommand" date="Mon Mar 01 20:44:26 EST 2021" starttimestamp="1614649085217" timestamp="381478" timestamp2="381478">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="158" _type="InsertStringCommand" date="Mon Mar 01 20:44:26 EST 2021" starttimestamp="1614649085217" timestamp="381560" timestamp2="381560">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="159" _type="InsertStringCommand" date="Mon Mar 01 20:44:27 EST 2021" starttimestamp="1614649085217" timestamp="382011" timestamp2="382011">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="160" _type="InsertStringCommand" date="Mon Mar 01 20:44:27 EST 2021" starttimestamp="1614649085217" timestamp="382196" timestamp2="382196">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="162" _type="PauseCommand" date="Mon Mar 01 20:44:29 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="384273">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2077]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="161" _type="MoveCaretCommand" caretOffset="5113" date="Mon Mar 01 20:44:29 EST 2021" docOffset="29595" starttimestamp="1614649085217" timestamp="384273" />
  <Command __id="163" _type="MoveCaretCommand" caretOffset="5156" date="Mon Mar 01 20:44:30 EST 2021" docOffset="29638" starttimestamp="1614649085217" timestamp="384878" />
  <Command __id="165" _type="PauseCommand" date="Mon Mar 01 20:44:33 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="388573">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3695]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="164" _type="MoveCaretCommand" caretOffset="5113" date="Mon Mar 01 20:44:33 EST 2021" docOffset="29595" starttimestamp="1614649085217" timestamp="388573" />
  <Command __id="167" _type="PauseCommand" date="Mon Mar 01 20:44:35 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="390431">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1858]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="166" _type="MoveCaretCommand" caretOffset="5156" date="Mon Mar 01 20:44:35 EST 2021" docOffset="29638" starttimestamp="1614649085217" timestamp="390431" />
  <Command __id="169" _type="PauseCommand" date="Mon Mar 01 20:44:36 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="391698">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1267]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="168" _type="InsertStringCommand" date="Mon Mar 01 20:44:36 EST 2021" starttimestamp="1614649085217" timestamp="391698" timestamp2="391698">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="170" _type="InsertStringCommand" date="Mon Mar 01 20:44:37 EST 2021" starttimestamp="1614649085217" timestamp="391972" timestamp2="391972">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="171" _type="InsertStringCommand" date="Mon Mar 01 20:44:37 EST 2021" starttimestamp="1614649085217" timestamp="391977" timestamp2="391977">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="172" _type="InsertStringCommand" date="Mon Mar 01 20:44:37 EST 2021" starttimestamp="1614649085217" timestamp="392045" timestamp2="392045">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="173" _type="InsertStringCommand" date="Mon Mar 01 20:44:37 EST 2021" starttimestamp="1614649085217" timestamp="392323" timestamp2="392323">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="174" _type="InsertStringCommand" date="Mon Mar 01 20:44:38 EST 2021" starttimestamp="1614649085217" timestamp="392859" timestamp2="392859">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="175" _type="InsertStringCommand" date="Mon Mar 01 20:44:38 EST 2021" starttimestamp="1614649085217" timestamp="393588" timestamp2="393588">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="176" _type="InsertStringCommand" date="Mon Mar 01 20:44:38 EST 2021" starttimestamp="1614649085217" timestamp="393615" timestamp2="393615">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="177" _type="InsertStringCommand" date="Mon Mar 01 20:44:39 EST 2021" starttimestamp="1614649085217" timestamp="394042" timestamp2="394042">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="178" _type="InsertStringCommand" date="Mon Mar 01 20:44:40 EST 2021" starttimestamp="1614649085217" timestamp="394865" timestamp2="394865">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="179" _type="InsertStringCommand" date="Mon Mar 01 20:44:40 EST 2021" starttimestamp="1614649085217" timestamp="395259" timestamp2="395259">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="181" _type="PauseCommand" date="Mon Mar 01 20:44:41 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="396275">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1016]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="180" _type="InsertStringCommand" date="Mon Mar 01 20:44:41 EST 2021" starttimestamp="1614649085217" timestamp="396275" timestamp2="396275">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="182" _type="InsertStringCommand" date="Mon Mar 01 20:44:41 EST 2021" starttimestamp="1614649085217" timestamp="396571" timestamp2="396571">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="183" _type="InsertStringCommand" date="Mon Mar 01 20:44:42 EST 2021" starttimestamp="1614649085217" timestamp="397393" timestamp2="397393">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="184" _type="InsertStringCommand" date="Mon Mar 01 20:44:42 EST 2021" starttimestamp="1614649085217" timestamp="397460" timestamp2="397460">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="185" _type="InsertStringCommand" date="Mon Mar 01 20:44:42 EST 2021" starttimestamp="1614649085217" timestamp="397574" timestamp2="397574">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="186" _type="InsertStringCommand" date="Mon Mar 01 20:44:43 EST 2021" starttimestamp="1614649085217" timestamp="398325" timestamp2="398325">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="187" _type="InsertStringCommand" date="Mon Mar 01 20:44:44 EST 2021" starttimestamp="1614649085217" timestamp="399287" timestamp2="399287">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="188" _type="InsertStringCommand" date="Mon Mar 01 20:44:44 EST 2021" starttimestamp="1614649085217" timestamp="399745" timestamp2="399745">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="190" _type="PauseCommand" date="Mon Mar 01 20:44:46 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="400968">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1223]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="189" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Mar 01 20:44:46 EST 2021" starttimestamp="1614649085217" timestamp="400968" />
  <Command __id="191" _type="InsertStringCommand" date="Mon Mar 01 20:44:46 EST 2021" starttimestamp="1614649085217" timestamp="401088" timestamp2="401088">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="192" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Mar 01 20:44:46 EST 2021" starttimestamp="1614649085217" timestamp="401160" />
  <Command __id="193" _type="InsertStringCommand" date="Mon Mar 01 20:44:46 EST 2021" starttimestamp="1614649085217" timestamp="401288" timestamp2="401288">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="195" _type="PauseCommand" date="Mon Mar 01 20:44:47 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="402294">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1006]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="194" _type="InsertStringCommand" date="Mon Mar 01 20:44:47 EST 2021" starttimestamp="1614649085217" timestamp="402294" timestamp2="402294">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="196" _type="InsertStringCommand" date="Mon Mar 01 20:44:47 EST 2021" starttimestamp="1614649085217" timestamp="402445" timestamp2="402445">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="197" _type="InsertStringCommand" date="Mon Mar 01 20:44:47 EST 2021" starttimestamp="1614649085217" timestamp="402592" timestamp2="402592">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="198" _type="InsertStringCommand" date="Mon Mar 01 20:44:47 EST 2021" starttimestamp="1614649085217" timestamp="402742" timestamp2="402742">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="199" _type="InsertStringCommand" date="Mon Mar 01 20:44:48 EST 2021" starttimestamp="1614649085217" timestamp="402852" timestamp2="402852">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="200" _type="InsertStringCommand" date="Mon Mar 01 20:44:48 EST 2021" starttimestamp="1614649085217" timestamp="403282" timestamp2="403282">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="201" _type="InsertStringCommand" date="Mon Mar 01 20:44:48 EST 2021" starttimestamp="1614649085217" timestamp="403722" timestamp2="403722">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="202" _type="InsertStringCommand" date="Mon Mar 01 20:44:49 EST 2021" starttimestamp="1614649085217" timestamp="404040" timestamp2="404040">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="203" _type="InsertStringCommand" date="Mon Mar 01 20:44:49 EST 2021" starttimestamp="1614649085217" timestamp="404241" timestamp2="404241">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="204" _type="InsertStringCommand" date="Mon Mar 01 20:44:49 EST 2021" starttimestamp="1614649085217" timestamp="404314" timestamp2="404314">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="205" _type="InsertStringCommand" date="Mon Mar 01 20:44:49 EST 2021" starttimestamp="1614649085217" timestamp="404417" timestamp2="404417">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="206" _type="InsertStringCommand" date="Mon Mar 01 20:44:49 EST 2021" starttimestamp="1614649085217" timestamp="404651" timestamp2="404651">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="207" _type="InsertStringCommand" date="Mon Mar 01 20:44:49 EST 2021" starttimestamp="1614649085217" timestamp="404739" timestamp2="404739">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="208" _type="InsertStringCommand" date="Mon Mar 01 20:44:50 EST 2021" starttimestamp="1614649085217" timestamp="405529" timestamp2="405529">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="210" _type="PauseCommand" date="Mon Mar 01 20:44:52 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="406974">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1445]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="209" _type="InsertStringCommand" date="Mon Mar 01 20:44:52 EST 2021" starttimestamp="1614649085217" timestamp="406974" timestamp2="406974">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="211" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Mar 01 20:44:52 EST 2021" starttimestamp="1614649085217" timestamp="407632" />
  <Command __id="212" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Mar 01 20:44:52 EST 2021" starttimestamp="1614649085217" timestamp="407767" />
  <Command __id="214" _type="PauseCommand" date="Mon Mar 01 20:44:56 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="411408">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3641]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="213" _type="SelectTextCommand" caretOffset="5236" date="Mon Mar 01 20:44:56 EST 2021" end="5236" start="5214" starttimestamp="1614649085217" timestamp="411408" />
  <Command __id="215" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:44:57 EST 2021" starttimestamp="1614649085217" timestamp="411937" />
  <Command __id="217" _type="PauseCommand" date="Mon Mar 01 20:44:58 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="413594">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1656]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="216" _type="MoveCaretCommand" caretOffset="5131" date="Mon Mar 01 20:44:58 EST 2021" docOffset="29613" starttimestamp="1614649085217" timestamp="413593" />
  <Command __id="218" _type="MoveCaretCommand" caretOffset="5132" date="Mon Mar 01 20:44:59 EST 2021" docOffset="29614" starttimestamp="1614649085217" timestamp="413870" />
  <Command __id="220" _type="PauseCommand" date="Mon Mar 01 20:45:02 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="417026">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3156]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="219" _type="SelectTextCommand" caretOffset="5145" date="Mon Mar 01 20:45:02 EST 2021" end="5145" start="5124" starttimestamp="1614649085217" timestamp="417026" />
  <Command __id="221" _type="InsertStringCommand" date="Mon Mar 01 20:45:02 EST 2021" starttimestamp="1614649085217" timestamp="417679" timestamp2="417679">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="222" _type="InsertStringCommand" date="Mon Mar 01 20:45:03 EST 2021" starttimestamp="1614649085217" timestamp="417909" timestamp2="417909">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="223" _type="InsertStringCommand" date="Mon Mar 01 20:45:03 EST 2021" starttimestamp="1614649085217" timestamp="418200" timestamp2="418200">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="224" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:45:03 EST 2021" starttimestamp="1614649085217" timestamp="418476" />
  <Command __id="225" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:45:03 EST 2021" starttimestamp="1614649085217" timestamp="418597" />
  <Command __id="226" _type="InsertStringCommand" date="Mon Mar 01 20:45:04 EST 2021" starttimestamp="1614649085217" timestamp="419117" timestamp2="419117">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="227" _type="InsertStringCommand" date="Mon Mar 01 20:45:04 EST 2021" starttimestamp="1614649085217" timestamp="419275" timestamp2="419275">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="228" _type="InsertStringCommand" date="Mon Mar 01 20:45:04 EST 2021" starttimestamp="1614649085217" timestamp="419348" timestamp2="419348">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="229" _type="InsertStringCommand" date="Mon Mar 01 20:45:04 EST 2021" starttimestamp="1614649085217" timestamp="419440" timestamp2="419440">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="230" _type="InsertStringCommand" date="Mon Mar 01 20:45:04 EST 2021" starttimestamp="1614649085217" timestamp="419556" timestamp2="419556">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="231" _type="InsertStringCommand" date="Mon Mar 01 20:45:05 EST 2021" starttimestamp="1614649085217" timestamp="420236" timestamp2="420236">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="233" _type="PauseCommand" date="Mon Mar 01 20:45:06 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="421394">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1158]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="232" _type="InsertStringCommand" date="Mon Mar 01 20:45:06 EST 2021" starttimestamp="1614649085217" timestamp="421394" timestamp2="421394">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="234" _type="InsertStringCommand" date="Mon Mar 01 20:45:07 EST 2021" starttimestamp="1614649085217" timestamp="422236" timestamp2="422236">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="235" _type="InsertStringCommand" date="Mon Mar 01 20:45:07 EST 2021" starttimestamp="1614649085217" timestamp="422411" timestamp2="422411">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="236" _type="InsertStringCommand" date="Mon Mar 01 20:45:07 EST 2021" starttimestamp="1614649085217" timestamp="422683" timestamp2="422683">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="237" _type="InsertStringCommand" date="Mon Mar 01 20:45:08 EST 2021" starttimestamp="1614649085217" timestamp="422819" timestamp2="422819">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="238" _type="InsertStringCommand" date="Mon Mar 01 20:45:08 EST 2021" starttimestamp="1614649085217" timestamp="422961" timestamp2="422961">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="239" _type="InsertStringCommand" date="Mon Mar 01 20:45:08 EST 2021" starttimestamp="1614649085217" timestamp="423084" timestamp2="423084">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="240" _type="InsertStringCommand" date="Mon Mar 01 20:45:08 EST 2021" starttimestamp="1614649085217" timestamp="423189" timestamp2="423189">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="241" _type="InsertStringCommand" date="Mon Mar 01 20:45:08 EST 2021" starttimestamp="1614649085217" timestamp="423255" timestamp2="423255">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="242" _type="InsertStringCommand" date="Mon Mar 01 20:45:08 EST 2021" starttimestamp="1614649085217" timestamp="423398" timestamp2="423398">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="243" _type="InsertStringCommand" date="Mon Mar 01 20:45:08 EST 2021" starttimestamp="1614649085217" timestamp="423669" timestamp2="423669">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="244" _type="InsertStringCommand" date="Mon Mar 01 20:45:09 EST 2021" starttimestamp="1614649085217" timestamp="423850" timestamp2="423850">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="245" _type="InsertStringCommand" date="Mon Mar 01 20:45:09 EST 2021" starttimestamp="1614649085217" timestamp="423941" timestamp2="423941">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="246" _type="InsertStringCommand" date="Mon Mar 01 20:45:09 EST 2021" starttimestamp="1614649085217" timestamp="423983" timestamp2="423983">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="247" _type="InsertStringCommand" date="Mon Mar 01 20:45:09 EST 2021" starttimestamp="1614649085217" timestamp="424200" timestamp2="424200">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="248" _type="InsertStringCommand" date="Mon Mar 01 20:45:09 EST 2021" starttimestamp="1614649085217" timestamp="424277" timestamp2="424277">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="249" _type="InsertStringCommand" date="Mon Mar 01 20:45:10 EST 2021" starttimestamp="1614649085217" timestamp="425040" timestamp2="425040">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="254" _type="PauseCommand" date="Mon Mar 01 20:45:12 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="427424">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1044]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="253" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:45:12 EST 2021" starttimestamp="1614649085217" timestamp="427424" />
  <Command __id="255" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:45:13 EST 2021" starttimestamp="1614649085217" timestamp="428117" />
  <Command __id="256" _type="MoveCaretCommand" caretOffset="5223" date="Mon Mar 01 20:45:13 EST 2021" docOffset="29705" starttimestamp="1614649085217" timestamp="428236" />
  <Command __id="258" _type="PauseCommand" date="Mon Mar 01 20:45:14 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="429642">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1406]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="259" _type="MoveCaretCommand" caretOffset="910" date="Mon Mar 01 20:45:14 EST 2021" docOffset="1207" starttimestamp="1614649085217" timestamp="429736" />
  <Command __id="260" _type="ShellCommand" date="Mon Mar 01 20:45:15 EST 2021" starttimestamp="1614649085217" timestamp="430422" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="261" _type="ShellCommand" date="Mon Mar 01 20:45:16 EST 2021" starttimestamp="1614649085217" timestamp="431100" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="263" _type="MoveCaretCommand" caretOffset="5223" date="Mon Mar 01 20:45:17 EST 2021" docOffset="29705" starttimestamp="1614649085217" timestamp="431809" />
  <Command __id="265" _type="PauseCommand" date="Mon Mar 01 20:45:21 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="436050">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4241]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="264" _type="MoveCaretCommand" caretOffset="991" date="Mon Mar 01 20:45:21 EST 2021" docOffset="25473" starttimestamp="1614649085217" timestamp="436050" />
  <Command __id="266" _type="MoveCaretCommand" caretOffset="991" date="Mon Mar 01 20:45:21 EST 2021" docOffset="25473" starttimestamp="1614649085217" timestamp="436050" />
  <Command __id="268" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:45:21 EST 2021" starttimestamp="1614649085217" timestamp="436738" />
  <Command __id="269" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:45:21 EST 2021" starttimestamp="1614649085217" timestamp="436738" />
  <Command __id="271" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:45:22 EST 2021" starttimestamp="1614649085217" timestamp="436857" />
  <Command __id="272" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:45:22 EST 2021" starttimestamp="1614649085217" timestamp="436857" />
  <Command __id="274" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:45:22 EST 2021" starttimestamp="1614649085217" timestamp="437335" />
  <Command __id="275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:45:22 EST 2021" starttimestamp="1614649085217" timestamp="437335" />
  <Command __id="277" _type="InsertStringCommand" date="Mon Mar 01 20:45:23 EST 2021" starttimestamp="1614649085217" timestamp="437917" timestamp2="437917">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="278" _type="InsertStringCommand" date="Mon Mar 01 20:45:23 EST 2021" starttimestamp="1614649085217" timestamp="437917" timestamp2="437917">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="280" _type="InsertStringCommand" date="Mon Mar 01 20:45:23 EST 2021" starttimestamp="1614649085217" timestamp="438162" timestamp2="438162">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="281" _type="InsertStringCommand" date="Mon Mar 01 20:45:23 EST 2021" starttimestamp="1614649085217" timestamp="438162" timestamp2="438162">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="283" _type="InsertStringCommand" date="Mon Mar 01 20:45:23 EST 2021" starttimestamp="1614649085217" timestamp="438229" timestamp2="438229">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="284" _type="InsertStringCommand" date="Mon Mar 01 20:45:23 EST 2021" starttimestamp="1614649085217" timestamp="438229" timestamp2="438229">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="286" _type="InsertStringCommand" date="Mon Mar 01 20:45:23 EST 2021" starttimestamp="1614649085217" timestamp="438405" timestamp2="438405">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="287" _type="InsertStringCommand" date="Mon Mar 01 20:45:23 EST 2021" starttimestamp="1614649085217" timestamp="438406" timestamp2="438406">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="288" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Mar 01 20:45:23 EST 2021" starttimestamp="1614649085217" timestamp="438666" />
  <Command __id="289" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Mar 01 20:45:23 EST 2021" starttimestamp="1614649085217" timestamp="438666" />
  <Command __id="290" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Mar 01 20:45:24 EST 2021" starttimestamp="1614649085217" timestamp="438937" />
  <Command __id="291" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Mar 01 20:45:24 EST 2021" starttimestamp="1614649085217" timestamp="438937" />
  <Command __id="292" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Mar 01 20:45:24 EST 2021" starttimestamp="1614649085217" timestamp="439150" />
  <Command __id="293" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Mar 01 20:45:24 EST 2021" starttimestamp="1614649085217" timestamp="439150" />
  <Command __id="294" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Mar 01 20:45:24 EST 2021" starttimestamp="1614649085217" timestamp="439385" />
  <Command __id="295" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Mar 01 20:45:24 EST 2021" starttimestamp="1614649085217" timestamp="439385" />
  <Command __id="296" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Mar 01 20:45:25 EST 2021" starttimestamp="1614649085217" timestamp="440070" />
  <Command __id="297" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Mar 01 20:45:25 EST 2021" starttimestamp="1614649085217" timestamp="440070" />
  <Command __id="298" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Mar 01 20:45:25 EST 2021" starttimestamp="1614649085217" timestamp="440292" />
  <Command __id="299" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Mar 01 20:45:25 EST 2021" starttimestamp="1614649085217" timestamp="440445" />
  <Command __id="300" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Mar 01 20:45:25 EST 2021" starttimestamp="1614649085217" timestamp="440600" />
  <Command __id="301" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Mar 01 20:45:25 EST 2021" starttimestamp="1614649085217" timestamp="440743" />
  <Command __id="302" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Mar 01 20:45:26 EST 2021" starttimestamp="1614649085217" timestamp="440836" />
  <Command __id="303" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Mar 01 20:45:26 EST 2021" starttimestamp="1614649085217" timestamp="441008" />
  <Command __id="304" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Mar 01 20:45:26 EST 2021" starttimestamp="1614649085217" timestamp="441136" />
  <Command __id="305" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Mar 01 20:45:26 EST 2021" starttimestamp="1614649085217" timestamp="441320" />
  <Command __id="306" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Mar 01 20:45:26 EST 2021" starttimestamp="1614649085217" timestamp="441520" />
  <Command __id="308" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Mar 01 20:45:27 EST 2021" starttimestamp="1614649085217" timestamp="442254" />
  <Command __id="310" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Mar 01 20:45:27 EST 2021" starttimestamp="1614649085217" timestamp="442402" />
  <Command __id="312" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Mar 01 20:45:27 EST 2021" starttimestamp="1614649085217" timestamp="442531" />
  <Command __id="314" _type="InsertStringCommand" date="Mon Mar 01 20:45:28 EST 2021" starttimestamp="1614649085217" timestamp="443195" timestamp2="443195">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="315" _type="InsertStringCommand" date="Mon Mar 01 20:45:28 EST 2021" starttimestamp="1614649085217" timestamp="443195" timestamp2="443195">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="317" _type="InsertStringCommand" date="Mon Mar 01 20:45:28 EST 2021" starttimestamp="1614649085217" timestamp="443401" timestamp2="443401">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="318" _type="InsertStringCommand" date="Mon Mar 01 20:45:28 EST 2021" starttimestamp="1614649085217" timestamp="443401" timestamp2="443401">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="320" _type="InsertStringCommand" date="Mon Mar 01 20:45:28 EST 2021" starttimestamp="1614649085217" timestamp="443476" timestamp2="443476">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="321" _type="InsertStringCommand" date="Mon Mar 01 20:45:28 EST 2021" starttimestamp="1614649085217" timestamp="443476" timestamp2="443476">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="323" _type="InsertStringCommand" date="Mon Mar 01 20:45:28 EST 2021" starttimestamp="1614649085217" timestamp="443666" timestamp2="443666">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="324" _type="InsertStringCommand" date="Mon Mar 01 20:45:28 EST 2021" starttimestamp="1614649085217" timestamp="443666" timestamp2="443666">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="326" _type="PauseCommand" date="Mon Mar 01 20:45:34 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="448929">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5263]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="325" _type="ShellCommand" date="Mon Mar 01 20:45:34 EST 2021" starttimestamp="1614649085217" timestamp="448929" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="328" _type="PauseCommand" date="Mon Mar 01 20:45:37 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="452499">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3570]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="327" _type="ShellCommand" date="Mon Mar 01 20:45:37 EST 2021" starttimestamp="1614649085217" timestamp="452499" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="329" _type="MoveCaretCommand" caretOffset="5403" date="Mon Mar 01 20:45:37 EST 2021" docOffset="29885" starttimestamp="1614649085217" timestamp="452549" />
  <Command __id="330" _type="MoveCaretCommand" caretOffset="5403" date="Mon Mar 01 20:45:37 EST 2021" docOffset="29885" starttimestamp="1614649085217" timestamp="452549" />
  <Command __id="9" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:38:32 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34792" docExpressionCount="4217" docLength="37765" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="26991">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";
	private Map<String, Long[]> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			SimpleDateFormat df = new SimpleDateFormat("HH:mm");
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			cr.readNext();
			String[] token = null;
			while ((token = cr.readNext()) != null) {
				long startTime = df.parse(token[4]).getTime();
				if (startTime < 15*3600*1000) {
					startTime += 12*3600*1000;
				}
				long endTime = df.parse(token[5]).getTime();
				if (endTime < 15*3600*1000) {
					endTime += 12*3600*1000;
				}
				Long[] times = {startTime, endTime};
				timestamps.put(token[0], times);
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
//					if (!studentFolder.getName().equals("16")) {
//						synchronized (this) {
//							threadCount--;
//						}
//						latch.countDown();
//						return;
//					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							
							long startTimestamp = getLogFileCreationTime(file);
							long logStartTimestamp = startTimestamp;
//							long endTimestamp = Long.MAX_VALUE;
//							if (timestamps.containsKey(studentFolder.getName())) {
//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;
//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;
//							}
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
								webCommand = webCommandIterator.next();
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - logStartTimestamp;
							}
							for (EHICommand command : commands) {
//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {
//									continue;
//								}
								command.setStartTimestamp(logStartTimestamp);
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(logStartTimestamp);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - logStartTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								if (newCommands.size() == 0) {
									continue;
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+"Old.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"EventOld.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"DistributionOld.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistributionOld.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStatsOld.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearchesOld.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(last.getStartTimestamp());
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <Command __id="12" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:00 EST 2021" projectName="null" starttimestamp="1614649085217" timestamp="55161">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="14" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:00 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34792" docExpressionCount="4217" docLength="37765" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="55543">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 15*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 15*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶//					if (!studentFolder.getName().equals("16")) {¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						latch.countDown();¶//						return;¶//					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶//							long endTimestamp = Long.MAX_VALUE;¶//							if (timestamps.containsKey(studentFolder.getName())) {¶//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;¶//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;¶//							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶//									continue;¶//								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+"Old.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"EventOld.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"DistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStatsOld.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearchesOld.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="16" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:10 EST 2021" docASTNodeCount="2624" docActiveCodeLength="18463" docExpressionCount="1710" docLength="24538" projectName="HelpView" starttimestamp="1614649085217" timestamp="65560">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\HelpView\src\dayton\ellwanger\helpbutton\HelpViewController.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package dayton.ellwanger.helpbutton;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.ui.editors.text.EditorsUI;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import dayton.ellwanger.helpbutton.preferences.HelpPreferences;
import fluorite.commands.EHICommand;
import fluorite.commands.FileOpenCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.ShellCommand;
import fluorite.model.EHEventRecorder;
import fluorite.model.EclipseEventListener;
import fluorite.util.EHLogReader;
import fluorite.util.EHUtilities;

public class HelpViewController implements HelpListener, EclipseEventListener {
	//	private static final String testURL = "http://localhost:12345";
	private static final String getHelpURL = "https://us-south.functions.appdomain.cloud/api/v1/web/ORG-UNC-dist-seed-james_dev/V2/get-available-help";
	private static final String requestHelpURL = "https://us-south.functions.appdomain.cloud/api/v1/web/ORG-UNC-dist-seed-james_dev/V2/request-help";
//	private static final String reportURL = "https://us-south.functions.appdomain.cloud/api/v1/web/ORG-UNC-dist-seed-james_dev/cyverse/add-cyverse-log";
//	private final Pattern exceptionPattern = Pattern.compile(".+Exception[^\\n]++(\\s+at .++)+");
//	private List<ExceptionMatcher> exceptionMatchers = new ArrayList<>();
	private HelpView view;
	private int numCommand = 0;
	private static final int COMMAND_LIM = 100;
	private ExceptionMatcher em;
//	private static final String LOG_FILE_PATH = "LogProjPath";
//	private static final String NUM_COMMANDS_SENT = "numCommandsSent";
//	private ArrayBlockingQueue<EHICommand> commandsToSend;
//	private List<EHICommand> commandsToSend2;
	
	public HelpViewController(HelpView view) {
		this.view = view;
//		addExceptionMatcher(JavaExceptoinMatcher.getInstance());
		view.setHelpListener(this);
		setExceptionMatcher(EditorsUI.getPreferenceStore().getString(HelpPreferences.LANGUAGE));
		ConsoleListener.getInstance().addListener(this);
		EHEventRecorder.getInstance().addEclipseEventListener(this);
//		commandsToSend = EHEventRecorder.getInstance().getCommandsToSend();
//		commandsToSend2 = new ArrayList<>();
//		new Thread(new Runnable() {
//			public void run() {
//				sendLogToServer();
//			}
//		}).start();
	}

	public void exceptionEvent(String output){
		List<String> exceptions = new ArrayList<>();
//		Matcher matcher = exceptionPattern.matcher(output);
//		while (matcher.find()) {
//			String ex = matcher.group();
//			if (!exceptions.contains(ex)) {
//				exceptions.add(matcher.group());
//			}
//		}
//		for (ExceptionMatcher em : exceptionMatchers) {
			exceptions = em.match(output);
//			if (exceptions.size() != 0) {
//				break;
//			}
//		}
		view.populateErrorCombo(exceptions);
	}
	
//	public void addExceptionMatcher(ExceptionMatcher em) {
//		exceptionMatchers.add(em);
//	}
//	
//	public void removeExcetionMatcher(ExceptionMatcher em) {
//		exceptionMatchers.remove(em);
//	}
	
	public void setExceptionMatcher(String language) {
		switch (language) {
		case "java":
			em = JavaExceptionMatcher.getInstance();
			break;
		case "prolog":
			em = PrologExceptionMatcher.getInstance();
			break;
		case "python":
			em = JavaExceptionMatcher.getInstance();
			break;
		case "SML":
			em = SMLExceptionMatcher.getInstance();
			break;
		default:
			em = JavaExceptionMatcher.getInstance();
			break;
		}
	}

	public void consoleOutput(String output) {
		view.updateConsoleOutput(output);
		exceptionEvent(output);
	}

	@Override
	public JSONObject requestHelp(String email, String course, String assign, String errorType, String errorMessage, String problem, String term, int difficulty, String helpText, String requestID, String output, String language) throws IOException {
		try {
//			MessageConsoleStream out = view.findConsole("debugRequestHelp").newMessageStream();
//			out.println("requesting help");
			JSONObject helpRequest = new JSONObject();
			JSONObject code = new JSONObject();
			helpRequest.put("code", code);
			if (language == null || language.equals("")) {
				language = "java";
			}
			helpRequest.put("language", language);
			helpRequest.put("environment", "ecipse");
			helpRequest.put("error-message", errorMessage);
			helpRequest.put("error-type", errorType);
			helpRequest.put("course", course);
			helpRequest.put("assignment", assign);
			helpRequest.put("comment", helpText);
			helpRequest.put("problem", problem);
			helpRequest.put("term", term);
			helpRequest.put("email", email);
			helpRequest.put("request-id", "");
			helpRequest.put("output", output);
//			out.println("project path = " + getCurrentProjectPath());
			File src = new File(getCurrentProjectPath() + File.separator + "Logs" + File.separator + "srcOld");
			if (!src.exists() || numCommand > 50) {
				src = new File(getCurrentProjectPath() + File.separator + "Logs" + File.separator + "src");
			}
			if (!src.exists()) {
				src = findSourceFolder(new File(getCurrentProjectPath()), EditorsUI.getPreferenceStore().getString(HelpPreferences.LANGUAGE));
			}
//			out.println("src = " + src);
			if (src != null) {
				List<String> filePaths = new ArrayList<>();
				List<String> relevantFilePaths = new ArrayList<>();
				findSourceFiles(src, filePaths, language);
//				out.println("source files found");
				if (calculateSize(src) < 900*1024) {
					for (String filePath : filePaths) {
						File file = new File(filePath);
						code.put(file.getName(), readFile(file));
					}
					addHistory(code, calculateSize(src));
				} else if (errorMessage.indexOf("\r\n\t") >= 0) {
					String stackTrace = errorMessage.substring(errorMessage.indexOf("\r\n\t"));
					while (stackTrace.indexOf(".java") >= 0) {
						String fileName = stackTrace.substring(stackTrace.lastIndexOf('(')+1, stackTrace.lastIndexOf(".java")+5);
						for (String file : filePaths) {
							if (file.contains(fileName)) {
								relevantFilePaths.add(file);
								filePaths.remove(file);
								break;
							}
						}
						stackTrace = stackTrace.substring(0, stackTrace.lastIndexOf('('));
					}
					long size = 0;
					for (String filePath : relevantFilePaths) {
						File file = new File(filePath);
						size += file.length();
						if (size > 900) {
							break;
						}
						code.put(file.getName(), readFile(file));
					}
					addHistory(code, size);
				} else {
					long size = addHistory(code, 0);
					for (String filePath : filePaths) {
						File file = new File(filePath);
						if (code.has(file.getName())) {
							continue;
						}
						size += file.length();
						if (size > 900) {
							break;
						}
						code.put(file.getName(), readFile(file));
					}
				}
			}
//			out.println("source files add to json object, sending request");
			JSONObject response = HTTPRequest.post(helpRequest, requestHelpURL);
			if (response == null) {
//				out.println("response is null");
				recordRequestHelpCommand(email, course, assign, errorType, errorMessage, problem, term, requestID, output, "", false, difficulty);
				throw new IOException();
			}
//			out.println("received response from server: " + response.toString(4));
			helpRequest.put("request-id", response.get("request-id"));
			recordRequestHelpCommand(email, course, assign, errorType, errorMessage, problem, term, requestID, output, "", true, difficulty);
			view.addPendingRequest(helpRequest);
			view.removeRepliedRequest(response.getString("request-id"));

			new Thread(()->{
				try {
//					String requestId = response.getJSONObject("input").getJSONObject("body").getString("request-id");
					String requestId = response.getString("request-id");
					String id = requestId.substring(requestId.lastIndexOf('.')+1);
					File[] files = view.getRepliedFolder().listFiles(new FilenameFilter() {
						public boolean accept(File dir, String name) {
							return name.equals(id+".JSON");
						}
					});
					File file = new File(view.getPendingFolder().getPath()+ File.separator + id +".JSON");
					if (file.exists()) {
						file.delete();
					}
					file.createNewFile();
					FileOutputStream os = new FileOutputStream(file);
					if (files.length == 1) {
						os.write(readJSON(files[0]).toString(4).getBytes());
						files[0].delete();
					} else {
						os.write(helpRequest.toString(4).getBytes());
					}
					os.close();
				} catch (IOException e) {
					e.printStackTrace();
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}).start();
			return helpRequest;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return null;
	}

	public JSONObject getHelp(String email, String course, String assign, String errorType, String errorMessage, String problem, String term, String requestID, String output, String language) throws IOException {
		try {
			JSONObject helpRequest = new JSONObject();
			JSONObject code = new JSONObject();
			helpRequest.put("code", code);
			helpRequest.put("language", language);
			helpRequest.put("environment", "eclipse");
			helpRequest.put("error-message", errorMessage);
			helpRequest.put("error-type", errorType);
			helpRequest.put("course", course);
			helpRequest.put("assignment", assign);
			helpRequest.put("problem", problem);
			helpRequest.put("term", term);
			helpRequest.put("email", email);
			if (requestID == null) {
				helpRequest.put("request-id", "");
			} else {
				helpRequest.put("request-id", requestID);
			}
			helpRequest.put("output", output);
//			System.out.println(helpRequest.toString(4));
			JSONObject response = HTTPRequest.post(helpRequest, getHelpURL);
			if (response == null) {
				recordGetHelpCommand(email, course, assign, errorType, errorMessage, problem, term, requestID, output, "", false);
				throw new IOException();
			}
//			System.out.println(response.toString(4));
			List<String> replies = new ArrayList<>();
			JSONArray help = new JSONArray();
			try {
				help = response.getJSONArray("help");
				for (int i = 0; i < help.length(); i++) {
					replies.add(help.getString(i));
				}
			}catch (JSONException e) {
			}
			String id = response.getString("request-id");
			helpRequest.put("request-id", id);
			helpRequest.put("help", help);
			recordGetHelpCommand(email, course, assign, errorType, errorMessage, problem, term, requestID, output, help.toString(4), true);
			view.updateReplies(replies);
			if (replies.size() == 0) {
				return helpRequest;
			}
			
			view.addRepliedRequest(helpRequest);
			view.removePendingRequest(id);
			new Thread(()->{
				try {
					String requestId = response.getString("request-id");
					String rid = requestId.substring(requestId.lastIndexOf('.')+1);
					File[] files = view.getPendingFolder().listFiles(new FilenameFilter() {
						public boolean accept(File dir, String name) {
							return name.equals(rid+".JSON");
						}
					});
					if (files.length == 1) {
						files[0].delete();
					}
//					helpRequest.put("help", help);
					File file = new File(view.getRepliedFolder().getPath()+ File.separator + rid +".JSON");
					if (file.exists()) {
						file.delete();
					}
					file.createNewFile();
					FileOutputStream os = new FileOutputStream(file);
					os.write(helpRequest.toString(4).getBytes());
					os.close();
				} catch (IOException e) {
					e.printStackTrace();
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}).start();
			return helpRequest;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return null; 
	}

	private void findSourceFiles(File file, List<String> files, String language){
//		view.findConsole("debugRequestHelp").newMessageStream().println("finding " + language + " files from " + file);
		if (file.isDirectory()) {
			for (File file2 : file.listFiles()) {
//				view.findConsole("debugRequestHelp").newMessageStream().println("finding " + language + " files from " + file2);
				findSourceFiles(file2, files, language);
			}
		} else {
			switch (language) {
			case "java":
				if (file.getName().toLowerCase().endsWith(".java")) {
					files.add(file.getAbsolutePath());
				}
				break;
			case "python":
				if (file.getName().toLowerCase().endsWith(".py")) {
					files.add(file.getAbsolutePath());
				}
				break;
			case "prolog":
				if (file.getName().toLowerCase().endsWith(".pl")) {
					files.add(file.getAbsolutePath());
				}
				break;
			case "SML":
				if (file.getName().toLowerCase().endsWith(".sml")) {
					files.add(file.getAbsolutePath());
				}
				break;
			default:
				break;
			}
		}
	}

	private long calculateSize(File file) {
		long size = 0;
		if (file.isDirectory()) {
			for (File file2 : file.listFiles()) {
				size += calculateSize(file2);
			}
			return size;
		} else {
			return file.length();
		}
	}

	public void copyFiles(File source, File dest) throws IOException{
		InputStream is = null;
		OutputStream os = null;
		try {
			if (!dest.exists()) {
				dest.getParentFile().mkdirs();
				dest.createNewFile();
			} else {
				dest.delete();
				dest.createNewFile();
			}
			is = new FileInputStream(source);
			os = new FileOutputStream(dest);
			byte[] buffer = new byte[1024];
			int length;
			while ((length = is.read(buffer)) > 0) {
				os.write(buffer, 0, length);
			}
			buffer = "</Events>".getBytes();
			os.write(buffer, 0, buffer.length);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (is != null) {
				is.close();
			}
			if (os != null) {
				os.close();
			}
		} 
	}

	private JSONObject readJSON(File file) {
		try {
			StringBuilder sb = new StringBuilder();
			String line;
			BufferedReader reader = new BufferedReader(new FileReader(file));

			while ((line = reader.readLine()) != null) {
				sb.append(line);
			}

			reader.close();
			return new JSONObject(sb.toString());
		} catch (IOException e) {
			e.printStackTrace();
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return null;
	}

	private void recordGetHelpCommand(String email, String course, String assign, String errorType, String errorMessage, String problem, String term, String requestID, String output, String help, boolean success) {
		new Thread(()->{
			EHEventRecorder.getInstance().recordCommand(new GetHelpCommand(email, course, assign, errorType, errorMessage, problem, term, requestID, output, help, success));
		}).start();
	}

	private void recordRequestHelpCommand(String email, String course, String assign, String errorType, String errorMessage, String problem, String term, String requestID, String output, String help, boolean success, int difficulty) {
		new Thread(()->{
			EHEventRecorder.getInstance().recordCommand(new RequestHelpCommand(email, course, assign, errorType, errorMessage, problem, term, requestID, output, help, success, difficulty));
		}).start();
	}
	//	@Override
	//	public void difficultyUpdate(int difficulty) {
	//		if(ConnectionManager.getInstance() != null) {
	//			JSONObject helpRequest = new JSONObject();
	//			try {
	//				helpRequest.put("difficulty", difficulty);
	//			} catch (JSONException ex) {
	//				ex.printStackTrace();
	//			}
	//			DifficultyUpdateForwardedToConnectionManager.newCase(this, helpRequest.toString());
	////			JSONObjectForwardedToConnectionManager.newCase(this, helpRequest.toString());
	//
	//			ConnectionManager.getInstance().sendMessage(helpRequest);
	//		}		
	//	}
	
	private long addHistory(JSONObject code, long size) {
		File log = new File(getCurrentProjectPath()+File.separator+"Logs"+File.separator+"Eclipse");
		if (!log.exists()) {
			return size;
		}
		File[] logs = log.listFiles(new FilenameFilter() {
			public boolean accept(File dir, String name) {
				return name.endsWith(".xml");
			}
		});
		if (logs.length == 0) {
			return size;
		}
		File currentLog = logs[0];
		for (File file : logs) {
			if (file.lastModified() > currentLog.lastModified()) {
				currentLog = file;
			}
		}
		try {
//			List<EHICommand> commands = EHEventRecorder.getInstance().getAllCommands();
			File temp = new File(log, "temp.xml");
			copyFiles(currentLog, temp);
			List<EHICommand> commands;
			try {
				commands = new EHLogReader().readAll(temp.getPath());
//				commands = new EHLogReader().readAll("C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\test\\Logs\\Eclipse\\Log2020-09-02-11-07-58-675.xml");
			} catch (NullPointerException e) {
				temp.delete();
				return size;
			}
			int num = numCommand > COMMAND_LIM/2? numCommand : numCommand + COMMAND_LIM;
			temp.delete();
			List<File> modifiedFiles = new ArrayList<>(); 
			JSONArray history = new JSONArray();
			List<EHICommand> filteredCommand = new ArrayList<>();
			code.put("log", history);
			for (int i = commands.size()-1; i >= 0; i--) {
				EHICommand command = commands.get(i);
				if (command instanceof FileOpenCommand) {
					File f = new File(command.getDataMap().get("filePath"));
					if (f.exists() && !modifiedFiles.contains(f)) {
						modifiedFiles.add(f);
					}
				}
//				if (command instanceof ShellCommand || command instanceof GetHelpCommand || command instanceof RequestHelpCommand) {
//					continue;
//				}
				if (command instanceof ShellCommand) {
					continue;
				}
				size += command.persist().length();
				if (size > 900 * 1024) {
					break;
				}
				filteredCommand.add(command);
				if (filteredCommand.size() == num) {
					break;
				}
			}
			for (int i = filteredCommand.size() - 1; i >= 0; i--) {
				history.put(filteredCommand.get(i).persist());
			}
			for (File file : modifiedFiles) {
				if (!code.has(file.getName())) {
					size += file.length();
					if (size > 900*1024) {
						break;
					}
					code.put(file.getName(), readFile(file));
				}
			}
		} catch (JSONException e) {
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return size;
	}
	
	private String getCurrentProjectPath(){
		return EHUtilities.getCurrentProject().getLocation().toOSString();
	}
	
	private String readFile(File file) {
		try {
			BufferedReader br;
			br = new BufferedReader(new FileReader(file));
			StringBuilder sb = new StringBuilder();
			String line;
			while ((line = br.readLine()) != null) {
				sb.append(line).append("\r\n");
			}
			br.close();
			return sb.toString();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return "";
	}

	@Override
	public void eventRecordingStarted(long aStartTimestamp) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void eventRecordingEnded() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void timestampReset(long aStartTimestamp) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void commandExecuted(String aCommandName, long aTimestamp) {
		// TODO Auto-generated method stub
//		if (aCommandName.equals("ShellCommand")) {
//			return;
//		}
		createSnapshot();
	}

	@Override
	public void documentChanged(String aCommandName, long aTimestamp) {
		// TODO Auto-generated method stub
		createSnapshot();
	}

	@Override
	public void documentChangeFinalized(long aTimestamp) {
		// TODO Auto-generated method stub
		createSnapshot();
	}
	
	private synchronized void createSnapshot() {
		numCommand++;
		if (numCommand == COMMAND_LIM) {
			numCommand = 0;
			new Thread(()->{
				File src = findSourceFolder(new File(getCurrentProjectPath()), EditorsUI.getPreferenceStore().getString(HelpPreferences.LANGUAGE));
				File snapshot = new File(getCurrentProjectPath()+File.separator+"Logs"+File.separator+"src");
				File snapshotOld = new File(getCurrentProjectPath()+File.separator+"Logs"+File.separator+"srcOld");
				if (snapshot.exists()) {
					if (snapshotOld.exists()) {
						deleteFolder(snapshot);
					}
					cloneFolder(snapshot, snapshot.getPath(), snapshotOld.getPath());
				}
				cloneFolder(src, src.getPath(), snapshot.getPath());
//				sendLogToServer();
			}).start();
		}
	}

	private File findSourceFolder(File folder, String language) {
		if (language.equals("java")) {
			return new File(folder + File.separator + "src");
		}
		if(folder.listFiles((File dir, String name)->{
			switch (language) {
			case "prolog":
				return name.endsWith(".pl");
			case "python":
				return name.endsWith(".py");
			case "SML":
				return name.endsWith(".sml");
			default:
				return false;
			}
		}).length > 0) {
			return folder;
		}
		File src = null;
		for (File dir : folder.listFiles((File pathname)-> {return pathname.isDirectory() && !pathname.getPath().contains(getCurrentProjectPath()+File.separator+"Logs");})) {
			src = findSourceFolder(dir, language);
			if (src != null) {
				if (folder.getPath().equals(getCurrentProjectPath())) {
					return dir;
				}
				return src;
			}
		}
		return null;
	}
	
//	private void sendLogToServer() {
//		String storedLogFilePath = EditorsUI.getPreferenceStore().getString(LOG_FILE_PATH);
//		int numCommandsSent = EditorsUI.getPreferenceStore().getInt(NUM_COMMANDS_SENT);
//		if (new File(storedLogFilePath).exists()) {
//			sendLog(new EHLogReader().readAll(storedLogFilePath), numCommandsSent, storedLogFilePath);
//		}
//		
//		File log = new File(getCurrentProjectPath()+File.separator+"Logs"+File.separator+"Eclipse");
//		if (!log.exists()) {
//			log.mkdirs();
//		}
//		
//		File[] logs = log.listFiles(new FilenameFilter() {
//			public boolean accept(File dir, String name) {
//				return name.endsWith(".xml");
//			}
//		});
//		
//		File currentLog = null;
//		String logFilePath = "";
//
//		if (logs.length != 0) {
//			currentLog = logs[0];
//			for (File file : logs) {
//				if (file.lastModified() > currentLog.lastModified()) {
//					currentLog = file;
//				}
//			}
//			logFilePath = currentLog.getPath();
//		}
//		EditorsUI.getPreferenceStore().putValue(LOG_FILE_PATH, logFilePath);
//		EditorsUI.getPreferenceStore().putValue(NUM_COMMANDS_SENT, "0");
//
//		while (true) {
//			try {
//				commandsToSend2.add(commandsToSend.take());
//			} catch (InterruptedException e1) {
//				e1.printStackTrace();
//			}
//			if (commandsToSend2.size() >= 100) {
//				sendLog(commandsToSend2, numCommand, logFilePath);
//			}
//		}
//	}
	
	private void cloneFolder(File source, String sourcePath, String destPath){
		try {
			for (File file : source.listFiles()) {
				if (file.isDirectory()) {
					new File(file.getPath().replace(sourcePath, destPath)).mkdirs();
					cloneFolder(file, file.getPath(), file.getPath().replace(sourcePath, destPath));
				} else {
					copyFiles(file, new File(file.getPath().replace(sourcePath, destPath)));
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static void deleteFolder(File folder) {
		for (File file : folder.listFiles()) {
			if (file.isDirectory()) {
				deleteFolder(file);
			} else {
				file.delete();
			}
		}
		folder.delete();
	}
	
//	private List<JSONObject> sendLog(List<EHICommand> commands, int numCommandsSent, String logFileName) {
//		try {
//			while(numCommandsSent < commands.size()) {
//				JSONObject log = new JSONObject();
//				JSONObject report = new JSONObject();
//				report.put("log_id", logFileName);
//				try {
//					report.put("machine_id", NetworkInterface.getNetworkInterfaces().nextElement().getHardwareAddress());
//				}catch (NoSuchElementException | SocketException e) {
//					report.put("machine_id", "No Network Card Found");
//				}
//				report.put("log_type", "eclipse");
//				report.put("course_id", EditorsUI.getPreferenceStore().getString(HelpPreferences.COURSE));
//				report.put("log", log);
//				int size = report.length();
//				String commandText = "";
//				for (int i = numCommandsSent; i < commands.size(); i++, numCommandsSent++) {
//					EHICommand command = commands.get(i);
//					String s = command.persist();
//					size += s.length();
//					commandText += s;
//					if (size > 900 * 1024) {
//						break;
//					}
//				}
//				log.put("json", commandText);
//				HTTPRequest.post(report, reportURL);
//			}
//		} catch (JSONException e) {
//			// TODO: handle exception
//		}
//		return null;
//	}
}


]]></snapshot>
  </Command>
  <Command __id="19" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:11 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34792" docExpressionCount="4217" docLength="37765" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="65996">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 15*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 15*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶//					if (!studentFolder.getName().equals("16")) {¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						latch.countDown();¶//						return;¶//					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶//							long endTimestamp = Long.MAX_VALUE;¶//							if (timestamps.containsKey(studentFolder.getName())) {¶//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;¶//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;¶//							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶//									continue;¶//								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+"Old.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"EventOld.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"DistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStatsOld.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearchesOld.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="21" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:13 EST 2021" docASTNodeCount="38" docActiveCodeLength="213" docExpressionCount="19" docLength="213" projectName="A0" starttimestamp="1614649085217" timestamp="68344">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Sophomore 2st Sem\COMP533\A0\src\launcher\ClientTokenCounter.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package launcher;

public class ClientTokenCounter {
	public static void main(String[] args) {
		Client client = new AClient();
		client.register();
		MapReduceTracer.traceExit();
		System.exit(0);
	}
}
]]></snapshot>
  </Command>
  <Command __id="24" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:13 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34792" docExpressionCount="4217" docLength="37765" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="68736">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 15*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 15*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶//					if (!studentFolder.getName().equals("16")) {¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						latch.countDown();¶//						return;¶//					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶//							long endTimestamp = Long.MAX_VALUE;¶//							if (timestamps.containsKey(studentFolder.getName())) {¶//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;¶//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;¶//							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶//									continue;¶//								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+"Old.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"EventOld.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"DistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStatsOld.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearchesOld.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="26" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:20 EST 2021" docASTNodeCount="943" docActiveCodeLength="6513" docExpressionCount="469" docLength="9129" projectName="Comp533LocalChecks" starttimestamp="1614649085217" timestamp="75753">
    <filePath><![CDATA[C:\Users\Zhizhou\git\Comp533LocalChecks\src\gradingTools\comp533s19\assignment0\AMapReduceTracer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package gradingTools.comp533s19.assignment0;

import java.beans.PropertyChangeEvent;

import util.trace.bean.AddedPropertyChangeListener;

public abstract class AMapReduceTracer {
	public static String INFO_PREFIX = "";
	public static String WAIT = "wait";
	public static String NOTIFY = "notify";
	public static String ENQUEUE = "enqueue:";
	public static String DEQUEUE = "dequeue:";
	public static String ADD = "add:";
	public static String REDUCE = "reduce:";
	public static String NEW_MAPPER = "new mapper:";
	public static String MODEL = "Model"; // value returned by toString() method of model
	public static String VIEW = "View"; // value returned by toString() method of view
	public static String CONTROLLER = "Controller"; // value returned by toString() method of controller
	public static String SLAVE = "Slave"; // value returned by toString() method of slave summer
	public static final String QUIT = "quit";
	public static final String EXIT = "exit";

	public static final String QUITTING = "Quitting";
	public static final String REGISTER = "Register:";
	public static final String CLIENT_ASSIGNED = "Client Assigned:";

	public static final String REMOTE_LIST = "Remote List:";
	public static final String REMOTE_RESULT = "Remote Result:";


	public static final String START_TOKEN = "Start";
	public final int BUFFER_SIZE = 2;	


	// -----------------------------A1 Traces----------------------------------
	protected String toPrefix() {
		return INFO_PREFIX + Thread.currentThread() + ":" + this + ":";
	}
	protected void trace(String aSuffix) {
		System.out.println(toPrefix() + aSuffix);
	}
	/**
	 * To be called before scanning for input string
	 */
	protected void traceNumbersPrompt() {
		trace ("Please enter " + QUIT + " or a line of tokens to be processed separated by spaces");
	}
	/**
	 * To be called in the controller (A1) and slave runnable (A2)
	 */
	protected void traceQuit() {
		trace (QUITTING);
	}
	/**
	 * To be called in the view at start of call to propertyChange
	 */
	protected void tracePropertyChange(PropertyChangeEvent anEvent) {
		trace(anEvent.toString());
	}
	/*
	 * To be called in the map methods of the mappers for each mapped token
	 */
	protected void traceMap(Object anInput, Object aKeyValue) {
		trace (MAP  + anInput + ":" + aKeyValue);		
	}
	/*
	 * To be called in the reducer before returning
	 */
	protected void traceReduce(Object aList,  Object aReducedMap) {
		trace(REDUCE + aList + ":" +  aReducedMap);
	}
	/*
	 * 
	 */
	public static void traceMapperChange( Class aClass, Object aNewMapper) {
		System.out.println(INFO_PREFIX + Thread.currentThread() + ":" + aClass + ":" + NEW_MAPPER +  aNewMapper);
	}
	
	//----------------------------A2 traces -----------------------------------
	/**
	 * To be called before scanning for number of threads
	 */
	protected void traceThreadPrompt() {
		trace("Please enter the number of threads");
	}
	/**
	 * To be called before a wait on this
	 */
	protected void traceWait() {
		trace (WAIT);
	}
	/**
	 * To be called before doing a notify on this 
	 */
	protected void traceNotify() {
		trace(NOTIFY);
	}
//	/**
//	 * To be called by a summer slave thread before adding an int to its sublist 
//	 */
//	protected void traceAdd(int anInt) {
//		trace ( ADD + anInt);
//	}
	/**
	 * To be called by a master thread before adding an element to 
	 * a queue
	 */
	protected void traceEnqueueRequest(Object anElement) {
		trace(ENQUEUE + anElement);
	}
	/**
	 * To be called by a  master thread after adding an object to 
	 * a queue
	 */
	protected void traceEnqueue(Object aQueue) {
		trace(ENQUEUE + aQueue);
	}
	/**
	 * To be called by a slave thread before executing a take from
	 * queue 
	 */
	protected void traceDequeueRequest(Object aQueue) {
		trace (DEQUEUE + aQueue);
	}
	/**
	 * To be called by a slave thread after taking an object from a
	 * queue 
	 */
	protected void traceDequeue(Object anElement) {
		trace (DEQUEUE + anElement);
	}
	
//	/**
//	 * To be called in the model at the start of its reduce method	 
//	 */
//	protected void traceReduce(int aNumItemsReduced, Object aReducedMap) {
//		trace(REDUCE + aNumItemsReduced + ":" + aReducedMap);
//	}
	
	
	/*
	 * Additions since assignment was last given
	 */
	public static final String BARRIER_CREATED = "Barrier Created:";
	public static final String BARRIER_WAIT_START = "Barrier Wait Start:"; 
	public static final String BARRIER_WAIT_END = "Barrier Wait End:"; 
	public static final String BARRIER_RELEASE_ALL = "Barrier Release All:"; 
	
	public static final String JOINER_CREATED = "Joiner Created:";
	public static final String JOINER_WAIT_START = "Joiner Wait Start:"; 
	public static final String JOINER_WAIT_END = "Joiner Wait End:"; 
	public static final String JOINER_FINISHED_TASK = "Joiner Finished:"; 
	public static final String JOINER_RELEASE = "Joiner Release:"; 	
	public static final String PARTITION_ASSIGNED = "Partition Assigned:"; 
	public static final String MAP = "Map:";
//	public static final String REDUCE = "Reduce:";

	public static final String PARTITION_AFTER_BARRIER = "Partition After Barrier:";
	public static final String ADDED_TO_FINAL_MAP = "Added to Final Map:";	
	
	protected void traceBarrierCreated(Object aBarrier, int aNumThreads) {
		trace (BARRIER_CREATED  + aBarrier + ":" + aNumThreads);		
	}
	protected void traceBarrierWaitStart(Object aBarrier, int aNumThreads, int aNumWaitingThreads) {
		trace (BARRIER_WAIT_START + aBarrier + ":" + aNumThreads + ":" + aNumWaitingThreads);		
	}
	protected void traceBarrierWaitEnd(Object aBarrier, int aNumThreads, int aNumWaitingThreads) {
		trace (BARRIER_WAIT_END + aBarrier + ":" + aNumThreads + ":" + aNumWaitingThreads);		
	}
	protected void traceBarrierReleaseAll(Object aBarrier, int aNumThreads, int aNumWaitingThreads) {
		trace (BARRIER_RELEASE_ALL + aBarrier + ":" + aNumThreads + ":" + aNumWaitingThreads);		
	}
	
	protected void traceJoinerCreated(Object aJoiner, int aNumThreads) {
		trace (JOINER_CREATED +aJoiner + ":" + aNumThreads);		
	}
	protected void traceJoinerWaitStart(Object aJoiner, int aNumThreads, int aNumFinishedThreads) {
		trace (JOINER_WAIT_START + aJoiner + ":" + aNumThreads + ":" + aNumFinishedThreads);		
	}
	protected void traceJoinerWaitEnd(Object aJoiner, int aNumThreads, int aNumFinishedThreads) {
		trace (JOINER_WAIT_END + aJoiner + ":" + aNumThreads + ":" + aNumFinishedThreads);		
	}
	/*
	 * Call after changing finished threads in the joiner
	 */
	protected void traceJoinerFinishedTask(Object aJoiner, int aNumThreads, int aNumFinishedThreads) {
		trace (JOINER_FINISHED_TASK + aJoiner + ":" + aNumThreads + ":" + aNumFinishedThreads);		
	}
	protected void traceJoinerRelease(Object aJoiner, int aNumThreads, int aNumFinishedThreads) {
		trace (JOINER_RELEASE + aJoiner + ":" + aNumThreads + ":" + aNumFinishedThreads);		
	}
	protected void tracePartitionAssigned(Object aKey, Object aValue, int aPartitionNum, int aNumPartitions ) {
		trace (PARTITION_ASSIGNED + aKey + ":" + aValue + ":" + aPartitionNum + ":" + aNumPartitions );
	}
	/*
	 * To be printed by thread aThreadNumber
	 */
	protected void traceSplitAfterBarrier(int aThreadNumber, Object aList) {
		trace (PARTITION_AFTER_BARRIER + aThreadNumber + ":" + aList);
	}
	
	
	/*
	 * Call after adding reduced map to final map
	 */
	protected void traceAddedToMap(Object anOriginalMap, Object aReducedMap) {
		trace( ADDED_TO_FINAL_MAP + anOriginalMap + ":" + aReducedMap);
	}
	
	//---------------------------A3 Traces--------------------------------------
	/**
	 * To be called in the server at the start of its method for registering a client
	 */
	protected void traceRegister(Object aClient) {
		trace (REGISTER + aClient);
	}
	/**
	 * To be called in the server runnable when it is assigned a  client
	 */
	protected void traceClientAssignment(Object aClient) {
		trace(CLIENT_ASSIGNED + aClient);
	}	
	
	/**
	 * To be called in the server runnable before invoking the callback in the client.
	 * To be also called in the client at the start of its callback to process sublist	 * 
	 */
	protected void traceRemoteList (Object aSublist) {
		trace (REMOTE_LIST + aSublist);
	}
	/**
	 * To be called in the client before returning its result.
	 * To be also called in server runnable after receiving the result from the client
	 */
	protected void traceRemoteResult (Object aResult) {
		trace (REMOTE_RESULT + aResult);
	}
	/**
	 * Static method be called by the client main method
	 */
	public static void traceExit(Class aClass) {
		System.out.println (INFO_PREFIX + Thread.currentThread() + ":" + EXIT);
	}
	
	/**
	 * Slave runnables and client objects can define the following two methods
	 */
	public synchronized void synchronizedNotify() {
		traceNotify();
		this.notify();
	}	
	public synchronized void synchronizedWait() throws InterruptedException {
		traceWait();		
		this.wait();
		
	}
}
]]></snapshot>
  </Command>
  <Command __id="29" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:21 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34792" docExpressionCount="4217" docLength="37765" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="76766">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 15*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 15*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶//					if (!studentFolder.getName().equals("16")) {¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						latch.countDown();¶//						return;¶//					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶//							long endTimestamp = Long.MAX_VALUE;¶//							if (timestamps.containsKey(studentFolder.getName())) {¶//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;¶//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;¶//							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶//									continue;¶//								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+"Old.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"EventOld.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"DistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStatsOld.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearchesOld.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="31" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:25 EST 2021" projectName="null" starttimestamp="1614649085217" timestamp="80479">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="34" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:26 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34792" docExpressionCount="4217" docLength="37765" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="81019">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 15*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 15*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶//					if (!studentFolder.getName().equals("16")) {¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						latch.countDown();¶//						return;¶//					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶//							long endTimestamp = Long.MAX_VALUE;¶//							if (timestamps.containsKey(studentFolder.getName())) {¶//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;¶//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;¶//							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶//									continue;¶//								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+"Old.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"EventOld.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"DistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStatsOld.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearchesOld.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="36" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:31 EST 2021" docASTNodeCount="48" docActiveCodeLength="378" docExpressionCount="31" docLength="918" projectName="Assignment3" starttimestamp="1614649085217" timestamp="86085">
    <filePath><![CDATA[C:\Users\Zhizhou\new-version-eclipse-workspace\COMP533A3-master.zip_expanded\COMP533A3-master\src\grading\RunTests.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grading;

import gradingTools.comp533s21.assignment3.S21Assignment3Suite;
import trace.grader.basics.GraderBasicsTraceUtility;

public class RunTests {
	public static void main(String[] args) {
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		GraderBasicsTraceUtility.setBufferTracedMessages(false	);
		// Change this number if a test trace gets longer than 00 and is clipped
//		GraderBasicsTraceUtility.setMaxPrintedTraces(600);
		// Change this number if all traces together are longer than 2000
//		GraderBasicsTraceUtility.setMaxTraces(2000);
		// Change this number if your process times out prematurely
//		BasicProjectExecution.setProcessTimeOut(5);
		// You need to always call such a method
		S21Assignment3Suite.main(args);
	}
}
]]></snapshot>
  </Command>
  <Command __id="39" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:39:31 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34792" docExpressionCount="4217" docLength="37765" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="86713">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 15*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 15*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶//					if (!studentFolder.getName().equals("16")) {¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						latch.countDown();¶//						return;¶//					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶//							long endTimestamp = Long.MAX_VALUE;¶//							if (timestamps.containsKey(studentFolder.getName())) {¶//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;¶//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;¶//							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶//									continue;¶//								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+"Old.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"EventOld.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"DistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStatsOld.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearchesOld.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="257" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:45:14 EST 2021" docASTNodeCount="150" docActiveCodeLength="1197" docExpressionCount="90" docLength="2822" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="429642">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		((AExperimentalReplayer)replayer).readTimestamp();
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);
//		System.out.println(s1.equals(s2));
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
//		Date d = new Date(1379108460000L);
//		System.out.println(d);
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <Command __id="262" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:45:16 EST 2021" docASTNodeCount="6121" docActiveCodeLength="34902" docExpressionCount="4231" docLength="37875" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="431701">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 15*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 15*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶//					if (!studentFolder.getName().equals("16")) {¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						latch.countDown();¶//						return;¶//					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶//							long endTimestamp = Long.MAX_VALUE;¶//							if (timestamps.containsKey(studentFolder.getName())) {¶//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;¶//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;¶//							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶//									continue;¶//								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+"Old.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"EventOld.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"DistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStatsOld.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearchesOld.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					"), Diff(INSERT,"if (s.contains(" - Google Search")) {¶						s = s.substring(0,s.indexOf(" - Google Search"));¶					} ¶					"), Diff(EQUAL,"nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";
	private Map<String, Long[]> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			SimpleDateFormat df = new SimpleDateFormat("HH:mm");
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			cr.readNext();
			String[] token = null;
			while ((token = cr.readNext()) != null) {
				long startTime = df.parse(token[4]).getTime();
				if (startTime < 15*3600*1000) {
					startTime += 12*3600*1000;
				}
				long endTime = df.parse(token[5]).getTime();
				if (endTime < 15*3600*1000) {
					endTime += 12*3600*1000;
				}
				Long[] times = {startTime, endTime};
				timestamps.put(token[0], times);
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
//					if (!studentFolder.getName().equals("16")) {
//						synchronized (this) {
//							threadCount--;
//						}
//						latch.countDown();
//						return;
//					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							
							long startTimestamp = getLogFileCreationTime(file);
							long logStartTimestamp = startTimestamp;
//							long endTimestamp = Long.MAX_VALUE;
//							if (timestamps.containsKey(studentFolder.getName())) {
//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;
//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;
//							}
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
								webCommand = webCommandIterator.next();
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - logStartTimestamp;
							}
							for (EHICommand command : commands) {
//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {
//									continue;
//								}
								command.setStartTimestamp(logStartTimestamp);
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(logStartTimestamp);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - logStartTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								if (newCommands.size() == 0) {
									continue;
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+"Old.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"EventOld.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"DistributionOld.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistributionOld.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStatsOld.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearchesOld.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					if (s.contains(" - Google Search")) {
						s = s.substring(0,s.indexOf(" - Google Search"));
					} 
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(last.getStartTimestamp());
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="267" _type="Delete" date="Mon Mar 01 20:45:21 EST 2021" docASTNodeCount="6121" docActiveCodeLength="34899" docExpressionCount="4231" docLength="37872" endLine="717" length="3" offset="25470" repeat="3" startLine="717" starttimestamp="1614649085217" timestamp="436732" timestamp2="437332">
    <text><![CDATA[Old]]></text>
  </DocumentChange>
  <DocumentChange __id="276" _type="Insert" date="Mon Mar 01 20:45:23 EST 2021" docASTNodeCount="6121" docActiveCodeLength="34903" docExpressionCount="4231" docLength="37876" length="4" offset="25470" repeat="4" starttimestamp="1614649085217" timestamp="437911" timestamp2="438399">
    <text><![CDATA[Bert]]></text>
  </DocumentChange>
  <DocumentChange __id="307" _type="Delete" date="Mon Mar 01 20:45:27 EST 2021" docASTNodeCount="6121" docActiveCodeLength="34900" docExpressionCount="4231" docLength="37873" endLine="715" length="3" offset="25391" repeat="3" startLine="715" starttimestamp="1614649085217" timestamp="442250" timestamp2="442527">
    <text><![CDATA[Old]]></text>
  </DocumentChange>
  <DocumentChange __id="313" _type="Insert" date="Mon Mar 01 20:45:28 EST 2021" docASTNodeCount="6121" docActiveCodeLength="34904" docExpressionCount="4231" docLength="37877" length="4" offset="25391" repeat="4" starttimestamp="1614649085217" timestamp="443189" timestamp2="443660">
    <text><![CDATA[Bert]]></text>
  </DocumentChange>
  <DocumentChange __id="334" _type="Insert" date="Mon Mar 01 20:45:40 EST 2021" docASTNodeCount="6046" docActiveCodeLength="34866" docExpressionCount="4168" docLength="37879" length="2" offset="30147" starttimestamp="1614649085217" timestamp="455137">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="335" _type="Insert" date="Mon Mar 01 20:45:40 EST 2021" docASTNodeCount="6034" docActiveCodeLength="34821" docExpressionCount="4161" docLength="37881" length="2" offset="30189" starttimestamp="1614649085217" timestamp="455147">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="336" _type="Insert" date="Mon Mar 01 20:45:40 EST 2021" docASTNodeCount="6056" docActiveCodeLength="34775" docExpressionCount="4177" docLength="37883" length="2" offset="30238" starttimestamp="1614649085217" timestamp="455158">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="337" _type="Insert" date="Mon Mar 01 20:45:40 EST 2021" docASTNodeCount="6048" docActiveCodeLength="34741" docExpressionCount="4170" docLength="37885" length="2" offset="30288" starttimestamp="1614649085217" timestamp="455168">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="338" _type="Insert" date="Mon Mar 01 20:45:40 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34733" docExpressionCount="4144" docLength="37887" length="2" offset="30326" starttimestamp="1614649085217" timestamp="455176">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="332" _type="PauseCommand" date="Mon Mar 01 20:45:39 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="454332">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1782]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="331" _type="SelectTextCommand" caretOffset="5853" date="Mon Mar 01 20:45:39 EST 2021" end="5853" start="5671" starttimestamp="1614649085217" timestamp="454331" />
  <Command __id="333" _type="SelectTextCommand" caretOffset="5853" date="Mon Mar 01 20:45:39 EST 2021" end="5853" start="5671" starttimestamp="1614649085217" timestamp="454332" />
  <Command __id="340" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:45:40 EST 2021" starttimestamp="1614649085217" timestamp="455209" />
  <Command __id="342" _type="PauseCommand" date="Mon Mar 01 20:45:42 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="457040">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1831]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="341" _type="MoveCaretCommand" caretOffset="5622" date="Mon Mar 01 20:45:42 EST 2021" docOffset="30104" starttimestamp="1614649085217" timestamp="457040" />
  <Command __id="343" _type="MoveCaretCommand" caretOffset="5622" date="Mon Mar 01 20:45:42 EST 2021" docOffset="30104" starttimestamp="1614649085217" timestamp="457040" />
  <Command __id="345" _type="PauseCommand" date="Mon Mar 01 20:45:44 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="459652">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2612]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="344" _type="ShellCommand" date="Mon Mar 01 20:45:44 EST 2021" starttimestamp="1614649085217" timestamp="459652" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="347" _type="PauseCommand" date="Mon Mar 01 20:45:47 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="462781">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3129]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="346" _type="ShellCommand" date="Mon Mar 01 20:45:47 EST 2021" starttimestamp="1614649085217" timestamp="462781" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="349" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:45:48 EST 2021" starttimestamp="1614649085217" timestamp="463361" />
  <Command __id="351" _type="PauseCommand" date="Mon Mar 01 20:45:50 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="465175">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1814]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="350" _type="ShellCommand" date="Mon Mar 01 20:45:50 EST 2021" starttimestamp="1614649085217" timestamp="465175" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="353" _type="PauseCommand" date="Mon Mar 01 20:45:55 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="470477">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5302]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="352" _type="ShellCommand" date="Mon Mar 01 20:45:55 EST 2021" starttimestamp="1614649085217" timestamp="470477" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="354" _type="MoveCaretCommand" caretOffset="5586" date="Mon Mar 01 20:45:56 EST 2021" docOffset="30068" starttimestamp="1614649085217" timestamp="471315" />
  <Command __id="355" _type="MoveCaretCommand" caretOffset="5586" date="Mon Mar 01 20:45:56 EST 2021" docOffset="30068" starttimestamp="1614649085217" timestamp="471315" />
  <Command __id="357" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:45:56 EST 2021" starttimestamp="1614649085217" timestamp="471675" />
  <Command __id="358" _type="MoveCaretCommand" caretOffset="5562" date="Mon Mar 01 20:45:57 EST 2021" docOffset="30044" starttimestamp="1614649085217" timestamp="472120" />
  <Command __id="359" _type="MoveCaretCommand" caretOffset="5562" date="Mon Mar 01 20:45:57 EST 2021" docOffset="30044" starttimestamp="1614649085217" timestamp="472120" />
  <Command __id="361" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:45:57 EST 2021" starttimestamp="1614649085217" timestamp="472269" />
  <Command __id="362" _type="MoveCaretCommand" caretOffset="5570" date="Mon Mar 01 20:45:58 EST 2021" docOffset="30052" starttimestamp="1614649085217" timestamp="473087" />
  <Command __id="363" _type="MoveCaretCommand" caretOffset="5570" date="Mon Mar 01 20:45:58 EST 2021" docOffset="30052" starttimestamp="1614649085217" timestamp="473087" />
  <Command __id="365" _type="PauseCommand" date="Mon Mar 01 20:46:01 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="476111">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3024]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="364" _type="MoveCaretCommand" caretOffset="5488" date="Mon Mar 01 20:46:01 EST 2021" docOffset="29970" starttimestamp="1614649085217" timestamp="476111" />
  <Command __id="366" _type="MoveCaretCommand" caretOffset="5488" date="Mon Mar 01 20:46:01 EST 2021" docOffset="29970" starttimestamp="1614649085217" timestamp="476111" />
  <Command __id="368" _type="PauseCommand" date="Mon Mar 01 20:46:02 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="477257">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1146]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="369" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:46:02 EST 2021" starttimestamp="1614649085217" timestamp="477281" />
  <Command __id="370" _type="MoveCaretCommand" caretOffset="5603" date="Mon Mar 01 20:46:03 EST 2021" docOffset="30085" starttimestamp="1614649085217" timestamp="478095" />
  <Command __id="371" _type="MoveCaretCommand" caretOffset="5603" date="Mon Mar 01 20:46:03 EST 2021" docOffset="30085" starttimestamp="1614649085217" timestamp="478095" />
  <Command __id="373" _type="PauseCommand" date="Mon Mar 01 20:46:06 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="481256">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3161]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="372" _type="SelectTextCommand" caretOffset="5491" date="Mon Mar 01 20:46:06 EST 2021" end="5492" start="5491" starttimestamp="1614649085217" timestamp="481256" />
  <Command __id="374" _type="SelectTextCommand" caretOffset="5491" date="Mon Mar 01 20:46:06 EST 2021" end="5492" start="5491" starttimestamp="1614649085217" timestamp="481257" />
  <Command __id="376" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:46:06 EST 2021" starttimestamp="1614649085217" timestamp="481446" />
  <Command __id="377" _type="MoveCaretCommand" caretOffset="5531" date="Mon Mar 01 20:46:07 EST 2021" docOffset="30013" starttimestamp="1614649085217" timestamp="482051" />
  <Command __id="378" _type="MoveCaretCommand" caretOffset="5531" date="Mon Mar 01 20:46:07 EST 2021" docOffset="30013" starttimestamp="1614649085217" timestamp="482051" />
  <Command __id="380" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:46:07 EST 2021" starttimestamp="1614649085217" timestamp="482281" />
  <Command __id="381" _type="MoveCaretCommand" caretOffset="5572" date="Mon Mar 01 20:46:08 EST 2021" docOffset="30054" starttimestamp="1614649085217" timestamp="482990" />
  <Command __id="382" _type="MoveCaretCommand" caretOffset="5572" date="Mon Mar 01 20:46:08 EST 2021" docOffset="30054" starttimestamp="1614649085217" timestamp="482990" />
  <Command __id="384" _type="PauseCommand" date="Mon Mar 01 20:46:21 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="496359">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13369]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="383" _type="SelectTextCommand" caretOffset="5470" date="Mon Mar 01 20:46:21 EST 2021" end="5470" start="5414" starttimestamp="1614649085217" timestamp="496359" />
  <Command __id="385" _type="SelectTextCommand" caretOffset="5470" date="Mon Mar 01 20:46:21 EST 2021" end="5470" start="5414" starttimestamp="1614649085217" timestamp="496359" />
  <Command __id="388" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:46:21 EST 2021" starttimestamp="1614649085217" timestamp="496588" />
  <Command __id="390" _type="PauseCommand" date="Mon Mar 01 20:46:23 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="498062">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1474]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="389" _type="SelectTextCommand" caretOffset="6032" date="Mon Mar 01 20:46:23 EST 2021" end="6032" start="5889" starttimestamp="1614649085217" timestamp="498062" />
  <Command __id="391" _type="SelectTextCommand" caretOffset="6032" date="Mon Mar 01 20:46:23 EST 2021" end="6032" start="5889" starttimestamp="1614649085217" timestamp="498063" />
  <Command __id="397" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:46:23 EST 2021" starttimestamp="1614649085217" timestamp="498243" />
  <Command __id="398" _type="MoveCaretCommand" caretOffset="5866" date="Mon Mar 01 20:46:24 EST 2021" docOffset="30348" starttimestamp="1614649085217" timestamp="498864" />
  <Command __id="399" _type="MoveCaretCommand" caretOffset="5866" date="Mon Mar 01 20:46:24 EST 2021" docOffset="30348" starttimestamp="1614649085217" timestamp="498865" />
  <DocumentChange __id="339" _type="Insert" date="Mon Mar 01 20:45:40 EST 2021" docASTNodeCount="6081" docActiveCodeLength="34726" docExpressionCount="4203" docLength="37889" length="2" offset="30338" starttimestamp="1614649085217" timestamp="455181">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="348" _type="Insert" date="Mon Mar 01 20:45:48 EST 2021" docASTNodeCount="6064" docActiveCodeLength="34662" docExpressionCount="4187" docLength="37891" length="2" offset="30081" starttimestamp="1614649085217" timestamp="463335">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="356" _type="Insert" date="Mon Mar 01 20:45:56 EST 2021" docASTNodeCount="6056" docActiveCodeLength="34635" docExpressionCount="4180" docLength="37893" length="2" offset="30052" starttimestamp="1614649085217" timestamp="471648">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="360" _type="Insert" date="Mon Mar 01 20:45:57 EST 2021" docASTNodeCount="6051" docActiveCodeLength="34611" docExpressionCount="4176" docLength="37895" length="2" offset="30026" starttimestamp="1614649085217" timestamp="472246">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="367" _type="Insert" date="Mon Mar 01 20:46:02 EST 2021" docASTNodeCount="6039" docActiveCodeLength="34569" docExpressionCount="4167" docLength="37897" length="2" offset="29944" starttimestamp="1614649085217" timestamp="477257">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="375" _type="Delete" date="Mon Mar 01 20:46:06 EST 2021" docASTNodeCount="6051" docActiveCodeLength="34611" docExpressionCount="4176" docLength="37895" endLine="833" length="2" offset="29944" startLine="833" starttimestamp="1614649085217" timestamp="481423">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="379" _type="Insert" date="Mon Mar 01 20:46:07 EST 2021" docASTNodeCount="6043" docActiveCodeLength="34575" docExpressionCount="4169" docLength="37897" length="2" offset="29988" starttimestamp="1614649085217" timestamp="482257">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="386" _type="Insert" date="Mon Mar 01 20:46:21 EST 2021" docASTNodeCount="5957" docActiveCodeLength="34520" docExpressionCount="4097" docLength="37899" length="2" offset="29887" starttimestamp="1614649085217" timestamp="496557">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="387" _type="Insert" date="Mon Mar 01 20:46:21 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34478" docExpressionCount="4088" docLength="37901" length="2" offset="29946" starttimestamp="1614649085217" timestamp="496565">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="392" _type="Insert" date="Mon Mar 01 20:46:23 EST 2021" docASTNodeCount="5933" docActiveCodeLength="34425" docExpressionCount="4079" docLength="37903" length="2" offset="30361" starttimestamp="1614649085217" timestamp="498196">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="393" _type="Insert" date="Mon Mar 01 20:46:23 EST 2021" docASTNodeCount="5926" docActiveCodeLength="34390" docExpressionCount="4075" docLength="37905" length="2" offset="30418" starttimestamp="1614649085217" timestamp="498202">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="394" _type="Insert" date="Mon Mar 01 20:46:23 EST 2021" docASTNodeCount="5921" docActiveCodeLength="34362" docExpressionCount="4071" docLength="37907" length="2" offset="30457" starttimestamp="1614649085217" timestamp="498209">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="395" _type="Insert" date="Mon Mar 01 20:46:23 EST 2021" docASTNodeCount="5916" docActiveCodeLength="34339" docExpressionCount="4067" docLength="37909" length="2" offset="30489" starttimestamp="1614649085217" timestamp="498216">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="396" _type="Insert" date="Mon Mar 01 20:46:23 EST 2021" docASTNodeCount="5985" docActiveCodeLength="34333" docExpressionCount="4126" docLength="37911" length="2" offset="30516" starttimestamp="1614649085217" timestamp="498220">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="403" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5908" docActiveCodeLength="34388" docExpressionCount="4070" docLength="37909" endLine="832" length="2" offset="29887" startLine="832" starttimestamp="1614649085217" timestamp="511180">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="404" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5920" docActiveCodeLength="34430" docExpressionCount="4079" docLength="37907" endLine="833" length="2" offset="29944" startLine="833" starttimestamp="1614649085217" timestamp="511187">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="405" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5928" docActiveCodeLength="34466" docExpressionCount="4086" docLength="37905" endLine="834" length="2" offset="29988" startLine="834" starttimestamp="1614649085217" timestamp="511194">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="406" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5933" docActiveCodeLength="34490" docExpressionCount="4090" docLength="37903" endLine="835" length="2" offset="30026" startLine="835" starttimestamp="1614649085217" timestamp="511201">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="407" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5941" docActiveCodeLength="34517" docExpressionCount="4097" docLength="37901" endLine="836" length="2" offset="30052" startLine="836" starttimestamp="1614649085217" timestamp="511206">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="408" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5958" docActiveCodeLength="34581" docExpressionCount="4113" docLength="37899" endLine="837" length="2" offset="30081" startLine="837" starttimestamp="1614649085217" timestamp="511213">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="409" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5955" docActiveCodeLength="34619" docExpressionCount="4112" docLength="37897" endLine="838" length="2" offset="30147" startLine="838" starttimestamp="1614649085217" timestamp="511225">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="410" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5967" docActiveCodeLength="34664" docExpressionCount="4119" docLength="37895" endLine="839" length="2" offset="30187" startLine="839" starttimestamp="1614649085217" timestamp="511234">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="411" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5969" docActiveCodeLength="34710" docExpressionCount="4118" docLength="37893" endLine="840" length="2" offset="30234" startLine="840" starttimestamp="1614649085217" timestamp="511243">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="412" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5977" docActiveCodeLength="34744" docExpressionCount="4125" docLength="37891" endLine="841" length="2" offset="30282" startLine="841" starttimestamp="1614649085217" timestamp="511252">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="401" _type="PauseCommand" date="Mon Mar 01 20:46:36 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="510957">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12092]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="400" _type="SelectTextCommand" caretOffset="6042" date="Mon Mar 01 20:46:36 EST 2021" end="6042" start="5416" starttimestamp="1614649085217" timestamp="510957" />
  <Command __id="402" _type="SelectTextCommand" caretOffset="6042" date="Mon Mar 01 20:46:36 EST 2021" end="6042" start="5416" starttimestamp="1614649085217" timestamp="510958" />
  <Command __id="420" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:46:36 EST 2021" starttimestamp="1614649085217" timestamp="511334" />
  <Command __id="421" _type="MoveCaretCommand" caretOffset="5844" date="Mon Mar 01 20:46:37 EST 2021" docOffset="30326" starttimestamp="1614649085217" timestamp="512029" />
  <Command __id="422" _type="MoveCaretCommand" caretOffset="5844" date="Mon Mar 01 20:46:37 EST 2021" docOffset="30326" starttimestamp="1614649085217" timestamp="512029" />
  <Command __id="424" _type="PauseCommand" date="Mon Mar 01 20:46:39 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="514313">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2284]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="423" _type="MoveCaretCommand" caretOffset="5336" date="Mon Mar 01 20:46:39 EST 2021" docOffset="29818" starttimestamp="1614649085217" timestamp="514313" />
  <Command __id="425" _type="MoveCaretCommand" caretOffset="5336" date="Mon Mar 01 20:46:39 EST 2021" docOffset="29818" starttimestamp="1614649085217" timestamp="514314" />
  <Command __id="426" _type="SelectTextCommand" caretOffset="5344" date="Mon Mar 01 20:46:39 EST 2021" end="5344" start="5335" starttimestamp="1614649085217" timestamp="514490" />
  <Command __id="427" _type="SelectTextCommand" caretOffset="5344" date="Mon Mar 01 20:46:39 EST 2021" end="5344" start="5335" starttimestamp="1614649085217" timestamp="514490" />
  <Command __id="428" _type="MoveCaretCommand" caretOffset="5336" date="Mon Mar 01 20:46:39 EST 2021" docOffset="29818" starttimestamp="1614649085217" timestamp="514637" />
  <Command __id="429" _type="MoveCaretCommand" caretOffset="5336" date="Mon Mar 01 20:46:39 EST 2021" docOffset="29818" starttimestamp="1614649085217" timestamp="514637" />
  <Command __id="431" _type="PauseCommand" date="Mon Mar 01 20:46:41 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="516263">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1626]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="430" _type="MoveCaretCommand" caretOffset="5336" date="Mon Mar 01 20:46:41 EST 2021" docOffset="29818" starttimestamp="1614649085217" timestamp="516263" />
  <Command __id="432" _type="MoveCaretCommand" caretOffset="5336" date="Mon Mar 01 20:46:41 EST 2021" docOffset="29818" starttimestamp="1614649085217" timestamp="516263" />
  <Command __id="433" _type="SelectTextCommand" caretOffset="5344" date="Mon Mar 01 20:46:41 EST 2021" end="5344" start="5335" starttimestamp="1614649085217" timestamp="516425" />
  <Command __id="434" _type="SelectTextCommand" caretOffset="5344" date="Mon Mar 01 20:46:41 EST 2021" end="5344" start="5335" starttimestamp="1614649085217" timestamp="516425" />
  <Command __id="435" _type="SelectTextCommand" caretOffset="5380" date="Mon Mar 01 20:46:41 EST 2021" end="5380" start="5325" starttimestamp="1614649085217" timestamp="516596" />
  <Command __id="436" _type="SelectTextCommand" caretOffset="5380" date="Mon Mar 01 20:46:41 EST 2021" end="5380" start="5325" starttimestamp="1614649085217" timestamp="516596" />
  <Command __id="437" _type="CopyCommand" date="Mon Mar 01 20:46:42 EST 2021" starttimestamp="1614649085217" timestamp="517207" />
  <DocumentChange __id="413" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5989" docActiveCodeLength="34752" docExpressionCount="4136" docLength="37889" endLine="842" length="2" offset="30318" startLine="842" starttimestamp="1614649085217" timestamp="511264">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="414" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="5998" docActiveCodeLength="34759" docExpressionCount="4141" docLength="37887" endLine="843" length="2" offset="30328" startLine="843" starttimestamp="1614649085217" timestamp="511274">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="415" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="6010" docActiveCodeLength="34812" docExpressionCount="4150" docLength="37885" endLine="844" length="2" offset="30337" startLine="844" starttimestamp="1614649085217" timestamp="511283">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="416" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="6017" docActiveCodeLength="34847" docExpressionCount="4154" docLength="37883" endLine="845" length="2" offset="30392" startLine="845" starttimestamp="1614649085217" timestamp="511290">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="417" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="6022" docActiveCodeLength="34875" docExpressionCount="4158" docLength="37881" endLine="846" length="2" offset="30429" startLine="846" starttimestamp="1614649085217" timestamp="511298">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="418" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34898" docExpressionCount="4162" docLength="37879" endLine="847" length="2" offset="30459" startLine="847" starttimestamp="1614649085217" timestamp="511306">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="419" _type="Delete" date="Mon Mar 01 20:46:36 EST 2021" docASTNodeCount="6121" docActiveCodeLength="34904" docExpressionCount="4231" docLength="37877" endLine="848" length="2" offset="30484" startLine="848" starttimestamp="1614649085217" timestamp="511310">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="441" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34865" docExpressionCount="4164" docLength="37879" length="2" offset="29732" starttimestamp="1614649085217" timestamp="519691">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="442" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="6037" docActiveCodeLength="34833" docExpressionCount="4160" docLength="37881" length="2" offset="29775" starttimestamp="1614649085217" timestamp="519698">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="443" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34780" docExpressionCount="4151" docLength="37883" length="2" offset="29811" starttimestamp="1614649085217" timestamp="519705">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="444" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="6024" docActiveCodeLength="34765" docExpressionCount="4151" docLength="37885" length="2" offset="29868" starttimestamp="1614649085217" timestamp="519712">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="445" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="6093" docActiveCodeLength="34759" docExpressionCount="4210" docLength="37887" length="2" offset="29887" starttimestamp="1614649085217" timestamp="519715">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="446" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="6007" docActiveCodeLength="34704" docExpressionCount="4138" docLength="37889" length="2" offset="29897" starttimestamp="1614649085217" timestamp="519722">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="447" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="5995" docActiveCodeLength="34662" docExpressionCount="4129" docLength="37891" length="2" offset="29956" starttimestamp="1614649085217" timestamp="519729">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="448" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34626" docExpressionCount="4122" docLength="37893" length="2" offset="30002" starttimestamp="1614649085217" timestamp="519735">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="449" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="5982" docActiveCodeLength="34602" docExpressionCount="4118" docLength="37895" length="2" offset="30042" starttimestamp="1614649085217" timestamp="519741">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="450" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="5974" docActiveCodeLength="34575" docExpressionCount="4111" docLength="37897" length="2" offset="30070" starttimestamp="1614649085217" timestamp="519748">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="451" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="5957" docActiveCodeLength="34511" docExpressionCount="4095" docLength="37899" length="2" offset="30101" starttimestamp="1614649085217" timestamp="519755">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="452" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34473" docExpressionCount="4117" docLength="37901" length="2" offset="30169" starttimestamp="1614649085217" timestamp="519763">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="453" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="5975" docActiveCodeLength="34428" docExpressionCount="4110" docLength="37903" length="2" offset="30211" starttimestamp="1614649085217" timestamp="519769">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="454" _type="Insert" date="Mon Mar 01 20:46:44 EST 2021" docASTNodeCount="5957" docActiveCodeLength="34382" docExpressionCount="4097" docLength="37905" length="2" offset="30260" starttimestamp="1614649085217" timestamp="519778">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="455" _type="Insert" date="Mon Mar 01 20:46:45 EST 2021" docASTNodeCount="5949" docActiveCodeLength="34348" docExpressionCount="4090" docLength="37907" length="2" offset="30310" starttimestamp="1614649085217" timestamp="519787">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="456" _type="Insert" date="Mon Mar 01 20:46:45 EST 2021" docASTNodeCount="5953" docActiveCodeLength="34340" docExpressionCount="4093" docLength="37909" length="2" offset="30348" starttimestamp="1614649085217" timestamp="519794">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="457" _type="Insert" date="Mon Mar 01 20:46:45 EST 2021" docASTNodeCount="5917" docActiveCodeLength="34333" docExpressionCount="4067" docLength="37911" length="2" offset="30360" starttimestamp="1614649085217" timestamp="519803">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="439" _type="PauseCommand" date="Mon Mar 01 20:46:44 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="519056">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1849]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="438" _type="SelectTextCommand" caretOffset="6008" date="Mon Mar 01 20:46:44 EST 2021" end="6008" start="5263" starttimestamp="1614649085217" timestamp="519056" />
  <Command __id="440" _type="SelectTextCommand" caretOffset="6008" date="Mon Mar 01 20:46:44 EST 2021" end="6008" start="5263" starttimestamp="1614649085217" timestamp="519057" />
  <Command __id="463" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:46:45 EST 2021" starttimestamp="1614649085217" timestamp="519864" />
  <Command __id="465" _type="PauseCommand" date="Mon Mar 01 20:46:47 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="521989">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2125]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="464" _type="MoveCaretCommand" caretOffset="5248" date="Mon Mar 01 20:46:47 EST 2021" docOffset="29730" starttimestamp="1614649085217" timestamp="521989" />
  <Command __id="466" _type="MoveCaretCommand" caretOffset="5248" date="Mon Mar 01 20:46:47 EST 2021" docOffset="29730" starttimestamp="1614649085217" timestamp="521990" />
  <Command __id="468" _type="PauseCommand" date="Mon Mar 01 20:46:50 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="525325">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3335]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="467" _type="MoveCaretCommand" caretOffset="5106" date="Mon Mar 01 20:46:50 EST 2021" docOffset="29588" starttimestamp="1614649085217" timestamp="525325" />
  <Command __id="469" _type="MoveCaretCommand" caretOffset="5106" date="Mon Mar 01 20:46:50 EST 2021" docOffset="29588" starttimestamp="1614649085217" timestamp="525325" />
  <Command __id="471" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:46:51 EST 2021" starttimestamp="1614649085217" timestamp="525822" />
  <Command __id="472" _type="MoveCaretCommand" caretOffset="5250" date="Mon Mar 01 20:46:51 EST 2021" docOffset="29732" starttimestamp="1614649085217" timestamp="526362" />
  <Command __id="473" _type="MoveCaretCommand" caretOffset="5250" date="Mon Mar 01 20:46:51 EST 2021" docOffset="29732" starttimestamp="1614649085217" timestamp="526362" />
  <Command __id="475" _type="InsertStringCommand" date="Mon Mar 01 20:46:51 EST 2021" starttimestamp="1614649085217" timestamp="526735" timestamp2="526735">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="476" _type="InsertStringCommand" date="Mon Mar 01 20:46:51 EST 2021" starttimestamp="1614649085217" timestamp="526735" timestamp2="526735">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="478" _type="PasteCommand" date="Mon Mar 01 20:46:52 EST 2021" starttimestamp="1614649085217" timestamp="527643" />
  <Command __id="480" _type="PauseCommand" date="Mon Mar 01 20:46:54 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="529351">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1708]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="479" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Mar 01 20:46:54 EST 2021" starttimestamp="1614649085217" timestamp="529351" />
  <Command __id="481" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:46:54 EST 2021" starttimestamp="1614649085217" timestamp="529442" />
  <Command __id="482" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:46:54 EST 2021" starttimestamp="1614649085217" timestamp="529562" />
  <Command __id="484" _type="PauseCommand" date="Mon Mar 01 20:46:59 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="534779">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5217]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="485" _type="MoveCaretCommand" caretOffset="910" date="Mon Mar 01 20:47:00 EST 2021" docOffset="1207" starttimestamp="1614649085217" timestamp="534886" />
  <Command __id="487" _type="PauseCommand" date="Mon Mar 01 20:47:01 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="536147">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1261]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="486" _type="MoveCaretCommand" caretOffset="1230" date="Mon Mar 01 20:47:01 EST 2021" docOffset="1527" starttimestamp="1614649085217" timestamp="536147" />
  <Command __id="489" _type="PauseCommand" date="Mon Mar 01 20:47:03 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="538378">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2231]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="488" _type="ShellCommand" date="Mon Mar 01 20:47:03 EST 2021" starttimestamp="1614649085217" timestamp="538378" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="490" _type="ShellCommand" date="Mon Mar 01 20:47:03 EST 2021" starttimestamp="1614649085217" timestamp="538475" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="491" _type="ShellCommand" date="Mon Mar 01 20:47:04 EST 2021" starttimestamp="1614649085217" timestamp="538956" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="493" _type="PauseCommand" date="Mon Mar 01 20:47:05 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="540342">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1386]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="492" _type="ShellCommand" date="Mon Mar 01 20:47:05 EST 2021" starttimestamp="1614649085217" timestamp="540342" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="495" _type="MoveCaretCommand" caretOffset="776" date="Mon Mar 01 20:47:05 EST 2021" docOffset="9665" starttimestamp="1614649085217" timestamp="540484" />
  <Command __id="496" _type="MoveCaretCommand" caretOffset="776" date="Mon Mar 01 20:47:05 EST 2021" docOffset="9665" starttimestamp="1614649085217" timestamp="540556" />
  <Command __id="498" _type="PauseCommand" date="Mon Mar 01 20:47:08 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="543388">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2832]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="497" _type="MoveCaretCommand" caretOffset="1377" date="Mon Mar 01 20:47:08 EST 2021" docOffset="10266" starttimestamp="1614649085217" timestamp="543388" />
  <Command __id="499" _type="MoveCaretCommand" caretOffset="1377" date="Mon Mar 01 20:47:08 EST 2021" docOffset="10266" starttimestamp="1614649085217" timestamp="543388" />
  <Command __id="501" _type="PauseCommand" date="Mon Mar 01 20:47:09 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="544526">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1138]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="502" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:47:09 EST 2021" starttimestamp="1614649085217" timestamp="544548" />
  <Command __id="503" _type="MoveCaretCommand" caretOffset="1422" date="Mon Mar 01 20:47:10 EST 2021" docOffset="10311" starttimestamp="1614649085217" timestamp="545072" />
  <Command __id="504" _type="MoveCaretCommand" caretOffset="1422" date="Mon Mar 01 20:47:10 EST 2021" docOffset="10311" starttimestamp="1614649085217" timestamp="545072" />
  <Command __id="506" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:47:10 EST 2021" starttimestamp="1614649085217" timestamp="545180" />
  <Command __id="507" _type="MoveCaretCommand" caretOffset="1470" date="Mon Mar 01 20:47:10 EST 2021" docOffset="10359" starttimestamp="1614649085217" timestamp="545573" />
  <Command __id="508" _type="MoveCaretCommand" caretOffset="1470" date="Mon Mar 01 20:47:10 EST 2021" docOffset="10359" starttimestamp="1614649085217" timestamp="545573" />
  <Command __id="510" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:47:10 EST 2021" starttimestamp="1614649085217" timestamp="545705" />
  <Command __id="512" _type="PauseCommand" date="Mon Mar 01 20:47:13 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="547933">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2228]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="513" _type="MoveCaretCommand" caretOffset="1230" date="Mon Mar 01 20:47:13 EST 2021" docOffset="1527" starttimestamp="1614649085217" timestamp="548026" />
  <Command __id="514" _type="ShellCommand" date="Mon Mar 01 20:47:14 EST 2021" starttimestamp="1614649085217" timestamp="548983" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="515" _type="ShellCommand" date="Mon Mar 01 20:47:15 EST 2021" starttimestamp="1614649085217" timestamp="549971" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="516" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:47:15 EST 2021" starttimestamp="1614649085217" timestamp="550184" />
  <Command __id="517" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:47:15 EST 2021" starttimestamp="1614649085217" timestamp="550302" />
  <Command __id="518" _type="RunCommand" date="Mon Mar 01 20:47:15 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="550421" type="Run" />
  <Command __id="519" _type="RunCommand" date="Mon Mar 01 20:47:15 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="550421" type="Run" />
  <Command __id="520" _type="ConsoleOutput" date="Mon Mar 01 20:47:16 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="551414" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\RestOld has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\RestOld\Log2013-09-13-14-36-31-023.xml
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="521" _type="ConsoleOutput" date="Mon Mar 01 20:47:16 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="551528" type="ConsoleOutput">
    <outputString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\RestOld\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\RestOld\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\RestOld"), Diff(DELETE," has 3 file(s)"), Diff(INSERT,"\Log2013-09-13-14-39-52-726.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\RestOld\Log2013-09-13-14-"), Diff(DELETE,"36-31-023"), Diff(INSERT,"54-59-878"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="522" _type="ConsoleOutput" date="Mon Mar 01 20:47:16 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="551706" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\RestOld\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\RestOld\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading "), Diff(INSERT,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-13-"), Diff(DELETE,"14-39-52-726"), Diff(INSERT,"09-53-29-705"), Diff(EQUAL,".xml¶Reading "), Diff(INSERT,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-1"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"-1"), Diff(DELETE,"4-54-59-878"), Diff(INSERT,"0-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="523" _type="ConsoleOutput" date="Mon Mar 01 20:47:17 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="551813" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\RestOld\Log2013-09-12-15-05-47-820.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\RestOld\Log2013-09-12-10-40-05-321.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-1"), Diff(DELETE,"3-09-53-29-705"), Diff(INSERT,"2-15-05-47-820"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-1"), Diff(DELETE,"7"), Diff(INSERT,"2"), Diff(EQUAL,"-10-"), Diff(DELETE,"06-32-242"), Diff(INSERT,"40-05-321"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="524" _type="ConsoleOutput" date="Mon Mar 01 20:47:17 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="551927" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\RestOld\Log2013-09-16-10-05-18-718.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"2"), Diff(EQUAL,"1"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"2"), Diff(EQUAL,"1"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"0"), Diff(EQUAL,"-05-"), Diff(DELETE,"47-820.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\RestOld\Log2013-09-12-10-40-05-321"), Diff(INSERT,"18-718"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="525" _type="ConsoleOutput" date="Mon Mar 01 20:47:17 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="551981" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\RestOld\Log2013-09-15-15-38-06-069.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"5"), Diff(EQUAL,"-1"), Diff(DELETE,"0-0"), Diff(EQUAL,"5-"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"8-"), Diff(DELETE,"718"), Diff(INSERT,"06-069"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="526" _type="ConsoleOutput" date="Mon Mar 01 20:47:17 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="552054" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\RestOld has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\RestOld\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\RestOld\Log2013-09-14-10-54-43-267.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\RestOld has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\RestOld\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\RestOld\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2\Eclipse\RestOld has 1"), Diff(INSERT,"3\Eclipse\RestOld has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\RestOld\Log2013-09-14-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\RestOld\Log2013-09-14-10-54-43-267.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\RestOld has 2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-1"), Diff(DELETE,"5"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5-38-06-069"), Diff(INSERT,"2-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\RestOld\Log2013-09-14-13-40-09-552"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="527" _type="ConsoleOutput" date="Mon Mar 01 20:47:17 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="552158" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\RestOld has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\RestOld\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\RestOld\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\RestOld\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\RestOld has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-"), Diff(INSERT,"18-"), Diff(EQUAL,"14-"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"9-"), Diff(DELETE,"48-24-508"), Diff(INSERT,"04-982"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-54-4"), Diff(INSERT,"5-33-0"), Diff(EQUAL,"3-2"), Diff(INSERT,"2"), Diff(EQUAL,"6"), Diff(DELETE,"7"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\RestOld has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-"), Diff(DELETE,"14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\RestOld\Log2013-09-14-13-40-09-552"), Diff(INSERT,"20-10-17-49-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="528" _type="ConsoleOutput" date="Mon Mar 01 20:47:17 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="552268" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\RestOld\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\RestOld has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"-14-3"), Diff(DELETE,"9-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\RestOld\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\RestOld\Log2013-09-20-10-17-49-071"), Diff(INSERT,"0-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="529" _type="ConsoleOutput" date="Mon Mar 01 20:47:17 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="552353" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\RestOld\Log2013-09-23-12-56-55-221.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\RestOld\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-2"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"4-30-38-37"), Diff(INSERT,"2-56-55-221.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\RestOld\Log2013-09-11-15-13-48-82"), Diff(EQUAL,"9.xml¶")]]]></diff>
  </Command>
  <Command __id="530" _type="ConsoleOutput" date="Mon Mar 01 20:47:17 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="552455" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\RestOld\Log2013-09-06-16-07-40-790.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\RestOld has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\RestOld\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
folder does not exist:C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\RestOld
Reading student Eclipse
folder does not exist:C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\RestOld
Reading student Eclipse
folder does not exist:C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\RestOld
ExceptionCommand EHException  EventLogger utility command
Writing Experiment student 22 to ExperimentWebStatsBert.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"31"), Diff(EQUAL,"\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"31"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-"), Diff(DELETE,"23-12-56-55-221"), Diff(INSERT,"06-16-07-40-790"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\RestOld\Log2013-09-1"), Diff(DELETE,"1-15-13-48-829.xml"), Diff(INSERT,"3-12-11-53-568.xml¶Reading student Eclipse¶folder does not exist:C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\RestOld¶Reading student Eclipse¶folder does not exist:C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\RestOld¶Reading student Eclipse¶folder does not exist:C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\RestOld¶ExceptionCommand EHException  EventLogger utility command¶Writing Experiment student 22 to ExperimentWebStatsBert.csv"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="532" _type="PauseCommand" date="Mon Mar 01 20:47:21 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="556150">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3695]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="531" _type="ConsoleOutput" date="Mon Mar 01 20:47:21 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="556150" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 33 to ExperimentWebStatsBert.csv
Writing Experiment student 23 to ExperimentWebStatsBert.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\RestOld\Log2013-09-06-16-07-40-790.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\RestOld has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\RestOld\Log2013-09-13-12-11-53-568.xml¶Reading student Eclipse¶folder does not exist:C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\RestOld¶Reading student Eclipse¶folder does not exist:C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\RestOld¶Reading student Eclipse¶folder does not exist:C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\RestOld¶ExceptionCommand EHException  EventLogger utility command"), Diff(INSERT,"Writing Experiment student 33 to ExperimentWebStatsBert.csv"), Diff(EQUAL,"¶Writing Experiment student 2"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶")]]]></diff>
  </Command>
  <Command __id="534" _type="PauseCommand" date="Mon Mar 01 20:47:23 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="558052">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1902]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="533" _type="ConsoleOutput" date="Mon Mar 01 20:47:23 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="558052" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 24 to ExperimentWebStatsBert.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing Experiment student 33 to ExperimentWebStatsBert.csv¶"), Diff(EQUAL,"Writing Experiment student 2"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶")]]]></diff>
  </Command>
  <Command __id="535" _type="ExceptionCommand" date="Mon Mar 01 20:47:23 EST 2021" starttimestamp="1614649085217" timestamp="558486" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: Server returned HTTP response code: 403 for URL: http://www.geom.uiuc.edu/~daeron/docs/apidocs/java.awt.Rectangle.html
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1900)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1028)
	at logAnalyzer.AExperimentalReplayer.createWebStats(AExperimentalReplayer.java:769)
	at logAnalyzer.AExperimentalReplayer.analyzeFolder(AExperimentalReplayer.java:309)
	at logAnalyzer.Driver.main(Driver.java:38)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="537" _type="PauseCommand" date="Mon Mar 01 20:47:26 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="560821">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[2335]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="536" _type="ExceptionCommand" date="Mon Mar 01 20:47:26 EST 2021" starttimestamp="1614649085217" timestamp="560821" type="Exception">
    <exceptionString><![CDATA[java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:666)
	at sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:173)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:180)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:264)
	at sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:367)
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:191)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:177)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1570)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:268)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1028)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1045)
	at logAnalyzer.AExperimentalReplayer.createWebStats(AExperimentalReplayer.java:769)
	at logAnalyzer.AExperimentalReplayer.analyzeFolder(AExperimentalReplayer.java:309)
	at logAnalyzer.Driver.main(Driver.java:38)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="539" _type="PauseCommand" date="Mon Mar 01 20:47:28 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="563598">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[2777]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="538" _type="ExceptionCommand" date="Mon Mar 01 20:47:28 EST 2021" starttimestamp="1614649085217" timestamp="563598" type="Exception">
    <exceptionString><![CDATA[java.io.FileNotFoundException: https://stackoverflow.com/questions/628830/netbeans-tips-and-tricks
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1896)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:268)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1028)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1045)
	at logAnalyzer.AExperimentalReplayer.createWebStats(AExperimentalReplayer.java:769)
	at logAnalyzer.AExperimentalReplayer.analyzeFolder(AExperimentalReplayer.java:309)
	at logAnalyzer.Driver.main(Driver.java:38)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="544" _type="PauseCommand" date="Mon Mar 01 20:47:46 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="581243">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[13979]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="543" _type="RunCommand" date="Mon Mar 01 20:47:46 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="581243" type="Run" />
  <Command __id="545" _type="RunCommand" date="Mon Mar 01 20:47:46 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="581244" type="Run" />
  <Command __id="547" _type="PauseCommand" date="Mon Mar 01 20:47:50 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="585487">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[4243]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="548" _type="MoveCaretCommand" caretOffset="1472" date="Mon Mar 01 20:47:50 EST 2021" docOffset="10361" starttimestamp="1614649085217" timestamp="585635" />
  <Command __id="551" _type="PauseCommand" date="Mon Mar 01 20:47:56 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="591222">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5587]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="550" _type="ShellCommand" date="Mon Mar 01 20:47:56 EST 2021" starttimestamp="1614649085217" timestamp="591222" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="553" _type="PauseCommand" date="Mon Mar 01 20:47:59 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="594370">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3148]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="552" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:47:59 EST 2021" forward="true" matchWord="false" offset="10361" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="594370" wrapSearch="true">
    <searchString><![CDATA[folder does not exist]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="555" _type="PauseCommand" date="Mon Mar 01 20:48:03 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="598378">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[4008]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="554" _type="ShellCommand" date="Mon Mar 01 20:48:03 EST 2021" starttimestamp="1614649085217" timestamp="598378" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="557" _type="PauseCommand" date="Mon Mar 01 20:48:04 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="599727">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1349]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="556" _type="ShellCommand" date="Mon Mar 01 20:48:04 EST 2021" starttimestamp="1614649085217" timestamp="599727" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="558" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:48:05 EST 2021" forward="true" matchWord="false" offset="3175" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="599794" wrapSearch="true">
    <searchString><![CDATA[folder does not exist]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="559" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:48:05 EST 2021" forward="true" matchWord="false" offset="3175" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="600305" wrapSearch="true">
    <searchString><![CDATA[folder does not exist]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="561" _type="PauseCommand" date="Mon Mar 01 20:48:07 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="601784">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1479]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="560" _type="ShellCommand" date="Mon Mar 01 20:48:07 EST 2021" starttimestamp="1614649085217" timestamp="601784" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="562" _type="MoveCaretCommand" caretOffset="893" date="Mon Mar 01 20:48:07 EST 2021" docOffset="3504" starttimestamp="1614649085217" timestamp="601850" />
  <Command __id="563" _type="MoveCaretCommand" caretOffset="893" date="Mon Mar 01 20:48:07 EST 2021" docOffset="3504" starttimestamp="1614649085217" timestamp="601850" />
  <Command __id="565" _type="PauseCommand" date="Mon Mar 01 20:48:08 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="603197">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1347]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="564" _type="ShellCommand" date="Mon Mar 01 20:48:08 EST 2021" starttimestamp="1614649085217" timestamp="603197" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="566" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:48:08 EST 2021" forward="true" matchWord="false" offset="3504" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="603285" wrapSearch="true">
    <searchString><![CDATA[folder does not exist]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="567" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:48:09 EST 2021" forward="true" matchWord="false" offset="3175" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="603910" wrapSearch="true">
    <searchString><![CDATA[folder does not exist]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="568" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:48:09 EST 2021" forward="true" matchWord="false" offset="3175" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="604366" wrapSearch="true">
    <searchString><![CDATA[folder does not exist]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="570" _type="PauseCommand" date="Mon Mar 01 20:48:13 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="608201">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3835]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="569" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:48:13 EST 2021" forward="false" matchWord="false" offset="3175" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="608201" wrapSearch="true">
    <searchString><![CDATA[folder does not exist]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="572" _type="PauseCommand" date="Mon Mar 01 20:48:15 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="610214">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2013]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="571" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:48:15 EST 2021" forward="true" matchWord="false" offset="3175" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="610214" wrapSearch="true">
    <searchString><![CDATA[folder does not exist]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="573" _type="ShellCommand" date="Mon Mar 01 20:48:16 EST 2021" starttimestamp="1614649085217" timestamp="610953" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="575" _type="PauseCommand" date="Mon Mar 01 20:48:22 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="617591">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6638]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="574" _type="CopyCommand" date="Mon Mar 01 20:48:22 EST 2021" starttimestamp="1614649085217" timestamp="617591" />
  <Command __id="576" _type="ShellCommand" date="Mon Mar 01 20:48:23 EST 2021" starttimestamp="1614649085217" timestamp="618218" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="577" _type="ShellCommand" date="Mon Mar 01 20:48:24 EST 2021" starttimestamp="1614649085217" timestamp="618817" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="578" _type="MoveCaretCommand" caretOffset="716" date="Mon Mar 01 20:48:24 EST 2021" docOffset="3235" starttimestamp="1614649085217" timestamp="618905" />
  <Command __id="579" _type="MoveCaretCommand" caretOffset="716" date="Mon Mar 01 20:48:24 EST 2021" docOffset="3235" starttimestamp="1614649085217" timestamp="618905" />
  <Command __id="581" _type="ShellCommand" date="Mon Mar 01 20:48:24 EST 2021" starttimestamp="1614649085217" timestamp="619315" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="582" _type="PasteCommand" date="Mon Mar 01 20:48:25 EST 2021" starttimestamp="1614649085217" timestamp="620112" />
  <Command __id="583" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:48:26 EST 2021" forward="true" matchWord="false" offset="3235" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="620886" wrapSearch="true">
    <searchString><![CDATA[folder does not exis]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="584" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:48:26 EST 2021" forward="true" matchWord="false" offset="3174" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="621334" wrapSearch="true">
    <searchString><![CDATA[folder does not exis]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="585" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:48:26 EST 2021" forward="true" matchWord="false" offset="3174" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="621499" wrapSearch="true">
    <searchString><![CDATA[folder does not exis]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="586" _type="ShellCommand" date="Mon Mar 01 20:48:27 EST 2021" starttimestamp="1614649085217" timestamp="622051" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="588" _type="PauseCommand" date="Mon Mar 01 20:48:28 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="623161">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1110]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="587" _type="ShellCommand" date="Mon Mar 01 20:48:28 EST 2021" starttimestamp="1614649085217" timestamp="623161" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="589" _type="ShellCommand" date="Mon Mar 01 20:48:28 EST 2021" starttimestamp="1614649085217" timestamp="623293" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="590" _type="MoveCaretCommand" caretOffset="875" date="Mon Mar 01 20:48:29 EST 2021" docOffset="3486" starttimestamp="1614649085217" timestamp="623829" />
  <Command __id="591" _type="MoveCaretCommand" caretOffset="875" date="Mon Mar 01 20:48:29 EST 2021" docOffset="3486" starttimestamp="1614649085217" timestamp="623829" />
  <Command __id="593" _type="PauseCommand" date="Mon Mar 01 20:49:03 EST 2021" range="30s-1m" starttimestamp="1614649085217" timestamp="658444">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[34615]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="592" _type="ShellCommand" date="Mon Mar 01 20:49:03 EST 2021" starttimestamp="1614649085217" timestamp="658444" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="594" _type="ShellCommand" date="Mon Mar 01 20:49:03 EST 2021" starttimestamp="1614649085217" timestamp="658554" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="596" _type="SelectTextCommand" caretOffset="22750" date="Mon Mar 01 20:49:04 EST 2021" end="22750" start="22740" starttimestamp="1614649085217" timestamp="658926" />
  <Command __id="598" _type="PauseCommand" date="Mon Mar 01 20:49:06 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="661227">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2301]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="599" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Mar 01 20:49:06 EST 2021" starttimestamp="1614649085217" timestamp="661278" />
  <Command __id="600" _type="MoveCaretCommand" caretOffset="1134" date="Mon Mar 01 20:49:06 EST 2021" docOffset="9931" starttimestamp="1614649085217" timestamp="661348" />
  <Command __id="602" _type="PauseCommand" date="Mon Mar 01 20:49:07 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="662750">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1402]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="601" _type="ShellCommand" date="Mon Mar 01 20:49:07 EST 2021" starttimestamp="1614649085217" timestamp="662750" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="603" _type="ShellCommand" date="Mon Mar 01 20:49:08 EST 2021" starttimestamp="1614649085217" timestamp="662849" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="605" _type="PauseCommand" date="Mon Mar 01 20:49:12 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="667252">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4403]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="604" _type="MoveCaretCommand" caretOffset="8214" date="Mon Mar 01 20:49:12 EST 2021" docOffset="34253" starttimestamp="1614649085217" timestamp="667252" />
  <Command __id="606" _type="MoveCaretCommand" caretOffset="8214" date="Mon Mar 01 20:49:12 EST 2021" docOffset="34253" starttimestamp="1614649085217" timestamp="667252" />
  <Command __id="608" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:49:13 EST 2021" starttimestamp="1614649085217" timestamp="668038" />
  <Command __id="609" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:49:13 EST 2021" starttimestamp="1614649085217" timestamp="668038" />
  <Command __id="611" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:49:13 EST 2021" starttimestamp="1614649085217" timestamp="668183" />
  <Command __id="612" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:49:13 EST 2021" starttimestamp="1614649085217" timestamp="668184" />
  <Command __id="614" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:49:13 EST 2021" starttimestamp="1614649085217" timestamp="668303" />
  <Command __id="615" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:49:13 EST 2021" starttimestamp="1614649085217" timestamp="668303" />
  <Command __id="621" _type="PauseCommand" date="Mon Mar 01 20:49:21 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="675980">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6319]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="620" _type="RunCommand" date="Mon Mar 01 20:49:21 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="675980" type="Run" />
  <Command __id="622" _type="RunCommand" date="Mon Mar 01 20:49:21 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="675980" type="Run" />
  <Command __id="623" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="676813" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing Experiment student 24 to ExperimentWebStatsBert.csv"), Diff(INSERT,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="624" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677048" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-54-59-878"), Diff(INSERT,"09-53-29-705.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="625" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677150" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3-09-53-29-705.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242"), Diff(INSERT,"2-15-05-47-820"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="626" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677228" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-12-1"), Diff(DELETE,"5-05-47-820.xml"), Diff(INSERT,"0-40-05-321.xml¶Reading student Eclipse"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="627" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677288" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"6"), Diff(EQUAL,"-10-"), Diff(DELETE,"40-05-321"), Diff(INSERT,"05-18-718"), Diff(EQUAL,".xml¶Reading student Eclipse¶"), Diff(INSERT,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml¶")]]]></diff>
  </Command>
  <Command __id="628" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677404" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"3\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"4"), Diff(EQUAL,"-10-"), Diff(DELETE,"05-18-718"), Diff(INSERT,"54-43-267"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"5"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"2-59"), Diff(EQUAL,"-3"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"-0"), Diff(DELETE,"6-069"), Diff(INSERT,"52.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="629" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677496" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4-09-4"), Diff(EQUAL,"8-"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"4-"), Diff(DELETE,"508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24"), Diff(INSERT,"39-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"2-59"), Diff(INSERT,"5"), Diff(EQUAL,"-3"), Diff(DELETE,"9"), Diff(INSERT,"3"), Diff(EQUAL,"-0"), Diff(DELETE,"52"), Diff(INSERT,"3-226"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml"), Diff(INSERT,"student Eclipse"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="630" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677555" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"18-14-39-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse"), Diff(INSERT,"20-10-17-49-071.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="631" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677614" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-20-1"), Diff(DELETE,"0-17-49-071"), Diff(INSERT,"4-30-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="632" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677674" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-2"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"4-30-38-379"), Diff(INSERT,"2-56-55-221"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="633" _type="ConsoleOutput" date="Mon Mar 01 20:49:22 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677735" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"23-12-56-55-221"), Diff(INSERT,"11-15-13-48-829.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="634" _type="ConsoleOutput" date="Mon Mar 01 20:49:23 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677817" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"1-15-13-48-829"), Diff(INSERT,"3-12-11-53-568.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest has 1"), Diff(INSERT,"8"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"31\Eclipse\Rest\Log2013-09-06-16-07-40-790"), Diff(INSERT,"pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="635" _type="ConsoleOutput" date="Mon Mar 01 20:49:23 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="677937" type="ConsoleOutput">
    <outputString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
ExceptionCommand EHException  EventLogger utility command
Writing Experiment student 22 to ExperimentWebStatsBert.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3"), Diff(INSERT,"4-10"), Diff(EQUAL,"-0"), Diff(DELETE,"9"), Diff(INSERT,"4"), Diff(EQUAL,"-13-1"), Diff(DELETE,"2-11-53-568"), Diff(INSERT,"3-24-337"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5"), Diff(INSERT,"4-10"), Diff(EQUAL,"-0"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"5"), Diff(EQUAL,"-3"), Diff(DELETE,"5-18-862"), Diff(INSERT,"8-180"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02-12-12-57-56-864"), Diff(INSERT,"4-10-04-13-17-08-589"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest has 1"), Diff(DELETE,"8"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26-"), Diff(EQUAL,"10-0"), Diff(DELETE,"9-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-"), Diff(INSERT,"4-13-38-06-6"), Diff(EQUAL,"27"), Diff(DELETE,"1"), Diff(EQUAL,".xml¶"), Diff(DELETE,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml"), Diff(INSERT,"ExceptionCommand EHException  EventLogger utility command¶Writing Experiment student 22 to ExperimentWebStatsBert.csv"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="637" _type="PauseCommand" date="Mon Mar 01 20:49:25 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="680236">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2299]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="636" _type="ConsoleOutput" date="Mon Mar 01 20:49:25 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="680236" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 33 to ExperimentWebStatsBert.csv
Writing Experiment student 23 to ExperimentWebStatsBert.csv
Writing Experiment student 24 to ExperimentWebStatsBert.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml¶ExceptionCommand EHException  EventLogger utility command"), Diff(INSERT,"Writing Experiment student 33 to ExperimentWebStatsBert.csv¶Writing Experiment student 23 to ExperimentWebStatsBert.csv"), Diff(EQUAL,"¶Writing Experiment student 2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶")]]]></diff>
  </Command>
  <Command __id="638" _type="ExceptionCommand" date="Mon Mar 01 20:49:25 EST 2021" starttimestamp="1614649085217" timestamp="680565" type="Exception">
    <exceptionString><![CDATA[java.io.IOException: Server returned HTTP response code: 403 for URL: http://www.geom.uiuc.edu/~daeron/docs/apidocs/java.awt.Rectangle.html
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1900)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1028)
	at logAnalyzer.AExperimentalReplayer.createWebStats(AExperimentalReplayer.java:769)
	at logAnalyzer.AExperimentalReplayer.analyzeFolder(AExperimentalReplayer.java:309)
	at logAnalyzer.Driver.main(Driver.java:38)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="640" _type="PauseCommand" date="Mon Mar 01 20:49:28 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="682787">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[2222]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="639" _type="ExceptionCommand" date="Mon Mar 01 20:49:28 EST 2021" starttimestamp="1614649085217" timestamp="682787" type="Exception">
    <exceptionString><![CDATA[java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:606)
	at sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:666)
	at sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:173)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:180)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:264)
	at sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:367)
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:191)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1162)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1056)
	at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:177)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1570)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:268)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1028)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1045)
	at logAnalyzer.AExperimentalReplayer.createWebStats(AExperimentalReplayer.java:769)
	at logAnalyzer.AExperimentalReplayer.analyzeFolder(AExperimentalReplayer.java:309)
	at logAnalyzer.Driver.main(Driver.java:38)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="642" _type="PauseCommand" date="Mon Mar 01 20:49:31 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="685804">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[3017]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="641" _type="ExceptionCommand" date="Mon Mar 01 20:49:31 EST 2021" starttimestamp="1614649085217" timestamp="685804" type="Exception">
    <exceptionString><![CDATA[java.io.FileNotFoundException: https://stackoverflow.com/questions/628830/netbeans-tips-and-tricks
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1896)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:268)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1028)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1045)
	at logAnalyzer.AExperimentalReplayer.createWebStats(AExperimentalReplayer.java:769)
	at logAnalyzer.AExperimentalReplayer.analyzeFolder(AExperimentalReplayer.java:309)
	at logAnalyzer.Driver.main(Driver.java:38)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="644" _type="PauseCommand" date="Mon Mar 01 20:49:33 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="688102">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[2298]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="643" _type="MoveCaretCommand" caretOffset="7802" date="Mon Mar 01 20:49:33 EST 2021" docOffset="31155" starttimestamp="1614649085217" timestamp="688102" />
  <Command __id="645" _type="MoveCaretCommand" caretOffset="7802" date="Mon Mar 01 20:49:33 EST 2021" docOffset="31155" starttimestamp="1614649085217" timestamp="688102" />
  <Command __id="646" _type="ExceptionCommand" date="Mon Mar 01 20:49:33 EST 2021" starttimestamp="1614649085217" timestamp="688440" type="Exception">
    <exceptionString><![CDATA[java.io.FileNotFoundException: http://javalessons.com/cgi-bin/fun/java-programming.cgi?1cd=mev&sid=ao789&j2ee=jsp
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1896)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1498)
	at logAnalyzer.AExperimentalReplayer.readWebContent(AExperimentalReplayer.java:1028)
	at logAnalyzer.AExperimentalReplayer.createWebStats(AExperimentalReplayer.java:769)
	at logAnalyzer.AExperimentalReplayer.analyzeFolder(AExperimentalReplayer.java:309)
	at logAnalyzer.Driver.main(Driver.java:38)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="647" _type="RunCommand" date="Mon Mar 01 20:49:34 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="689342" type="Run" />
  <Command __id="648" _type="RunCommand" date="Mon Mar 01 20:49:34 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="689342" type="Run" />
  <Command __id="650" _type="PauseCommand" date="Mon Mar 01 20:49:35 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="690772">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1430]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="649" _type="MoveCaretCommand" caretOffset="8285" date="Mon Mar 01 20:49:35 EST 2021" docOffset="34324" starttimestamp="1614649085217" timestamp="690772" />
  <Command __id="651" _type="MoveCaretCommand" caretOffset="8285" date="Mon Mar 01 20:49:35 EST 2021" docOffset="34324" starttimestamp="1614649085217" timestamp="690772" />
  <Command __id="653" _type="PauseCommand" date="Mon Mar 01 20:49:51 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="706334">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15562]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="652" _type="MoveCaretCommand" caretOffset="2892" date="Mon Mar 01 20:49:51 EST 2021" docOffset="26245" starttimestamp="1614649085217" timestamp="706334" />
  <Command __id="654" _type="MoveCaretCommand" caretOffset="2892" date="Mon Mar 01 20:49:51 EST 2021" docOffset="26245" starttimestamp="1614649085217" timestamp="706334" />
  <DocumentChange __id="458" _type="Insert" date="Mon Mar 01 20:46:45 EST 2021" docASTNodeCount="5905" docActiveCodeLength="34280" docExpressionCount="4058" docLength="37913" length="2" offset="30371" starttimestamp="1614649085217" timestamp="519810">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="459" _type="Insert" date="Mon Mar 01 20:46:45 EST 2021" docASTNodeCount="5898" docActiveCodeLength="34245" docExpressionCount="4054" docLength="37915" length="2" offset="30428" starttimestamp="1614649085217" timestamp="519818">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="460" _type="Insert" date="Mon Mar 01 20:46:45 EST 2021" docASTNodeCount="5893" docActiveCodeLength="34217" docExpressionCount="4050" docLength="37917" length="2" offset="30467" starttimestamp="1614649085217" timestamp="519827">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="461" _type="Insert" date="Mon Mar 01 20:46:45 EST 2021" docASTNodeCount="5888" docActiveCodeLength="34194" docExpressionCount="4046" docLength="37919" length="2" offset="30499" starttimestamp="1614649085217" timestamp="519834">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="462" _type="Insert" date="Mon Mar 01 20:46:45 EST 2021" docASTNodeCount="5957" docActiveCodeLength="34188" docExpressionCount="4105" docLength="37921" length="2" offset="30526" starttimestamp="1614649085217" timestamp="519838">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="470" _type="Insert" date="Mon Mar 01 20:46:51 EST 2021" docASTNodeCount="5952" docActiveCodeLength="34161" docExpressionCount="4101" docLength="37923" length="2" offset="29570" starttimestamp="1614649085217" timestamp="525798">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="474" _type="Insert" date="Mon Mar 01 20:46:51 EST 2021" docASTNodeCount="5952" docActiveCodeLength="34168" docExpressionCount="4101" docLength="37930" length="7" offset="29732" starttimestamp="1614649085217" timestamp="526727">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="477" _type="Replace" date="Mon Mar 01 20:46:52 EST 2021" docASTNodeCount="5964" docActiveCodeLength="34217" docExpressionCount="4110" docLength="37979" endLine="827" insertionLength="54" int_docASTNodeCount="5952" int_docActiveCodeLength="34163" int_docExpressionCount="4101" int_docLength="37925" length="5" offset="29734" startLine="827" starttimestamp="1614649085217" timestamp="527633">
    <deletedText><![CDATA[					]]></deletedText>
    <insertedText><![CDATA[					cw2.writeNext(nextLine.toArray(new String[1]));
]]></insertedText>
  </DocumentChange>
  <Command __id="483" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:46:59 EST 2021" docASTNodeCount="150" docActiveCodeLength="1197" docExpressionCount="90" docLength="2822" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="534779">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379108460000L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="494" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:47:05 EST 2021" docASTNodeCount="5964" docActiveCodeLength="34217" docExpressionCount="4110" docLength="37979" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="540382">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 15*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 15*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶//					if (!studentFolder.getName().equals("16")) {¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						latch.countDown();¶//						return;¶//					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶//							long endTimestamp = Long.MAX_VALUE;¶//							if (timestamps.containsKey(studentFolder.getName())) {¶//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;¶//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;¶//							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶//									continue;¶//								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+"Old.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"EventOld.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"DistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats"), Diff(DELETE,"Old"), Diff(INSERT,"Bert"), Diff(EQUAL,".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches"), Diff(DELETE,"Old"), Diff(INSERT,"Bert"), Diff(EQUAL,".csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶"), Diff(INSERT,"//"), Diff(EQUAL,"					nextLine.add(student);¶"), Diff(DELETE,""), Diff(EQUAL,"					if (s.contains(" - Google Search")) {¶						s = s.substring(0,s.indexOf(" - Google Search"));¶					} ¶					nextLine.add(s);¶					"), Diff(INSERT,"cw2.writeNext(nextLine.toArray(new String[1]));¶¶//					"), Diff(EQUAL,"if (searches.get(s).size() == 0) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"						nextLine.add("No Result");¶"), Diff(INSERT,"//"), Diff(EQUAL,"						cw2.writeNext(nextLine.toArray(new String[1]));¶"), Diff(INSERT,"//"), Diff(EQUAL,"						continue;¶"), Diff(INSERT,"//"), Diff(EQUAL,"					}¶"), Diff(INSERT,"//"), Diff(EQUAL,"					for (int i = 0; i < searches.get(s).size(); i++) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"						String url = searches.get(s).get(i);¶"), Diff(INSERT,"//"), Diff(EQUAL,"						nextLine.add(titles.get(url));¶"), Diff(INSERT,"//"), Diff(EQUAL,"						nextLine.add(url);¶"), Diff(INSERT,"//"), Diff(EQUAL,"						nextLine.add(i+1+"");¶"), Diff(INSERT,"//"), Diff(EQUAL,"						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶"), Diff(INSERT,"//"), Diff(EQUAL,"						if (contents.containsKey(url)) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"							List<String> list = contents.get(url);¶"), Diff(INSERT,"//"), Diff(EQUAL,"							for (int j = 1; j < list.size(); j++) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"								nextLine.add(list.get(j));¶"), Diff(INSERT,"//"), Diff(EQUAL,"							}¶"), Diff(INSERT,"//"), Diff(EQUAL,"						}¶"), Diff(INSERT,"//"), Diff(EQUAL,"						cw2.writeNext(nextLine.toArray(new String[1]));¶"), Diff(INSERT,"//"), Diff(EQUAL,"						nextLine = new ArrayList<>();¶"), Diff(INSERT,"//"), Diff(EQUAL,"						nextLine.add(student);¶"), Diff(INSERT,"//"), Diff(EQUAL,"						nextLine.add("");¶"), Diff(INSERT,"//"), Diff(EQUAL,"					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";
	private Map<String, Long[]> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			SimpleDateFormat df = new SimpleDateFormat("HH:mm");
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			cr.readNext();
			String[] token = null;
			while ((token = cr.readNext()) != null) {
				long startTime = df.parse(token[4]).getTime();
				if (startTime < 15*3600*1000) {
					startTime += 12*3600*1000;
				}
				long endTime = df.parse(token[5]).getTime();
				if (endTime < 15*3600*1000) {
					endTime += 12*3600*1000;
				}
				Long[] times = {startTime, endTime};
				timestamps.put(token[0], times);
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
//					if (!studentFolder.getName().equals("16")) {
//						synchronized (this) {
//							threadCount--;
//						}
//						latch.countDown();
//						return;
//					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							
							long startTimestamp = getLogFileCreationTime(file);
							long logStartTimestamp = startTimestamp;
//							long endTimestamp = Long.MAX_VALUE;
//							if (timestamps.containsKey(studentFolder.getName())) {
//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;
//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;
//							}
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
								webCommand = webCommandIterator.next();
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - logStartTimestamp;
							}
							for (EHICommand command : commands) {
//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {
//									continue;
//								}
								command.setStartTimestamp(logStartTimestamp);
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(logStartTimestamp);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - logStartTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								if (newCommands.size() == 0) {
									continue;
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+"Old.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"EventOld.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"DistributionOld.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistributionOld.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStatsBert.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearchesBert.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
//					nextLine.add(student);
					if (s.contains(" - Google Search")) {
						s = s.substring(0,s.indexOf(" - Google Search"));
					} 
					nextLine.add(s);
					cw2.writeNext(nextLine.toArray(new String[1]));

//					if (searches.get(s).size() == 0) {
//						nextLine.add("No Result");
//						cw2.writeNext(nextLine.toArray(new String[1]));
//						continue;
//					}
//					for (int i = 0; i < searches.get(s).size(); i++) {
//						String url = searches.get(s).get(i);
//						nextLine.add(titles.get(url));
//						nextLine.add(url);
//						nextLine.add(i+1+"");
//						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
//						if (contents.containsKey(url)) {
//							List<String> list = contents.get(url);
//							for (int j = 1; j < list.size(); j++) {
//								nextLine.add(list.get(j));
//							}
//						}
//						cw2.writeNext(nextLine.toArray(new String[1]));
//						nextLine = new ArrayList<>();
//						nextLine.add(student);
//						nextLine.add("");
//					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(last.getStartTimestamp());
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="500" _type="Insert" date="Mon Mar 01 20:47:09 EST 2021" docASTNodeCount="5959" docActiveCodeLength="34176" docExpressionCount="4106" docLength="37981" length="2" offset="10251" starttimestamp="1614649085217" timestamp="544526">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="505" _type="Insert" date="Mon Mar 01 20:47:10 EST 2021" docASTNodeCount="5954" docActiveCodeLength="34129" docExpressionCount="4102" docLength="37983" length="2" offset="10296" starttimestamp="1614649085217" timestamp="545159">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="509" _type="Insert" date="Mon Mar 01 20:47:10 EST 2021" docASTNodeCount="5949" docActiveCodeLength="34077" docExpressionCount="4098" docLength="37985" length="2" offset="10347" starttimestamp="1614649085217" timestamp="545680">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="511" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:47:13 EST 2021" docASTNodeCount="150" docActiveCodeLength="1197" docExpressionCount="90" docLength="2822" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="547933">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379108460000L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="546" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:47:50 EST 2021" docASTNodeCount="5949" docActiveCodeLength="34077" docExpressionCount="4098" docLength="37985" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="585487">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 15*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 15*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶//					if (!studentFolder.getName().equals("16")) {¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						latch.countDown();¶//						return;¶//					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶//							long endTimestamp = Long.MAX_VALUE;¶//							if (timestamps.containsKey(studentFolder.getName())) {¶//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;¶//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;¶//							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶//									continue;¶//								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶"), Diff(INSERT,"//"), Diff(EQUAL,"		createAssignData("Experiment", folder);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		createDistributionData("Experiment", folder);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+"Old.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"EventOld.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"DistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStatsBert.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearchesBert.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶//					nextLine.add(student);¶					if (s.contains(" - Google Search")) {¶						s = s.substring(0,s.indexOf(" - Google Search"));¶					} ¶					nextLine.add(s);¶					cw2.writeNext(nextLine.toArray(new String[1]));¶¶//					if (searches.get(s).size() == 0) {¶//						nextLine.add("No Result");¶//						cw2.writeNext(nextLine.toArray(new String[1]));¶//						continue;¶//					}¶//					for (int i = 0; i < searches.get(s).size(); i++) {¶//						String url = searches.get(s).get(i);¶//						nextLine.add(titles.get(url));¶//						nextLine.add(url);¶//						nextLine.add(i+1+"");¶//						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶//						if (contents.containsKey(url)) {¶//							List<String> list = contents.get(url);¶//							for (int j = 1; j < list.size(); j++) {¶//								nextLine.add(list.get(j));¶//							}¶//						}¶//						cw2.writeNext(nextLine.toArray(new String[1]));¶//						nextLine = new ArrayList<>();¶//						nextLine.add(student);¶//						nextLine.add("");¶//					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";
	private Map<String, Long[]> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			SimpleDateFormat df = new SimpleDateFormat("HH:mm");
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			cr.readNext();
			String[] token = null;
			while ((token = cr.readNext()) != null) {
				long startTime = df.parse(token[4]).getTime();
				if (startTime < 15*3600*1000) {
					startTime += 12*3600*1000;
				}
				long endTime = df.parse(token[5]).getTime();
				if (endTime < 15*3600*1000) {
					endTime += 12*3600*1000;
				}
				Long[] times = {startTime, endTime};
				timestamps.put(token[0], times);
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
//					if (!studentFolder.getName().equals("16")) {
//						synchronized (this) {
//							threadCount--;
//						}
//						latch.countDown();
//						return;
//					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							
							long startTimestamp = getLogFileCreationTime(file);
							long logStartTimestamp = startTimestamp;
//							long endTimestamp = Long.MAX_VALUE;
//							if (timestamps.containsKey(studentFolder.getName())) {
//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;
//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;
//							}
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
								webCommand = webCommandIterator.next();
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - logStartTimestamp;
							}
							for (EHICommand command : commands) {
//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {
//									continue;
//								}
								command.setStartTimestamp(logStartTimestamp);
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(logStartTimestamp);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - logStartTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								if (newCommands.size() == 0) {
									continue;
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+"Old.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"EventOld.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"DistributionOld.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistributionOld.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStatsBert.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearchesBert.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
//					nextLine.add(student);
					if (s.contains(" - Google Search")) {
						s = s.substring(0,s.indexOf(" - Google Search"));
					} 
					nextLine.add(s);
					cw2.writeNext(nextLine.toArray(new String[1]));

//					if (searches.get(s).size() == 0) {
//						nextLine.add("No Result");
//						cw2.writeNext(nextLine.toArray(new String[1]));
//						continue;
//					}
//					for (int i = 0; i < searches.get(s).size(); i++) {
//						String url = searches.get(s).get(i);
//						nextLine.add(titles.get(url));
//						nextLine.add(url);
//						nextLine.add(i+1+"");
//						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
//						if (contents.containsKey(url)) {
//							List<String> list = contents.get(url);
//							for (int j = 1; j < list.size(); j++) {
//								nextLine.add(list.get(j));
//							}
//						}
//						cw2.writeNext(nextLine.toArray(new String[1]));
//						nextLine = new ArrayList<>();
//						nextLine.add(student);
//						nextLine.add("");
//					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(last.getStartTimestamp());
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <Command __id="595" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:49:03 EST 2021" docASTNodeCount="6305" docActiveCodeLength="36390" docExpressionCount="4229" docLength="36445" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="658742">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	protected static final String REST_INSESSION = "Rest(In Session)";
	protected static final String REST_ENDSESSION = "Rest(End Session)";
	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	protected static final String XML_START1 = "<Events startTimestamp=\"";
	protected static final String XML_START2 = "\" logVersion=\"";
	protected static final String XML_VERSION = "1.0.0.202008151525";
	protected static final String XML_START3 = "\">\r\n";
	protected static final String XML_FILE_ENDING = "\r\n</Events>"; 
	protected static final long ONE_SECOND = 1000;
	protected static final long ONE_MIN = 60*1000;
	protected static final long TEN_MIN = 10*ONE_MIN;
	protected static final long FIVE_MIN = 5*ONE_MIN;
	protected static final long HALF_MIN = ONE_MIN/2;
	protected static final long TWO_MIN = 2*ONE_MIN;
	protected static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	protected int threadCount = 0;
	protected CountDownLatch latch;
	protected Analyzer analyzer;
	private static final int THREAD_LIM = 3;
	private int count = 0;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};

	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	protected String getEventType(EHICommand command) {
		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		latch = new CountDownLatch(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					latch.countDown();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
								return;
							}
							try {
								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}finally {
								// TODO: handle finally clause
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
							}
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	protected boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			int k = 0;
			for(; k < commands.size(); k++) {
				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {
					break;
				}
			}
			for(; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	protected List<EHICommand> readWebCommands(File file){
		if (!file.exists()) {
			return null;
		}
		List<EHICommand> retVal = new ArrayList<>();
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(file));
			String nextLine;
			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");
			Date date;
			String keyword;
			String url;
			WebCommand webCommand;
			while ((nextLine = br.readLine()) != null) {
				try {
					String[] tokens = nextLine.split("\t");
					if (tokens.length >= 3) {
						date = format.parse(tokens[0]);
						keyword = tokens[1];
						url = tokens[2];
						if (keyword.contains("google.com/url?") || keyword.equals(url)) {
							continue;
						}
						webCommand = new WebCommand(keyword, url);
						webCommand.setTimestamp(date.getTime());
						retVal.add(0, webCommand);
					} else {
						System.out.println("Failed to parse WebCommand");
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return retVal;
	}
	
	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
	
	protected long getLogFileCreationTime(File file) {
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
		try {
			return df.parse(file.getName().substring(3, 27)).getTime();
		} catch (ParseException e) {
			e.printStackTrace();
			return 0;
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="597" _type="DiffBasedFileOpenCommand" date="Mon Mar 01 20:49:06 EST 2021" docASTNodeCount="5949" docActiveCodeLength="34077" docExpressionCount="4098" docLength="37985" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="661227">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 15*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 15*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶//					if (!studentFolder.getName().equals("16")) {¶//						synchronized (this) {¶//							threadCount--;¶//						}¶//						latch.countDown();¶//						return;¶//					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶//							long endTimestamp = Long.MAX_VALUE;¶//							if (timestamps.containsKey(studentFolder.getName())) {¶//								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - 60*ONE_MIN;¶//								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1] - 59*ONE_MIN;¶//							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶//								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶//									continue;¶//								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"RestOld"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+"Old.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"EventOld.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"DistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistributionOld.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStatsBert.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearchesBert.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶//					nextLine.add(student);¶					if (s.contains(" - Google Search")) {¶						s = s.substring(0,s.indexOf(" - Google Search"));¶					} ¶					nextLine.add(s);¶					cw2.writeNext(nextLine.toArray(new String[1]));¶¶//					if (searches.get(s).size() == 0) {¶//						nextLine.add("No Result");¶//						cw2.writeNext(nextLine.toArray(new String[1]));¶//						continue;¶//					}¶//					for (int i = 0; i < searches.get(s).size(); i++) {¶//						String url = searches.get(s).get(i);¶//						nextLine.add(titles.get(url));¶//						nextLine.add(url);¶//						nextLine.add(i+1+"");¶//						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶//						if (contents.containsKey(url)) {¶//							List<String> list = contents.get(url);¶//							for (int j = 1; j < list.size(); j++) {¶//								nextLine.add(list.get(j));¶//							}¶//						}¶//						cw2.writeNext(nextLine.toArray(new String[1]));¶//						nextLine = new ArrayList<>();¶//						nextLine.add(student);¶//						nextLine.add("");¶//					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"RestOld");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="607" _type="Delete" date="Mon Mar 01 20:49:13 EST 2021" docASTNodeCount="5949" docActiveCodeLength="34074" docExpressionCount="4098" docLength="37982" endLine="963" length="3" offset="34250" repeat="3" startLine="963" starttimestamp="1614649085217" timestamp="668033" timestamp2="668300">
    <text><![CDATA[Old]]></text>
  </DocumentChange>
  <DocumentChange __id="658" _type="Insert" date="Mon Mar 01 20:50:00 EST 2021" docASTNodeCount="5873" docActiveCodeLength="34033" docExpressionCount="4034" docLength="37984" length="2" offset="27493" starttimestamp="1614649085217" timestamp="715384">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="659" _type="Insert" date="Mon Mar 01 20:50:00 EST 2021" docASTNodeCount="5861" docActiveCodeLength="33986" docExpressionCount="4029" docLength="37986" length="2" offset="27538" starttimestamp="1614649085217" timestamp="715390">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="660" _type="Insert" date="Mon Mar 01 20:50:00 EST 2021" docASTNodeCount="5890" docActiveCodeLength="33943" docExpressionCount="4050" docLength="37988" length="2" offset="27589" starttimestamp="1614649085217" timestamp="715397">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="661" _type="Insert" date="Mon Mar 01 20:50:00 EST 2021" docASTNodeCount="5883" docActiveCodeLength="33903" docExpressionCount="4044" docLength="37990" length="2" offset="27636" starttimestamp="1614649085217" timestamp="715402">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="662" _type="Insert" date="Mon Mar 01 20:50:00 EST 2021" docASTNodeCount="5883" docActiveCodeLength="33903" docExpressionCount="4044" docLength="37992" length="2" offset="27680" starttimestamp="1614649085217" timestamp="715409">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="663" _type="Insert" date="Mon Mar 01 20:50:00 EST 2021" docASTNodeCount="5877" docActiveCodeLength="33869" docExpressionCount="4039" docLength="37994" length="2" offset="27727" starttimestamp="1614649085217" timestamp="715416">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="656" _type="PauseCommand" date="Mon Mar 01 20:49:59 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="714595">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8261]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="655" _type="SelectTextCommand" caretOffset="4421" date="Mon Mar 01 20:49:59 EST 2021" end="4421" start="4148" starttimestamp="1614649085217" timestamp="714595" />
  <Command __id="657" _type="SelectTextCommand" caretOffset="4421" date="Mon Mar 01 20:49:59 EST 2021" end="4421" start="4148" starttimestamp="1614649085217" timestamp="714596" />
  <Command __id="666" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:50:00 EST 2021" starttimestamp="1614649085217" timestamp="715447" />
  <Command __id="668" _type="PauseCommand" date="Mon Mar 01 20:50:11 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="726423">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10976]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="667" _type="SelectTextCommand" caretOffset="4915" date="Mon Mar 01 20:50:11 EST 2021" end="4915" start="4456" starttimestamp="1614649085217" timestamp="726423" />
  <Command __id="669" _type="SelectTextCommand" caretOffset="4915" date="Mon Mar 01 20:50:11 EST 2021" end="4915" start="4456" starttimestamp="1614649085217" timestamp="726423" />
  <Command __id="670" _type="MoveCaretCommand" caretOffset="4915" date="Mon Mar 01 20:50:11 EST 2021" docOffset="28268" starttimestamp="1614649085217" timestamp="726746" />
  <Command __id="671" _type="MoveCaretCommand" caretOffset="4915" date="Mon Mar 01 20:50:11 EST 2021" docOffset="28268" starttimestamp="1614649085217" timestamp="726746" />
  <Command __id="673" _type="PauseCommand" date="Mon Mar 01 20:50:15 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="729965">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3219]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="672" _type="SelectTextCommand" caretOffset="4905" date="Mon Mar 01 20:50:15 EST 2021" end="4905" start="4692" starttimestamp="1614649085217" timestamp="729965" />
  <Command __id="674" _type="SelectTextCommand" caretOffset="4905" date="Mon Mar 01 20:50:15 EST 2021" end="4905" start="4692" starttimestamp="1614649085217" timestamp="729965" />
  <Command __id="681" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:50:16 EST 2021" starttimestamp="1614649085217" timestamp="730883" />
  <Command __id="682" _type="MoveCaretCommand" caretOffset="4917" date="Mon Mar 01 20:50:17 EST 2021" docOffset="28270" starttimestamp="1614649085217" timestamp="731831" />
  <Command __id="683" _type="MoveCaretCommand" caretOffset="4917" date="Mon Mar 01 20:50:17 EST 2021" docOffset="28270" starttimestamp="1614649085217" timestamp="731831" />
  <Command __id="688" _type="PauseCommand" date="Mon Mar 01 20:50:25 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="740532">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1637]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="687" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Mon Mar 01 20:50:25 EST 2021" starttimestamp="1614649085217" timestamp="740532" />
  <Command __id="690" _type="PauseCommand" date="Mon Mar 01 20:50:38 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="753035">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[12503]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="689" _type="MoveCaretCommand" caretOffset="8572" date="Mon Mar 01 20:50:38 EST 2021" docOffset="36003" starttimestamp="1614649085217" timestamp="753035" />
  <Command __id="691" _type="MoveCaretCommand" caretOffset="8572" date="Mon Mar 01 20:50:38 EST 2021" docOffset="36003" starttimestamp="1614649085217" timestamp="753036" />
  <Command __id="692" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Mon Mar 01 20:50:39 EST 2021" starttimestamp="1614649085217" timestamp="753851" />
  <Command __id="694" _type="PauseCommand" date="Mon Mar 01 20:50:40 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="755374">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1523]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="693" _type="MoveCaretCommand" caretOffset="8975" date="Mon Mar 01 20:50:40 EST 2021" docOffset="36406" starttimestamp="1614649085217" timestamp="755374" />
  <Command __id="695" _type="MoveCaretCommand" caretOffset="8975" date="Mon Mar 01 20:50:40 EST 2021" docOffset="36406" starttimestamp="1614649085217" timestamp="755374" />
  <Command __id="696" _type="MoveCaretCommand" caretOffset="8962" date="Mon Mar 01 20:50:41 EST 2021" docOffset="36393" starttimestamp="1614649085217" timestamp="756168" />
  <Command __id="697" _type="MoveCaretCommand" caretOffset="8962" date="Mon Mar 01 20:50:41 EST 2021" docOffset="36393" starttimestamp="1614649085217" timestamp="756168" />
  <Command __id="699" _type="PauseCommand" date="Mon Mar 01 20:50:42 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="757430">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1262]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="698" _type="ShellCommand" date="Mon Mar 01 20:50:42 EST 2021" starttimestamp="1614649085217" timestamp="757430" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="701" _type="PauseCommand" date="Mon Mar 01 20:50:43 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="758505">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1075]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="700" _type="ShellCommand" date="Mon Mar 01 20:50:43 EST 2021" starttimestamp="1614649085217" timestamp="758505" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="702" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:50:43 EST 2021" starttimestamp="1614649085217" timestamp="758591" />
  <Command __id="703" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:50:43 EST 2021" starttimestamp="1614649085217" timestamp="758729" />
  <Command __id="704" _type="RunCommand" date="Mon Mar 01 20:50:43 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="758774" type="Run" />
  <Command __id="705" _type="RunCommand" date="Mon Mar 01 20:50:43 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="758774" type="Run" />
  <Command __id="706" _type="ConsoleOutput" date="Mon Mar 01 20:50:44 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="759713" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing Experiment student 33 to ExperimentWebStatsBert.csv¶Writing Experiment student 23 to ExperimentWebStatsBert.csv¶Writing Experiment student 24 to ExperimentWebStatsBert.csv"), Diff(INSERT,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="707" _type="ConsoleOutput" date="Mon Mar 01 20:50:45 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="759908" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-54-59-878"), Diff(INSERT,"09-53-29-705.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="708" _type="ConsoleOutput" date="Mon Mar 01 20:50:45 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="760245" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3-09-53-29-705"), Diff(INSERT,"2-15-05-47-820.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18"), Diff(INSERT,"22"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18\Eclipse\Rest\Log2013-09-17-10-06-32-24"), Diff(INSERT,"22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-55"), Diff(EQUAL,"2.xml¶")]]]></diff>
  </Command>
  <Command __id="709" _type="ConsoleOutput" date="Mon Mar 01 20:50:45 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="760340" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"26"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"26"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"5-05-47-820.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21"), Diff(INSERT,"4-39-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-05-18-718.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069"), Diff(INSERT,"5-33-03-226"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"14-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(INSERT,"20-10-17-49-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="710" _type="ConsoleOutput" date="Mon Mar 01 20:50:45 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="760447" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"-14-3"), Diff(DELETE,"9-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071"), Diff(INSERT,"0-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="711" _type="ConsoleOutput" date="Mon Mar 01 20:50:45 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="760530" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-2"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"4-30-38-37"), Diff(INSERT,"2-56-55-221.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-82"), Diff(EQUAL,"9.xml¶")]]]></diff>
  </Command>
  <Command __id="712" _type="ConsoleOutput" date="Mon Mar 01 20:50:45 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="760630" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"31\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"3-12-"), Diff(DELETE,"56-55-221"), Diff(INSERT,"11-53-568.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest has 1"), Diff(INSERT,"8"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"-09-"), Diff(DELETE,"11-15-13-48-829"), Diff(INSERT,"26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="713" _type="ConsoleOutput" date="Mon Mar 01 20:50:45 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="760704" type="ConsoleOutput">
    <outputString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
ExceptionCommand EHException  EventLogger utility command
Writing Experiment student 22 to ExperimentWebStatsBert.csv
Writing Experiment student 33 to ExperimentWebStatsBert.csv
Writing Experiment student 23 to ExperimentWebStatsBert.csv
Writing Experiment student 24 to ExperimentWebStatsBert.csv
Writing Experiment student 26 to ExperimentWebStatsBert.csv
Writing Experiment student 16 to ExperimentWebStatsBert.csv
Writing Experiment student 27 to ExperimentWebStatsBert.csv
Writing Experiment student 17 to ExperimentWebStatsBert.csv
Writing Experiment student 28 to ExperimentWebStatsBert.csv
Writing Experiment student 18 to ExperimentWebStatsBert.csv
Writing Experiment student 29 to ExperimentWebStatsBert.csv
Writing Experiment student 19 to ExperimentWebStatsBert.csv
Writing Experiment student pd1 to ExperimentWebStatsBert.csv
Writing Experiment student 30 to ExperimentWebStatsBert.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading "), Diff(DELETE,"student Eclipse¶Particpant"), Diff(INSERT,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest\Log201"), Diff(DELETE,"3-09-06-16"), Diff(INSERT,"4-10-04"), Diff(EQUAL,"-0"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"-4"), Diff(DELETE,"0-790"), Diff(INSERT,"7-36-829"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant"), Diff(INSERT,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-10-04-10-08-45-537.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3-09-13"), Diff(INSERT,"4-10-04"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"0"), Diff(EQUAL,"-11-"), Diff(DELETE,"53-5"), Diff(INSERT,"06-"), Diff(EQUAL,"68"), Diff(INSERT,"0"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant"), Diff(INSERT,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 2 file(s)"), Diff(INSERT,"\Log2014-10-04-11-01-19-061.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02-12-12-35"), Diff(INSERT,"4-10-04-11-54"), Diff(EQUAL,"-18-"), Diff(DELETE,"86"), Diff(INSERT,"23"), Diff(EQUAL,"2.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02-12"), Diff(INSERT,"4-10-04"), Diff(EQUAL,"-12-"), Diff(DELETE,"57-56-864"), Diff(INSERT,"11-54-779"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)"), Diff(INSERT,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26-10-09-23-822.xml¶Reading"), Diff(INSERT,"10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2"), Diff(EQUAL,"\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26"), Diff(INSERT,"10-04"), Diff(EQUAL,"-1"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-3"), Diff(DELETE,"0-44-271.xml"), Diff(INSERT,"8-06-627.xml¶ExceptionCommand EHException  EventLogger utility command¶Writing Experiment student 22 to ExperimentWebStatsBert.csv¶Writing Experiment student 33 to ExperimentWebStatsBert.csv¶Writing Experiment student 23 to ExperimentWebStatsBert.csv¶Writing Experiment student 24 to ExperimentWebStatsBert.csv¶Writing Experiment student 26 to ExperimentWebStatsBert.csv¶Writing Experiment student 16 to ExperimentWebStatsBert.csv¶Writing Experiment student 27 to ExperimentWebStatsBert.csv¶Writing Experiment student 17 to ExperimentWebStatsBert.csv¶Writing Experiment student 28 to ExperimentWebStatsBert.csv¶Writing Experiment student 18 to ExperimentWebStatsBert.csv¶Writing Experiment student 29 to ExperimentWebStatsBert.csv¶Writing Experiment student 19 to ExperimentWebStatsBert.csv¶Writing Experiment student pd1 to ExperimentWebStatsBert.csv¶Writing Experiment student 30 to ExperimentWebStatsBert.csv"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="714" _type="ConsoleOutput" date="Mon Mar 01 20:50:45 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="760760" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 20 to ExperimentWebStatsBert.csv
Writing Experiment student 31 to ExperimentWebStatsBert.csv
Writing Experiment student 21 to ExperimentWebStatsBert.csv
Writing Experiment student 32 to ExperimentWebStatsBert.csv
Writing Experiment student pd2 to ExperimentWebStatsBert.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml¶ExceptionCommand EHException  EventLogger utility command¶Writing Experiment student 22 to ExperimentWebStatsBert.csv¶Writing Experiment student 33 to ExperimentWebStatsBert.csv¶Writing Experiment student 23 to ExperimentWebStatsBert.csv¶Writing Experiment student 24 to ExperimentWebStatsBert.csv¶Writing Experiment student 26 to ExperimentWebStatsBert.csv¶Writing Experiment student 16 to ExperimentWebStatsBert.csv¶Writing Experiment student 27 to ExperimentWebStatsBert.csv¶Writing Experiment student 17"), Diff(INSERT,"Writing Experiment student 20 to ExperimentWebStatsBert.csv¶Writing Experiment student 31 to ExperimentWebStatsBert.csv¶Writing Experiment student 21"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶Writing Experiment student "), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"8"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶Writing Experiment student "), Diff(DELETE,"18 to ExperimentWebStatsBert.csv¶Writing Experiment student 29 to ExperimentWebStatsBert.csv¶Writing Experiment student 19 to ExperimentWebStatsBert.csv¶Writing Experiment student pd1 to ExperimentWebStatsBert.csv¶Writing Experiment student 30"), Diff(INSERT,"pd2"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶")]]]></diff>
  </Command>
  <Command __id="715" _type="RunCommand" date="Mon Mar 01 20:50:46 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="760890" type="Run" />
  <Command __id="716" _type="RunCommand" date="Mon Mar 01 20:50:46 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="760890" type="Run" />
  <Command __id="717" _type="ShellCommand" date="Mon Mar 01 20:50:47 EST 2021" starttimestamp="1614649085217" timestamp="761835" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="719" _type="PauseCommand" date="Mon Mar 01 20:50:51 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="766247">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4412]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="718" _type="ShellCommand" date="Mon Mar 01 20:50:51 EST 2021" starttimestamp="1614649085217" timestamp="766247" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="720" _type="ShellCommand" date="Mon Mar 01 20:50:51 EST 2021" starttimestamp="1614649085217" timestamp="766434" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="722" _type="PauseCommand" date="Mon Mar 01 20:51:03 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="777866">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11432]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="721" _type="ShellCommand" date="Mon Mar 01 20:51:03 EST 2021" starttimestamp="1614649085217" timestamp="777866" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="724" _type="PauseCommand" date="Mon Mar 01 20:51:16 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="791289">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13423]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="723" _type="MoveCaretCommand" caretOffset="2544" date="Mon Mar 01 20:51:16 EST 2021" docOffset="25897" starttimestamp="1614649085217" timestamp="791289" />
  <Command __id="725" _type="MoveCaretCommand" caretOffset="2544" date="Mon Mar 01 20:51:16 EST 2021" docOffset="25897" starttimestamp="1614649085217" timestamp="791289" />
  <Command __id="726" _type="MoveCaretCommand" caretOffset="2543" date="Mon Mar 01 20:51:16 EST 2021" docOffset="25896" starttimestamp="1614649085217" timestamp="791741" />
  <Command __id="727" _type="MoveCaretCommand" caretOffset="2543" date="Mon Mar 01 20:51:16 EST 2021" docOffset="25896" starttimestamp="1614649085217" timestamp="791741" />
  <Command __id="728" _type="MoveCaretCommand" caretOffset="2543" date="Mon Mar 01 20:51:17 EST 2021" docOffset="25896" starttimestamp="1614649085217" timestamp="791945" />
  <Command __id="729" _type="MoveCaretCommand" caretOffset="2543" date="Mon Mar 01 20:51:17 EST 2021" docOffset="25896" starttimestamp="1614649085217" timestamp="791945" />
  <Command __id="730" _type="SelectTextCommand" caretOffset="2641" date="Mon Mar 01 20:51:17 EST 2021" end="2641" start="2524" starttimestamp="1614649085217" timestamp="792115" />
  <Command __id="731" _type="SelectTextCommand" caretOffset="2641" date="Mon Mar 01 20:51:17 EST 2021" end="2641" start="2524" starttimestamp="1614649085217" timestamp="792115" />
  <Command __id="732" _type="CopyCommand" date="Mon Mar 01 20:51:18 EST 2021" starttimestamp="1614649085217" timestamp="792944" />
  <Command __id="733" _type="MoveCaretCommand" caretOffset="2541" date="Mon Mar 01 20:51:18 EST 2021" docOffset="25894" starttimestamp="1614649085217" timestamp="793503" />
  <Command __id="734" _type="MoveCaretCommand" caretOffset="2541" date="Mon Mar 01 20:51:18 EST 2021" docOffset="25894" starttimestamp="1614649085217" timestamp="793503" />
  <Command __id="736" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:51:19 EST 2021" starttimestamp="1614649085217" timestamp="794367" />
  <Command __id="737" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Mar 01 20:51:20 EST 2021" starttimestamp="1614649085217" timestamp="794862" />
  <Command __id="739" _type="InsertStringCommand" date="Mon Mar 01 20:51:20 EST 2021" starttimestamp="1614649085217" timestamp="795044" timestamp2="795044">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="740" _type="InsertStringCommand" date="Mon Mar 01 20:51:20 EST 2021" starttimestamp="1614649085217" timestamp="795044" timestamp2="795044">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="742" _type="PasteCommand" date="Mon Mar 01 20:51:20 EST 2021" starttimestamp="1614649085217" timestamp="795448" />
  <Command __id="744" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Mar 01 20:51:21 EST 2021" starttimestamp="1614649085217" timestamp="796302" />
  <Command __id="746" _type="PauseCommand" date="Mon Mar 01 20:51:24 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="799126">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2824]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="745" _type="SelectTextCommand" caretOffset="2672" date="Mon Mar 01 20:51:24 EST 2021" end="2672" start="2666" starttimestamp="1614649085217" timestamp="799126" />
  <Command __id="747" _type="SelectTextCommand" caretOffset="2672" date="Mon Mar 01 20:51:24 EST 2021" end="2672" start="2666" starttimestamp="1614649085217" timestamp="799127" />
  <Command __id="749" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:51:24 EST 2021" starttimestamp="1614649085217" timestamp="799505" />
  <Command __id="750" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:51:24 EST 2021" starttimestamp="1614649085217" timestamp="799506" />
  <Command __id="752" _type="PauseCommand" date="Mon Mar 01 20:51:27 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="802158">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2652]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="751" _type="SelectTextCommand" caretOffset="2750" date="Mon Mar 01 20:51:27 EST 2021" end="2750" start="2679" starttimestamp="1614649085217" timestamp="802158" />
  <Command __id="753" _type="SelectTextCommand" caretOffset="2750" date="Mon Mar 01 20:51:27 EST 2021" end="2750" start="2679" starttimestamp="1614649085217" timestamp="802158" />
  <Command __id="755" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:51:27 EST 2021" starttimestamp="1614649085217" timestamp="802182" />
  <Command __id="756" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Mar 01 20:51:27 EST 2021" starttimestamp="1614649085217" timestamp="802183" />
  <Command __id="762" _type="PauseCommand" date="Mon Mar 01 20:51:30 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="804995">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1484]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="761" _type="RunCommand" date="Mon Mar 01 20:51:30 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="804995" type="Run" />
  <Command __id="763" _type="RunCommand" date="Mon Mar 01 20:51:30 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="804995" type="Run" />
  <Command __id="764" _type="ConsoleOutput" date="Mon Mar 01 20:51:31 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="805835" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing Experiment student 20 to ExperimentWebStatsBert.csv¶Writing Experiment student 31 to Exp"), Diff(INSERT,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"ntWebStatsBert.csv¶Writing Experiment student 21 to ExperimentWebStatsBert.csv¶Writing Experiment student 32 to ExperimentWebStatsBert.csv¶Writing Exp"), Diff(INSERT,"s\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\H"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"nt student pd2 to ExperimentWebStatsBert.csv"), Diff(INSERT,"s\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="765" _type="ConsoleOutput" date="Mon Mar 01 20:51:31 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="806090" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-54-59-878"), Diff(INSERT,"09-53-29-705.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="766" _type="ShellCommand" date="Mon Mar 01 20:51:31 EST 2021" starttimestamp="1614649085217" timestamp="806235" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="767" _type="ConsoleOutput" date="Mon Mar 01 20:51:31 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="806311" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3-09-53-29-705"), Diff(INSERT,"2-15-05-47-820.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"2"), Diff(EQUAL,"1"), Diff(DELETE,"8"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"2"), Diff(EQUAL,"1"), Diff(DELETE,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"7"), Diff(INSERT,"6"), Diff(EQUAL,"-10-0"), Diff(DELETE,"6-32-242"), Diff(INSERT,"5-18-718"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="768" _type="ConsoleOutput" date="Mon Mar 01 20:51:31 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="806375" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20"), Diff(INSERT,"22"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"5"), Diff(EQUAL,"-1"), Diff(DELETE,"0-40-05-321.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718"), Diff(INSERT,"5-38-06-069"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="769" _type="ConsoleOutput" date="Mon Mar 01 20:51:31 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="806448" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2\Eclipse\Rest has 1"), Diff(INSERT,"3\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"5"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"2-59"), Diff(EQUAL,"-3"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"-0"), Diff(DELETE,"6-069"), Diff(INSERT,"52.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="770" _type="ConsoleOutput" date="Mon Mar 01 20:51:31 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="806544" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(INSERT,"18-"), Diff(EQUAL,"14-"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"9-"), Diff(DELETE,"48-24-508"), Diff(INSERT,"04-982"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-54-4"), Diff(INSERT,"5-33-0"), Diff(EQUAL,"3-2"), Diff(INSERT,"2"), Diff(EQUAL,"6"), Diff(DELETE,"7"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552"), Diff(INSERT,"20-10-17-49-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="771" _type="ConsoleOutput" date="Mon Mar 01 20:51:31 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="806649" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"-14-3"), Diff(DELETE,"9-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071"), Diff(INSERT,"0-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="772" _type="ConsoleOutput" date="Mon Mar 01 20:51:31 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="806778" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-2"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"4-30-38-379.xml"), Diff(INSERT,"2-56-55-221.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml¶Reading student Eclipse"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="773" _type="ConsoleOutput" date="Mon Mar 01 20:51:32 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="806833" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml¶"), Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"3-12-"), Diff(DELETE,"56-55-221"), Diff(INSERT,"11-53-568"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3"), Diff(INSERT,"5"), Diff(EQUAL,"-0"), Diff(DELETE,"9"), Diff(INSERT,"2"), Diff(EQUAL,"-1"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"-1"), Diff(DELETE,"5-13-48-829.xml¶Reading student Eclipse"), Diff(INSERT,"2-35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="774" _type="ConsoleOutput" date="Mon Mar 01 20:51:32 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="806899" type="ConsoleOutput">
    <outputString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
ExceptionCommand EHException  EventLogger utility command
Writing Experiment student 22 to ExperimentWebStatsBert.csv
Writing Experiment student 33 to ExperimentWebStatsBert.csv
Writing Experiment student 23 to ExperimentWebStatsBert.csv
Writing Experiment student 24 to ExperimentWebStatsBert.csv
Writing Experiment student 26 to ExperimentWebStatsBert.csv
Writing Experiment student 16 to ExperimentWebStatsBert.csv
Writing Experiment student 27 to ExperimentWebStatsBert.csv
Writing Experiment student 17 to ExperimentWebStatsBert.csv
Writing Experiment student 28 to ExperimentWebStatsBert.csv
Writing Experiment student 18 to ExperimentWebStatsBert.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Particpant"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest\Log201"), Diff(DELETE,"3-09-06-16-07-40-790.xml¶Reading student Eclipse¶Particpant"), Diff(INSERT,"4-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3-09-13-12-11-53-568.xml¶Reading student Eclipse¶Particpant"), Diff(INSERT,"4-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 2 file(s)"), Diff(INSERT,"\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5"), Diff(INSERT,"4-10"), Diff(EQUAL,"-0"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"5"), Diff(EQUAL,"-3"), Diff(DELETE,"5-18-862"), Diff(INSERT,"8-180"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02"), Diff(INSERT,"4-10-04"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"2-57-56-864"), Diff(INSERT,"7-08-589"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest has 1"), Diff(DELETE,"8"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26-10-09-23-822.xml"), Diff(INSERT,"10-04-13-38-06-627.xml¶ExceptionCommand EHException  EventLogger utility command¶Writing Experiment student 22 to ExperimentWebStatsBert.csv¶Writing Experiment student 33 to ExperimentWebStatsBert.csv¶Writing Experiment student 23 to ExperimentWebStatsBert.csv¶Writing Experiment student 24 to ExperimentWebStatsBert.csv¶Writing Experiment student 26 to ExperimentWebStatsBert.csv¶Writing Experiment student 16 to ExperimentWebStatsBert.csv¶Writing Experiment student 27 to ExperimentWebStatsBert.csv¶Writing Experiment student 17 to ExperimentWebStatsBert.csv¶Writing Experiment student 28 to ExperimentWebStatsBert.csv¶Writing Experiment student 18 to ExperimentWebStatsBert.csv"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="775" _type="ConsoleOutput" date="Mon Mar 01 20:51:32 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="807007" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 29 to ExperimentWebStatsBert.csv
Writing Experiment student 19 to ExperimentWebStatsBert.csv
Writing Experiment student pd1 to ExperimentWebStatsBert.csv
Writing Experiment student 30 to ExperimentWebStatsBert.csv
Writing Experiment student 20 to ExperimentWebStatsBert.csv
Writing Experiment student 31 to ExperimentWebStatsBert.csv
Writing Experiment student 21 to ExperimentWebStatsBert.csv
Writing Experiment student 32 to ExperimentWebStatsBert.csv
Writing Experiment student pd2 to ExperimentWebStatsBert.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml¶ExceptionCommand EHException  EventLogger utility command¶Writing Experiment student 22 to ExperimentWebStatsBert.csv¶Writing Experiment student 33 to ExperimentWebStatsBert.csv¶Writing Experiment student 23"), Diff(INSERT,"Writing Experiment student 29 to ExperimentWebStatsBert.csv¶Writing Experiment student 19 to ExperimentWebStatsBert.csv¶Writing Experiment student pd1"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶Writing Experiment student "), Diff(DELETE,"24"), Diff(INSERT,"30"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶Writing Experiment student 2"), Diff(DELETE,"6"), Diff(INSERT,"0"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶Writing Experiment student "), Diff(INSERT,"3"), Diff(EQUAL,"1"), Diff(DELETE,"6"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶Writing Experiment student 2"), Diff(DELETE,"7"), Diff(INSERT,"1"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶Writing Experiment student "), Diff(DELETE,"17"), Diff(INSERT,"32"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶Writing Experiment student "), Diff(DELETE,"28 to ExperimentWebStatsBert.csv¶Writing Experiment student 18"), Diff(INSERT,"pd2"), Diff(EQUAL," to ExperimentWebStatsBert.csv¶")]]]></diff>
  </Command>
  <Command __id="776" _type="RunCommand" date="Mon Mar 01 20:51:32 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="807092" type="Run" />
  <Command __id="777" _type="RunCommand" date="Mon Mar 01 20:51:32 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="807092" type="Run" />
  <Command __id="779" _type="PauseCommand" date="Mon Mar 01 20:52:32 EST 2021" range="1m-2m" starttimestamp="1614649085217" timestamp="867386">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[60294]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="778" _type="ShellCommand" date="Mon Mar 01 20:52:32 EST 2021" starttimestamp="1614649085217" timestamp="867386" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="780" _type="ShellCommand" date="Mon Mar 01 20:52:33 EST 2021" starttimestamp="1614649085217" timestamp="868195" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="782" _type="PauseCommand" date="Mon Mar 01 20:52:38 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="873136">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4941]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="781" _type="ShellCommand" date="Mon Mar 01 20:52:38 EST 2021" starttimestamp="1614649085217" timestamp="873136" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="784" _type="PauseCommand" date="Mon Mar 01 20:52:39 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="874664">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1528]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="783" _type="ShellCommand" date="Mon Mar 01 20:52:39 EST 2021" starttimestamp="1614649085217" timestamp="874664" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="786" _type="PauseCommand" date="Mon Mar 01 20:52:42 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="877400">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2736]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="785" _type="ShellCommand" date="Mon Mar 01 20:52:42 EST 2021" starttimestamp="1614649085217" timestamp="877400" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="787" _type="MoveCaretCommand" caretOffset="2154" date="Mon Mar 01 20:52:42 EST 2021" docOffset="25507" starttimestamp="1614649085217" timestamp="877478" />
  <Command __id="788" _type="MoveCaretCommand" caretOffset="2154" date="Mon Mar 01 20:52:42 EST 2021" docOffset="25507" starttimestamp="1614649085217" timestamp="877478" />
  <Command __id="791" _type="PauseCommand" date="Mon Mar 01 20:52:48 EST 2021" range="5s-10s" starttimestamp="1614649085217" timestamp="883461">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5983]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="790" _type="ShellCommand" date="Mon Mar 01 20:52:48 EST 2021" starttimestamp="1614649085217" timestamp="883461" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="793" _type="PauseCommand" date="Mon Mar 01 20:52:52 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="887665">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4204]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="792" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:52:52 EST 2021" forward="true" matchWord="false" offset="25507" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="887665" wrapSearch="true">
    <searchString><![CDATA[provided]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="795" _type="PauseCommand" date="Mon Mar 01 20:52:54 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="888817">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1152]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="794" _type="FindCommand" caseSensitive="false" date="Mon Mar 01 20:52:54 EST 2021" forward="true" matchWord="false" offset="25871" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614649085217" timestamp="888817" wrapSearch="true">
    <searchString><![CDATA[provided]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="797" _type="PauseCommand" date="Mon Mar 01 20:52:55 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="890708">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1891]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="796" _type="ShellCommand" date="Mon Mar 01 20:52:55 EST 2021" starttimestamp="1614649085217" timestamp="890708" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="799" _type="PauseCommand" date="Mon Mar 01 20:53:00 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="895198">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4490]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="798" _type="ShellCommand" date="Mon Mar 01 20:53:00 EST 2021" starttimestamp="1614649085217" timestamp="895198" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="801" _type="PauseCommand" date="Mon Mar 01 20:53:01 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="896464">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1266]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="800" _type="ShellCommand" date="Mon Mar 01 20:53:01 EST 2021" starttimestamp="1614649085217" timestamp="896464" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="803" _type="PauseCommand" date="Mon Mar 01 20:53:03 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="898135">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1671]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="802" _type="MoveCaretCommand" caretOffset="6432" date="Mon Mar 01 20:53:03 EST 2021" docOffset="29785" starttimestamp="1614649085217" timestamp="898135" />
  <Command __id="804" _type="MoveCaretCommand" caretOffset="6432" date="Mon Mar 01 20:53:03 EST 2021" docOffset="29785" starttimestamp="1614649085217" timestamp="898135" />
  <Command __id="806" _type="PauseCommand" date="Mon Mar 01 20:53:14 EST 2021" range="10s-20s" starttimestamp="1614649085217" timestamp="909145">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11010]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="805" _type="SelectTextCommand" caretOffset="4702" date="Mon Mar 01 20:53:14 EST 2021" end="4702" start="4498" starttimestamp="1614649085217" timestamp="909145" />
  <Command __id="807" _type="SelectTextCommand" caretOffset="4702" date="Mon Mar 01 20:53:14 EST 2021" end="4702" start="4498" starttimestamp="1614649085217" timestamp="909145" />
  <Command __id="808" _type="MoveCaretCommand" caretOffset="4739" date="Mon Mar 01 20:53:14 EST 2021" docOffset="28092" starttimestamp="1614649085217" timestamp="909560" />
  <Command __id="809" _type="MoveCaretCommand" caretOffset="4739" date="Mon Mar 01 20:53:14 EST 2021" docOffset="28092" starttimestamp="1614649085217" timestamp="909561" />
  <Command __id="811" _type="PauseCommand" date="Mon Mar 01 20:53:18 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="912815">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3254]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="810" _type="SelectTextCommand" caretOffset="4703" date="Mon Mar 01 20:53:18 EST 2021" end="4703" start="4574" starttimestamp="1614649085217" timestamp="912815" />
  <Command __id="812" _type="SelectTextCommand" caretOffset="4703" date="Mon Mar 01 20:53:18 EST 2021" end="4703" start="4574" starttimestamp="1614649085217" timestamp="912815" />
  <Command __id="814" _type="PauseCommand" date="Mon Mar 01 20:53:19 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="914256">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1441]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="818" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Mon Mar 01 20:53:19 EST 2021" starttimestamp="1614649085217" timestamp="914298" />
  <Command __id="820" _type="PauseCommand" date="Mon Mar 01 20:53:20 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="915752">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1454]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="819" _type="MoveCaretCommand" caretOffset="4706" date="Mon Mar 01 20:53:20 EST 2021" docOffset="28059" starttimestamp="1614649085217" timestamp="915752" />
  <Command __id="821" _type="MoveCaretCommand" caretOffset="4706" date="Mon Mar 01 20:53:20 EST 2021" docOffset="28059" starttimestamp="1614649085217" timestamp="915752" />
  <Command __id="822" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Mar 01 20:53:21 EST 2021" starttimestamp="1614649085217" timestamp="916631" />
  <Command __id="823" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:53:21 EST 2021" starttimestamp="1614649085217" timestamp="916723" />
  <Command __id="824" _type="EclipseCommand" commandID="" date="Mon Mar 01 20:53:22 EST 2021" starttimestamp="1614649085217" timestamp="916838" />
  <Command __id="826" _type="PauseCommand" date="Mon Mar 01 20:53:23 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="917848">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1010]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="825" _type="ShellCommand" date="Mon Mar 01 20:53:23 EST 2021" starttimestamp="1614649085217" timestamp="917848" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="828" _type="PauseCommand" date="Mon Mar 01 20:53:24 EST 2021" range="1s-2s" starttimestamp="1614649085217" timestamp="918901">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1053]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="827" _type="ShellCommand" date="Mon Mar 01 20:53:24 EST 2021" starttimestamp="1614649085217" timestamp="918901" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="829" _type="RunCommand" date="Mon Mar 01 20:53:24 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="919550" type="Run" />
  <Command __id="830" _type="RunCommand" date="Mon Mar 01 20:53:24 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="919550" type="Run" />
  <Command __id="831" _type="ConsoleOutput" date="Mon Mar 01 20:53:25 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="920370" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing Experiment student 29 to ExperimentWebStatsBert.csv¶Writing Experiment student 19 to ExperimentWebStatsBert.csv¶Writing Experiment student pd1 to ExperimentWebStatsBert.csv¶Writing Exp"), Diff(INSERT,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"nt student 30 to Exp"), Diff(INSERT,"s\git\H"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"ntWebStatsBert.csv¶Writing Exp"), Diff(INSERT,"s\H"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"nt student 20 to ExperimentWebStatsBert.csv¶Writing Experiment student 31 to ExperimentWebStatsBert.csv¶Writing Experiment student 21 to ExperimentWebStatsBert.csv¶Writing Exp"), Diff(INSERT,"s\data\ExperimentalData\16\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\H"), Diff(EQUAL,"er"), Diff(DELETE,"i"), Diff(EQUAL,"me"), Diff(DELETE,"nt student 32 to ExperimentWebStatsBert.csv¶Writing Experiment student pd2 to ExperimentWebStatsBert.csv"), Diff(INSERT,"s\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="832" _type="ConsoleOutput" date="Mon Mar 01 20:53:25 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="920657" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-54-59-878.xml"), Diff(INSERT,"09-53-29-705.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml¶Reading student Eclipse"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="833" _type="ConsoleOutput" date="Mon Mar 01 20:53:25 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="920716" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3-09-53-29-705.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242"), Diff(INSERT,"2-15-05-47-820"), Diff(EQUAL,".xml¶Reading student Eclipse¶")]]]></diff>
  </Command>
  <Command __id="834" _type="ConsoleOutput" date="Mon Mar 01 20:53:25 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="920768" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-12-1"), Diff(DELETE,"5-05-47-820.xml¶Reading student Eclipse"), Diff(INSERT,"0-40-05-321.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="835" _type="ConsoleOutput" date="Mon Mar 01 20:53:26 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="920828" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"6"), Diff(EQUAL,"-10-"), Diff(DELETE,"40-05-321"), Diff(INSERT,"05-18-718.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="836" _type="ConsoleOutput" date="Mon Mar 01 20:53:26 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="920992" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"3\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"4"), Diff(EQUAL,"-10-"), Diff(DELETE,"05-18-718"), Diff(INSERT,"54-43-267"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"5-15-38-06-069.xml"), Diff(INSERT,"4-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml¶Reading student Eclipse"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="837" _type="ConsoleOutput" date="Mon Mar 01 20:53:26 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="921048" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(INSERT,"18-"), Diff(EQUAL,"14-"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"9-"), Diff(DELETE,"48-24-508"), Diff(INSERT,"04-982"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-54-4"), Diff(INSERT,"5-33-0"), Diff(EQUAL,"3-"), Diff(INSERT,"2"), Diff(EQUAL,"26"), Diff(DELETE,"7"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml¶Reading student Eclipse"), Diff(INSERT,"20-10-17-49-071.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="838" _type="ConsoleOutput" date="Mon Mar 01 20:53:26 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="921148" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶"), Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-20-1"), Diff(DELETE,"0-17-49-071"), Diff(INSERT,"4-30-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="839" _type="ConsoleOutput" date="Mon Mar 01 20:53:26 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="921230" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-2"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"4-30-38-37"), Diff(INSERT,"2-56-55-221.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-82"), Diff(EQUAL,"9.xml¶")]]]></diff>
  </Command>
  <Command __id="840" _type="ConsoleOutput" date="Mon Mar 01 20:53:26 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="921353" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"31\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"3-12-"), Diff(DELETE,"56-55-221"), Diff(INSERT,"11-53-568.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest has 1"), Diff(INSERT,"8"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30\Eclipse\Rest\Log2013-09-11-15-13-48-829"), Diff(INSERT,"pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="841" _type="ConsoleOutput" date="Mon Mar 01 20:53:26 EST 2021" overflow="false" starttimestamp="1614649085217" timestamp="921430" type="ConsoleOutput">
    <outputString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
ExceptionCommand EHException  EventLogger utility command
Writing Experiment student 22 to ExperimentWebStatsBert.csv
Writing Experiment student 33 to ExperimentWebStatsBert.csv
Writing Experiment student 23 to ExperimentWebStatsBert.csv
Writing Experiment student 24 to ExperimentWebStatsBert.csv
Writing Experiment student 26 to ExperimentWebStatsBert.csv
Writing Experiment student 16 to ExperimentWebStatsBert.csv
Writing Experiment student 27 to ExperimentWebStatsBert.csv
Writing Experiment student 17 to ExperimentWebStatsBert.csv
Writing Experiment student 28 to ExperimentWebStatsBert.csv
Writing Experiment student 18 to ExperimentWebStatsBert.csv
Writing Experiment student 29 to ExperimentWebStatsBert.csv
Writing Experiment student 19 to ExperimentWebStatsBert.csv
Writing Experiment student pd1 to ExperimentWebStatsBert.csv
Writing Experiment student 30 to ExperimentWebStatsBert.csv
Writing Experiment student 20 to ExperimentWebStatsBert.csv
Writing Experiment student 31 to ExperimentWebStatsBert.csv
Writing Experiment student 21 to ExperimentWebStatsBert.csv
Writing Experiment student 32 to ExperimentWebStatsBert.csv
Writing Experiment student pd2 to ExperimentWebStatsBert.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-10-04-11-54-18-232.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest\Log201"), Diff(DELETE,"3-09"), Diff(INSERT,"4-10"), Diff(EQUAL,"-0"), Diff(DELETE,"6"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"6-07-40-790"), Diff(INSERT,"2-11-54-779"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-10-04-12-53-09-775.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3"), Diff(INSERT,"4-10"), Diff(EQUAL,"-0"), Diff(DELETE,"9"), Diff(INSERT,"4"), Diff(EQUAL,"-13-"), Diff(DELETE,"12-11-53-568"), Diff(INSERT,"06-57-784"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 2 file(s)"), Diff(INSERT,"\Log2014-10-04-13-13-24-337.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02"), Diff(INSERT,"4-10-04"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"2-3"), Diff(EQUAL,"5-"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"8-"), Diff(DELETE,"862"), Diff(INSERT,"180"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02"), Diff(INSERT,"4-10-04"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"2-57-56-864"), Diff(INSERT,"7-08-589"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest has 1"), Diff(DELETE,"8"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest\Log2014-"), Diff(DELETE,"09-26-"), Diff(EQUAL,"10-0"), Diff(DELETE,"9-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\H"), Diff(INSERT,"4-13-38-06-627.xml¶ExceptionCommand EHException  EventLogger utility command¶Writing Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"nt student 22 to ExperimentWebStatsBert.csv¶Writing Experiment student 33 to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"ntWebStatsBert.csv¶Writing Experiment student 23 to ExperimentWebStatsBert.csv¶Writing Experiment student 24 to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\Hermes\H"), Diff(INSERT,"ntWebStatsBert.csv¶Writing Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"nt student 26 to ExperimentWebStatsBert.csv¶Writing Experiment student 16 to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\Hermes\H"), Diff(INSERT,"ntWebStatsBert.csv¶Writing Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"nt student 27 to ExperimentWebStatsBert.csv¶Writing Experiment student 17 to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"ntWebStatsBert.csv¶Writing Experiment student 28 to ExperimentWebStatsBert.csv¶Writing Experiment student 18 to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"ntWebStatsBert.csv¶Writing Experiment student 29 to ExperimentWebStatsBert.csv¶Writing Experiment student 19 to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"ntWebStatsBert.csv¶Writing Experiment student pd1 to ExperimentWebStatsBert.csv¶Writing Experiment student 30 to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"ntWebStatsBert.csv¶Writing Experiment student 20 to ExperimentWebStatsBert.csv¶Writing Experiment student 31 to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\Hermes\H"), Diff(INSERT,"ntWebStatsBert.csv¶Writing Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\H"), Diff(INSERT,"nt student 21 to ExperimentWebStatsBert.csv¶Writing Experiment student 32 to ExperimentWebStatsBert.csv¶Writing Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml"), Diff(INSERT,"nt student pd2 to ExperimentWebStatsBert.csv"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="842" _type="RunCommand" date="Mon Mar 01 20:53:26 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="921592" type="Run" />
  <Command __id="843" _type="RunCommand" date="Mon Mar 01 20:53:26 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614649085217" timestamp="921592" type="Run" />
  <Command __id="845" _type="PauseCommand" date="Mon Mar 01 20:53:29 EST 2021" range="2s-5s" starttimestamp="1614649085217" timestamp="923887">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2295]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="844" _type="ShellCommand" date="Mon Mar 01 20:53:29 EST 2021" starttimestamp="1614649085217" timestamp="923887" type="ECLIPSE_LOST_FOCUS" />
