<Events startTimestamp="1615412446029" logVersion="1.0.0.202101171653">
  <Command __id="24" _type="DiffBasedFileOpenCommand" date="Wed Mar 10 16:42:44 EST 2021" docASTNodeCount="910" docActiveCodeLength="5473" docExpressionCount="518" docLength="5473" projectName="A0" starttimestamp="1615412446029" timestamp="118225">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Sophomore 2st Sem\COMP533\A0\src\MVC\AModel.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package MVC;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.concurrent.ArrayBlockingQueue;
import Bean.AKeyValue;
import Bean.KeyValue;
import Joiner.AJoiner;
import Joiner.Joiner;
import barrier.ABarrier;
import barrier.Barrier;
import launcher.MapReduceTracer;
import mapper.Mapper;
import mapper.MapperFactory;
import reducer.RemoteReducer;


public class AModel extends MapReduceTracer implements Model, RemoteModel{
	private int numThreads;
	private String inputString;
	private List<Thread> threads;
	private Map<String, Integer> result;
	private List<PropertyChangeListener> propertyChangeListeners;
	private ArrayBlockingQueue<KeyValue<String,Integer>> keyValueQueue;
	private ArrayList<LinkedList<KeyValue<String, Integer>>> reductionQueueList;
	private Barrier barrier;
	private Joiner joiner;
	private List<SlaveThread> slaveThreads;
	private Stack<RemoteReducer<String, Integer>> clientStack;
	private Stack<SlaveThread> slaveStack;
	private List<RemoteReducer<String, Integer>> clients;
	
	public AModel() {
		propertyChangeListeners = new ArrayList<>();
		keyValueQueue = new ArrayBlockingQueue<>(BUFFER_SIZE);
		reductionQueueList = new ArrayList<>();
		result = new HashMap<>();
		clientStack = new Stack<>();
		slaveStack = new Stack<>();
		clients = new ArrayList<>();
	}
	
	public int getNumThreads() {
		return numThreads;
	}
	
	public void setNumThreads(int numThreads) {
		PropertyChangeEvent event = new PropertyChangeEvent(this, "NumThreads", this.numThreads, numThreads);
		this.numThreads = numThreads;
		joiner = new AJoiner(numThreads);
		traceJoinerCreated(joiner, numThreads);
		barrier = new ABarrier(numThreads);
		traceBarrierCreated(barrier, numThreads);
		nofityAllListeners(event);
		createRedunctionQueues();
		createThreads();
	}
	
	private void createRedunctionQueues() {
		for(int i = 0; i < numThreads; i++)
			reductionQueueList.add(new LinkedList<>());
	}

	public String getInputString() {
		return inputString;
	}
	
	public void setInputString(String inputString) {
		PropertyChangeEvent event = new PropertyChangeEvent(this, "InputString", this.inputString, inputString);
		this.inputString = inputString;
		nofityAllListeners(event);
		computeResult();
	}
	
	public List<Thread> getThreads() {
		return threads;
	}
	
	private void createThreads() {
		List<Thread> oldVal = threads;
		threads = new ArrayList<>();
		slaveThreads = new ArrayList<>();
		for(int i = 0; i < numThreads; i++) {
			SlaveThread slaveThreadObject = new SlaveThread(i,this);
			Thread thread = new Thread(slaveThreadObject);
			thread.setName(SLAVE+i);
			threads.add(thread);
			slaveThreads.add(slaveThreadObject);
			slaveStack.push(slaveThreadObject);
			thread.start();
		}
		nofityAllListeners(new PropertyChangeEvent(this, "Threads", oldVal, threads));
		match();
	}
	
	public Map<String, Integer> getResult() {
		return result;
	}
	
	private void computeResult() {
		result.clear();
		for (int i = 0; i < numThreads; i++) {
			reductionQueueList.get(i).clear();
		}
		for (int i = 0; i < numThreads; i++) {
			slaveThreads.get(i).synchronizedNotify();
		}
		String[] tokens = inputString.split(" ");
		traceReduce(tokens.length, result);
 		Mapper<String, Integer> mapper = MapperFactory.getMapper();
 		try {
 			for(String token:tokens) {
 				traceEnqueueRequest(keyValueQueue);
 				keyValueQueue.put(mapper.map(token));
 				traceEnqueue(keyValueQueue);
 			}
 			for(int i = 0; i < numThreads; i++) {
 				traceEnqueueRequest(keyValueQueue);
 				keyValueQueue.put(new AKeyValue<String,Integer>(null,null));
 				traceEnqueue(keyValueQueue);
 			}
		} 
 		catch (InterruptedException e) {
			e.printStackTrace();
		}
 		joiner.join();
		nofityAllListeners(new PropertyChangeEvent(this, "Result", null, result));
	}

	public void addPropertyChangeListener(PropertyChangeListener propertyChangeListener) {
		propertyChangeListeners.add(propertyChangeListener);
	}

	public void nofityAllListeners(PropertyChangeEvent event) {
		for (PropertyChangeListener propertyChangeListener : propertyChangeListeners) {
			propertyChangeListener.propertyChange(event);
		}
	}
	
	public String toString() {
		return MODEL;
	}

	public ArrayBlockingQueue<KeyValue<String, Integer>> getKeyValueQueue() {
		return keyValueQueue;
	}

	public ArrayList<LinkedList<KeyValue<String, Integer>>> getReductionQueueList() {
		return reductionQueueList;
	}

	public Joiner getJoiner() {
		return joiner;
	}

	public Barrier getBarrier() {
		return barrier;
	}
	
	public void register(RemoteReducer<String, Integer> clientReducer) {
		traceRegister(clientReducer);
		clients.add(clientReducer);
		clientStack.push(clientReducer);
		match();
	}
	
	public void match() {
		while(!(slaveStack.isEmpty() || clientStack.isEmpty())) {
			slaveStack.pop().setClientReducer(clientStack.pop());
		}
	}
	
	public void quit() {
		for (Thread thread : threads) {
			thread.interrupt();
		}
		for(RemoteReducer<String, Integer> client: clients) {
			try {
				client.quit();
			} catch (RemoteException e) {
				e.printStackTrace();
			}
		}
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="25" _type="SelectTextCommand" caretOffset="4838" date="Wed Mar 10 16:42:44 EST 2021" end="4838" start="4836" starttimestamp="1615412446029" timestamp="118371" />
</Events>
