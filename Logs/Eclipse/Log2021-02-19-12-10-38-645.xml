<Events startTimestamp="1613754638645" logVersion="1.0.0.202102091426">
  <Command __id="8" _type="PauseCommand" date="Fri Feb 19 12:10:56 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="17778">
    <prevType><![CDATA[Terminate]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[14472]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9" _type="EclipseCommand" commandID="" date="Fri Feb 19 12:10:57 EST 2021" starttimestamp="1613754638645" timestamp="18409" />
  <Command __id="10" _type="EclipseCommand" commandID="" date="Fri Feb 19 12:10:57 EST 2021" starttimestamp="1613754638645" timestamp="18453" />
  <Command __id="11" _type="EclipseCommand" commandID="" date="Fri Feb 19 12:10:57 EST 2021" starttimestamp="1613754638645" timestamp="18469" />
  <Command __id="12" _type="MoveCaretCommand" caretOffset="1885" date="Fri Feb 19 12:10:57 EST 2021" docOffset="2123" starttimestamp="1613754638645" timestamp="18580" />
  <Command __id="13" _type="EclipseCommand" commandID="" date="Fri Feb 19 12:10:57 EST 2021" starttimestamp="1613754638645" timestamp="18844" />
  <Command __id="15" _type="PauseCommand" date="Fri Feb 19 12:11:03 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="25182">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6338]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="16" _type="MoveCaretCommand" caretOffset="18382" date="Fri Feb 19 12:11:03 EST 2021" docOffset="19767" starttimestamp="1613754638645" timestamp="25344" />
  <Command __id="18" _type="PauseCommand" date="Fri Feb 19 12:11:14 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="36140">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10796]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="17" _type="MoveCaretCommand" caretOffset="41" date="Fri Feb 19 12:11:14 EST 2021" docOffset="41" starttimestamp="1613754638645" timestamp="36140" />
  <Command __id="20" _type="PauseCommand" date="Fri Feb 19 12:11:16 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="37611">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1471]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="21" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Fri Feb 19 12:11:16 EST 2021" starttimestamp="1613754638645" timestamp="37625" />
  <Command __id="22" _type="MoveCaretCommand" caretOffset="177" date="Fri Feb 19 12:11:17 EST 2021" docOffset="177" starttimestamp="1613754638645" timestamp="38481" />
  <Command __id="24" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Fri Feb 19 12:11:17 EST 2021" starttimestamp="1613754638645" timestamp="38755" />
  <Command __id="26" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Fri Feb 19 12:11:17 EST 2021" starttimestamp="1613754638645" timestamp="38950" />
  <Command __id="28" _type="PauseCommand" date="Fri Feb 19 12:11:28 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="49394">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10444]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="27" _type="ShellCommand" date="Fri Feb 19 12:11:28 EST 2021" starttimestamp="1613754638645" timestamp="49394" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="30" _type="PauseCommand" date="Fri Feb 19 12:11:57 EST 2021" range="20s-30s" starttimestamp="1613754638645" timestamp="79346">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[29952]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="29" _type="ShellCommand" date="Fri Feb 19 12:11:57 EST 2021" starttimestamp="1613754638645" timestamp="79346" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="31" _type="MoveCaretCommand" caretOffset="580" date="Fri Feb 19 12:11:58 EST 2021" docOffset="1988" starttimestamp="1613754638645" timestamp="79785" />
  <Command __id="32" _type="MoveCaretCommand" caretOffset="622" date="Fri Feb 19 12:11:59 EST 2021" docOffset="2030" starttimestamp="1613754638645" timestamp="80773" />
  <Command __id="33" _type="MoveCaretCommand" caretOffset="670" date="Fri Feb 19 12:11:59 EST 2021" docOffset="2078" starttimestamp="1613754638645" timestamp="81270" />
  <Command __id="35" _type="PauseCommand" date="Fri Feb 19 12:12:04 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="85579">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4309]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="34" _type="MoveCaretCommand" caretOffset="850" date="Fri Feb 19 12:12:04 EST 2021" docOffset="2258" starttimestamp="1613754638645" timestamp="85579" />
  <Command __id="37" _type="PauseCommand" date="Fri Feb 19 12:12:56 EST 2021" range="30s-1m" starttimestamp="1613754638645" timestamp="137497">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[51918]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="36" _type="SelectTextCommand" caretOffset="6371" date="Fri Feb 19 12:12:56 EST 2021" end="6371" start="6323" starttimestamp="1613754638645" timestamp="137497" />
  <Command __id="38" _type="MoveCaretCommand" caretOffset="6385" date="Fri Feb 19 12:12:56 EST 2021" docOffset="7793" starttimestamp="1613754638645" timestamp="137774" />
  <Command __id="40" _type="PauseCommand" date="Fri Feb 19 12:12:59 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="140929">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3155]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="39" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.folding.collapse_all" date="Fri Feb 19 12:12:59 EST 2021" starttimestamp="1613754638645" timestamp="140929" />
  <Command __id="42" _type="PauseCommand" date="Fri Feb 19 12:13:02 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="144014">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3085]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="41" _type="MoveCaretCommand" caretOffset="56" date="Fri Feb 19 12:13:02 EST 2021" docOffset="1338" starttimestamp="1613754638645" timestamp="144014" />
  <Command __id="43" _type="MoveCaretCommand" caretOffset="22" date="Fri Feb 19 12:13:03 EST 2021" docOffset="22" starttimestamp="1613754638645" timestamp="144666" />
  <Command __id="44" _type="MoveCaretCommand" caretOffset="56" date="Fri Feb 19 12:13:03 EST 2021" docOffset="1338" starttimestamp="1613754638645" timestamp="145109" />
  <Command __id="46" _type="PauseCommand" date="Fri Feb 19 12:13:39 EST 2021" range="30s-1m" starttimestamp="1613754638645" timestamp="181202">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[36093]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="45" _type="SelectTextCommand" caretOffset="1293" date="Fri Feb 19 12:13:39 EST 2021" end="2214" start="1293" starttimestamp="1613754638645" timestamp="181202" />
  <Command __id="47" _type="MoveCaretCommand" caretOffset="1308" date="Fri Feb 19 12:13:40 EST 2021" docOffset="34268" starttimestamp="1613754638645" timestamp="181470" />
  <Command __id="48" _type="MoveCaretCommand" caretOffset="1291" date="Fri Feb 19 12:13:40 EST 2021" docOffset="34251" starttimestamp="1613754638645" timestamp="181989" />
  <Command __id="50" _type="PauseCommand" date="Fri Feb 19 12:14:31 EST 2021" range="30s-1m" starttimestamp="1613754638645" timestamp="233228">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[51239]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="49" _type="ShellCommand" date="Fri Feb 19 12:14:31 EST 2021" starttimestamp="1613754638645" timestamp="233228" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="52" _type="PauseCommand" date="Fri Feb 19 12:14:40 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="241449">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8221]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="51" _type="ShellCommand" date="Fri Feb 19 12:14:40 EST 2021" starttimestamp="1613754638645" timestamp="241449" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="54" _type="PauseCommand" date="Fri Feb 19 12:14:45 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="246821">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5372]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="53" _type="SelectTextCommand" caretOffset="890" date="Fri Feb 19 12:14:45 EST 2021" end="890" start="546" starttimestamp="1613754638645" timestamp="246821" />
  <Command __id="55" _type="MoveCaretCommand" caretOffset="890" date="Fri Feb 19 12:14:45 EST 2021" docOffset="7701" starttimestamp="1613754638645" timestamp="247096" />
  <Command __id="57" _type="PauseCommand" date="Fri Feb 19 12:14:56 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="257992">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10896]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="56" _type="SelectTextCommand" caretOffset="1696" date="Fri Feb 19 12:14:56 EST 2021" end="1696" start="1686" starttimestamp="1613754638645" timestamp="257992" />
  <Command __id="59" _type="PauseCommand" date="Fri Feb 19 12:14:58 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="259809">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1816]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="58" _type="MoveCaretCommand" caretOffset="1886" date="Fri Feb 19 12:14:58 EST 2021" docOffset="31512" starttimestamp="1613754638645" timestamp="259808" />
  <Command __id="61" _type="PauseCommand" date="Fri Feb 19 12:14:59 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="261044">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1236]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="60" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Fri Feb 19 12:14:59 EST 2021" starttimestamp="1613754638645" timestamp="261044" />
  <Command __id="63" _type="PauseCommand" date="Fri Feb 19 12:15:05 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="266745">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5701]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="62" _type="SelectTextCommand" caretOffset="1788" date="Fri Feb 19 12:15:05 EST 2021" end="1788" start="1778" starttimestamp="1613754638645" timestamp="266745" />
  <Command __id="65" _type="PauseCommand" date="Fri Feb 19 12:15:24 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="286062">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[19317]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="66" _type="SelectTextCommand" caretOffset="23088" date="Fri Feb 19 12:15:24 EST 2021" end="23088" start="23070" starttimestamp="1613754638645" timestamp="286281" />
  <Command __id="68" _type="PauseCommand" date="Fri Feb 19 12:15:33 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="294557">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[8276]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="67" _type="MoveCaretCommand" caretOffset="23328" date="Fri Feb 19 12:15:33 EST 2021" docOffset="25020" starttimestamp="1613754638645" timestamp="294557" />
  <Command __id="69" _type="MoveCaretCommand" caretOffset="23423" date="Fri Feb 19 12:15:33 EST 2021" docOffset="25115" starttimestamp="1613754638645" timestamp="294999" />
  <Command __id="73" _type="PauseCommand" date="Fri Feb 19 12:15:56 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="318133">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19363]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="72" _type="EclipseCommand" commandID="" date="Fri Feb 19 12:15:56 EST 2021" starttimestamp="1613754638645" timestamp="318133" />
  <Command __id="74" _type="EclipseCommand" commandID="" date="Fri Feb 19 12:15:56 EST 2021" starttimestamp="1613754638645" timestamp="318135" />
  <Command __id="75" _type="EclipseCommand" commandID="" date="Fri Feb 19 12:15:56 EST 2021" starttimestamp="1613754638645" timestamp="318135" />
  <Command __id="76" _type="EclipseCommand" commandID="" date="Fri Feb 19 12:15:56 EST 2021" starttimestamp="1613754638645" timestamp="318137" />
  <Command __id="78" _type="PauseCommand" date="Fri Feb 19 12:16:12 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="334116">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[15979]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="77" _type="ShellCommand" date="Fri Feb 19 12:16:12 EST 2021" starttimestamp="1613754638645" timestamp="334116" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="80" _type="PauseCommand" date="Fri Feb 19 12:16:16 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="337765">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3649]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="79" _type="ShellCommand" date="Fri Feb 19 12:16:16 EST 2021" starttimestamp="1613754638645" timestamp="337765" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82" _type="PauseCommand" date="Fri Feb 19 12:17:17 EST 2021" range="1m-2m" starttimestamp="1613754638645" timestamp="398639">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[60874]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="81" _type="ShellCommand" date="Fri Feb 19 12:17:17 EST 2021" starttimestamp="1613754638645" timestamp="398639" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="84" _type="PauseCommand" date="Fri Feb 19 12:17:30 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="412153">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13514]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="85" _type="MoveCaretCommand" caretOffset="1946" date="Fri Feb 19 12:17:31 EST 2021" docOffset="31480" starttimestamp="1613754638645" timestamp="412403" />
  <Command __id="87" _type="PauseCommand" date="Fri Feb 19 12:17:39 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="420939">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8536]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="86" _type="MoveCaretCommand" caretOffset="885" date="Fri Feb 19 12:17:39 EST 2021" docOffset="7604" starttimestamp="1613754638645" timestamp="420939" />
  <Command __id="88" _type="MoveCaretCommand" caretOffset="977" date="Fri Feb 19 12:17:40 EST 2021" docOffset="7696" starttimestamp="1613754638645" timestamp="421539" />
  <Command __id="90" _type="PauseCommand" date="Fri Feb 19 12:17:49 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="431249">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9710]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="89" _type="InsertStringCommand" date="Fri Feb 19 12:17:49 EST 2021" starttimestamp="1613754638645" timestamp="431249" timestamp2="431249">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="92" _type="PauseCommand" date="Fri Feb 19 12:17:59 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="441272">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[10023]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="91" _type="InsertStringCommand" date="Fri Feb 19 12:17:59 EST 2021" starttimestamp="1613754638645" timestamp="441272" timestamp2="441272">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="94" _type="PauseCommand" date="Fri Feb 19 12:18:01 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="442449">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1177]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="93" _type="InsertStringCommand" date="Fri Feb 19 12:18:01 EST 2021" starttimestamp="1613754638645" timestamp="442449" timestamp2="442449">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="95" _type="InsertStringCommand" date="Fri Feb 19 12:18:02 EST 2021" starttimestamp="1613754638645" timestamp="443430" timestamp2="443430">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="96" _type="InsertStringCommand" date="Fri Feb 19 12:18:02 EST 2021" starttimestamp="1613754638645" timestamp="443447" timestamp2="443447">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="98" _type="PauseCommand" date="Fri Feb 19 12:18:03 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="444552">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1105]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="97" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Fri Feb 19 12:18:03 EST 2021" starttimestamp="1613754638645" timestamp="444552" />
  <Command __id="99" _type="InsertStringCommand" date="Fri Feb 19 12:18:03 EST 2021" starttimestamp="1613754638645" timestamp="444876" timestamp2="444876">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="101" _type="PauseCommand" date="Fri Feb 19 12:18:05 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="447289">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2413]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="100" _type="MoveCaretCommand" caretOffset="805" date="Fri Feb 19 12:18:05 EST 2021" docOffset="7524" starttimestamp="1613754638645" timestamp="447289" />
  <Command __id="103" _type="PauseCommand" date="Fri Feb 19 12:18:08 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="449772">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2483]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="102" _type="SelectTextCommand" caretOffset="986" date="Fri Feb 19 12:18:08 EST 2021" end="1043" start="986" starttimestamp="1613754638645" timestamp="449772" />
  <Command __id="105" _type="PauseCommand" date="Fri Feb 19 12:18:16 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="458260">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[8488]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="104" _type="InsertStringCommand" date="Fri Feb 19 12:18:16 EST 2021" starttimestamp="1613754638645" timestamp="458260" timestamp2="458260">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="106" _type="InsertStringCommand" date="Fri Feb 19 12:18:17 EST 2021" starttimestamp="1613754638645" timestamp="458489" timestamp2="458489">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="107" _type="InsertStringCommand" date="Fri Feb 19 12:18:17 EST 2021" starttimestamp="1613754638645" timestamp="458513" timestamp2="458513">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="108" _type="InsertStringCommand" date="Fri Feb 19 12:18:17 EST 2021" starttimestamp="1613754638645" timestamp="458552" timestamp2="458552">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="110" _type="PauseCommand" date="Fri Feb 19 12:18:18 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="459575">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1023]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="109" _type="InsertStringCommand" date="Fri Feb 19 12:18:18 EST 2021" starttimestamp="1613754638645" timestamp="459575" timestamp2="459575">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="111" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:18:18 EST 2021" starttimestamp="1613754638645" timestamp="460123" />
  <Command __id="113" _type="PauseCommand" date="Fri Feb 19 12:18:21 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="463324">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3201]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="112" _type="InsertStringCommand" date="Fri Feb 19 12:18:21 EST 2021" starttimestamp="1613754638645" timestamp="463324" timestamp2="463324">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="114" _type="InsertStringCommand" date="Fri Feb 19 12:18:22 EST 2021" starttimestamp="1613754638645" timestamp="463664" timestamp2="463664">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="115" _type="InsertStringCommand" date="Fri Feb 19 12:18:22 EST 2021" starttimestamp="1613754638645" timestamp="463819" timestamp2="463819">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="116" _type="InsertStringCommand" date="Fri Feb 19 12:18:22 EST 2021" starttimestamp="1613754638645" timestamp="463906" timestamp2="463906">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="117" _type="InsertStringCommand" date="Fri Feb 19 12:18:22 EST 2021" starttimestamp="1613754638645" timestamp="463988" timestamp2="463988">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="118" _type="InsertStringCommand" date="Fri Feb 19 12:18:23 EST 2021" starttimestamp="1613754638645" timestamp="464476" timestamp2="464476">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="119" _type="InsertStringCommand" date="Fri Feb 19 12:18:23 EST 2021" starttimestamp="1613754638645" timestamp="465124" timestamp2="465124">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="120" _type="InsertStringCommand" date="Fri Feb 19 12:18:23 EST 2021" starttimestamp="1613754638645" timestamp="465168" timestamp2="465168">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="121" _type="InsertStringCommand" date="Fri Feb 19 12:18:23 EST 2021" starttimestamp="1613754638645" timestamp="465204" timestamp2="465204">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="122" _type="InsertStringCommand" date="Fri Feb 19 12:18:23 EST 2021" starttimestamp="1613754638645" timestamp="465330" timestamp2="465330">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="123" _type="InsertStringCommand" date="Fri Feb 19 12:18:24 EST 2021" starttimestamp="1613754638645" timestamp="465443" timestamp2="465443">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="124" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 19 12:18:24 EST 2021" starttimestamp="1613754638645" timestamp="465831" />
  <Command __id="125" _type="InsertStringCommand" date="Fri Feb 19 12:18:25 EST 2021" starttimestamp="1613754638645" timestamp="466502" timestamp2="466502">
    <data><![CDATA[>]]></data>
  </Command>
  <Command __id="126" _type="InsertStringCommand" date="Fri Feb 19 12:18:25 EST 2021" starttimestamp="1613754638645" timestamp="466738" timestamp2="466738">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="127" _type="InsertStringCommand" date="Fri Feb 19 12:18:26 EST 2021" starttimestamp="1613754638645" timestamp="467397" timestamp2="467397">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="128" _type="InsertStringCommand" date="Fri Feb 19 12:18:26 EST 2021" starttimestamp="1613754638645" timestamp="467593" timestamp2="467593">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="129" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:18:26 EST 2021" starttimestamp="1613754638645" timestamp="468148" />
  <Command __id="130" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:18:26 EST 2021" starttimestamp="1613754638645" timestamp="468274" />
  <Command __id="131" _type="InsertStringCommand" date="Fri Feb 19 12:18:27 EST 2021" starttimestamp="1613754638645" timestamp="468464" timestamp2="468464">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="132" _type="InsertStringCommand" date="Fri Feb 19 12:18:27 EST 2021" starttimestamp="1613754638645" timestamp="468502" timestamp2="468502">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="133" _type="InsertStringCommand" date="Fri Feb 19 12:18:27 EST 2021" starttimestamp="1613754638645" timestamp="468680" timestamp2="468680">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="134" _type="InsertStringCommand" date="Fri Feb 19 12:18:27 EST 2021" starttimestamp="1613754638645" timestamp="468822" timestamp2="468822">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="135" _type="InsertStringCommand" date="Fri Feb 19 12:18:27 EST 2021" starttimestamp="1613754638645" timestamp="468899" timestamp2="468899">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="136" _type="InsertStringCommand" date="Fri Feb 19 12:18:27 EST 2021" starttimestamp="1613754638645" timestamp="469063" timestamp2="469063">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="137" _type="InsertStringCommand" date="Fri Feb 19 12:18:28 EST 2021" starttimestamp="1613754638645" timestamp="469627" timestamp2="469627">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="138" _type="InsertStringCommand" date="Fri Feb 19 12:18:28 EST 2021" starttimestamp="1613754638645" timestamp="469782" timestamp2="469782">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="139" _type="InsertStringCommand" date="Fri Feb 19 12:18:28 EST 2021" starttimestamp="1613754638645" timestamp="469956" timestamp2="469956">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="140" _type="InsertStringCommand" date="Fri Feb 19 12:18:28 EST 2021" starttimestamp="1613754638645" timestamp="470074" timestamp2="470074">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="141" _type="InsertStringCommand" date="Fri Feb 19 12:18:28 EST 2021" starttimestamp="1613754638645" timestamp="470170" timestamp2="470170">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="142" _type="InsertStringCommand" date="Fri Feb 19 12:18:28 EST 2021" starttimestamp="1613754638645" timestamp="470250" timestamp2="470250">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="143" _type="InsertStringCommand" date="Fri Feb 19 12:18:28 EST 2021" starttimestamp="1613754638645" timestamp="470331" timestamp2="470331">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="144" _type="InsertStringCommand" date="Fri Feb 19 12:18:28 EST 2021" starttimestamp="1613754638645" timestamp="470354" timestamp2="470354">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="145" _type="InsertStringCommand" date="Fri Feb 19 12:18:29 EST 2021" starttimestamp="1613754638645" timestamp="470467" timestamp2="470467">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="146" _type="InsertStringCommand" date="Fri Feb 19 12:18:29 EST 2021" starttimestamp="1613754638645" timestamp="470614" timestamp2="470614">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="147" _type="InsertStringCommand" date="Fri Feb 19 12:18:29 EST 2021" starttimestamp="1613754638645" timestamp="470692" timestamp2="470692">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="149" _type="PauseCommand" date="Fri Feb 19 12:18:30 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="471995">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1303]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="148" _type="InsertStringCommand" date="Fri Feb 19 12:18:30 EST 2021" starttimestamp="1613754638645" timestamp="471995" timestamp2="471995">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="150" _type="InsertStringCommand" date="Fri Feb 19 12:18:30 EST 2021" starttimestamp="1613754638645" timestamp="472245" timestamp2="472245">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="152" _type="PauseCommand" date="Fri Feb 19 12:18:32 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="473963">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1718]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:18:32 EST 2021" starttimestamp="1613754638645" timestamp="473963" />
  <Command __id="153" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:18:32 EST 2021" starttimestamp="1613754638645" timestamp="474098" />
  <Command __id="155" _type="PauseCommand" date="Fri Feb 19 12:18:33 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="475331">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1233]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="154" _type="InsertStringCommand" date="Fri Feb 19 12:18:33 EST 2021" starttimestamp="1613754638645" timestamp="475331" timestamp2="475331">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="156" _type="InsertStringCommand" date="Fri Feb 19 12:18:34 EST 2021" starttimestamp="1613754638645" timestamp="475368" timestamp2="475368">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="157" _type="InsertStringCommand" date="Fri Feb 19 12:18:34 EST 2021" starttimestamp="1613754638645" timestamp="475627" timestamp2="475627">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="158" _type="InsertStringCommand" date="Fri Feb 19 12:18:34 EST 2021" starttimestamp="1613754638645" timestamp="475705" timestamp2="475705">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="160" _type="PauseCommand" date="Fri Feb 19 12:18:35 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="477045">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1340]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="159" _type="InsertStringCommand" date="Fri Feb 19 12:18:35 EST 2021" starttimestamp="1613754638645" timestamp="477045" timestamp2="477045">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="161" _type="InsertStringCommand" date="Fri Feb 19 12:18:35 EST 2021" starttimestamp="1613754638645" timestamp="477213" timestamp2="477213">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="162" _type="InsertStringCommand" date="Fri Feb 19 12:18:35 EST 2021" starttimestamp="1613754638645" timestamp="477303" timestamp2="477303">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="163" _type="InsertStringCommand" date="Fri Feb 19 12:18:36 EST 2021" starttimestamp="1613754638645" timestamp="477381" timestamp2="477381">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="164" _type="InsertStringCommand" date="Fri Feb 19 12:18:36 EST 2021" starttimestamp="1613754638645" timestamp="477544" timestamp2="477544">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="166" _type="PauseCommand" date="Fri Feb 19 12:18:42 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="483616">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[6072]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="165" _type="InsertStringCommand" date="Fri Feb 19 12:18:42 EST 2021" starttimestamp="1613754638645" timestamp="483616" timestamp2="483616">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="167" _type="InsertStringCommand" date="Fri Feb 19 12:18:42 EST 2021" starttimestamp="1613754638645" timestamp="483864" timestamp2="483864">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="168" _type="InsertStringCommand" date="Fri Feb 19 12:18:42 EST 2021" starttimestamp="1613754638645" timestamp="484036" timestamp2="484036">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="169" _type="InsertStringCommand" date="Fri Feb 19 12:18:42 EST 2021" starttimestamp="1613754638645" timestamp="484043" timestamp2="484043">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="170" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:18:43 EST 2021" starttimestamp="1613754638645" timestamp="484500" />
  <Command __id="171" _type="InsertStringCommand" date="Fri Feb 19 12:18:43 EST 2021" starttimestamp="1613754638645" timestamp="484777" timestamp2="484777">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="173" _type="PauseCommand" date="Fri Feb 19 12:18:45 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="486411">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1634]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="172" _type="InsertStringCommand" date="Fri Feb 19 12:18:45 EST 2021" starttimestamp="1613754638645" timestamp="486411" timestamp2="486411">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="175" _type="PauseCommand" date="Fri Feb 19 12:18:46 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="488122">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1711]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="174" _type="MoveCaretCommand" caretOffset="988" date="Fri Feb 19 12:18:46 EST 2021" docOffset="7707" starttimestamp="1613754638645" timestamp="488122" />
  <Command __id="176" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 19 12:18:47 EST 2021" starttimestamp="1613754638645" timestamp="488617" />
  <Command __id="177" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 19 12:18:47 EST 2021" starttimestamp="1613754638645" timestamp="488966" />
  <Command __id="178" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:18:47 EST 2021" starttimestamp="1613754638645" timestamp="489008" />
  <Command __id="179" _type="InsertStringCommand" date="Fri Feb 19 12:18:47 EST 2021" starttimestamp="1613754638645" timestamp="489305" timestamp2="489305">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="181" _type="PauseCommand" date="Fri Feb 19 12:18:49 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="490615">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1310]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="180" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 19 12:18:49 EST 2021" starttimestamp="1613754638645" timestamp="490615" />
  <Command __id="182" _type="InsertStringCommand" date="Fri Feb 19 12:18:49 EST 2021" starttimestamp="1613754638645" timestamp="490828" timestamp2="490828">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="184" _type="PauseCommand" date="Fri Feb 19 12:18:51 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="492598">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1770]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="183" _type="InsertStringCommand" date="Fri Feb 19 12:18:51 EST 2021" starttimestamp="1613754638645" timestamp="492598" timestamp2="492598">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="186" _type="PauseCommand" date="Fri Feb 19 12:18:53 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="494411">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1813]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="185" _type="InsertStringCommand" date="Fri Feb 19 12:18:53 EST 2021" starttimestamp="1613754638645" timestamp="494411" timestamp2="494411">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="187" _type="InsertStringCommand" date="Fri Feb 19 12:18:53 EST 2021" starttimestamp="1613754638645" timestamp="494613" timestamp2="494613">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="188" _type="InsertStringCommand" date="Fri Feb 19 12:18:53 EST 2021" starttimestamp="1613754638645" timestamp="494622" timestamp2="494622">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="189" _type="InsertStringCommand" date="Fri Feb 19 12:18:53 EST 2021" starttimestamp="1613754638645" timestamp="494778" timestamp2="494778">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="190" _type="InsertStringCommand" date="Fri Feb 19 12:18:53 EST 2021" starttimestamp="1613754638645" timestamp="494851" timestamp2="494851">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="191" _type="InsertStringCommand" date="Fri Feb 19 12:18:53 EST 2021" starttimestamp="1613754638645" timestamp="495087" timestamp2="495087">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="193" _type="PauseCommand" date="Fri Feb 19 12:18:55 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="496429">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1342]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="192" _type="InsertStringCommand" date="Fri Feb 19 12:18:55 EST 2021" starttimestamp="1613754638645" timestamp="496429" timestamp2="496429">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="194" _type="InsertStringCommand" date="Fri Feb 19 12:18:55 EST 2021" starttimestamp="1613754638645" timestamp="496636" timestamp2="496636">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="195" _type="InsertStringCommand" date="Fri Feb 19 12:18:55 EST 2021" starttimestamp="1613754638645" timestamp="496984" timestamp2="496984">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="196" _type="InsertStringCommand" date="Fri Feb 19 12:18:56 EST 2021" starttimestamp="1613754638645" timestamp="497764" timestamp2="497764">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="197" _type="InsertStringCommand" date="Fri Feb 19 12:18:56 EST 2021" starttimestamp="1613754638645" timestamp="497982" timestamp2="497982">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="198" _type="InsertStringCommand" date="Fri Feb 19 12:18:56 EST 2021" starttimestamp="1613754638645" timestamp="497992" timestamp2="497992">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="199" _type="InsertStringCommand" date="Fri Feb 19 12:18:56 EST 2021" starttimestamp="1613754638645" timestamp="498100" timestamp2="498100">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="200" _type="InsertStringCommand" date="Fri Feb 19 12:18:56 EST 2021" starttimestamp="1613754638645" timestamp="498171" timestamp2="498171">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="201" _type="InsertStringCommand" date="Fri Feb 19 12:18:56 EST 2021" starttimestamp="1613754638645" timestamp="498311" timestamp2="498311">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="203" _type="PauseCommand" date="Fri Feb 19 12:19:00 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="501844">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3533]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="202" _type="InsertStringCommand" date="Fri Feb 19 12:19:00 EST 2021" starttimestamp="1613754638645" timestamp="501844" timestamp2="501844">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="204" _type="InsertStringCommand" date="Fri Feb 19 12:19:00 EST 2021" starttimestamp="1613754638645" timestamp="502043" timestamp2="502043">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="205" _type="InsertStringCommand" date="Fri Feb 19 12:19:00 EST 2021" starttimestamp="1613754638645" timestamp="502053" timestamp2="502053">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="206" _type="InsertStringCommand" date="Fri Feb 19 12:19:00 EST 2021" starttimestamp="1613754638645" timestamp="502061" timestamp2="502061">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="207" _type="InsertStringCommand" date="Fri Feb 19 12:19:01 EST 2021" starttimestamp="1613754638645" timestamp="502715" timestamp2="502715">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="208" _type="InsertStringCommand" date="Fri Feb 19 12:19:01 EST 2021" starttimestamp="1613754638645" timestamp="502988" timestamp2="502988">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="209" _type="InsertStringCommand" date="Fri Feb 19 12:19:02 EST 2021" starttimestamp="1613754638645" timestamp="503385" timestamp2="503385">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="210" _type="InsertStringCommand" date="Fri Feb 19 12:19:02 EST 2021" starttimestamp="1613754638645" timestamp="503624" timestamp2="503624">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="211" _type="InsertStringCommand" date="Fri Feb 19 12:19:02 EST 2021" starttimestamp="1613754638645" timestamp="503998" timestamp2="503998">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="212" _type="InsertStringCommand" date="Fri Feb 19 12:19:02 EST 2021" starttimestamp="1613754638645" timestamp="504174" timestamp2="504174">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="213" _type="InsertStringCommand" date="Fri Feb 19 12:19:03 EST 2021" starttimestamp="1613754638645" timestamp="505105" timestamp2="505105">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="214" _type="InsertStringCommand" date="Fri Feb 19 12:19:03 EST 2021" starttimestamp="1613754638645" timestamp="505294" timestamp2="505294">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="215" _type="InsertStringCommand" date="Fri Feb 19 12:19:04 EST 2021" starttimestamp="1613754638645" timestamp="505377" timestamp2="505377">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="216" _type="InsertStringCommand" date="Fri Feb 19 12:19:04 EST 2021" starttimestamp="1613754638645" timestamp="505850" timestamp2="505850">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="218" _type="PauseCommand" date="Fri Feb 19 12:19:06 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="507813">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1963]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="217" _type="InsertStringCommand" date="Fri Feb 19 12:19:06 EST 2021" starttimestamp="1613754638645" timestamp="507813" timestamp2="507813">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="219" _type="InsertStringCommand" date="Fri Feb 19 12:19:06 EST 2021" starttimestamp="1613754638645" timestamp="508006" timestamp2="508006">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="220" _type="InsertStringCommand" date="Fri Feb 19 12:19:06 EST 2021" starttimestamp="1613754638645" timestamp="508077" timestamp2="508077">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="222" _type="PauseCommand" date="Fri Feb 19 12:19:07 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="509277">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1200]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="221" _type="InsertStringCommand" date="Fri Feb 19 12:19:07 EST 2021" starttimestamp="1613754638645" timestamp="509277" timestamp2="509277">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="223" _type="InsertStringCommand" date="Fri Feb 19 12:19:08 EST 2021" starttimestamp="1613754638645" timestamp="509491" timestamp2="509491">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="224" _type="InsertStringCommand" date="Fri Feb 19 12:19:08 EST 2021" starttimestamp="1613754638645" timestamp="509520" timestamp2="509520">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="225" _type="InsertStringCommand" date="Fri Feb 19 12:19:08 EST 2021" starttimestamp="1613754638645" timestamp="509702" timestamp2="509702">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="226" _type="InsertStringCommand" date="Fri Feb 19 12:19:08 EST 2021" starttimestamp="1613754638645" timestamp="509951" timestamp2="509951">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="227" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:19:09 EST 2021" starttimestamp="1613754638645" timestamp="510456" />
  <Command __id="228" _type="InsertStringCommand" date="Fri Feb 19 12:19:09 EST 2021" starttimestamp="1613754638645" timestamp="510672" timestamp2="510672">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="229" _type="InsertStringCommand" date="Fri Feb 19 12:19:09 EST 2021" starttimestamp="1613754638645" timestamp="511072" timestamp2="511072">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="230" _type="InsertStringCommand" date="Fri Feb 19 12:19:09 EST 2021" starttimestamp="1613754638645" timestamp="511323" timestamp2="511323">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="231" _type="InsertStringCommand" date="Fri Feb 19 12:19:10 EST 2021" starttimestamp="1613754638645" timestamp="511420" timestamp2="511420">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="232" _type="InsertStringCommand" date="Fri Feb 19 12:19:10 EST 2021" starttimestamp="1613754638645" timestamp="511554" timestamp2="511554">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="233" _type="InsertStringCommand" date="Fri Feb 19 12:19:10 EST 2021" starttimestamp="1613754638645" timestamp="511561" timestamp2="511561">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="234" _type="InsertStringCommand" date="Fri Feb 19 12:19:10 EST 2021" starttimestamp="1613754638645" timestamp="511712" timestamp2="511712">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="235" _type="InsertStringCommand" date="Fri Feb 19 12:19:10 EST 2021" starttimestamp="1613754638645" timestamp="511881" timestamp2="511881">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="237" _type="PauseCommand" date="Fri Feb 19 12:19:25 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="527024">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[15143]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="236" _type="SelectTextCommand" caretOffset="1088" date="Fri Feb 19 12:19:25 EST 2021" end="1088" start="1050" starttimestamp="1613754638645" timestamp="527024" />
  <Command __id="238" _type="InsertStringCommand" date="Fri Feb 19 12:19:26 EST 2021" starttimestamp="1613754638645" timestamp="527978" timestamp2="527978">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="239" _type="InsertStringCommand" date="Fri Feb 19 12:19:26 EST 2021" starttimestamp="1613754638645" timestamp="528170" timestamp2="528170">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="240" _type="InsertStringCommand" date="Fri Feb 19 12:19:26 EST 2021" starttimestamp="1613754638645" timestamp="528180" timestamp2="528180">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="241" _type="InsertStringCommand" date="Fri Feb 19 12:19:26 EST 2021" starttimestamp="1613754638645" timestamp="528188" timestamp2="528188">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="242" _type="InsertStringCommand" date="Fri Feb 19 12:19:26 EST 2021" starttimestamp="1613754638645" timestamp="528240" timestamp2="528240">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="243" _type="InsertStringCommand" date="Fri Feb 19 12:19:26 EST 2021" starttimestamp="1613754638645" timestamp="528331" timestamp2="528331">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="244" _type="InsertStringCommand" date="Fri Feb 19 12:19:27 EST 2021" starttimestamp="1613754638645" timestamp="528867" timestamp2="528867">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="245" _type="InsertStringCommand" date="Fri Feb 19 12:19:27 EST 2021" starttimestamp="1613754638645" timestamp="528968" timestamp2="528968">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="246" _type="InsertStringCommand" date="Fri Feb 19 12:19:28 EST 2021" starttimestamp="1613754638645" timestamp="529390" timestamp2="529390">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="247" _type="InsertStringCommand" date="Fri Feb 19 12:19:28 EST 2021" starttimestamp="1613754638645" timestamp="529617" timestamp2="529617">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="248" _type="InsertStringCommand" date="Fri Feb 19 12:19:28 EST 2021" starttimestamp="1613754638645" timestamp="529731" timestamp2="529731">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="249" _type="InsertStringCommand" date="Fri Feb 19 12:19:28 EST 2021" starttimestamp="1613754638645" timestamp="529919" timestamp2="529919">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="250" _type="InsertStringCommand" date="Fri Feb 19 12:19:28 EST 2021" starttimestamp="1613754638645" timestamp="530181" timestamp2="530181">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="251" _type="InsertStringCommand" date="Fri Feb 19 12:19:28 EST 2021" starttimestamp="1613754638645" timestamp="530336" timestamp2="530336">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="252" _type="InsertStringCommand" date="Fri Feb 19 12:19:29 EST 2021" starttimestamp="1613754638645" timestamp="530434" timestamp2="530434">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="254" _type="PauseCommand" date="Fri Feb 19 12:19:30 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="531950">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1516]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="253" _type="InsertStringCommand" date="Fri Feb 19 12:19:30 EST 2021" starttimestamp="1613754638645" timestamp="531950" timestamp2="531950">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="255" _type="InsertStringCommand" date="Fri Feb 19 12:19:30 EST 2021" starttimestamp="1613754638645" timestamp="532332" timestamp2="532332">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="256" _type="InsertStringCommand" date="Fri Feb 19 12:19:31 EST 2021" starttimestamp="1613754638645" timestamp="532806" timestamp2="532806">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="257" _type="InsertStringCommand" date="Fri Feb 19 12:19:31 EST 2021" starttimestamp="1613754638645" timestamp="532915" timestamp2="532915">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="258" _type="InsertStringCommand" date="Fri Feb 19 12:19:32 EST 2021" starttimestamp="1613754638645" timestamp="533395" timestamp2="533395">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="259" _type="InsertStringCommand" date="Fri Feb 19 12:19:32 EST 2021" starttimestamp="1613754638645" timestamp="533582" timestamp2="533582">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="260" _type="InsertStringCommand" date="Fri Feb 19 12:19:32 EST 2021" starttimestamp="1613754638645" timestamp="533754" timestamp2="533754">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="262" _type="PauseCommand" date="Fri Feb 19 12:19:35 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="536651">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2897]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="261" _type="InsertStringCommand" date="Fri Feb 19 12:19:35 EST 2021" starttimestamp="1613754638645" timestamp="536651" timestamp2="536651">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="263" _type="InsertStringCommand" date="Fri Feb 19 12:19:35 EST 2021" starttimestamp="1613754638645" timestamp="536698" timestamp2="536698">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="264" _type="InsertStringCommand" date="Fri Feb 19 12:19:35 EST 2021" starttimestamp="1613754638645" timestamp="536868" timestamp2="536868">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="265" _type="InsertStringCommand" date="Fri Feb 19 12:19:35 EST 2021" starttimestamp="1613754638645" timestamp="536984" timestamp2="536984">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="266" _type="InsertStringCommand" date="Fri Feb 19 12:19:35 EST 2021" starttimestamp="1613754638645" timestamp="537090" timestamp2="537090">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="267" _type="InsertStringCommand" date="Fri Feb 19 12:19:35 EST 2021" starttimestamp="1613754638645" timestamp="537340" timestamp2="537340">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="268" _type="InsertStringCommand" date="Fri Feb 19 12:19:36 EST 2021" starttimestamp="1613754638645" timestamp="538289" timestamp2="538289">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="269" _type="InsertStringCommand" date="Fri Feb 19 12:19:36 EST 2021" starttimestamp="1613754638645" timestamp="538335" timestamp2="538335">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="270" _type="InsertStringCommand" date="Fri Feb 19 12:19:37 EST 2021" starttimestamp="1613754638645" timestamp="538498" timestamp2="538498">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="271" _type="InsertStringCommand" date="Fri Feb 19 12:19:37 EST 2021" starttimestamp="1613754638645" timestamp="538528" timestamp2="538528">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="272" _type="InsertStringCommand" date="Fri Feb 19 12:19:37 EST 2021" starttimestamp="1613754638645" timestamp="539059" timestamp2="539059">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="274" _type="PauseCommand" date="Fri Feb 19 12:19:38 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="540252">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1193]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="273" _type="InsertStringCommand" date="Fri Feb 19 12:19:38 EST 2021" starttimestamp="1613754638645" timestamp="540252" timestamp2="540252">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="275" _type="InsertStringCommand" date="Fri Feb 19 12:19:39 EST 2021" starttimestamp="1613754638645" timestamp="540634" timestamp2="540634">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="276" _type="InsertStringCommand" date="Fri Feb 19 12:19:39 EST 2021" starttimestamp="1613754638645" timestamp="540753" timestamp2="540753">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="277" _type="InsertStringCommand" date="Fri Feb 19 12:19:40 EST 2021" starttimestamp="1613754638645" timestamp="541723" timestamp2="541723">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="278" _type="InsertStringCommand" date="Fri Feb 19 12:19:40 EST 2021" starttimestamp="1613754638645" timestamp="541758" timestamp2="541758">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="280" _type="PauseCommand" date="Fri Feb 19 12:19:42 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="544187">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2429]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="279" _type="MoveCaretCommand" caretOffset="1011" date="Fri Feb 19 12:19:42 EST 2021" docOffset="7730" starttimestamp="1613754638645" timestamp="544187" />
  <Command __id="281" _type="InsertStringCommand" date="Fri Feb 19 12:19:43 EST 2021" starttimestamp="1613754638645" timestamp="544836" timestamp2="544836">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="282" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Fri Feb 19 12:19:43 EST 2021" starttimestamp="1613754638645" timestamp="545222" />
  <Command __id="284" _type="PauseCommand" date="Fri Feb 19 12:19:46 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="547833">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2611]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="283" _type="MoveCaretCommand" caretOffset="1067" date="Fri Feb 19 12:19:46 EST 2021" docOffset="7786" starttimestamp="1613754638645" timestamp="547833" />
  <Command __id="285" _type="InsertStringCommand" date="Fri Feb 19 12:19:46 EST 2021" starttimestamp="1613754638645" timestamp="548003" timestamp2="548003">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="286" _type="InsertStringCommand" date="Fri Feb 19 12:19:47 EST 2021" starttimestamp="1613754638645" timestamp="548970" timestamp2="548970">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="287" _type="InsertStringCommand" date="Fri Feb 19 12:19:47 EST 2021" starttimestamp="1613754638645" timestamp="549282" timestamp2="549282">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="288" _type="InsertStringCommand" date="Fri Feb 19 12:19:48 EST 2021" starttimestamp="1613754638645" timestamp="549789" timestamp2="549789">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="289" _type="InsertStringCommand" date="Fri Feb 19 12:19:48 EST 2021" starttimestamp="1613754638645" timestamp="549933" timestamp2="549933">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="290" _type="InsertStringCommand" date="Fri Feb 19 12:19:48 EST 2021" starttimestamp="1613754638645" timestamp="550022" timestamp2="550022">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="291" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:19:49 EST 2021" starttimestamp="1613754638645" timestamp="550690" />
  <Command __id="292" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:19:49 EST 2021" starttimestamp="1613754638645" timestamp="550810" />
  <Command __id="293" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:19:49 EST 2021" starttimestamp="1613754638645" timestamp="550934" />
  <Command __id="294" _type="InsertStringCommand" date="Fri Feb 19 12:19:49 EST 2021" starttimestamp="1613754638645" timestamp="551192" timestamp2="551192">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="295" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:19:50 EST 2021" starttimestamp="1613754638645" timestamp="552145" />
  <Command __id="296" _type="InsertStringCommand" date="Fri Feb 19 12:19:50 EST 2021" starttimestamp="1613754638645" timestamp="552307" timestamp2="552307">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="297" _type="InsertStringCommand" date="Fri Feb 19 12:19:51 EST 2021" starttimestamp="1613754638645" timestamp="552367" timestamp2="552367">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="298" _type="InsertStringCommand" date="Fri Feb 19 12:19:51 EST 2021" starttimestamp="1613754638645" timestamp="552554" timestamp2="552554">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="300" _type="PauseCommand" date="Fri Feb 19 12:19:52 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="553575">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1021]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="299" _type="InsertStringCommand" date="Fri Feb 19 12:19:52 EST 2021" starttimestamp="1613754638645" timestamp="553575" timestamp2="553575">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="301" _type="InsertStringCommand" date="Fri Feb 19 12:19:52 EST 2021" starttimestamp="1613754638645" timestamp="553715" timestamp2="553715">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="302" _type="InsertStringCommand" date="Fri Feb 19 12:19:52 EST 2021" starttimestamp="1613754638645" timestamp="554024" timestamp2="554024">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="303" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:19:53 EST 2021" starttimestamp="1613754638645" timestamp="554562" />
  <Command __id="304" _type="InsertStringCommand" date="Fri Feb 19 12:19:53 EST 2021" starttimestamp="1613754638645" timestamp="554901" timestamp2="554901">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="305" _type="InsertStringCommand" date="Fri Feb 19 12:19:53 EST 2021" starttimestamp="1613754638645" timestamp="555180" timestamp2="555180">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="306" _type="InsertStringCommand" date="Fri Feb 19 12:19:53 EST 2021" starttimestamp="1613754638645" timestamp="555298" timestamp2="555298">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="307" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Fri Feb 19 12:19:54 EST 2021" starttimestamp="1613754638645" timestamp="556199" />
  <Command __id="308" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 19 12:19:55 EST 2021" starttimestamp="1613754638645" timestamp="556515" />
  <Command __id="309" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 19 12:19:55 EST 2021" starttimestamp="1613754638645" timestamp="556682" />
  <Command __id="310" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 19 12:19:55 EST 2021" starttimestamp="1613754638645" timestamp="556853" />
  <Command __id="312" _type="PauseCommand" date="Fri Feb 19 12:19:58 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="559619">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2766]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="311" _type="InsertStringCommand" date="Fri Feb 19 12:19:58 EST 2021" starttimestamp="1613754638645" timestamp="559619" timestamp2="559619">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="313" _type="InsertStringCommand" date="Fri Feb 19 12:19:58 EST 2021" starttimestamp="1613754638645" timestamp="560319" timestamp2="560319">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="315" _type="PauseCommand" date="Fri Feb 19 12:20:01 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="562546">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2226]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="314" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:20:01 EST 2021" starttimestamp="1613754638645" timestamp="562545" />
  <Command __id="316" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:20:01 EST 2021" starttimestamp="1613754638645" timestamp="562674" />
  <Command __id="317" _type="InsertStringCommand" date="Fri Feb 19 12:20:01 EST 2021" starttimestamp="1613754638645" timestamp="563155" timestamp2="563155">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="318" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:20:02 EST 2021" starttimestamp="1613754638645" timestamp="563398" />
  <Command __id="319" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:20:02 EST 2021" starttimestamp="1613754638645" timestamp="563530" />
  <Command __id="320" _type="InsertStringCommand" date="Fri Feb 19 12:20:02 EST 2021" starttimestamp="1613754638645" timestamp="563651" timestamp2="563651">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="321" _type="InsertStringCommand" date="Fri Feb 19 12:20:02 EST 2021" starttimestamp="1613754638645" timestamp="563763" timestamp2="563763">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="322" _type="InsertStringCommand" date="Fri Feb 19 12:20:02 EST 2021" starttimestamp="1613754638645" timestamp="563802" timestamp2="563802">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="323" _type="InsertStringCommand" date="Fri Feb 19 12:20:02 EST 2021" starttimestamp="1613754638645" timestamp="563899" timestamp2="563899">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="324" _type="InsertStringCommand" date="Fri Feb 19 12:20:02 EST 2021" starttimestamp="1613754638645" timestamp="564073" timestamp2="564073">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="326" _type="PauseCommand" date="Fri Feb 19 12:20:03 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="565202">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1129]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="325" _type="InsertStringCommand" date="Fri Feb 19 12:20:03 EST 2021" starttimestamp="1613754638645" timestamp="565202" timestamp2="565202">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="327" _type="InsertStringCommand" date="Fri Feb 19 12:20:04 EST 2021" starttimestamp="1613754638645" timestamp="565538" timestamp2="565538">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="328" _type="InsertStringCommand" date="Fri Feb 19 12:20:04 EST 2021" starttimestamp="1613754638645" timestamp="565755" timestamp2="565755">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="330" _type="PauseCommand" date="Fri Feb 19 12:20:08 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="569384">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3629]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="329" _type="InsertStringCommand" date="Fri Feb 19 12:20:08 EST 2021" starttimestamp="1613754638645" timestamp="569384" timestamp2="569384">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="331" _type="InsertStringCommand" date="Fri Feb 19 12:20:08 EST 2021" starttimestamp="1613754638645" timestamp="569545" timestamp2="569545">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="333" _type="PauseCommand" date="Fri Feb 19 12:20:10 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="571623">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2078]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="332" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:20:10 EST 2021" starttimestamp="1613754638645" timestamp="571623" />
  <Command __id="335" _type="PauseCommand" date="Fri Feb 19 12:20:12 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="573663">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2040]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="334" _type="InsertStringCommand" date="Fri Feb 19 12:20:12 EST 2021" starttimestamp="1613754638645" timestamp="573663" timestamp2="573663">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="336" _type="InsertStringCommand" date="Fri Feb 19 12:20:12 EST 2021" starttimestamp="1613754638645" timestamp="573848" timestamp2="573848">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="337" _type="InsertStringCommand" date="Fri Feb 19 12:20:12 EST 2021" starttimestamp="1613754638645" timestamp="573854" timestamp2="573854">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="338" _type="InsertStringCommand" date="Fri Feb 19 12:20:12 EST 2021" starttimestamp="1613754638645" timestamp="574000" timestamp2="574000">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="339" _type="InsertStringCommand" date="Fri Feb 19 12:20:13 EST 2021" starttimestamp="1613754638645" timestamp="574493" timestamp2="574493">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="340" _type="InsertStringCommand" date="Fri Feb 19 12:20:13 EST 2021" starttimestamp="1613754638645" timestamp="574695" timestamp2="574695">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="341" _type="InsertStringCommand" date="Fri Feb 19 12:20:13 EST 2021" starttimestamp="1613754638645" timestamp="574903" timestamp2="574903">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="342" _type="InsertStringCommand" date="Fri Feb 19 12:20:13 EST 2021" starttimestamp="1613754638645" timestamp="575029" timestamp2="575029">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="343" _type="InsertStringCommand" date="Fri Feb 19 12:20:13 EST 2021" starttimestamp="1613754638645" timestamp="575112" timestamp2="575112">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="344" _type="InsertStringCommand" date="Fri Feb 19 12:20:13 EST 2021" starttimestamp="1613754638645" timestamp="575266" timestamp2="575266">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="345" _type="InsertStringCommand" date="Fri Feb 19 12:20:14 EST 2021" starttimestamp="1613754638645" timestamp="575623" timestamp2="575623">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="346" _type="InsertStringCommand" date="Fri Feb 19 12:20:14 EST 2021" starttimestamp="1613754638645" timestamp="575902" timestamp2="575902">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="348" _type="PauseCommand" date="Fri Feb 19 12:20:15 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="576913">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1011]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="347" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Fri Feb 19 12:20:15 EST 2021" starttimestamp="1613754638645" timestamp="576913" />
  <Command __id="349" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Fri Feb 19 12:20:15 EST 2021" starttimestamp="1613754638645" timestamp="577048" />
  <Command __id="350" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Fri Feb 19 12:20:16 EST 2021" starttimestamp="1613754638645" timestamp="577766" />
  <Command __id="351" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 19 12:20:16 EST 2021" starttimestamp="1613754638645" timestamp="578289" />
  <Command __id="352" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 19 12:20:17 EST 2021" starttimestamp="1613754638645" timestamp="578411" />
  <Command __id="353" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Fri Feb 19 12:20:17 EST 2021" starttimestamp="1613754638645" timestamp="578541" />
  <Command __id="354" _type="InsertStringCommand" date="Fri Feb 19 12:20:17 EST 2021" starttimestamp="1613754638645" timestamp="578957" timestamp2="578957">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="355" _type="InsertStringCommand" date="Fri Feb 19 12:20:17 EST 2021" starttimestamp="1613754638645" timestamp="579148" timestamp2="579148">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="356" _type="InsertStringCommand" date="Fri Feb 19 12:20:17 EST 2021" starttimestamp="1613754638645" timestamp="579215" timestamp2="579215">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="357" _type="InsertStringCommand" date="Fri Feb 19 12:20:17 EST 2021" starttimestamp="1613754638645" timestamp="579272" timestamp2="579272">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="358" _type="InsertStringCommand" date="Fri Feb 19 12:20:18 EST 2021" starttimestamp="1613754638645" timestamp="579755" timestamp2="579755">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="360" _type="PauseCommand" date="Fri Feb 19 12:20:19 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="581198">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1443]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="359" _type="InsertStringCommand" date="Fri Feb 19 12:20:19 EST 2021" starttimestamp="1613754638645" timestamp="581198" timestamp2="581198">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="361" _type="InsertStringCommand" date="Fri Feb 19 12:20:20 EST 2021" starttimestamp="1613754638645" timestamp="581529" timestamp2="581529">
    <data><![CDATA[|]]></data>
  </Command>
  <Command __id="362" _type="InsertStringCommand" date="Fri Feb 19 12:20:20 EST 2021" starttimestamp="1613754638645" timestamp="581639" timestamp2="581639">
    <data><![CDATA[|]]></data>
  </Command>
  <Command __id="363" _type="InsertStringCommand" date="Fri Feb 19 12:20:20 EST 2021" starttimestamp="1613754638645" timestamp="581759" timestamp2="581759">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="365" _type="PauseCommand" date="Fri Feb 19 12:20:21 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="583248">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1488]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="364" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:20:21 EST 2021" starttimestamp="1613754638645" timestamp="583247" />
  <Command __id="366" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:20:22 EST 2021" starttimestamp="1613754638645" timestamp="583369" />
  <Command __id="367" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:20:22 EST 2021" starttimestamp="1613754638645" timestamp="583494" />
  <Command __id="368" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:20:22 EST 2021" starttimestamp="1613754638645" timestamp="583627" />
  <Command __id="375" _type="PauseCommand" date="Fri Feb 19 12:20:39 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="600739">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10249]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="374" _type="SelectTextCommand" caretOffset="1705" date="Fri Feb 19 12:20:39 EST 2021" end="1705" start="1587" starttimestamp="1613754638645" timestamp="600739" />
  <Command __id="376" _type="CopyCommand" date="Fri Feb 19 12:20:39 EST 2021" starttimestamp="1613754638645" timestamp="601098" />
  <Command __id="378" _type="MoveCaretCommand" caretOffset="1196" date="Fri Feb 19 12:20:40 EST 2021" docOffset="7915" starttimestamp="1613754638645" timestamp="602120" />
  <Command __id="380" _type="PauseCommand" date="Fri Feb 19 12:20:43 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="604652">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2532]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="379" _type="SelectTextCommand" caretOffset="1203" date="Fri Feb 19 12:20:43 EST 2021" end="1203" start="1153" starttimestamp="1613754638645" timestamp="604652" />
  <Command __id="381" _type="SelectTextCommand" caretOffset="1203" date="Fri Feb 19 12:20:43 EST 2021" end="1203" start="1153" starttimestamp="1613754638645" timestamp="604653" />
  <Command __id="383" _type="PasteCommand" date="Fri Feb 19 12:20:43 EST 2021" starttimestamp="1613754638645" timestamp="604844" />
  <Command __id="385" _type="PauseCommand" date="Fri Feb 19 12:20:44 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="606307">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1463]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="384" _type="SelectTextCommand" caretOffset="1268" date="Fri Feb 19 12:20:44 EST 2021" end="1268" start="1252" starttimestamp="1613754638645" timestamp="606307" />
  <Command __id="386" _type="SelectTextCommand" caretOffset="1268" date="Fri Feb 19 12:20:44 EST 2021" end="1268" start="1252" starttimestamp="1613754638645" timestamp="606307" />
  <Command __id="388" _type="PauseCommand" date="Fri Feb 19 12:20:47 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="608479">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2172]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="389" _type="InsertStringCommand" date="Fri Feb 19 12:20:47 EST 2021" starttimestamp="1613754638645" timestamp="608486" timestamp2="608486">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="390" _type="InsertStringCommand" date="Fri Feb 19 12:20:47 EST 2021" starttimestamp="1613754638645" timestamp="608486" timestamp2="608486">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="391" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 12:20:47 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="608523" />
  <Command __id="395" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 12:20:47 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="608728" />
  <Command __id="397" _type="InsertStringCommand" date="Fri Feb 19 12:20:47 EST 2021" starttimestamp="1613754638645" timestamp="608805" timestamp2="608805">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="398" _type="InsertStringCommand" date="Fri Feb 19 12:20:47 EST 2021" starttimestamp="1613754638645" timestamp="608805" timestamp2="608805">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="399" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 12:20:47 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="608847" />
  <Command __id="401" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 12:20:47 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="608928" />
  <Command __id="403" _type="InsertStringCommand" date="Fri Feb 19 12:20:47 EST 2021" starttimestamp="1613754638645" timestamp="609024" timestamp2="609024">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="404" _type="InsertStringCommand" date="Fri Feb 19 12:20:47 EST 2021" starttimestamp="1613754638645" timestamp="609025" timestamp2="609025">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="406" _type="InsertStringCommand" date="Fri Feb 19 12:20:47 EST 2021" starttimestamp="1613754638645" timestamp="609127" timestamp2="609127">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="407" _type="InsertStringCommand" date="Fri Feb 19 12:20:47 EST 2021" starttimestamp="1613754638645" timestamp="609127" timestamp2="609127">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="409" _type="InsertStringCommand" date="Fri Feb 19 12:20:47 EST 2021" starttimestamp="1613754638645" timestamp="609214" timestamp2="609214">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="410" _type="InsertStringCommand" date="Fri Feb 19 12:20:47 EST 2021" starttimestamp="1613754638645" timestamp="609214" timestamp2="609214">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="412" _type="InsertStringCommand" date="Fri Feb 19 12:20:48 EST 2021" starttimestamp="1613754638645" timestamp="609867" timestamp2="609867">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="413" _type="InsertStringCommand" date="Fri Feb 19 12:20:48 EST 2021" starttimestamp="1613754638645" timestamp="609868" timestamp2="609868">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="415" _type="PauseCommand" date="Fri Feb 19 12:20:50 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="612141">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2273]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="414" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Fri Feb 19 12:20:50 EST 2021" starttimestamp="1613754638645" timestamp="612141" />
  <Command __id="416" _type="BreakPointCommand" date="Fri Feb 19 12:20:50 EST 2021" lineNumber="239" starttimestamp="1613754638645" timestamp="612150" type="BreakPointAdded" />
  <Command __id="418" _type="PauseCommand" date="Fri Feb 19 12:20:53 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="614674">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BreakPointCommand]]></prev>
    <pause><![CDATA[2524]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="417" _type="SelectTextCommand" caretOffset="1252" date="Fri Feb 19 12:20:53 EST 2021" end="1262" start="1252" starttimestamp="1613754638645" timestamp="614674" />
  <Command __id="419" _type="SelectTextCommand" caretOffset="1252" date="Fri Feb 19 12:20:53 EST 2021" end="1262" start="1252" starttimestamp="1613754638645" timestamp="614674" />
  <Command __id="421" _type="InsertStringCommand" date="Fri Feb 19 12:20:53 EST 2021" starttimestamp="1613754638645" timestamp="615262" timestamp2="615262">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="422" _type="InsertStringCommand" date="Fri Feb 19 12:20:53 EST 2021" starttimestamp="1613754638645" timestamp="615262" timestamp2="615262">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="423" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 12:20:53 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="615298" />
  <Command __id="428" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 12:20:54 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="615783" />
  <Command __id="430" _type="InsertStringCommand" date="Fri Feb 19 12:20:54 EST 2021" starttimestamp="1613754638645" timestamp="615801" timestamp2="615801">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="431" _type="InsertStringCommand" date="Fri Feb 19 12:20:54 EST 2021" starttimestamp="1613754638645" timestamp="615801" timestamp2="615801">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="467" _type="PauseCommand" date="Fri Feb 19 12:21:11 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="633011">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8502]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="466" _type="ShellCommand" date="Fri Feb 19 12:21:11 EST 2021" starttimestamp="1613754638645" timestamp="633011" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="469" _type="PauseCommand" date="Fri Feb 19 12:22:17 EST 2021" range="1m-2m" starttimestamp="1613754638645" timestamp="698858">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[65847]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="468" _type="ShellCommand" date="Fri Feb 19 12:22:17 EST 2021" starttimestamp="1613754638645" timestamp="698858" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="470" _type="MoveCaretCommand" caretOffset="426" date="Fri Feb 19 12:22:17 EST 2021" docOffset="7145" starttimestamp="1613754638645" timestamp="698975" />
  <Command __id="471" _type="MoveCaretCommand" caretOffset="426" date="Fri Feb 19 12:22:17 EST 2021" docOffset="7145" starttimestamp="1613754638645" timestamp="698975" />
  <Command __id="480" _type="PauseCommand" date="Fri Feb 19 12:22:27 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="708466">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3469]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="479" _type="MoveCaretCommand" caretOffset="494" date="Fri Feb 19 12:22:27 EST 2021" docOffset="732" starttimestamp="1613754638645" timestamp="708466" />
  <Command __id="481" _type="MoveCaretCommand" caretOffset="503" date="Fri Feb 19 12:22:27 EST 2021" docOffset="741" starttimestamp="1613754638645" timestamp="708790" />
  <Command __id="482" _type="MoveCaretCommand" caretOffset="510" date="Fri Feb 19 12:22:27 EST 2021" docOffset="748" starttimestamp="1613754638645" timestamp="709216" />
  <Command __id="483" _type="SelectTextCommand" caretOffset="518" date="Fri Feb 19 12:22:28 EST 2021" end="519" start="518" starttimestamp="1613754638645" timestamp="709556" />
  <Command __id="484" _type="MoveCaretCommand" caretOffset="525" date="Fri Feb 19 12:22:28 EST 2021" docOffset="763" starttimestamp="1613754638645" timestamp="709955" />
  <Command __id="486" _type="PauseCommand" date="Fri Feb 19 12:22:33 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="714502">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4547]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="487" _type="MoveCaretCommand" caretOffset="1280" date="Fri Feb 19 12:22:33 EST 2021" docOffset="7999" starttimestamp="1613754638645" timestamp="714638" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 12:10:38 EST 2021" docASTNodeCount="54" docActiveCodeLength="369" docExpressionCount="36" docLength="431" projectName="A0" starttimestamp="1613754638645" timestamp="258">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Sophomore 2st Sem\COMP533\A0\src\launcher\RunTests.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package launcher;

import gradingTools.comp533s21.assignment2.S21Assignment2Suite;
import trace.grader.basics.GraderBasicsTraceUtility;
//import gradingTools.comp533s20.assignment3.Assignment3Suite;
import util.trace.Tracer;
public class RunTests {
	public static void main(String[] args) {
		Tracer.showInfo(true);
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		S21Assignment2Suite.main(args);				
	}
}
]]></snapshot>
  </Command>
  <Command __id="7" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 12:10:56 EST 2021" docASTNodeCount="934" docActiveCodeLength="5768" docExpressionCount="625" docLength="5768" projectName="Hermes" starttimestamp="1613754638645" timestamp="17778">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import fluorite.model.EHEventRecorder;

public class PauseCommand extends AbstractCommand implements EHICommand{
	private static final String XML_RANGE = "range";
	private static final String XML_PREV = "prev";
	private static final String XML_NEXT = "next";
	private static final String XML_PAUSE = "pause";
	private static final String XML_PREV_TYPE = "prevType";
	private static final String XML_NEXT_TYPE = "nextType";
	public static final String[] TYPES = {"Edit", "Debug", "Run", "IO", "Exception", "Request", "Web", "Save", "Gained Focus", "Lost Focus", "Terminate", "Difficulty", "Move Caret", "Open File", "Select", "Compile", "Other"}; 
	private String prev, next, range, prevType, nextType;
	private long pause;

	public PauseCommand() {}
	
	public PauseCommand(EHICommand prev, EHICommand next, long pause, String range) {
		this.prev = prev.getCommandType();
		this.next = next.getCommandType();
		this.pause = pause;
		this.range = range;
		prevType = getType(prev);
		nextType = getType(next);
	}
	
	private String getType(EHICommand command) {
		if (command instanceof InsertStringCommand || command instanceof Insert ||
				command instanceof CopyCommand ||
				command instanceof Delete ||
				command instanceof Replace || command instanceof PasteCommand ||
				command instanceof AssistCommand) {
			return TYPES[0];
		}
		if (command instanceof RunCommand && (command.getAttributesMap().get("kind").equals("HitBreakPoint") || command.getAttributesMap().get("type").equals("Debug"))) {
			return TYPES[1];
		}
		if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {
			return TYPES[2];
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return TYPES[3];
		}
		if (command instanceof ExceptionCommand) {
			return TYPES[4];
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return TYPES[5];
		}
		if (command instanceof WebCommand) {
			return TYPES[6];
		}
		if (command instanceof EclipseCommand) {
			String id = command.getAttributesMap().get(EclipseCommand.XML_ID_ATTR).toLowerCase();
			if (id.contains("delete")) {
				return TYPES[0];
			}
			if (id.contains("save")) {
				return TYPES[7];
			}
			if (id.contains("terminate")) {
				return TYPES[10];
			}
			if (id.contains("line_start") || id.contains("line_down") || id.contains("line_up") || id.contains("column")) {
				return TYPES[12];
			}
		}
		if (command instanceof ShellCommand) {
			String type = command.getAttributesMap().get("type").toLowerCase();
			if (type.contains("gained_focus")) {
				return TYPES[8];
			}
			if (type.contains("lost_focus") || type.contains("minimized")) {
				return TYPES[9];
			}
		}
		if (command instanceof DifficultyCommand) {
			return TYPES[11];
		}
		if (command instanceof MoveCaretCommand) {
			return TYPES[12];
		}
		if (command instanceof FileOpenCommand) {
			return TYPES[13];
		}
		if (command instanceof SelectTextCommand) {
			return TYPES[14];
		}
		if (command instanceof CompilationCommand) {
			return TYPES[15];
		}
		return TYPES[16];
	}
	
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_RANGE, range);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());
		dataMap.put(XML_PREV, prev);
		dataMap.put(XML_NEXT, next);
		dataMap.put(XML_PAUSE, pause+"");
		dataMap.put(XML_PREV_TYPE, prevType);
		dataMap.put(XML_NEXT_TYPE, nextType);
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "PauseCommand";
	}

	@Override
	public String getName() {
		return "Pause";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			prev = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			next = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_PAUSE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			pause = Long.parseLong(textNode.getTextContent());
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			range = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_PREV_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			prevType = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			nextType = textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="14" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 12:11:03 EST 2021" docASTNodeCount="5815" docActiveCodeLength="33047" docExpressionCount="4033" docLength="35282" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="25182">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="19" _type="Delete" date="Fri Feb 19 12:11:16 EST 2021" docASTNodeCount="5809" docActiveCodeLength="33015" docExpressionCount="4028" docLength="35250" endLine="3" length="32" offset="24" startLine="2" starttimestamp="1613754638645" timestamp="37611">
    <text><![CDATA[import java.io.BufferedReader;
]]></text>
  </DocumentChange>
  <DocumentChange __id="23" _type="Delete" date="Fri Feb 19 12:11:17 EST 2021" docASTNodeCount="5797" docActiveCodeLength="32944" docExpressionCount="4018" docLength="35179" endLine="9" length="71" offset="163" repeat="2" startLine="7" starttimestamp="1613754638645" timestamp="38751" timestamp2="38946">
    <text><![CDATA[import java.io.InputStreamReader;
import java.net.HttpURLConnection;
]]></text>
  </DocumentChange>
  <Command __id="64" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 12:15:24 EST 2021" docASTNodeCount="6305" docActiveCodeLength="36390" docExpressionCount="4229" docLength="36445" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="286062">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	protected static final String REST_INSESSION = "Rest(In Session)";
	protected static final String REST_ENDSESSION = "Rest(End Session)";
	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	protected static final String XML_START1 = "<Events startTimestamp=\"";
	protected static final String XML_START2 = "\" logVersion=\"";
	protected static final String XML_VERSION = "1.0.0.202008151525";
	protected static final String XML_START3 = "\">\r\n";
	protected static final String XML_FILE_ENDING = "\r\n</Events>"; 
	protected static final long ONE_SECOND = 1000;
	protected static final long ONE_MIN = 60*1000;
	protected static final long TEN_MIN = 10*ONE_MIN;
	protected static final long FIVE_MIN = 5*ONE_MIN;
	protected static final long HALF_MIN = ONE_MIN/2;
	protected static final long TWO_MIN = 2*ONE_MIN;
	protected static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	protected int threadCount = 0;
	protected CountDownLatch latch;
	protected Analyzer analyzer;
	private static final int THREAD_LIM = 3;
	private int count = 0;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};

	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	protected String getEventType(EHICommand command) {
		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		latch = new CountDownLatch(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					latch.countDown();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
								return;
							}
							try {
								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}finally {
								// TODO: handle finally clause
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
							}
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	protected boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			int k = 0;
			for(; k < commands.size(); k++) {
				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {
					break;
				}
			}
			for(; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	protected List<EHICommand> readWebCommands(File file){
		if (!file.exists()) {
			return null;
		}
		List<EHICommand> retVal = new ArrayList<>();
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(file));
			String nextLine;
			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");
			Date date;
			String keyword;
			String url;
			WebCommand webCommand;
			while ((nextLine = br.readLine()) != null) {
				try {
					String[] tokens = nextLine.split("\t");
					if (tokens.length >= 3) {
						date = format.parse(tokens[0]);
						keyword = tokens[1];
						url = tokens[2];
						if (keyword.contains("google.com/url?") || keyword.equals(url)) {
							continue;
						}
						webCommand = new WebCommand(keyword, url);
						webCommand.setTimestamp(date.getTime());
						retVal.add(0, webCommand);
					} else {
						System.out.println("Failed to parse WebCommand");
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return retVal;
	}
	
	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
	
	protected long getLogFileCreationTime(File file) {
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
		try {
			return df.parse(file.getName().substring(3, 27)).getTime();
		} catch (ParseException e) {
			e.printStackTrace();
			return 0;
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="83" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 12:17:30 EST 2021" docASTNodeCount="5797" docActiveCodeLength="32944" docExpressionCount="4018" docLength="35179" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="412153">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶"), Diff(DELETE,"import java.io.BufferedReader;¶"), Diff(EQUAL,"import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶"), Diff(DELETE,"import java.io.InputStreamReader;¶import java.net.HttpURLConnection;¶"), Diff(EQUAL,"import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <Command __id="371" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 12:20:29 EST 2021" docASTNodeCount="934" docActiveCodeLength="5768" docExpressionCount="625" docLength="5768" projectName="Hermes" starttimestamp="1613754638645" timestamp="590370">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.TreeMap;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class PauseCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_RANGE = "range";¶	private static final String XML_PREV = "prev";¶	private static final String XML_NEXT = "next";¶	private static final String XML_PAUSE = "pause";¶	private static final String XML_PREV_TYPE = "prevType";¶	private static final String XML_NEXT_TYPE = "nextType";¶	public static final String[] TYPES = {"Edit", "Debug", "Run", "IO", "Exception", "Request", "Web", "Save", "Gained Focus", "Lost Focus", "Terminate", "Difficulty", "Move Caret", "Open File", "Select", "Compile", "Other"}; ¶	private String prev, next, range, prevType, nextType;¶	private long pause;¶¶	public PauseCommand() {}¶	¶	public PauseCommand(EHICommand prev, EHICommand next, long pause, String range) {¶		this.prev = prev.getCommandType();¶		this.next = next.getCommandType();¶		this.pause = pause;¶		this.range = range;¶		prevType = getType(prev);¶		nextType = getType(next);¶	}¶	¶	private String getType(EHICommand command) {¶		if (command instanceof InsertStringCommand || command instanceof Insert ||¶				command instanceof CopyCommand ||¶				command instanceof Delete ||¶				command instanceof Replace || command instanceof PasteCommand ||¶				command instanceof AssistCommand) {¶			return TYPES[0];¶		}¶		if (command instanceof RunCommand && (command.getAttributesMap().get("kind").equals("HitBreakPoint") || command.getAttributesMap().get("type").equals("Debug"))) {¶			return TYPES[1];¶		}¶		if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {¶			return TYPES[2];¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return TYPES[3];¶		}¶		if (command instanceof ExceptionCommand) {¶			return TYPES[4];¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return TYPES[5];¶		}¶		if (command instanceof WebCommand) {¶			return TYPES[6];¶		}¶		if (command instanceof EclipseCommand) {¶			String id = command.getAttributesMap().get(EclipseCommand.XML_ID_ATTR).toLowerCase();¶			if (id.contains("delete")) {¶				return TYPES[0];¶			}¶			if (id.contains("save")) {¶				return TYPES[7];¶			}¶			if (id.contains("terminate")) {¶				return TYPES[10];¶			}¶			if (id.contains("line_start") || id.contains("line_down") || id.contains("line_up") || id.contains("column")) {¶				return TYPES[12];¶			}¶		}¶		if (command instanceof ShellCommand) {¶			String type = command.getAttributesMap().get("type").toLowerCase();¶			if (type.contains("gained_focus")) {¶				return TYPES[8];¶			}¶			if (type.contains("lost_focus") || type.contains("minimized")) {¶				return TYPES[9];¶			}¶		}¶		if (command instanceof DifficultyCommand) {¶			return TYPES[11];¶		}¶		if (command instanceof MoveCaretCommand) {¶			return TYPES[12];¶		}¶		if (command instanceof FileOpenCommand) {¶			return TYPES[13];¶		}¶		if (command instanceof SelectTextCommand) {¶			return TYPES[14];¶		}¶		if (command instanceof CompilationCommand) {¶			return TYPES[15];¶		}¶		return TYPES[16];¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_RANGE, range);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());¶		dataMap.put(XML_PREV, prev);¶		dataMap.put(XML_NEXT, next);¶		dataMap.put(XML_PAUSE, pause+"");¶		dataMap.put(XML_PREV_TYPE, prevType);¶		dataMap.put(XML_NEXT_TYPE, nextType);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "PauseCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Pause";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prev = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			next = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_PAUSE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			pause = Long.parseLong(textNode.getTextContent());¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			range = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prevType = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			nextType = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="377" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 12:20:40 EST 2021" docASTNodeCount="5842" docActiveCodeLength="33176" docExpressionCount="4045" docLength="35411" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="601986">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶"), Diff(INSERT,"		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof RunCommand) {¶					¶				}¶			}¶		}¶"), Diff(EQUAL,"//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof RunCommand) {
					
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="382" _type="Replace" date="Fri Feb 19 12:20:43 EST 2021" docASTNodeCount="5856" docActiveCodeLength="33248" docExpressionCount="4058" docLength="35483" endLine="239" insertionLength="126" int_docASTNodeCount="5836" int_docActiveCodeLength="33122" int_docExpressionCount="4042" int_docLength="35357" length="54" offset="7868" startLine="237" starttimestamp="1613754638645" timestamp="604739">
    <deletedText><![CDATA[				if (command instanceof RunCommand) {
					
				}]]></deletedText>
    <insertedText><![CDATA[				if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {
					return TYPES[2];
				}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="387" _type="Replace" date="Fri Feb 19 12:20:47 EST 2021" docASTNodeCount="5854" docActiveCodeLength="33233" docExpressionCount="4056" docLength="35468" endLine="238" insertionLength="1" int_docASTNodeCount="5852" int_docActiveCodeLength="33232" int_docExpressionCount="4055" int_docLength="35467" length="16" offset="7971" startLine="238" starttimestamp="1613754638645" timestamp="608479">
    <deletedText><![CDATA[return TYPES[2];]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="392" _type="Insert" date="Fri Feb 19 12:20:47 EST 2021" docASTNodeCount="5857" docActiveCodeLength="33242" docExpressionCount="4057" docLength="35477" length="9" offset="7972" repeat="9" starttimestamp="1613754638645" timestamp="608680" timestamp2="609863">
    <text><![CDATA[nt a = 0;]]></text>
  </DocumentChange>
  <DocumentChange __id="420" _type="Replace" date="Fri Feb 19 12:20:53 EST 2021" docASTNodeCount="5854" docActiveCodeLength="33233" docExpressionCount="4056" docLength="35468" endLine="238" insertionLength="1" int_docASTNodeCount="5852" int_docActiveCodeLength="33232" int_docExpressionCount="4055" int_docLength="35467" length="10" offset="7971" startLine="238" starttimestamp="1613754638645" timestamp="615256">
    <deletedText><![CDATA[int a = 0;]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="424" _type="Insert" date="Fri Feb 19 12:20:54 EST 2021" docASTNodeCount="5854" docActiveCodeLength="33237" docExpressionCount="4056" docLength="35472" length="4" offset="7972" repeat="4" starttimestamp="1613754638645" timestamp="615464" timestamp2="615583">
    <text><![CDATA[ysou]]></text>
  </DocumentChange>
  <DocumentChange __id="429" _type="Replace" date="Fri Feb 19 12:20:54 EST 2021" docASTNodeCount="5858" docActiveCodeLength="33253" docExpressionCount="4060" docLength="35488" endLine="238" insertionLength="21" int_docASTNodeCount="5852" int_docActiveCodeLength="33232" int_docExpressionCount="4055" int_docLength="35467" length="5" offset="7971" startLine="238" starttimestamp="1613754638645" timestamp="615793">
    <deletedText><![CDATA[sysou]]></deletedText>
    <insertedText><![CDATA[System.out.println();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="432" _type="Insert" date="Fri Feb 19 12:20:56 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33257" docExpressionCount="4061" docLength="35492" length="4" offset="7990" repeat="4" starttimestamp="1613754638645" timestamp="617581" timestamp2="617929">
    <text><![CDATA[comm]]></text>
  </DocumentChange>
  <DocumentChange __id="441" _type="Replace" date="Fri Feb 19 12:20:56 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33260" docExpressionCount="4061" docLength="35495" endLine="238" insertionLength="7" int_docASTNodeCount="5858" int_docActiveCodeLength="33253" int_docExpressionCount="4060" int_docLength="35488" length="4" offset="7990" startLine="238" starttimestamp="1613754638645" timestamp="618082">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <Command __id="476" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 12:22:23 EST 2021" docASTNodeCount="934" docActiveCodeLength="5768" docExpressionCount="625" docLength="5768" projectName="Hermes" starttimestamp="1613754638645" timestamp="704852">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.TreeMap;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class PauseCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_RANGE = "range";¶	private static final String XML_PREV = "prev";¶	private static final String XML_NEXT = "next";¶	private static final String XML_PAUSE = "pause";¶	private static final String XML_PREV_TYPE = "prevType";¶	private static final String XML_NEXT_TYPE = "nextType";¶	public static final String[] TYPES = {"Edit", "Debug", "Run", "IO", "Exception", "Request", "Web", "Save", "Gained Focus", "Lost Focus", "Terminate", "Difficulty", "Move Caret", "Open File", "Select", "Compile", "Other"}; ¶	private String prev, next, range, prevType, nextType;¶	private long pause;¶¶	public PauseCommand() {}¶	¶	public PauseCommand(EHICommand prev, EHICommand next, long pause, String range) {¶		this.prev = prev.getCommandType();¶		this.next = next.getCommandType();¶		this.pause = pause;¶		this.range = range;¶		prevType = getType(prev);¶		nextType = getType(next);¶	}¶	¶	private String getType(EHICommand command) {¶		if (command instanceof InsertStringCommand || command instanceof Insert ||¶				command instanceof CopyCommand ||¶				command instanceof Delete ||¶				command instanceof Replace || command instanceof PasteCommand ||¶				command instanceof AssistCommand) {¶			return TYPES[0];¶		}¶		if (command instanceof RunCommand && (command.getAttributesMap().get("kind").equals("HitBreakPoint") || command.getAttributesMap().get("type").equals("Debug"))) {¶			return TYPES[1];¶		}¶		if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {¶			return TYPES[2];¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return TYPES[3];¶		}¶		if (command instanceof ExceptionCommand) {¶			return TYPES[4];¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return TYPES[5];¶		}¶		if (command instanceof WebCommand) {¶			return TYPES[6];¶		}¶		if (command instanceof EclipseCommand) {¶			String id = command.getAttributesMap().get(EclipseCommand.XML_ID_ATTR).toLowerCase();¶			if (id.contains("delete")) {¶				return TYPES[0];¶			}¶			if (id.contains("save")) {¶				return TYPES[7];¶			}¶			if (id.contains("terminate")) {¶				return TYPES[10];¶			}¶			if (id.contains("line_start") || id.contains("line_down") || id.contains("line_up") || id.contains("column")) {¶				return TYPES[12];¶			}¶		}¶		if (command instanceof ShellCommand) {¶			String type = command.getAttributesMap().get("type").toLowerCase();¶			if (type.contains("gained_focus")) {¶				return TYPES[8];¶			}¶			if (type.contains("lost_focus") || type.contains("minimized")) {¶				return TYPES[9];¶			}¶		}¶		if (command instanceof DifficultyCommand) {¶			return TYPES[11];¶		}¶		if (command instanceof MoveCaretCommand) {¶			return TYPES[12];¶		}¶		if (command instanceof FileOpenCommand) {¶			return TYPES[13];¶		}¶		if (command instanceof SelectTextCommand) {¶			return TYPES[14];¶		}¶		if (command instanceof CompilationCommand) {¶			return TYPES[15];¶		}¶		return TYPES[16];¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_RANGE, range);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());¶		dataMap.put(XML_PREV, prev);¶		dataMap.put(XML_NEXT, next);¶		dataMap.put(XML_PAUSE, pause+"");¶		dataMap.put(XML_PREV_TYPE, prevType);¶		dataMap.put(XML_NEXT_TYPE, nextType);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "PauseCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Pause";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prev = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			next = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_PAUSE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			pause = Long.parseLong(textNode.getTextContent());¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			range = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prevType = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			nextType = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="485" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 12:22:33 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33260" docExpressionCount="4061" docLength="35495" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="714502">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof RunCommand"), Diff(DELETE,") {¶					"), Diff(INSERT," && command.getAttributesMap().get("type").equals("Run")) {¶					System.out.println(command);"), Diff(EQUAL,"¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="491" _type="Delete" date="Fri Feb 19 12:22:38 EST 2021" docASTNodeCount="5807" docActiveCodeLength="33194" docExpressionCount="4020" docLength="35429" endLine="237" length="66" offset="7895" repeat="2" startLine="237" starttimestamp="1613754638645" timestamp="720111" timestamp2="720230">
    <text><![CDATA[RunCommand && command.getAttributesMap().get("type").equals("Run")]]></text>
  </DocumentChange>
  <DocumentChange __id="497" _type="Insert" date="Fri Feb 19 12:22:38 EST 2021" docASTNodeCount="5807" docActiveCodeLength="33196" docExpressionCount="4020" docLength="35431" length="2" offset="7895" repeat="2" starttimestamp="1613754638645" timestamp="720334" timestamp2="720353">
    <text><![CDATA[34]]></text>
  </DocumentChange>
  <DocumentChange __id="503" _type="Delete" date="Fri Feb 19 12:22:39 EST 2021" docASTNodeCount="5807" docActiveCodeLength="33194" docExpressionCount="4020" docLength="35429" endLine="237" length="2" offset="7895" repeat="2" startLine="237" starttimestamp="1613754638645" timestamp="720784" timestamp2="720890">
    <text><![CDATA[34]]></text>
  </DocumentChange>
  <DocumentChange __id="509" _type="Insert" date="Fri Feb 19 12:22:39 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33198" docExpressionCount="4051" docLength="35433" length="4" offset="7895" repeat="4" starttimestamp="1613754638645" timestamp="721004" timestamp2="721471">
    <text><![CDATA[exce]]></text>
  </DocumentChange>
  <DocumentChange __id="517" _type="Replace" date="Fri Feb 19 12:22:40 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33203" docExpressionCount="4051" docLength="35438" endLine="237" insertionLength="9" int_docASTNodeCount="5807" int_docActiveCodeLength="33194" int_docExpressionCount="4020" int_docLength="35429" length="4" offset="7895" startLine="237" starttimestamp="1613754638645" timestamp="721659">
    <deletedText><![CDATA[exce]]></deletedText>
    <insertedText><![CDATA[Exception]]></insertedText>
  </DocumentChange>
  <Command __id="489" _type="PauseCommand" date="Fri Feb 19 12:22:38 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="719568">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4930]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="488" _type="SelectTextCommand" caretOffset="1242" date="Fri Feb 19 12:22:38 EST 2021" end="1242" start="1177" starttimestamp="1613754638645" timestamp="719568" />
  <Command __id="490" _type="SelectTextCommand" caretOffset="1242" date="Fri Feb 19 12:22:38 EST 2021" end="1242" start="1177" starttimestamp="1613754638645" timestamp="719568" />
  <Command __id="492" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:22:38 EST 2021" starttimestamp="1613754638645" timestamp="720117" />
  <Command __id="493" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:22:38 EST 2021" starttimestamp="1613754638645" timestamp="720118" />
  <Command __id="495" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:22:38 EST 2021" starttimestamp="1613754638645" timestamp="720232" />
  <Command __id="496" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:22:38 EST 2021" starttimestamp="1613754638645" timestamp="720232" />
  <Command __id="498" _type="InsertStringCommand" date="Fri Feb 19 12:22:38 EST 2021" starttimestamp="1613754638645" timestamp="720338" timestamp2="720338">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="499" _type="InsertStringCommand" date="Fri Feb 19 12:22:38 EST 2021" starttimestamp="1613754638645" timestamp="720339" timestamp2="720339">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="501" _type="InsertStringCommand" date="Fri Feb 19 12:22:39 EST 2021" starttimestamp="1613754638645" timestamp="720357" timestamp2="720357">
    <data><![CDATA[4]]></data>
  </Command>
  <Command __id="502" _type="InsertStringCommand" date="Fri Feb 19 12:22:39 EST 2021" starttimestamp="1613754638645" timestamp="720357" timestamp2="720357">
    <data><![CDATA[4]]></data>
  </Command>
  <Command __id="504" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:22:39 EST 2021" starttimestamp="1613754638645" timestamp="720787" />
  <Command __id="505" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:22:39 EST 2021" starttimestamp="1613754638645" timestamp="720787" />
  <Command __id="507" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:22:39 EST 2021" starttimestamp="1613754638645" timestamp="720893" />
  <Command __id="508" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Fri Feb 19 12:22:39 EST 2021" starttimestamp="1613754638645" timestamp="720893" />
  <Command __id="510" _type="InsertStringCommand" date="Fri Feb 19 12:22:39 EST 2021" starttimestamp="1613754638645" timestamp="721009" timestamp2="721009">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="511" _type="InsertStringCommand" date="Fri Feb 19 12:22:39 EST 2021" starttimestamp="1613754638645" timestamp="721010" timestamp2="721010">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="512" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 12:22:39 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="721059" />
  <Command __id="516" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 12:22:40 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="721651" />
  <Command __id="518" _type="InsertStringCommand" date="Fri Feb 19 12:22:40 EST 2021" starttimestamp="1613754638645" timestamp="721665" timestamp2="721665">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="519" _type="InsertStringCommand" date="Fri Feb 19 12:22:40 EST 2021" starttimestamp="1613754638645" timestamp="721665" timestamp2="721665">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="521" _type="UndoCommand" date="Fri Feb 19 12:22:41 EST 2021" starttimestamp="1613754638645" timestamp="722546" />
  <Command __id="523" _type="InsertStringCommand" date="Fri Feb 19 12:22:41 EST 2021" starttimestamp="1613754638645" timestamp="722914" timestamp2="722914">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="524" _type="InsertStringCommand" date="Fri Feb 19 12:22:41 EST 2021" starttimestamp="1613754638645" timestamp="722914" timestamp2="722914">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="525" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 12:22:41 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="722963" />
  <Command __id="529" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 12:22:41 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="723228" />
  <Command __id="531" _type="InsertStringCommand" date="Fri Feb 19 12:22:42 EST 2021" starttimestamp="1613754638645" timestamp="723388" timestamp2="723388">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="532" _type="InsertStringCommand" date="Fri Feb 19 12:22:42 EST 2021" starttimestamp="1613754638645" timestamp="723388" timestamp2="723388">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="534" _type="InsertStringCommand" date="Fri Feb 19 12:22:42 EST 2021" starttimestamp="1613754638645" timestamp="723412" timestamp2="723412">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="535" _type="InsertStringCommand" date="Fri Feb 19 12:22:42 EST 2021" starttimestamp="1613754638645" timestamp="723412" timestamp2="723412">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="536" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 12:22:42 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="723458" />
  <Command __id="537" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 12:22:42 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="723490" />
  <Command __id="538" _type="ShellCommand" date="Fri Feb 19 12:22:42 EST 2021" starttimestamp="1613754638645" timestamp="723965" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="540" _type="PauseCommand" date="Fri Feb 19 12:22:43 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="725304">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1339]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="539" _type="ShellCommand" date="Fri Feb 19 12:22:43 EST 2021" starttimestamp="1613754638645" timestamp="725304" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="542" _type="InsertStringCommand" date="Fri Feb 19 12:22:44 EST 2021" starttimestamp="1613754638645" timestamp="725980" timestamp2="725980">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="543" _type="InsertStringCommand" date="Fri Feb 19 12:22:44 EST 2021" starttimestamp="1613754638645" timestamp="725980" timestamp2="725980">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="544" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 12:22:44 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="726087" />
  <Command __id="545" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 12:22:44 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="726120" />
  <Command __id="547" _type="InsertStringCommand" date="Fri Feb 19 12:22:44 EST 2021" starttimestamp="1613754638645" timestamp="726184" timestamp2="726184">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="548" _type="InsertStringCommand" date="Fri Feb 19 12:22:44 EST 2021" starttimestamp="1613754638645" timestamp="726184" timestamp2="726184">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="549" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 12:22:44 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="726292" />
  <Command __id="550" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 12:22:44 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="726325" />
  <Command __id="552" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Fri Feb 19 12:22:45 EST 2021" starttimestamp="1613754638645" timestamp="726741" />
  <Command __id="554" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Fri Feb 19 12:22:45 EST 2021" starttimestamp="1613754638645" timestamp="726855" />
  <Command __id="556" _type="InsertStringCommand" date="Fri Feb 19 12:22:46 EST 2021" starttimestamp="1613754638645" timestamp="727826" timestamp2="727826">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="557" _type="InsertStringCommand" date="Fri Feb 19 12:22:46 EST 2021" starttimestamp="1613754638645" timestamp="727826" timestamp2="727826">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="559" _type="InsertStringCommand" date="Fri Feb 19 12:22:46 EST 2021" starttimestamp="1613754638645" timestamp="727879" timestamp2="727879">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="560" _type="InsertStringCommand" date="Fri Feb 19 12:22:46 EST 2021" starttimestamp="1613754638645" timestamp="727880" timestamp2="727880">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="562" _type="InsertStringCommand" date="Fri Feb 19 12:22:46 EST 2021" starttimestamp="1613754638645" timestamp="727953" timestamp2="727953">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="563" _type="InsertStringCommand" date="Fri Feb 19 12:22:46 EST 2021" starttimestamp="1613754638645" timestamp="727953" timestamp2="727953">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="564" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 12:22:46 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="728070" />
  <Command __id="565" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 12:22:46 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="728156" />
  <Command __id="567" _type="InsertStringCommand" date="Fri Feb 19 12:22:46 EST 2021" starttimestamp="1613754638645" timestamp="728170" timestamp2="728170">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="568" _type="InsertStringCommand" date="Fri Feb 19 12:22:46 EST 2021" starttimestamp="1613754638645" timestamp="728170" timestamp2="728170">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="570" _type="InsertStringCommand" date="Fri Feb 19 12:22:46 EST 2021" starttimestamp="1613754638645" timestamp="728221" timestamp2="728221">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="571" _type="InsertStringCommand" date="Fri Feb 19 12:22:46 EST 2021" starttimestamp="1613754638645" timestamp="728221" timestamp2="728221">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="573" _type="InsertStringCommand" date="Fri Feb 19 12:22:47 EST 2021" starttimestamp="1613754638645" timestamp="728528" timestamp2="728528">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="574" _type="InsertStringCommand" date="Fri Feb 19 12:22:47 EST 2021" starttimestamp="1613754638645" timestamp="728529" timestamp2="728529">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="575" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 12:22:47 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="728580" />
  <Command __id="583" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 12:22:48 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="730215" />
  <Command __id="585" _type="InsertStringCommand" date="Fri Feb 19 12:22:48 EST 2021" starttimestamp="1613754638645" timestamp="730229" timestamp2="730229">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="586" _type="InsertStringCommand" date="Fri Feb 19 12:22:48 EST 2021" starttimestamp="1613754638645" timestamp="730229" timestamp2="730229">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="623" _type="PauseCommand" date="Fri Feb 19 12:22:59 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="740735">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2013]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="622" _type="RunCommand" date="Fri Feb 19 12:22:59 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="740735" type="Run" />
  <Command __id="625" _type="PauseCommand" date="Fri Feb 19 12:23:06 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="747734">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[6999]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="624" _type="MoveCaretCommand" caretOffset="1192" date="Fri Feb 19 12:23:06 EST 2021" docOffset="7911" starttimestamp="1613754638645" timestamp="747734" />
  <Command __id="626" _type="MoveCaretCommand" caretOffset="1192" date="Fri Feb 19 12:23:06 EST 2021" docOffset="7911" starttimestamp="1613754638645" timestamp="747734" />
  <Command __id="627" _type="ShellCommand" date="Fri Feb 19 12:23:06 EST 2021" starttimestamp="1613754638645" timestamp="747940" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="629" _type="PauseCommand" date="Fri Feb 19 12:57:51 EST 2021" range="30m-60m" starttimestamp="1613754638645" timestamp="2832476">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2084536]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="628" _type="ShellCommand" date="Fri Feb 19 12:57:51 EST 2021" starttimestamp="1613754638645" timestamp="2832476" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="631" _type="PauseCommand" date="Fri Feb 19 12:57:53 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="2834843">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2367]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="630" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Fri Feb 19 12:57:53 EST 2021" starttimestamp="1613754638645" timestamp="2834843" />
  <Command __id="632" _type="RunCommand" date="Fri Feb 19 12:57:53 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="2834904" type="Debug" />
  <Command __id="633" _type="RunCommand" date="Fri Feb 19 12:57:53 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="2834904" type="Debug" />
  <Command __id="634" _type="RunCommand" date="Fri Feb 19 12:57:53 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="2834904" type="Run" />
  <Command __id="636" _type="PauseCommand" date="Fri Feb 19 12:57:56 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="2838137">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[3233]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="635" _type="ShellCommand" date="Fri Feb 19 12:57:56 EST 2021" starttimestamp="1613754638645" timestamp="2838137" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="638" _type="PauseCommand" date="Fri Feb 19 12:57:57 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="2839337">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1200]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="637" _type="ShellCommand" date="Fri Feb 19 12:57:57 EST 2021" starttimestamp="1613754638645" timestamp="2839337" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="640" _type="MoveCaretCommand" caretOffset="1102" date="Fri Feb 19 12:57:58 EST 2021" docOffset="1375" starttimestamp="1613754638645" timestamp="2839656" />
  <Command __id="642" _type="PauseCommand" date="Fri Feb 19 12:57:59 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="2841312">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1656]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="641" _type="ShellCommand" date="Fri Feb 19 12:57:59 EST 2021" starttimestamp="1613754638645" timestamp="2841312" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="644" _type="PauseCommand" date="Fri Feb 19 13:53:28 EST 2021" range="30m-60m" starttimestamp="1613754638645" timestamp="6170319">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3329007]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="643" _type="ShellCommand" date="Fri Feb 19 13:53:28 EST 2021" starttimestamp="1613754638645" timestamp="6170319" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="646" _type="PauseCommand" date="Fri Feb 19 13:53:30 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="6171355">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1036]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="645" _type="MoveCaretCommand" caretOffset="346" date="Fri Feb 19 13:53:30 EST 2021" docOffset="619" starttimestamp="1613754638645" timestamp="6171355" />
  <Command __id="648" _type="PauseCommand" date="Fri Feb 19 13:53:32 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="6173906">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2551]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="647" _type="ShellCommand" date="Fri Feb 19 13:53:32 EST 2021" starttimestamp="1613754638645" timestamp="6173906" type="ECLIPSE_MINIMIZED" />
  <Command __id="649" _type="ShellCommand" date="Fri Feb 19 13:53:32 EST 2021" starttimestamp="1613754638645" timestamp="6173912" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="651" _type="PauseCommand" date="Fri Feb 19 14:21:43 EST 2021" range="10m-30m" starttimestamp="1613754638645" timestamp="7864914">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1691002]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="650" _type="ShellCommand" date="Fri Feb 19 14:21:43 EST 2021" starttimestamp="1613754638645" timestamp="7864914" type="ECLIPSE_MAXIMIZED" />
  <Command __id="652" _type="ShellCommand" date="Fri Feb 19 14:21:43 EST 2021" starttimestamp="1613754638645" timestamp="7864959" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="654" _type="PauseCommand" date="Fri Feb 19 14:21:45 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7866371">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1412]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="655" _type="MoveCaretCommand" caretOffset="1192" date="Fri Feb 19 14:21:45 EST 2021" docOffset="7911" starttimestamp="1613754638645" timestamp="7866487" />
  <Command __id="657" _type="PauseCommand" date="Fri Feb 19 14:21:47 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7868499">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2012]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="656" _type="ShellCommand" date="Fri Feb 19 14:21:47 EST 2021" starttimestamp="1613754638645" timestamp="7868499" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="658" _type="ShellCommand" date="Fri Feb 19 14:21:47 EST 2021" starttimestamp="1613754638645" timestamp="7868527" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="660" _type="PauseCommand" date="Fri Feb 19 14:21:50 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7871571">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3044]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="661" _type="MoveCaretCommand" caretOffset="346" date="Fri Feb 19 14:21:50 EST 2021" docOffset="619" starttimestamp="1613754638645" timestamp="7871728" />
  <Command __id="663" _type="PauseCommand" date="Fri Feb 19 14:21:56 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="7878279">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6551]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="662" _type="SelectTextCommand" caretOffset="1210" date="Fri Feb 19 14:21:56 EST 2021" end="1495" start="1210" starttimestamp="1613754638645" timestamp="7878279" />
  <Command __id="665" _type="PauseCommand" date="Fri Feb 19 14:21:58 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7879490">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1211]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="664" _type="MoveCaretCommand" caretOffset="1455" date="Fri Feb 19 14:21:58 EST 2021" docOffset="1728" starttimestamp="1613754638645" timestamp="7879490" />
  <Command __id="666" _type="MoveCaretCommand" caretOffset="1495" date="Fri Feb 19 14:21:58 EST 2021" docOffset="1768" starttimestamp="1613754638645" timestamp="7879927" />
  <Command __id="668" _type="InsertStringCommand" date="Fri Feb 19 14:21:59 EST 2021" starttimestamp="1613754638645" timestamp="7880702" timestamp2="7880702">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="670" _type="InsertStringCommand" date="Fri Feb 19 14:21:59 EST 2021" starttimestamp="1613754638645" timestamp="7880956" timestamp2="7880956">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="671" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 14:21:59 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="7881011" />
  <Command __id="675" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 14:22:00 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="7882062" />
  <Command __id="679" _type="InsertStringCommand" date="Fri Feb 19 14:22:00 EST 2021" starttimestamp="1613754638645" timestamp="7882094" timestamp2="7882094">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="681" _type="InsertStringCommand" date="Fri Feb 19 14:22:01 EST 2021" starttimestamp="1613754638645" timestamp="7882693" timestamp2="7882693">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="683" _type="InsertStringCommand" date="Fri Feb 19 14:22:02 EST 2021" starttimestamp="1613754638645" timestamp="7883586" timestamp2="7883586">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="684" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 14:22:02 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="7883636" />
  <Command __id="686" _type="PauseCommand" date="Fri Feb 19 14:22:03 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7884921">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1285]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="685" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 14:22:03 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="7884921" />
  <Command __id="688" _type="InsertStringCommand" date="Fri Feb 19 14:22:03 EST 2021" starttimestamp="1613754638645" timestamp="7885128" timestamp2="7885128">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="690" _type="InsertStringCommand" date="Fri Feb 19 14:22:03 EST 2021" starttimestamp="1613754638645" timestamp="7885219" timestamp2="7885219">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="692" _type="InsertStringCommand" date="Fri Feb 19 14:22:03 EST 2021" starttimestamp="1613754638645" timestamp="7885294" timestamp2="7885294">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="694" _type="InsertStringCommand" date="Fri Feb 19 14:22:04 EST 2021" starttimestamp="1613754638645" timestamp="7885583" timestamp2="7885583">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="695" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 14:22:04 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="7885628" />
  <Command __id="699" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 14:22:04 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="7885816" />
  <Command __id="701" _type="InsertStringCommand" date="Fri Feb 19 14:22:04 EST 2021" starttimestamp="1613754638645" timestamp="7885937" timestamp2="7885937">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="702" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 14:22:04 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="7885994" />
  <Command __id="704" _type="PauseCommand" date="Fri Feb 19 14:22:05 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7887004">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1010]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="708" _type="PauseCommand" date="Fri Feb 19 14:22:07 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7888814">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1175]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="707" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 14:22:07 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="7888814" />
  <Command __id="711" _type="InsertStringCommand" date="Fri Feb 19 14:22:07 EST 2021" starttimestamp="1613754638645" timestamp="7888871" timestamp2="7888871">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="712" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 19 14:22:08 EST 2021" starttimestamp="1613754638645" timestamp="7889417" />
  <Command __id="713" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Fri Feb 19 14:22:08 EST 2021" starttimestamp="1613754638645" timestamp="7889576" />
  <Command __id="715" _type="InsertStringCommand" date="Fri Feb 19 14:22:09 EST 2021" starttimestamp="1613754638645" timestamp="7890497" timestamp2="7890497">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="717" _type="PauseCommand" date="Fri Feb 19 14:22:10 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7892009">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1512]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="716" _type="MoveCaretCommand" caretOffset="1519" date="Fri Feb 19 14:22:10 EST 2021" docOffset="1816" starttimestamp="1613754638645" timestamp="7892009" />
  <Command __id="718" _type="SelectTextCommand" caretOffset="1521" date="Fri Feb 19 14:22:10 EST 2021" end="1521" start="1517" starttimestamp="1613754638645" timestamp="7892146" />
  <Command __id="720" _type="PauseCommand" date="Fri Feb 19 14:22:22 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="7904228">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[12082]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="719" _type="ShellCommand" date="Fri Feb 19 14:22:22 EST 2021" starttimestamp="1613754638645" timestamp="7904228" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="722" _type="PauseCommand" date="Fri Feb 19 14:22:25 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7906521">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2293]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="721" _type="ShellCommand" date="Fri Feb 19 14:22:25 EST 2021" starttimestamp="1613754638645" timestamp="7906521" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="723" _type="MoveCaretCommand" caretOffset="1517" date="Fri Feb 19 14:22:25 EST 2021" docOffset="1814" starttimestamp="1613754638645" timestamp="7906583" />
  <Command __id="724" _type="MoveCaretCommand" caretOffset="1518" date="Fri Feb 19 14:22:25 EST 2021" docOffset="1815" starttimestamp="1613754638645" timestamp="7907319" />
  <Command __id="725" _type="SelectTextCommand" caretOffset="1521" date="Fri Feb 19 14:22:26 EST 2021" end="1521" start="1517" starttimestamp="1613754638645" timestamp="7907481" />
  <Command __id="727" _type="PasteCommand" date="Fri Feb 19 14:22:26 EST 2021" starttimestamp="1613754638645" timestamp="7907581" />
  <DocumentChange __id="520" _type="Replace" date="Fri Feb 19 12:22:41 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33198" docExpressionCount="4051" docLength="35433" endLine="237" insertionLength="4" int_docASTNodeCount="5807" int_docActiveCodeLength="33194" int_docExpressionCount="4020" int_docLength="35429" length="9" offset="7895" startLine="237" starttimestamp="1613754638645" timestamp="722517">
    <deletedText><![CDATA[Exception]]></deletedText>
    <insertedText><![CDATA[exce]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="522" _type="Replace" date="Fri Feb 19 12:22:41 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33195" docExpressionCount="4051" docLength="35430" endLine="237" insertionLength="1" int_docASTNodeCount="5807" int_docActiveCodeLength="33194" int_docExpressionCount="4020" int_docLength="35429" length="4" offset="7895" startLine="237" starttimestamp="1613754638645" timestamp="722907">
    <deletedText><![CDATA[exce]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="526" _type="Insert" date="Fri Feb 19 12:22:41 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33200" docExpressionCount="4051" docLength="35435" length="5" offset="7896" repeat="5" starttimestamp="1613754638645" timestamp="723113" timestamp2="723407">
    <text><![CDATA[sxcep]]></text>
  </DocumentChange>
  <DocumentChange __id="541" _type="Insert" date="Fri Feb 19 12:22:44 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33202" docExpressionCount="4051" docLength="35437" length="2" offset="7901" repeat="2" starttimestamp="1613754638645" timestamp="725976" timestamp2="726179">
    <text><![CDATA[ex]]></text>
  </DocumentChange>
  <DocumentChange __id="551" _type="Delete" date="Fri Feb 19 12:22:45 EST 2021" docASTNodeCount="5846" docActiveCodeLength="33183" docExpressionCount="4049" docLength="35418" endLine="237" length="19" offset="7884" repeat="2" startLine="237" starttimestamp="1613754638645" timestamp="726738" timestamp2="726853">
    <text><![CDATA[instanceof esxcepex]]></text>
  </DocumentChange>
  <DocumentChange __id="555" _type="Insert" date="Fri Feb 19 12:22:46 EST 2021" docASTNodeCount="5846" docActiveCodeLength="33186" docExpressionCount="4049" docLength="35421" length="3" offset="7884" repeat="3" starttimestamp="1613754638645" timestamp="727822" timestamp2="727949">
    <text><![CDATA[ins]]></text>
  </DocumentChange>
  <DocumentChange __id="566" _type="Replace" date="Fri Feb 19 12:22:46 EST 2021" docASTNodeCount="5807" docActiveCodeLength="33193" docExpressionCount="4020" docLength="35428" endLine="237" insertionLength="10" int_docASTNodeCount="5846" int_docActiveCodeLength="33183" int_docExpressionCount="4049" int_docLength="35418" length="3" offset="7884" startLine="237" starttimestamp="1613754638645" timestamp="728164">
    <deletedText><![CDATA[ins]]></deletedText>
    <insertedText><![CDATA[instanceof]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="569" _type="Insert" date="Fri Feb 19 12:22:46 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33202" docExpressionCount="4051" docLength="35437" length="9" offset="7894" repeat="9" starttimestamp="1613754638645" timestamp="728216" timestamp2="729929">
    <text><![CDATA[ exceptco]]></text>
  </DocumentChange>
  <DocumentChange __id="584" _type="Replace" date="Fri Feb 19 12:22:48 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33212" docExpressionCount="4051" docLength="35447" endLine="237" insertionLength="18" int_docASTNodeCount="5807" int_docActiveCodeLength="33194" int_docExpressionCount="4020" int_docLength="35429" length="8" offset="7895" startLine="237" starttimestamp="1613754638645" timestamp="730222">
    <deletedText><![CDATA[exceptco]]></deletedText>
    <insertedText><![CDATA[EHExceptionCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="587" _type="Replace" date="Fri Feb 19 12:22:50 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33202" docExpressionCount="4051" docLength="35437" endLine="237" insertionLength="8" int_docASTNodeCount="5807" int_docActiveCodeLength="33194" int_docExpressionCount="4020" int_docLength="35429" length="18" offset="7895" startLine="237" starttimestamp="1613754638645" timestamp="731912">
    <deletedText><![CDATA[EHExceptionCommand]]></deletedText>
    <insertedText><![CDATA[exceptco]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="590" _type="Replace" date="Fri Feb 19 12:22:51 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33195" docExpressionCount="4051" docLength="35430" endLine="237" insertionLength="1" int_docASTNodeCount="5807" int_docActiveCodeLength="33194" int_docExpressionCount="4020" int_docLength="35429" length="8" offset="7895" startLine="237" starttimestamp="1613754638645" timestamp="732565">
    <deletedText><![CDATA[exceptco]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="594" _type="Insert" date="Fri Feb 19 12:22:51 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33199" docExpressionCount="4051" docLength="35434" length="4" offset="7896" repeat="4" starttimestamp="1613754638645" timestamp="732804" timestamp2="733451">
    <text><![CDATA[xcep]]></text>
  </DocumentChange>
  <DocumentChange __id="599" _type="Replace" date="Fri Feb 19 12:22:53 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33210" docExpressionCount="4051" docLength="35445" endLine="237" insertionLength="16" int_docASTNodeCount="5807" int_docActiveCodeLength="33194" int_docExpressionCount="4020" int_docLength="35429" length="5" offset="7895" startLine="237" starttimestamp="1613754638645" timestamp="734448">
    <deletedText><![CDATA[excep]]></deletedText>
    <insertedText><![CDATA[ExceptionCommand]]></insertedText>
  </DocumentChange>
  <Command __id="639" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 12:57:58 EST 2021" docASTNodeCount="141" docActiveCodeLength="1157" docExpressionCount="83" docLength="2674" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="2839517">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);
//		System.out.println(s1.equals(s2));
		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <Command __id="653" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 14:21:45 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33210" docExpressionCount="4051" docLength="35445" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7866371">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof "), Diff(DELETE,"RunCommand && command.getAttributesMap().get("type").equals("Run")"), Diff(INSERT,"ExceptionCommand"), Diff(EQUAL,") {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <Command __id="659" _type="DiffBasedFileOpenCommand" date="Fri Feb 19 14:21:50 EST 2021" docASTNodeCount="141" docActiveCodeLength="1157" docExpressionCount="83" docLength="2674" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7871571">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="667" _type="Insert" date="Fri Feb 19 14:21:59 EST 2021" docASTNodeCount="143" docActiveCodeLength="1165" docExpressionCount="84" docLength="2682" length="8" offset="1768" repeat="5" starttimestamp="1613754638645" timestamp="7880693" timestamp2="7881226">
    <text><![CDATA[
		date]]></text>
  </DocumentChange>
  <DocumentChange __id="676" _type="Replace" date="Fri Feb 19 14:22:00 EST 2021" docASTNodeCount="143" docActiveCodeLength="1165" docExpressionCount="84" docLength="2682" endLine="46" insertionLength="4" int_docASTNodeCount="141" int_docActiveCodeLength="1161" int_docExpressionCount="83" int_docLength="2678" length="4" offset="1772" startLine="46" starttimestamp="1613754638645" timestamp="7882064">
    <deletedText><![CDATA[date]]></deletedText>
    <insertedText><![CDATA[Date]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="677" _type="Insert" date="Fri Feb 19 14:22:00 EST 2021" docASTNodeCount="149" docActiveCodeLength="1189" docExpressionCount="89" docLength="2706" length="24" offset="206" repeat="2" starttimestamp="1613754638645" timestamp="7882088" timestamp2="7882089">
    <text><![CDATA[
import java.util.Date;]]></text>
  </DocumentChange>
  <DocumentChange __id="680" _type="Insert" date="Fri Feb 19 14:22:01 EST 2021" docASTNodeCount="155" docActiveCodeLength="1202" docExpressionCount="92" docLength="2719" length="13" offset="1800" repeat="13" starttimestamp="1613754638645" timestamp="7882688" timestamp2="7887639">
    <text><![CDATA[ d = new date]]></text>
  </DocumentChange>
  <DocumentChange __id="709" _type="Replace" date="Fri Feb 19 14:22:07 EST 2021" docASTNodeCount="155" docActiveCodeLength="1205" docExpressionCount="92" docLength="2722" endLine="47" insertionLength="4" int_docASTNodeCount="155" int_docActiveCodeLength="1201" int_docExpressionCount="92" int_docLength="2718" length="1" offset="1809" startLine="47" starttimestamp="1613754638645" timestamp="7888816">
    <deletedText><![CDATA[d]]></deletedText>
    <insertedText><![CDATA[Date]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="710" _type="Replace" date="Fri Feb 19 14:22:07 EST 2021" docASTNodeCount="156" docActiveCodeLength="1208" docExpressionCount="93" docLength="2725" endLine="47" insertionLength="6" int_docASTNodeCount="155" int_docActiveCodeLength="1202" int_docExpressionCount="92" int_docLength="2719" length="3" offset="1813" startLine="47" starttimestamp="1613754638645" timestamp="7888821">
    <deletedText><![CDATA[ate]]></deletedText>
    <insertedText><![CDATA[(date)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="714" _type="Insert" date="Fri Feb 19 14:22:09 EST 2021" docASTNodeCount="156" docActiveCodeLength="1209" docExpressionCount="93" docLength="2726" length="1" offset="1819" starttimestamp="1613754638645" timestamp="7890490">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="726" _type="Replace" date="Fri Feb 19 14:22:26 EST 2021" docASTNodeCount="156" docActiveCodeLength="1218" docExpressionCount="93" docLength="2735" endLine="47" insertionLength="13" int_docASTNodeCount="155" int_docActiveCodeLength="1205" int_docExpressionCount="92" int_docLength="2722" length="4" offset="1814" startLine="47" starttimestamp="1613754638645" timestamp="7907572">
    <deletedText><![CDATA[date]]></deletedText>
    <insertedText><![CDATA[1379166504508]]></insertedText>
  </DocumentChange>
  <Command __id="729" _type="PauseCommand" date="Fri Feb 19 14:22:27 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7908939">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1358]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="730" _type="InsertStringCommand" date="Fri Feb 19 14:22:27 EST 2021" starttimestamp="1613754638645" timestamp="7908945" timestamp2="7908945">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="732" _type="InsertStringCommand" date="Fri Feb 19 14:22:27 EST 2021" starttimestamp="1613754638645" timestamp="7909276" timestamp2="7909276">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="734" _type="PauseCommand" date="Fri Feb 19 14:22:30 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7911454">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2178]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="733" _type="ShellCommand" date="Fri Feb 19 14:22:30 EST 2021" starttimestamp="1613754638645" timestamp="7911454" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="736" _type="PauseCommand" date="Fri Feb 19 14:22:32 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7913830">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2376]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="735" _type="ShellCommand" date="Fri Feb 19 14:22:32 EST 2021" starttimestamp="1613754638645" timestamp="7913830" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="737" _type="MoveCaretCommand" caretOffset="1533" date="Fri Feb 19 14:22:32 EST 2021" docOffset="1830" starttimestamp="1613754638645" timestamp="7913892" />
  <Command __id="738" _type="MoveCaretCommand" caretOffset="1532" date="Fri Feb 19 14:22:33 EST 2021" docOffset="1829" starttimestamp="1613754638645" timestamp="7914874" />
  <Command __id="740" _type="PasteCommand" date="Fri Feb 19 14:22:33 EST 2021" starttimestamp="1613754638645" timestamp="7915025" />
  <Command __id="742" _type="PauseCommand" date="Fri Feb 19 14:22:35 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7916532">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1507]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="743" _type="InsertStringCommand" date="Fri Feb 19 14:22:35 EST 2021" starttimestamp="1613754638645" timestamp="7916537" timestamp2="7916537">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="745" _type="PauseCommand" date="Fri Feb 19 14:22:36 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7917644">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1107]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="744" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Fri Feb 19 14:22:36 EST 2021" starttimestamp="1613754638645" timestamp="7917644" />
  <Command __id="746" _type="EclipseCommand" commandID="" date="Fri Feb 19 14:22:36 EST 2021" starttimestamp="1613754638645" timestamp="7917737" />
  <Command __id="747" _type="EclipseCommand" commandID="" date="Fri Feb 19 14:22:36 EST 2021" starttimestamp="1613754638645" timestamp="7917837" />
  <Command __id="748" _type="MoveCaretCommand" caretOffset="1542" date="Fri Feb 19 14:22:37 EST 2021" docOffset="1839" starttimestamp="1613754638645" timestamp="7918501" />
  <Command __id="750" _type="InsertStringCommand" date="Fri Feb 19 14:22:37 EST 2021" starttimestamp="1613754638645" timestamp="7918953" timestamp2="7918953">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="752" _type="InsertStringCommand" date="Fri Feb 19 14:22:37 EST 2021" starttimestamp="1613754638645" timestamp="7919111" timestamp2="7919111">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="753" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 14:22:37 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="7919155" />
  <Command __id="758" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 14:22:38 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="7919633" />
  <Command __id="760" _type="InsertStringCommand" date="Fri Feb 19 14:22:38 EST 2021" starttimestamp="1613754638645" timestamp="7919646" timestamp2="7919646">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="762" _type="InsertStringCommand" date="Fri Feb 19 14:22:39 EST 2021" starttimestamp="1613754638645" timestamp="7920434" timestamp2="7920434">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="763" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Fri Feb 19 14:22:39 EST 2021" start_end="START" starttimestamp="1613754638645" timestamp="7920482" />
  <Command __id="764" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Fri Feb 19 14:22:39 EST 2021" start_end="END" starttimestamp="1613754638645" timestamp="7920640" />
  <Command __id="765" _type="InsertStringCommand" date="Fri Feb 19 14:22:39 EST 2021" starttimestamp="1613754638645" timestamp="7920643" timestamp2="7920643">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="767" _type="PauseCommand" date="Fri Feb 19 14:22:41 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7923283">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2640]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="766" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Fri Feb 19 14:22:41 EST 2021" starttimestamp="1613754638645" timestamp="7923283" />
  <Command __id="768" _type="EclipseCommand" commandID="" date="Fri Feb 19 14:22:42 EST 2021" starttimestamp="1613754638645" timestamp="7923387" />
  <Command __id="769" _type="EclipseCommand" commandID="" date="Fri Feb 19 14:22:42 EST 2021" starttimestamp="1613754638645" timestamp="7923472" />
  <Command __id="771" _type="PauseCommand" date="Fri Feb 19 14:22:43 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7925211">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1739]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="770" _type="SelectTextCommand" caretOffset="600" date="Fri Feb 19 14:22:43 EST 2021" end="601" start="600" starttimestamp="1613754638645" timestamp="7925211" />
  <Command __id="773" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Fri Feb 19 14:22:44 EST 2021" starttimestamp="1613754638645" timestamp="7925744" />
  <Command __id="774" _type="MoveCaretCommand" caretOffset="820" date="Fri Feb 19 14:22:44 EST 2021" docOffset="1117" starttimestamp="1613754638645" timestamp="7926318" />
  <Command __id="776" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Fri Feb 19 14:22:45 EST 2021" starttimestamp="1613754638645" timestamp="7926456" />
  <Command __id="777" _type="MoveCaretCommand" caretOffset="1056" date="Fri Feb 19 14:22:45 EST 2021" docOffset="1353" starttimestamp="1613754638645" timestamp="7926867" />
  <Command __id="779" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Fri Feb 19 14:22:45 EST 2021" starttimestamp="1613754638645" timestamp="7927041" />
  <Command __id="780" _type="MoveCaretCommand" caretOffset="1171" date="Fri Feb 19 14:22:46 EST 2021" docOffset="1468" starttimestamp="1613754638645" timestamp="7927598" />
  <Command __id="782" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Fri Feb 19 14:22:46 EST 2021" starttimestamp="1613754638645" timestamp="7927864" />
  <Command __id="784" _type="PauseCommand" date="Fri Feb 19 14:22:49 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7931318">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3454]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="783" _type="ShellCommand" date="Fri Feb 19 14:22:49 EST 2021" starttimestamp="1613754638645" timestamp="7931318" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="785" _type="ShellCommand" date="Fri Feb 19 14:22:50 EST 2021" starttimestamp="1613754638645" timestamp="7932135" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="786" _type="EclipseCommand" commandID="" date="Fri Feb 19 14:22:50 EST 2021" starttimestamp="1613754638645" timestamp="7932290" />
  <Command __id="787" _type="EclipseCommand" commandID="" date="Fri Feb 19 14:22:51 EST 2021" starttimestamp="1613754638645" timestamp="7932387" />
  <Command __id="788" _type="RunCommand" date="Fri Feb 19 14:22:51 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7932426" type="Run" />
  <Command __id="789" _type="RunCommand" date="Fri Feb 19 14:22:51 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7932426" type="Run" />
  <Command __id="790" _type="RunCommand" date="Fri Feb 19 14:22:51 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="7932546" type="Debug" />
  <Command __id="791" _type="RunCommand" date="Fri Feb 19 14:22:51 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7932546" type="Run" />
  <Command __id="792" _type="RunCommand" date="Fri Feb 19 14:22:51 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="7932546" type="Debug" />
  <Command __id="793" _type="RunCommand" date="Fri Feb 19 14:22:51 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7932546" type="Run" />
  <Command __id="794" _type="ConsoleOutput" date="Fri Feb 19 14:22:51 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="7932648" type="ConsoleOutput">
    <outputString><![CDATA[Sat Sep 14 10:22:36 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml"), Diff(INSERT,"Sat Sep 14 10:22:36 EDT 2013"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="796" _type="PauseCommand" date="Fri Feb 19 14:22:57 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="7938438">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5790]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="795" _type="CopyCommand" date="Fri Feb 19 14:22:57 EST 2021" starttimestamp="1613754638645" timestamp="7938438" />
  <Command __id="798" _type="PauseCommand" date="Fri Feb 19 14:22:59 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7940490">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2052]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="797" _type="ShellCommand" date="Fri Feb 19 14:22:59 EST 2021" starttimestamp="1613754638645" timestamp="7940490" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="800" _type="PauseCommand" date="Fri Feb 19 14:23:09 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="7950503">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10013]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="799" _type="ShellCommand" date="Fri Feb 19 14:23:09 EST 2021" starttimestamp="1613754638645" timestamp="7950503" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="802" _type="PauseCommand" date="Fri Feb 19 14:23:11 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7952582">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2079]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="801" _type="ShellCommand" date="Fri Feb 19 14:23:11 EST 2021" starttimestamp="1613754638645" timestamp="7952582" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="804" _type="PauseCommand" date="Fri Feb 19 14:23:17 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="7959100">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6518]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="803" _type="ShellCommand" date="Fri Feb 19 14:23:17 EST 2021" starttimestamp="1613754638645" timestamp="7959100" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="805" _type="MoveCaretCommand" caretOffset="1419" date="Fri Feb 19 14:23:17 EST 2021" docOffset="1716" starttimestamp="1613754638645" timestamp="7959190" />
  <Command __id="807" _type="PauseCommand" date="Fri Feb 19 14:23:19 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7960841">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1651]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="806" _type="ShellCommand" date="Fri Feb 19 14:23:19 EST 2021" starttimestamp="1613754638645" timestamp="7960841" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="809" _type="PauseCommand" date="Fri Feb 19 14:23:20 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7962213">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1372]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="808" _type="ShellCommand" date="Fri Feb 19 14:23:20 EST 2021" starttimestamp="1613754638645" timestamp="7962213" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="810" _type="MoveCaretCommand" caretOffset="1544" date="Fri Feb 19 14:23:20 EST 2021" docOffset="1841" starttimestamp="1613754638645" timestamp="7962264" />
  <Command __id="811" _type="MoveCaretCommand" caretOffset="1544" date="Fri Feb 19 14:23:21 EST 2021" docOffset="1841" starttimestamp="1613754638645" timestamp="7962424" />
  <Command __id="812" _type="MoveCaretCommand" caretOffset="1544" date="Fri Feb 19 14:23:21 EST 2021" docOffset="1841" starttimestamp="1613754638645" timestamp="7962831" />
  <Command __id="813" _type="SelectTextCommand" caretOffset="1548" date="Fri Feb 19 14:23:21 EST 2021" end="1548" start="1540" starttimestamp="1613754638645" timestamp="7963001" />
  <Command __id="815" _type="PasteCommand" date="Fri Feb 19 14:23:21 EST 2021" starttimestamp="1613754638645" timestamp="7963254" />
  <Command __id="817" _type="InsertStringCommand" date="Fri Feb 19 14:23:22 EST 2021" starttimestamp="1613754638645" timestamp="7964141" timestamp2="7964141">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="819" _type="PauseCommand" date="Fri Feb 19 14:23:24 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7966070">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1929]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="818" _type="ShellCommand" date="Fri Feb 19 14:23:24 EST 2021" starttimestamp="1613754638645" timestamp="7966070" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="820" _type="ShellCommand" date="Fri Feb 19 14:23:25 EST 2021" starttimestamp="1613754638645" timestamp="7966849" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="821" _type="EclipseCommand" commandID="" date="Fri Feb 19 14:23:25 EST 2021" starttimestamp="1613754638645" timestamp="7966966" />
  <Command __id="822" _type="EclipseCommand" commandID="" date="Fri Feb 19 14:23:25 EST 2021" starttimestamp="1613754638645" timestamp="7967047" />
  <Command __id="823" _type="RunCommand" date="Fri Feb 19 14:23:25 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7967091" type="Run" />
  <Command __id="824" _type="RunCommand" date="Fri Feb 19 14:23:25 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7967091" type="Run" />
  <Command __id="825" _type="RunCommand" date="Fri Feb 19 14:23:25 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="7967193" type="Debug" />
  <Command __id="826" _type="RunCommand" date="Fri Feb 19 14:23:25 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7967193" type="Run" />
  <Command __id="827" _type="RunCommand" date="Fri Feb 19 14:23:25 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="7967193" type="Debug" />
  <Command __id="828" _type="RunCommand" date="Fri Feb 19 14:23:25 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7967193" type="Run" />
  <Command __id="829" _type="ConsoleOutput" date="Fri Feb 19 14:23:25 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="7967257" type="ConsoleOutput">
    <outputString><![CDATA[Sat Sep 14 10:36:16 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Sat Sep 14 10:"), Diff(DELETE,"22:3"), Diff(INSERT,"36:1"), Diff(EQUAL,"6 EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="831" _type="PauseCommand" date="Fri Feb 19 14:23:28 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7969600">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2343]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="830" _type="CopyCommand" date="Fri Feb 19 14:23:28 EST 2021" starttimestamp="1613754638645" timestamp="7969600" />
  <Command __id="833" _type="PauseCommand" date="Fri Feb 19 14:23:29 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7970818">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1218]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="832" _type="ShellCommand" date="Fri Feb 19 14:23:29 EST 2021" starttimestamp="1613754638645" timestamp="7970818" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="835" _type="PauseCommand" date="Fri Feb 19 14:23:32 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7974233">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3415]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="834" _type="ShellCommand" date="Fri Feb 19 14:23:32 EST 2021" starttimestamp="1613754638645" timestamp="7974233" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="836" _type="MoveCaretCommand" caretOffset="1774" date="Fri Feb 19 14:23:32 EST 2021" docOffset="2071" starttimestamp="1613754638645" timestamp="7974307" />
  <Command __id="838" _type="PauseCommand" date="Fri Feb 19 14:23:34 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7976038">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1730]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="837" _type="ShellCommand" date="Fri Feb 19 14:23:34 EST 2021" starttimestamp="1613754638645" timestamp="7976037" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="840" _type="PauseCommand" date="Fri Feb 19 14:23:36 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7977887">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1850]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="839" _type="ShellCommand" date="Fri Feb 19 14:23:36 EST 2021" starttimestamp="1613754638645" timestamp="7977887" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="841" _type="MoveCaretCommand" caretOffset="1530" date="Fri Feb 19 14:23:36 EST 2021" docOffset="1827" starttimestamp="1613754638645" timestamp="7977938" />
  <Command __id="842" _type="SelectTextCommand" caretOffset="1539" date="Fri Feb 19 14:23:36 EST 2021" end="1539" start="1525" starttimestamp="1613754638645" timestamp="7978100" />
  <Command __id="844" _type="PasteCommand" date="Fri Feb 19 14:23:36 EST 2021" starttimestamp="1613754638645" timestamp="7978333" />
  <Command __id="846" _type="InsertStringCommand" date="Fri Feb 19 14:23:37 EST 2021" starttimestamp="1613754638645" timestamp="7979226" timestamp2="7979226">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="848" _type="PauseCommand" date="Fri Feb 19 14:23:39 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="7981352">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2126]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="847" _type="ShellCommand" date="Fri Feb 19 14:23:39 EST 2021" starttimestamp="1613754638645" timestamp="7981352" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="861" _type="PauseCommand" date="Fri Feb 19 14:23:44 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7985927">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1816]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="860" _type="RunCommand" date="Fri Feb 19 14:23:44 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7985927" type="Run" />
  <Command __id="862" _type="RunCommand" date="Fri Feb 19 14:23:44 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7985927" type="Run" />
  <Command __id="863" _type="RunCommand" date="Fri Feb 19 14:23:44 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="7986037" type="Debug" />
  <Command __id="864" _type="RunCommand" date="Fri Feb 19 14:23:44 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7986037" type="Run" />
  <Command __id="865" _type="RunCommand" date="Fri Feb 19 14:23:44 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="7986037" type="Debug" />
  <Command __id="866" _type="RunCommand" date="Fri Feb 19 14:23:44 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="7986037" type="Run" />
  <Command __id="867" _type="ConsoleOutput" date="Fri Feb 19 14:23:44 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="7986120" type="ConsoleOutput">
    <outputString><![CDATA[Sat Sep 14 13:05:05 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Sat Sep 14 1"), Diff(DELETE,"0:36:16"), Diff(INSERT,"3:05:05"), Diff(EQUAL," EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="869" _type="PauseCommand" date="Fri Feb 19 14:23:45 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7987274">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1154]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="868" _type="CopyCommand" date="Fri Feb 19 14:23:45 EST 2021" starttimestamp="1613754638645" timestamp="7987274" />
  <Command __id="871" _type="PauseCommand" date="Fri Feb 19 14:23:47 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="7988370">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1096]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="870" _type="ShellCommand" date="Fri Feb 19 14:23:47 EST 2021" starttimestamp="1613754638645" timestamp="7988370" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="873" _type="PauseCommand" date="Fri Feb 19 14:23:57 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="7999033">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10663]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="872" _type="ShellCommand" date="Fri Feb 19 14:23:57 EST 2021" starttimestamp="1613754638645" timestamp="7999033" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="874" _type="MoveCaretCommand" caretOffset="1529" date="Fri Feb 19 14:23:57 EST 2021" docOffset="1826" starttimestamp="1613754638645" timestamp="7999106" />
  <Command __id="875" _type="SelectTextCommand" caretOffset="1539" date="Fri Feb 19 14:23:57 EST 2021" end="1539" start="1525" starttimestamp="1613754638645" timestamp="7999245" />
  <Command __id="877" _type="PasteCommand" date="Fri Feb 19 14:23:58 EST 2021" starttimestamp="1613754638645" timestamp="7999395" />
  <Command __id="879" _type="InsertStringCommand" date="Fri Feb 19 14:23:58 EST 2021" starttimestamp="1613754638645" timestamp="8000054" timestamp2="8000054">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="881" _type="PauseCommand" date="Fri Feb 19 14:24:00 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="8002073">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2019]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="880" _type="ShellCommand" date="Fri Feb 19 14:24:00 EST 2021" starttimestamp="1613754638645" timestamp="8002073" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="883" _type="PauseCommand" date="Fri Feb 19 14:24:02 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8003468">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1395]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="882" _type="ShellCommand" date="Fri Feb 19 14:24:02 EST 2021" starttimestamp="1613754638645" timestamp="8003468" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="884" _type="MoveCaretCommand" caretOffset="1544" date="Fri Feb 19 14:24:02 EST 2021" docOffset="1841" starttimestamp="1613754638645" timestamp="8003519" />
  <Command __id="885" _type="MoveCaretCommand" caretOffset="1544" date="Fri Feb 19 14:24:02 EST 2021" docOffset="1841" starttimestamp="1613754638645" timestamp="8003674" />
  <Command __id="886" _type="MoveCaretCommand" caretOffset="1544" date="Fri Feb 19 14:24:02 EST 2021" docOffset="1841" starttimestamp="1613754638645" timestamp="8004127" />
  <Command __id="887" _type="SelectTextCommand" caretOffset="1547" date="Fri Feb 19 14:24:02 EST 2021" end="1547" start="1540" starttimestamp="1613754638645" timestamp="8004308" />
  <Command __id="889" _type="PasteCommand" date="Fri Feb 19 14:24:03 EST 2021" starttimestamp="1613754638645" timestamp="8004432" />
  <Command __id="891" _type="InsertStringCommand" date="Fri Feb 19 14:24:04 EST 2021" starttimestamp="1613754638645" timestamp="8005355" timestamp2="8005355">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="897" _type="PauseCommand" date="Fri Feb 19 14:24:06 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8007841">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1239]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="896" _type="RunCommand" date="Fri Feb 19 14:24:06 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8007841" type="Run" />
  <Command __id="898" _type="RunCommand" date="Fri Feb 19 14:24:06 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8007842" type="Run" />
  <Command __id="899" _type="RunCommand" date="Fri Feb 19 14:24:06 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8007952" type="Debug" />
  <Command __id="900" _type="RunCommand" date="Fri Feb 19 14:24:06 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8007952" type="Run" />
  <Command __id="901" _type="RunCommand" date="Fri Feb 19 14:24:06 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8007952" type="Debug" />
  <Command __id="902" _type="RunCommand" date="Fri Feb 19 14:24:06 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8007952" type="Run" />
  <Command __id="903" _type="ConsoleOutput" date="Fri Feb 19 14:24:06 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="8008083" type="ConsoleOutput">
    <outputString><![CDATA[Fri Sep 20 10:21:25 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Sat"), Diff(INSERT,"Fri"), Diff(EQUAL," Sep "), Diff(DELETE,"14 13:05:0"), Diff(INSERT,"20 10:21:2"), Diff(EQUAL,"5 EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="905" _type="PauseCommand" date="Fri Feb 19 14:24:08 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8009780">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1697]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="904" _type="CopyCommand" date="Fri Feb 19 14:24:08 EST 2021" starttimestamp="1613754638645" timestamp="8009780" />
  <Command __id="906" _type="ShellCommand" date="Fri Feb 19 14:24:09 EST 2021" starttimestamp="1613754638645" timestamp="8010701" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="908" _type="PauseCommand" date="Fri Feb 19 14:24:31 EST 2021" range="20s-30s" starttimestamp="1613754638645" timestamp="8032880">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22179]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="907" _type="ShellCommand" date="Fri Feb 19 14:24:31 EST 2021" starttimestamp="1613754638645" timestamp="8032880" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="909" _type="MoveCaretCommand" caretOffset="1540" date="Fri Feb 19 14:24:31 EST 2021" docOffset="1837" starttimestamp="1613754638645" timestamp="8032997" />
  <Command __id="910" _type="SelectTextCommand" caretOffset="1547" date="Fri Feb 19 14:24:31 EST 2021" end="1547" start="1540" starttimestamp="1613754638645" timestamp="8033060" />
  <Command __id="912" _type="PasteCommand" date="Fri Feb 19 14:24:32 EST 2021" starttimestamp="1613754638645" timestamp="8033449" />
  <Command __id="914" _type="PauseCommand" date="Fri Feb 19 14:24:33 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8034683">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1234]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="915" _type="InsertStringCommand" date="Fri Feb 19 14:24:33 EST 2021" starttimestamp="1613754638645" timestamp="8034687" timestamp2="8034687">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="921" _type="PauseCommand" date="Fri Feb 19 14:24:36 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8037462">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1354]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="920" _type="RunCommand" date="Fri Feb 19 14:24:36 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8037462" type="Run" />
  <Command __id="922" _type="RunCommand" date="Fri Feb 19 14:24:36 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8037463" type="Run" />
  <Command __id="923" _type="RunCommand" date="Fri Feb 19 14:24:36 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8037572" type="Debug" />
  <Command __id="924" _type="RunCommand" date="Fri Feb 19 14:24:36 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8037573" type="Run" />
  <Command __id="925" _type="RunCommand" date="Fri Feb 19 14:24:36 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8037573" type="Debug" />
  <Command __id="926" _type="RunCommand" date="Fri Feb 19 14:24:36 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8037573" type="Run" />
  <Command __id="927" _type="ShellCommand" date="Fri Feb 19 14:24:36 EST 2021" starttimestamp="1613754638645" timestamp="8037664" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="928" _type="ConsoleOutput" date="Fri Feb 19 14:24:36 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="8037705" type="ConsoleOutput">
    <outputString><![CDATA[Fri Sep 20 10:27:04 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Fri Sep 20 10:2"), Diff(DELETE,"1:25"), Diff(INSERT,"7:04"), Diff(EQUAL," EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="930" _type="PauseCommand" date="Fri Feb 19 14:24:39 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="8040534">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2829]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="929" _type="ShellCommand" date="Fri Feb 19 14:24:39 EST 2021" starttimestamp="1613754638645" timestamp="8040534" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="938" _type="PauseCommand" date="Fri Feb 19 14:24:45 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8047297">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1563]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="937" _type="ShellCommand" date="Fri Feb 19 14:24:45 EST 2021" starttimestamp="1613754638645" timestamp="8047297" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="951" _type="PauseCommand" date="Fri Feb 19 14:24:50 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8052261">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1986]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="950" _type="RunCommand" date="Fri Feb 19 14:24:50 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8052261" type="Run" />
  <Command __id="952" _type="RunCommand" date="Fri Feb 19 14:24:50 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8052261" type="Run" />
  <Command __id="953" _type="RunCommand" date="Fri Feb 19 14:24:51 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8052388" type="Debug" />
  <Command __id="954" _type="RunCommand" date="Fri Feb 19 14:24:51 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8052388" type="Run" />
  <Command __id="955" _type="RunCommand" date="Fri Feb 19 14:24:51 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8052388" type="Debug" />
  <Command __id="956" _type="RunCommand" date="Fri Feb 19 14:24:51 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8052389" type="Run" />
  <Command __id="957" _type="ConsoleOutput" date="Fri Feb 19 14:24:51 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="8052502" type="ConsoleOutput">
    <outputString><![CDATA[Fri Sep 20 10:28:41 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Fri Sep 20 10:2"), Diff(DELETE,"7:04"), Diff(INSERT,"8:41"), Diff(EQUAL," EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="958" _type="CopyCommand" date="Fri Feb 19 14:24:52 EST 2021" starttimestamp="1613754638645" timestamp="8053374" />
  <Command __id="959" _type="ShellCommand" date="Fri Feb 19 14:24:52 EST 2021" starttimestamp="1613754638645" timestamp="8054090" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="728" _type="Insert" date="Fri Feb 19 14:22:27 EST 2021" docASTNodeCount="156" docActiveCodeLength="1220" docExpressionCount="93" docLength="2737" length="2" offset="1827" repeat="2" starttimestamp="1613754638645" timestamp="7908939" timestamp2="7909271">
    <text><![CDATA[L+]]></text>
  </DocumentChange>
  <DocumentChange __id="739" _type="Insert" date="Fri Feb 19 14:22:33 EST 2021" docASTNodeCount="158" docActiveCodeLength="1228" docExpressionCount="95" docLength="2745" length="8" offset="1829" repeat="2" starttimestamp="1613754638645" timestamp="7915020" timestamp2="7916532">
    <text><![CDATA[2052441L]]></text>
  </DocumentChange>
  <DocumentChange __id="749" _type="Insert" date="Fri Feb 19 14:22:37 EST 2021" docASTNodeCount="160" docActiveCodeLength="1237" docExpressionCount="96" docLength="2754" length="9" offset="1839" repeat="6" starttimestamp="1613754638645" timestamp="7918944" timestamp2="7919435">
    <text><![CDATA[
		sysou]]></text>
  </DocumentChange>
  <DocumentChange __id="759" _type="Replace" date="Fri Feb 19 14:22:38 EST 2021" docASTNodeCount="164" docActiveCodeLength="1253" docExpressionCount="100" docLength="2770" endLine="48" insertionLength="21" int_docASTNodeCount="158" int_docActiveCodeLength="1232" int_docExpressionCount="95" int_docLength="2749" length="5" offset="1843" startLine="48" starttimestamp="1613754638645" timestamp="7919637">
    <deletedText><![CDATA[sysou]]></deletedText>
    <insertedText><![CDATA[System.out.println();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="761" _type="Insert" date="Fri Feb 19 14:22:39 EST 2021" docASTNodeCount="165" docActiveCodeLength="1254" docExpressionCount="101" docLength="2771" length="1" offset="1862" starttimestamp="1613754638645" timestamp="7920429">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="772" _type="Insert" date="Fri Feb 19 14:22:44 EST 2021" docASTNodeCount="159" docActiveCodeLength="1224" docExpressionCount="97" docLength="2773" length="2" offset="884" starttimestamp="1613754638645" timestamp="7925721">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="775" _type="Insert" date="Fri Feb 19 14:22:45 EST 2021" docASTNodeCount="152" docActiveCodeLength="1175" docExpressionCount="92" docLength="2775" length="2" offset="1106" starttimestamp="1613754638645" timestamp="7926437">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="778" _type="Insert" date="Fri Feb 19 14:22:45 EST 2021" docASTNodeCount="147" docActiveCodeLength="1133" docExpressionCount="88" docLength="2777" length="2" offset="1344" starttimestamp="1613754638645" timestamp="7927025">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="781" _type="Insert" date="Fri Feb 19 14:22:46 EST 2021" docASTNodeCount="142" docActiveCodeLength="1079" docExpressionCount="84" docLength="2779" length="2" offset="1457" starttimestamp="1613754638645" timestamp="7927849">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="814" _type="Replace" date="Fri Feb 19 14:23:21 EST 2021" docASTNodeCount="142" docActiveCodeLength="1078" docExpressionCount="84" docLength="2778" endLine="47" insertionLength="7" int_docASTNodeCount="140" int_docActiveCodeLength="1071" int_docExpressionCount="82" int_docLength="2771" length="8" offset="1837" startLine="47" starttimestamp="1613754638645" timestamp="7963245">
    <deletedText><![CDATA[2052441L]]></deletedText>
    <insertedText><![CDATA[2871841]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="816" _type="Insert" date="Fri Feb 19 14:23:22 EST 2021" docASTNodeCount="142" docActiveCodeLength="1079" docExpressionCount="84" docLength="2779" length="1" offset="1844" starttimestamp="1613754638645" timestamp="7964137">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <DocumentChange __id="843" _type="Replace" date="Fri Feb 19 14:23:36 EST 2021" docASTNodeCount="142" docActiveCodeLength="1078" docExpressionCount="84" docLength="2778" endLine="47" insertionLength="13" int_docASTNodeCount="141" int_docActiveCodeLength="1065" int_docExpressionCount="83" int_docLength="2765" length="14" offset="1822" startLine="47" starttimestamp="1613754638645" timestamp="7978325">
    <deletedText><![CDATA[1379166504508L]]></deletedText>
    <insertedText><![CDATA[1379177979052]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="845" _type="Insert" date="Fri Feb 19 14:23:37 EST 2021" docASTNodeCount="142" docActiveCodeLength="1079" docExpressionCount="84" docLength="2779" length="1" offset="1835" starttimestamp="1613754638645" timestamp="7979221">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <DocumentChange __id="853" _type="Replace" date="Fri Feb 19 14:23:41 EST 2021" docASTNodeCount="142" docActiveCodeLength="1077" docExpressionCount="84" docLength="2777" endLine="47" insertionLength="6" int_docASTNodeCount="140" int_docActiveCodeLength="1071" int_docExpressionCount="82" int_docLength="2771" length="8" offset="1837" startLine="47" starttimestamp="1613754638645" timestamp="7982782">
    <deletedText><![CDATA[2871841L]]></deletedText>
    <insertedText><![CDATA[325968]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="855" _type="Insert" date="Fri Feb 19 14:23:42 EST 2021" docASTNodeCount="142" docActiveCodeLength="1078" docExpressionCount="84" docLength="2778" length="1" offset="1843" starttimestamp="1613754638645" timestamp="7983560">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <DocumentChange __id="876" _type="Replace" date="Fri Feb 19 14:23:58 EST 2021" docASTNodeCount="142" docActiveCodeLength="1077" docExpressionCount="84" docLength="2777" endLine="47" insertionLength="13" int_docASTNodeCount="141" int_docActiveCodeLength="1064" int_docExpressionCount="83" int_docLength="2764" length="14" offset="1822" startLine="47" starttimestamp="1613754638645" timestamp="7999386">
    <deletedText><![CDATA[1379177979052L]]></deletedText>
    <insertedText><![CDATA[1379686669071]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="878" _type="Insert" date="Fri Feb 19 14:23:58 EST 2021" docASTNodeCount="142" docActiveCodeLength="1078" docExpressionCount="84" docLength="2778" length="1" offset="1835" starttimestamp="1613754638645" timestamp="8000049">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <DocumentChange __id="888" _type="Replace" date="Fri Feb 19 14:24:03 EST 2021" docASTNodeCount="142" docActiveCodeLength="1077" docExpressionCount="84" docLength="2777" endLine="47" insertionLength="6" int_docASTNodeCount="140" int_docActiveCodeLength="1071" int_docExpressionCount="82" int_docLength="2771" length="7" offset="1837" startLine="47" starttimestamp="1613754638645" timestamp="8004425">
    <deletedText><![CDATA[325968L]]></deletedText>
    <insertedText><![CDATA[216094]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="890" _type="Insert" date="Fri Feb 19 14:24:03 EST 2021" docASTNodeCount="142" docActiveCodeLength="1078" docExpressionCount="84" docLength="2778" length="1" offset="1843" starttimestamp="1613754638645" timestamp="8005351">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <DocumentChange __id="911" _type="Replace" date="Fri Feb 19 14:24:32 EST 2021" docASTNodeCount="142" docActiveCodeLength="1077" docExpressionCount="84" docLength="2777" endLine="47" insertionLength="6" int_docASTNodeCount="140" int_docActiveCodeLength="1071" int_docExpressionCount="82" int_docLength="2771" length="7" offset="1837" startLine="47" starttimestamp="1613754638645" timestamp="8033439">
    <deletedText><![CDATA[216094L]]></deletedText>
    <insertedText><![CDATA[555395]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="913" _type="Insert" date="Fri Feb 19 14:24:33 EST 2021" docASTNodeCount="142" docActiveCodeLength="1078" docExpressionCount="84" docLength="2778" length="1" offset="1843" starttimestamp="1613754638645" timestamp="8034683">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <DocumentChange __id="943" _type="Replace" date="Fri Feb 19 14:24:47 EST 2021" docASTNodeCount="142" docActiveCodeLength="1077" docExpressionCount="84" docLength="2777" endLine="47" insertionLength="6" int_docASTNodeCount="140" int_docActiveCodeLength="1071" int_docExpressionCount="82" int_docLength="2771" length="7" offset="1837" startLine="47" starttimestamp="1613754638645" timestamp="8049047">
    <deletedText><![CDATA[555395L]]></deletedText>
    <insertedText><![CDATA[652599]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="945" _type="Insert" date="Fri Feb 19 14:24:48 EST 2021" docASTNodeCount="142" docActiveCodeLength="1078" docExpressionCount="84" docLength="2778" length="1" offset="1843" starttimestamp="1613754638645" timestamp="8049727">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <DocumentChange __id="964" _type="Insert" date="Fri Feb 19 14:24:59 EST 2021" docASTNodeCount="142" docActiveCodeLength="1085" docExpressionCount="84" docLength="2785" length="7" offset="1839" starttimestamp="1613754638645" timestamp="8060844">
    <text><![CDATA[7870583]]></text>
  </DocumentChange>
  <Command __id="961" _type="PauseCommand" date="Fri Feb 19 14:24:58 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="8059745">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5655]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="960" _type="ShellCommand" date="Fri Feb 19 14:24:58 EST 2021" starttimestamp="1613754638645" timestamp="8059745" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="962" _type="MoveCaretCommand" caretOffset="1542" date="Fri Feb 19 14:24:59 EST 2021" docOffset="1839" starttimestamp="1613754638645" timestamp="8060565" />
  <Command __id="963" _type="MoveCaretCommand" caretOffset="1542" date="Fri Feb 19 14:24:59 EST 2021" docOffset="1839" starttimestamp="1613754638645" timestamp="8060712" />
  <Command __id="965" _type="PasteCommand" date="Fri Feb 19 14:24:59 EST 2021" starttimestamp="1613754638645" timestamp="8060851" />
  <Command __id="966" _type="MoveCaretCommand" caretOffset="1544" date="Fri Feb 19 14:25:00 EST 2021" docOffset="1841" starttimestamp="1613754638645" timestamp="8061420" />
  <Command __id="967" _type="SelectTextCommand" caretOffset="1554" date="Fri Feb 19 14:25:00 EST 2021" end="1554" start="1540" starttimestamp="1613754638645" timestamp="8061576" />
  <Command __id="969" _type="PasteCommand" date="Fri Feb 19 14:25:00 EST 2021" starttimestamp="1613754638645" timestamp="8061704" />
  <Command __id="971" _type="InsertStringCommand" date="Fri Feb 19 14:25:01 EST 2021" starttimestamp="1613754638645" timestamp="8062413" timestamp2="8062413">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="972" _type="MoveCaretCommand" caretOffset="1583" date="Fri Feb 19 14:25:01 EST 2021" docOffset="1880" starttimestamp="1613754638645" timestamp="8063246" />
  <Command __id="974" _type="PauseCommand" date="Fri Feb 19 14:25:03 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8064718">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1472]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="973" _type="ShellCommand" date="Fri Feb 19 14:25:03 EST 2021" starttimestamp="1613754638645" timestamp="8064718" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="976" _type="PauseCommand" date="Fri Feb 19 14:25:04 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8065727">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1009]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="975" _type="ShellCommand" date="Fri Feb 19 14:25:04 EST 2021" starttimestamp="1613754638645" timestamp="8065727" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="977" _type="EclipseCommand" commandID="" date="Fri Feb 19 14:25:04 EST 2021" starttimestamp="1613754638645" timestamp="8065858" />
  <Command __id="978" _type="EclipseCommand" commandID="" date="Fri Feb 19 14:25:04 EST 2021" starttimestamp="1613754638645" timestamp="8065942" />
  <Command __id="979" _type="RunCommand" date="Fri Feb 19 14:25:04 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8065975" type="Run" />
  <Command __id="980" _type="RunCommand" date="Fri Feb 19 14:25:04 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8065976" type="Run" />
  <Command __id="981" _type="RunCommand" date="Fri Feb 19 14:25:04 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8066103" type="Debug" />
  <Command __id="982" _type="RunCommand" date="Fri Feb 19 14:25:04 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8066103" type="Run" />
  <Command __id="983" _type="RunCommand" date="Fri Feb 19 14:25:04 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8066103" type="Debug" />
  <Command __id="984" _type="RunCommand" date="Fri Feb 19 14:25:04 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8066103" type="Run" />
  <Command __id="985" _type="ConsoleOutput" date="Fri Feb 19 14:25:04 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="8066150" type="ConsoleOutput">
    <outputString><![CDATA[Fri Sep 20 12:28:59 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Fri Sep 20 1"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,":28:"), Diff(DELETE,"41"), Diff(INSERT,"59"), Diff(EQUAL," EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="986" _type="CopyCommand" date="Fri Feb 19 14:25:05 EST 2021" starttimestamp="1613754638645" timestamp="8067034" />
  <Command __id="988" _type="PauseCommand" date="Fri Feb 19 14:25:06 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8068062">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1028]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="987" _type="ShellCommand" date="Fri Feb 19 14:25:06 EST 2021" starttimestamp="1613754638645" timestamp="8068062" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="990" _type="PauseCommand" date="Fri Feb 19 14:25:13 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="8075138">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7076]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="989" _type="ShellCommand" date="Fri Feb 19 14:25:13 EST 2021" starttimestamp="1613754638645" timestamp="8075138" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="991" _type="MoveCaretCommand" caretOffset="1528" date="Fri Feb 19 14:25:13 EST 2021" docOffset="1825" starttimestamp="1613754638645" timestamp="8075212" />
  <Command __id="992" _type="SelectTextCommand" caretOffset="1539" date="Fri Feb 19 14:25:13 EST 2021" end="1539" start="1525" starttimestamp="1613754638645" timestamp="8075335" />
  <Command __id="994" _type="PasteCommand" date="Fri Feb 19 14:25:14 EST 2021" starttimestamp="1613754638645" timestamp="8075533" />
  <Command __id="996" _type="InsertStringCommand" date="Fri Feb 19 14:25:14 EST 2021" starttimestamp="1613754638645" timestamp="8076244" timestamp2="8076244">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="998" _type="PauseCommand" date="Fri Feb 19 14:25:17 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="8078941">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2697]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="997" _type="ShellCommand" date="Fri Feb 19 14:25:17 EST 2021" starttimestamp="1613754638645" timestamp="8078941" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1012" _type="PauseCommand" date="Fri Feb 19 14:25:22 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8083601">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1113]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1011" _type="RunCommand" date="Fri Feb 19 14:25:22 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8083601" type="Run" />
  <Command __id="1013" _type="RunCommand" date="Fri Feb 19 14:25:22 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8083601" type="Run" />
  <Command __id="1014" _type="RunCommand" date="Fri Feb 19 14:25:22 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8083730" type="Debug" />
  <Command __id="1015" _type="RunCommand" date="Fri Feb 19 14:25:22 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8083730" type="Run" />
  <Command __id="1016" _type="RunCommand" date="Fri Feb 19 14:25:22 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8083730" type="Debug" />
  <Command __id="1017" _type="RunCommand" date="Fri Feb 19 14:25:22 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8083730" type="Run" />
  <Command __id="1018" _type="ConsoleOutput" date="Fri Feb 19 14:25:22 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="8083836" type="ConsoleOutput">
    <outputString><![CDATA[Fri Sep 20 14:39:22 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Fri Sep 20 1"), Diff(DELETE,"2:28:59"), Diff(INSERT,"4:39:22"), Diff(EQUAL," EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="1020" _type="PauseCommand" date="Fri Feb 19 14:25:24 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8085723">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1887]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="1019" _type="CopyCommand" date="Fri Feb 19 14:25:24 EST 2021" starttimestamp="1613754638645" timestamp="8085723" />
  <Command __id="1021" _type="ShellCommand" date="Fri Feb 19 14:25:25 EST 2021" starttimestamp="1613754638645" timestamp="8086560" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1034" _type="PauseCommand" date="Fri Feb 19 14:25:33 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8094713">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1255]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1033" _type="RunCommand" date="Fri Feb 19 14:25:33 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8094713" type="Run" />
  <Command __id="1035" _type="RunCommand" date="Fri Feb 19 14:25:33 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8094714" type="Run" />
  <Command __id="1036" _type="RunCommand" date="Fri Feb 19 14:25:33 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8094844" type="Debug" />
  <Command __id="1037" _type="RunCommand" date="Fri Feb 19 14:25:33 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8094844" type="Run" />
  <Command __id="1038" _type="RunCommand" date="Fri Feb 19 14:25:33 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8094844" type="Debug" />
  <Command __id="1039" _type="RunCommand" date="Fri Feb 19 14:25:33 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8094844" type="Run" />
  <Command __id="1040" _type="ConsoleOutput" date="Fri Feb 19 14:25:33 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="8094979" type="ConsoleOutput">
    <outputString><![CDATA[Fri Sep 20 17:06:40 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Fri Sep 20 1"), Diff(DELETE,"4:39:22"), Diff(INSERT,"7:06:40"), Diff(EQUAL," EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="1042" _type="PauseCommand" date="Fri Feb 19 14:25:34 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8096052">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1073]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="1041" _type="CopyCommand" date="Fri Feb 19 14:25:34 EST 2021" starttimestamp="1613754638645" timestamp="8096052" />
  <Command __id="1043" _type="ShellCommand" date="Fri Feb 19 14:25:35 EST 2021" starttimestamp="1613754638645" timestamp="8096715" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1045" _type="PauseCommand" date="Fri Feb 19 14:27:33 EST 2021" range="1m-2m" starttimestamp="1613754638645" timestamp="8214750">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[118034]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1044" _type="ShellCommand" date="Fri Feb 19 14:27:33 EST 2021" starttimestamp="1613754638645" timestamp="8214749" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1046" _type="MoveCaretCommand" caretOffset="1544" date="Fri Feb 19 14:27:33 EST 2021" docOffset="1841" starttimestamp="1613754638645" timestamp="8214836" />
  <Command __id="1047" _type="SelectTextCommand" caretOffset="1548" date="Fri Feb 19 14:27:33 EST 2021" end="1548" start="1540" starttimestamp="1613754638645" timestamp="8214917" />
  <Command __id="1049" _type="PasteCommand" date="Fri Feb 19 14:27:33 EST 2021" starttimestamp="1613754638645" timestamp="8215220" />
  <Command __id="1051" _type="InsertStringCommand" date="Fri Feb 19 14:27:34 EST 2021" starttimestamp="1613754638645" timestamp="8216090" timestamp2="8216090">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1053" _type="PauseCommand" date="Fri Feb 19 14:27:36 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8217796">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1706]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1052" _type="ShellCommand" date="Fri Feb 19 14:27:36 EST 2021" starttimestamp="1613754638645" timestamp="8217796" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1066" _type="PauseCommand" date="Fri Feb 19 14:27:40 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8222173">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1321]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1065" _type="RunCommand" date="Fri Feb 19 14:27:40 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8222173" type="Run" />
  <Command __id="1067" _type="RunCommand" date="Fri Feb 19 14:27:40 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8222173" type="Run" />
  <Command __id="1068" _type="RunCommand" date="Fri Feb 19 14:27:40 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8222307" type="Debug" />
  <Command __id="1069" _type="RunCommand" date="Fri Feb 19 14:27:40 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8222307" type="Run" />
  <Command __id="1070" _type="RunCommand" date="Fri Feb 19 14:27:40 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8222307" type="Debug" />
  <Command __id="1071" _type="RunCommand" date="Fri Feb 19 14:27:40 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8222307" type="Run" />
  <Command __id="1072" _type="ConsoleOutput" date="Fri Feb 19 14:27:41 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="8222428" type="ConsoleOutput">
    <outputString><![CDATA[Tue Sep 17 10:13:47 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Fri"), Diff(INSERT,"Tue"), Diff(EQUAL," Sep "), Diff(DELETE,"20 17:06"), Diff(INSERT,"17 10:13"), Diff(EQUAL,":4"), Diff(DELETE,"0"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="1074" _type="PauseCommand" date="Fri Feb 19 14:27:42 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8223583">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1155]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="1073" _type="CopyCommand" date="Fri Feb 19 14:27:42 EST 2021" starttimestamp="1613754638645" timestamp="8223583" />
  <Command __id="1075" _type="ShellCommand" date="Fri Feb 19 14:27:43 EST 2021" starttimestamp="1613754638645" timestamp="8224565" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1077" _type="PauseCommand" date="Fri Feb 19 14:27:59 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="8240457">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15892]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1076" _type="ShellCommand" date="Fri Feb 19 14:27:59 EST 2021" starttimestamp="1613754638645" timestamp="8240457" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1078" _type="MoveCaretCommand" caretOffset="1528" date="Fri Feb 19 14:27:59 EST 2021" docOffset="1825" starttimestamp="1613754638645" timestamp="8240550" />
  <Command __id="1079" _type="SelectTextCommand" caretOffset="1539" date="Fri Feb 19 14:27:59 EST 2021" end="1539" start="1525" starttimestamp="1613754638645" timestamp="8240717" />
  <Command __id="1081" _type="PasteCommand" date="Fri Feb 19 14:27:59 EST 2021" starttimestamp="1613754638645" timestamp="8240908" />
  <Command __id="1083" _type="InsertStringCommand" date="Fri Feb 19 14:28:00 EST 2021" starttimestamp="1613754638645" timestamp="8241577" timestamp2="8241577">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1085" _type="PauseCommand" date="Fri Feb 19 14:28:01 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8243168">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1591]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1084" _type="ShellCommand" date="Fri Feb 19 14:28:01 EST 2021" starttimestamp="1613754638645" timestamp="8243168" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1098" _type="PauseCommand" date="Fri Feb 19 14:28:06 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8247559">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1627]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1097" _type="RunCommand" date="Fri Feb 19 14:28:06 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8247559" type="Run" />
  <Command __id="1099" _type="RunCommand" date="Fri Feb 19 14:28:06 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8247559" type="Run" />
  <Command __id="1100" _type="RunCommand" date="Fri Feb 19 14:28:06 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8247677" type="Debug" />
  <Command __id="1101" _type="RunCommand" date="Fri Feb 19 14:28:06 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8247677" type="Run" />
  <Command __id="1102" _type="RunCommand" date="Fri Feb 19 14:28:06 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8247677" type="Debug" />
  <Command __id="1103" _type="RunCommand" date="Fri Feb 19 14:28:06 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8247677" type="Run" />
  <Command __id="1104" _type="ConsoleOutput" date="Fri Feb 19 14:28:06 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="8247755" type="ConsoleOutput">
    <outputString><![CDATA[Mon Sep 16 12:35:44 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Tue"), Diff(INSERT,"Mon"), Diff(EQUAL," Sep 1"), Diff(DELETE,"7"), Diff(INSERT,"6"), Diff(EQUAL," 1"), Diff(DELETE,"0:13"), Diff(INSERT,"2:35"), Diff(EQUAL,":4"), Diff(DELETE,"7"), Diff(INSERT,"4"), Diff(EQUAL," EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="1106" _type="PauseCommand" date="Fri Feb 19 14:28:07 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8249146">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1391]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="1105" _type="CopyCommand" date="Fri Feb 19 14:28:07 EST 2021" starttimestamp="1613754638645" timestamp="8249146" />
  <Command __id="1107" _type="ShellCommand" date="Fri Feb 19 14:28:08 EST 2021" starttimestamp="1613754638645" timestamp="8250070" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1109" _type="PauseCommand" date="Fri Feb 19 14:28:18 EST 2021" range="10s-20s" starttimestamp="1613754638645" timestamp="8260083">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10013]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1108" _type="ShellCommand" date="Fri Feb 19 14:28:18 EST 2021" starttimestamp="1613754638645" timestamp="8260083" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1110" _type="MoveCaretCommand" caretOffset="1576" date="Fri Feb 19 14:28:18 EST 2021" docOffset="1873" starttimestamp="1613754638645" timestamp="8260180" />
  <Command __id="1112" _type="PauseCommand" date="Fri Feb 19 14:28:20 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="8262286">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2106]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1111" _type="ShellCommand" date="Fri Feb 19 14:28:20 EST 2021" starttimestamp="1613754638645" timestamp="8262286" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1114" _type="PauseCommand" date="Fri Feb 19 14:28:22 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8263358">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1072]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1113" _type="ShellCommand" date="Fri Feb 19 14:28:22 EST 2021" starttimestamp="1613754638645" timestamp="8263358" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1115" _type="MoveCaretCommand" caretOffset="1532" date="Fri Feb 19 14:28:22 EST 2021" docOffset="1829" starttimestamp="1613754638645" timestamp="8263406" />
  <Command __id="1116" _type="SelectTextCommand" caretOffset="1539" date="Fri Feb 19 14:28:22 EST 2021" end="1539" start="1525" starttimestamp="1613754638645" timestamp="8263550" />
  <Command __id="1118" _type="PasteCommand" date="Fri Feb 19 14:28:22 EST 2021" starttimestamp="1613754638645" timestamp="8263667" />
  <Command __id="1120" _type="InsertStringCommand" date="Fri Feb 19 14:28:22 EST 2021" starttimestamp="1613754638645" timestamp="8264336" timestamp2="8264336">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1122" _type="PauseCommand" date="Fri Feb 19 14:28:24 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8266008">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1672]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1121" _type="ShellCommand" date="Fri Feb 19 14:28:24 EST 2021" starttimestamp="1613754638645" timestamp="8266008" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1135" _type="PauseCommand" date="Fri Feb 19 14:28:29 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="8271256">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2244]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1134" _type="RunCommand" date="Fri Feb 19 14:28:29 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8271256" type="Run" />
  <Command __id="1136" _type="RunCommand" date="Fri Feb 19 14:28:29 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8271257" type="Run" />
  <Command __id="1137" _type="RunCommand" date="Fri Feb 19 14:28:30 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8271371" type="Debug" />
  <Command __id="1138" _type="RunCommand" date="Fri Feb 19 14:28:30 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8271371" type="Run" />
  <Command __id="1139" _type="RunCommand" date="Fri Feb 19 14:28:30 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613754638645" timestamp="8271371" type="Debug" />
  <Command __id="1140" _type="RunCommand" date="Fri Feb 19 14:28:30 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1613754638645" timestamp="8271371" type="Run" />
  <Command __id="1141" _type="ConsoleOutput" date="Fri Feb 19 14:28:30 EST 2021" overflow="false" starttimestamp="1613754638645" timestamp="8271455" type="ConsoleOutput">
    <outputString><![CDATA[Sat Sep 14 15:01:18 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Mon"), Diff(INSERT,"Sat"), Diff(EQUAL," Sep 1"), Diff(DELETE,"6"), Diff(INSERT,"4"), Diff(EQUAL," 1"), Diff(DELETE,"2:35:44"), Diff(INSERT,"5:01:18"), Diff(EQUAL," EDT 2013¶")]]]></diff>
  </Command>
  <Command __id="1143" _type="PauseCommand" date="Fri Feb 19 14:28:31 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8273100">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1645]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="1142" _type="CopyCommand" date="Fri Feb 19 14:28:31 EST 2021" starttimestamp="1613754638645" timestamp="8273100" />
  <Command __id="1144" _type="ShellCommand" date="Fri Feb 19 14:28:32 EST 2021" starttimestamp="1613754638645" timestamp="8273953" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1162" _type="PauseCommand" date="Fri Feb 19 14:34:10 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="8611513">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1804]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1161" _type="ShellCommand" date="Fri Feb 19 14:34:10 EST 2021" starttimestamp="1613754638645" timestamp="8611513" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1166" _type="PauseCommand" date="Fri Feb 19 14:34:40 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="8642246">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2900]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1165" _type="ShellCommand" date="Fri Feb 19 14:34:40 EST 2021" starttimestamp="1613754638645" timestamp="8642246" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1373" _type="PauseCommand" date="Fri Feb 19 14:55:23 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="9884572">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2980]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1374" _type="MoveCaretCommand" caretOffset="2270" date="Fri Feb 19 14:55:23 EST 2021" docOffset="2615" starttimestamp="1613754638645" timestamp="9884705" />
  <Command __id="1472" _type="PauseCommand" date="Fri Feb 19 15:31:53 EST 2021" range="10m-30m" starttimestamp="1613754638645" timestamp="12074719">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1138081]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1471" _type="ShellCommand" date="Fri Feb 19 15:31:53 EST 2021" starttimestamp="1613754638645" timestamp="12074719" type="ECLIPSE_MAXIMIZED" />
  <Command __id="1473" _type="ShellCommand" date="Fri Feb 19 15:31:53 EST 2021" starttimestamp="1613754638645" timestamp="12074766" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1475" _type="PauseCommand" date="Fri Feb 19 15:31:55 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="12076523">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1757]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1476" _type="MoveCaretCommand" caretOffset="1192" date="Fri Feb 19 15:31:55 EST 2021" docOffset="7911" starttimestamp="1613754638645" timestamp="12076781" />
  <Command __id="1478" _type="PauseCommand" date="Fri Feb 19 15:31:59 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="12081234">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4453]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1477" _type="ShellCommand" date="Fri Feb 19 15:31:59 EST 2021" starttimestamp="1613754638645" timestamp="12081234" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1480" _type="PauseCommand" date="Fri Feb 19 15:33:22 EST 2021" range="1m-2m" starttimestamp="1613754638645" timestamp="12164270">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[83036]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1479" _type="ShellCommand" date="Fri Feb 19 15:33:22 EST 2021" starttimestamp="1613754638645" timestamp="12164270" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1481" _type="MoveCaretCommand" caretOffset="1237" date="Fri Feb 19 15:33:23 EST 2021" docOffset="7956" starttimestamp="1613754638645" timestamp="12164355" />
  <Command __id="1482" _type="MoveCaretCommand" caretOffset="1237" date="Fri Feb 19 15:33:23 EST 2021" docOffset="7956" starttimestamp="1613754638645" timestamp="12164355" />
  <Command __id="1484" _type="PauseCommand" date="Fri Feb 19 15:33:24 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="12165540">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1185]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1483" _type="ShellCommand" date="Fri Feb 19 15:33:24 EST 2021" starttimestamp="1613754638645" timestamp="12165540" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1486" _type="PauseCommand" date="Fri Feb 19 15:54:15 EST 2021" range="10m-30m" starttimestamp="1613754638645" timestamp="13416587">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1251047]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1485" _type="ShellCommand" date="Fri Feb 19 15:54:15 EST 2021" starttimestamp="1613754638645" timestamp="13416587" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1488" _type="PauseCommand" date="Fri Feb 19 15:54:17 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="13418822">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2235]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1487" _type="ShellCommand" date="Fri Feb 19 15:54:17 EST 2021" starttimestamp="1613754638645" timestamp="13418822" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1490" _type="PauseCommand" date="Fri Feb 19 15:59:07 EST 2021" range="2m-5m" starttimestamp="1613754638645" timestamp="13709027">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[290205]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1489" _type="ShellCommand" date="Fri Feb 19 15:59:07 EST 2021" starttimestamp="1613754638645" timestamp="13709027" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1492" _type="PauseCommand" date="Fri Feb 19 15:59:11 EST 2021" range="2s-5s" starttimestamp="1613754638645" timestamp="13712908">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3881]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1491" _type="MoveCaretCommand" caretOffset="1237" date="Fri Feb 19 15:59:11 EST 2021" docOffset="7956" starttimestamp="1613754638645" timestamp="13712908" />
  <Command __id="1493" _type="MoveCaretCommand" caretOffset="1237" date="Fri Feb 19 15:59:11 EST 2021" docOffset="7956" starttimestamp="1613754638645" timestamp="13712908" />
  <Command __id="1495" _type="PauseCommand" date="Fri Feb 19 15:59:13 EST 2021" range="1s-2s" starttimestamp="1613754638645" timestamp="13714480">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1572]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1494" _type="ShellCommand" date="Fri Feb 19 15:59:13 EST 2021" starttimestamp="1613754638645" timestamp="13714480" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1497" _type="PauseCommand" date="Fri Feb 19 15:59:21 EST 2021" range="5s-10s" starttimestamp="1613754638645" timestamp="13723087">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8607]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1496" _type="ShellCommand" date="Fri Feb 19 15:59:21 EST 2021" starttimestamp="1613754638645" timestamp="13723087" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1498" _type="MoveCaretCommand" caretOffset="1516" date="Fri Feb 19 15:59:21 EST 2021" docOffset="8235" starttimestamp="1613754638645" timestamp="13723155" />
  <Command __id="1499" _type="MoveCaretCommand" caretOffset="1516" date="Fri Feb 19 15:59:21 EST 2021" docOffset="8235" starttimestamp="1613754638645" timestamp="13723155" />
</Events>
