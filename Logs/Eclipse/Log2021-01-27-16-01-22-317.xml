<Events startTimestamp="1611781282317" logVersion="1.0.0.202101171653">
  <Command __id="1" _type="MoveCaretCommand" caretOffset="27475" date="Wed Jan 27 16:01:22 EST 2021" docOffset="28977" starttimestamp="1611781282317" timestamp="399" />
  <Command __id="2" _type="MoveCaretCommand" caretOffset="27370" date="Wed Jan 27 16:01:23 EST 2021" docOffset="28872" starttimestamp="1611781282317" timestamp="1382" />
  <Command __id="3" _type="MoveCaretCommand" caretOffset="27483" date="Wed Jan 27 16:01:25 EST 2021" docOffset="28985" starttimestamp="1611781282317" timestamp="3417" />
  <Command __id="4" _type="ShellCommand" date="Wed Jan 27 16:01:27 EST 2021" starttimestamp="1611781282317" timestamp="5545" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5" _type="ShellCommand" date="Wed Jan 27 16:01:28 EST 2021" starttimestamp="1611781282317" timestamp="6507" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Wed Jan 27 16:01:28 EST 2021" starttimestamp="1611781282317" timestamp="6554" />
  <Command __id="15" _type="ShellCommand" date="Wed Jan 27 16:01:55 EST 2021" starttimestamp="1611781282317" timestamp="33074" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="1244" _type="Insert" date="Wed Jan 27 16:29:16 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9442" docExpressionCount="932" docLength="10478" length="4" offset="2756" repeat="4" starttimestamp="1611781282317" timestamp="1673700" timestamp2="1674142">
    <text><![CDATA[Cour]]></text>
  </DocumentChange>
  <DocumentChange __id="1256" _type="Delete" date="Wed Jan 27 16:29:16 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9439" docExpressionCount="932" docLength="10475" endLine="65" length="3" offset="2757" repeat="3" startLine="65" starttimestamp="1611781282317" timestamp="1674486" timestamp2="1674724">
    <text><![CDATA[our]]></text>
  </DocumentChange>
  <DocumentChange __id="1262" _type="Insert" date="Wed Jan 27 16:29:17 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9440" docExpressionCount="932" docLength="10476" length="1" offset="2757" starttimestamp="1611781282317" timestamp="1674973">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="1265" _type="Delete" date="Wed Jan 27 16:29:17 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9439" docExpressionCount="932" docLength="10475" endLine="65" length="1" offset="2757" startLine="65" starttimestamp="1611781282317" timestamp="1675361">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="1266" _type="Insert" date="Wed Jan 27 16:29:17 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9444" docExpressionCount="932" docLength="10480" length="5" offset="2757" repeat="5" starttimestamp="1611781282317" timestamp="1675557" timestamp2="1676181">
    <text><![CDATA[OURSE]]></text>
  </DocumentChange>
  <DocumentChange __id="1279" _type="Delete" date="Wed Jan 27 16:29:19 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9434" docExpressionCount="932" docLength="10470" endLine="65" length="10" offset="2766" startLine="65" starttimestamp="1611781282317" timestamp="1677548">
    <text><![CDATA[machine_id]]></text>
  </DocumentChange>
  <DocumentChange __id="1281" _type="Insert" date="Wed Jan 27 16:29:20 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9440" docExpressionCount="932" docLength="10476" length="6" offset="2766" repeat="6" starttimestamp="1611781282317" timestamp="1678019" timestamp2="1678484">
    <text><![CDATA[course]]></text>
  </DocumentChange>
  <DocumentChange __id="1295" _type="Delete" date="Wed Jan 27 16:29:23 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9417" docExpressionCount="932" docLength="10453" endLine="177" length="23" offset="6264" repeat="7" startLine="177" starttimestamp="1611781282317" timestamp="1681603" timestamp2="1683614">
    <text><![CDATA["No Network Card Found"]]></text>
  </DocumentChange>
  <DocumentChange __id="1309" _type="Insert" date="Wed Jan 27 16:29:26 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9420" docExpressionCount="932" docLength="10456" length="3" offset="6264" repeat="3" starttimestamp="1611781282317" timestamp="1684217" timestamp2="1684411">
    <text><![CDATA[net]]></text>
  </DocumentChange>
  <DocumentChange __id="1314" _type="Delete" date="Wed Jan 27 16:29:27 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9418" docExpressionCount="932" docLength="10454" endLine="177" length="2" offset="6265" repeat="2" startLine="177" starttimestamp="1611781282317" timestamp="1684985" timestamp2="1685100">
    <text><![CDATA[et]]></text>
  </DocumentChange>
  <DocumentChange __id="1316" _type="Insert" date="Wed Jan 27 16:29:27 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9419" docExpressionCount="932" docLength="10455" length="1" offset="6265" starttimestamp="1611781282317" timestamp="1685431">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="1318" _type="Replace" date="Wed Jan 27 16:29:28 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9427" docExpressionCount="932" docLength="10463" endLine="177" insertionLength="10" int_docASTNodeCount="1533" int_docActiveCodeLength="9417" int_docExpressionCount="932" int_docLength="10453" length="2" offset="6264" startLine="177" starttimestamp="1611781282317" timestamp="1685924">
    <deletedText><![CDATA[no]]></deletedText>
    <insertedText><![CDATA[NO_NETWORK]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1321" _type="Delete" date="Wed Jan 27 16:29:30 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9418" docExpressionCount="932" docLength="10454" endLine="181" length="9" offset="6365" repeat="3" startLine="181" starttimestamp="1611781282317" timestamp="1688147" timestamp2="1688781">
    <text><![CDATA["eclipse"]]></text>
  </DocumentChange>
  <DocumentChange __id="1327" _type="Insert" date="Wed Jan 27 16:29:31 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9420" docExpressionCount="932" docLength="10456" length="2" offset="6365" repeat="2" starttimestamp="1611781282317" timestamp="1688903" timestamp2="1689090">
    <text><![CDATA[ec]]></text>
  </DocumentChange>
  <DocumentChange __id="1332" _type="Replace" date="Wed Jan 27 16:29:31 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9425" docExpressionCount="932" docLength="10461" endLine="181" insertionLength="7" int_docASTNodeCount="1533" int_docActiveCodeLength="9418" int_docExpressionCount="932" int_docLength="10454" length="2" offset="6365" startLine="181" starttimestamp="1611781282317" timestamp="1689298">
    <deletedText><![CDATA[ec]]></deletedText>
    <insertedText><![CDATA[ECLIPSE]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1336" _type="Delete" date="Wed Jan 27 16:29:33 EST 2021" docASTNodeCount="1532" docActiveCodeLength="9417" docExpressionCount="931" docLength="10453" endLine="182" length="8" offset="6443" repeat="3" startLine="182" starttimestamp="1611781282317" timestamp="1691591" timestamp2="1691895">
    <text><![CDATA["course"]]></text>
  </DocumentChange>
  <DocumentChange __id="1342" _type="Insert" date="Wed Jan 27 16:29:34 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9420" docExpressionCount="932" docLength="10456" length="3" offset="6443" repeat="3" starttimestamp="1611781282317" timestamp="1692564" timestamp2="1692816">
    <text><![CDATA[cou]]></text>
  </DocumentChange>
  <DocumentChange __id="1348" _type="Replace" date="Wed Jan 27 16:29:35 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9423" docExpressionCount="932" docLength="10459" endLine="182" insertionLength="6" int_docASTNodeCount="1532" int_docActiveCodeLength="9417" int_docExpressionCount="931" int_docLength="10453" length="3" offset="6443" startLine="182" starttimestamp="1611781282317" timestamp="1692921">
    <deletedText><![CDATA[cou]]></deletedText>
    <insertedText><![CDATA[COURSE]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1375" _type="Delete" date="Wed Jan 27 16:29:40 EST 2021" docASTNodeCount="1532" docActiveCodeLength="9417" docExpressionCount="931" docLength="10453" endLine="196" length="6" offset="6868" repeat="3" startLine="196" starttimestamp="1611781282317" timestamp="1697766" timestamp2="1698370">
    <text><![CDATA["json"]]></text>
  </DocumentChange>
  <DocumentChange __id="1381" _type="Insert" date="Wed Jan 27 16:29:41 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9420" docExpressionCount="932" docLength="10456" length="3" offset="6868" repeat="3" starttimestamp="1611781282317" timestamp="1698832" timestamp2="1699016">
    <text><![CDATA[jso]]></text>
  </DocumentChange>
  <DocumentChange __id="1387" _type="Replace" date="Wed Jan 27 16:29:41 EST 2021" docASTNodeCount="1533" docActiveCodeLength="9421" docExpressionCount="932" docLength="10457" endLine="196" insertionLength="4" int_docASTNodeCount="1532" int_docActiveCodeLength="9417" int_docExpressionCount="931" int_docLength="10453" length="3" offset="6868" startLine="196" starttimestamp="1611781282317" timestamp="1699213">
    <deletedText><![CDATA[jso]]></deletedText>
    <insertedText><![CDATA[JSON]]></insertedText>
  </DocumentChange>
  <Command __id="1442" _type="DiffBasedFileOpenCommand" date="Wed Jan 27 16:57:06 EST 2021" docASTNodeCount="5492" docActiveCodeLength="32761" docExpressionCount="3685" docLength="33120" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3343803">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RestCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶//					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶					"# of Days", "Time Spent Each Day"};¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					restSum[i] += restTime[1];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			for (int i = 0; i < restSum.length; i++) {¶				sum[3*i+5] = restSum[i]+"";¶			}¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		joiner = new AJoiner(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					joiner.finish();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								joiner.finish();¶								return;¶							}¶							for (File file : logs) {¶								List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶								if (commands.size() < 2) {¶									continue;¶								}¶								List<EHICommand> newCommands = new ArrayList<>();¶								EHICommand last = null;¶								EHICommand cur = null;¶								for (EHICommand command : commands) {¶									if (cur == null) {¶										cur = command;¶										newCommands.add(command);¶									} else {¶										last = cur;¶										cur = command;¶										long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶										if (rest >= 1*ONE_SECOND) {¶											String range = "";¶											if (rest < 2*ONE_SECOND) {¶												range = "1s-2s";¶											} else if (rest < 5*ONE_SECOND) {¶												range = "2s-5s";¶											} else if (rest < 10*ONE_SECOND) {¶												range = "5s-10s";¶											} else if (rest < 20*ONE_SECOND) {¶												range = "10s-20s";¶											} else if (rest < 30*ONE_SECOND) {¶												range = "20s-30s";¶											} else if (rest < ONE_MIN) {¶												range = "30s-1m";¶											} else if (rest < TWO_MIN) {¶												range = "1m-2m";¶											} else if (rest < FIVE_MIN) {¶												range = "2m-5m";¶											} else if (rest < TEN_MIN) {¶												range = "5m-10m";¶											} else if (rest < 3*TEN_MIN) {¶												range = "10m-30m";¶											} else if (rest < 6*TEN_MIN) {¶												range = "30m-60m";¶											} else {¶												range = ">1h";¶											}¶											RestCommand rCommnad = new RestCommand(last.getCommandType(), cur.getCommandType(), rest, range);¶											rCommnad.setStartTimestamp(last.getStartTimestamp());¶											rCommnad.setTimestamp(last.getTimestamp()+1);¶											newCommands.add(rCommnad);¶										} ¶										newCommands.add(command);¶									}¶								}¶								String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶								for (EHICommand c : newCommands) {¶									logContent += c.persist();¶								}¶								logContent += XML_FILE_ENDING;¶								try {¶									File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶									if (newLog.exists()) {¶										newLog.delete();¶									}¶									newLog.getParentFile().mkdirs();¶									newLog.createNewFile();¶									BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶									System.out.println("Writing to file " + newLog.getPath());¶									writer.write(logContent);¶									writer.close();¶									System.out.println("Finished writing to file " + newLog.getPath());¶								} catch (IOException e) {¶									e.printStackTrace();¶								}¶							}¶							synchronized (this) {¶								threadCount--;¶							}¶							joiner.finish();¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶//					if (i == assigns.length-1 && j == students.length-1) {¶//						try {¶//							thread.join();¶//						} catch (InterruptedException e) {¶//							e.printStackTrace();¶//						} ¶//						System.exit(0);¶//					}¶				}¶			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶	¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶//	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1444" _type="DiffBasedFileOpenCommand" date="Wed Jan 27 16:57:07 EST 2021" docASTNodeCount="78" docActiveCodeLength="675" docExpressionCount="38" docLength="983" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3344934">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
//	private static AExperimentalReplayer replayer;
	private static AReplayer replayer;
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
		replayer = new AReplayer(analyzer);
		analyzer.addAnalyzerListener(replayer);	
//		replayer.analyzeFolder(classFolderPath);
		replayer.createRestCommandLogs(classFolderPath);
//		replayer = new AExperimentalReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createRestCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
	}
}

















]]></snapshot>
  </Command>
  <Command __id="1446" _type="DiffBasedFileOpenCommand" date="Wed Jan 27 16:57:11 EST 2021" docASTNodeCount="5492" docActiveCodeLength="32761" docExpressionCount="3685" docLength="33120" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3348758">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RestCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶//					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶					"# of Days", "Time Spent Each Day"};¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					restSum[i] += restTime[1];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			for (int i = 0; i < restSum.length; i++) {¶				sum[3*i+5] = restSum[i]+"";¶			}¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		joiner = new AJoiner(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					joiner.finish();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								joiner.finish();¶								return;¶							}¶							for (File file : logs) {¶								List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶								if (commands.size() < 2) {¶									continue;¶								}¶								List<EHICommand> newCommands = new ArrayList<>();¶								EHICommand last = null;¶								EHICommand cur = null;¶								for (EHICommand command : commands) {¶									if (cur == null) {¶										cur = command;¶										newCommands.add(command);¶									} else {¶										last = cur;¶										cur = command;¶										long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶										if (rest >= 1*ONE_SECOND) {¶											String range = "";¶											if (rest < 2*ONE_SECOND) {¶												range = "1s-2s";¶											} else if (rest < 5*ONE_SECOND) {¶												range = "2s-5s";¶											} else if (rest < 10*ONE_SECOND) {¶												range = "5s-10s";¶											} else if (rest < 20*ONE_SECOND) {¶												range = "10s-20s";¶											} else if (rest < 30*ONE_SECOND) {¶												range = "20s-30s";¶											} else if (rest < ONE_MIN) {¶												range = "30s-1m";¶											} else if (rest < TWO_MIN) {¶												range = "1m-2m";¶											} else if (rest < FIVE_MIN) {¶												range = "2m-5m";¶											} else if (rest < TEN_MIN) {¶												range = "5m-10m";¶											} else if (rest < 3*TEN_MIN) {¶												range = "10m-30m";¶											} else if (rest < 6*TEN_MIN) {¶												range = "30m-60m";¶											} else {¶												range = ">1h";¶											}¶											RestCommand rCommnad = new RestCommand(last.getCommandType(), cur.getCommandType(), rest, range);¶											rCommnad.setStartTimestamp(last.getStartTimestamp());¶											rCommnad.setTimestamp(last.getTimestamp()+1);¶											newCommands.add(rCommnad);¶										} ¶										newCommands.add(command);¶									}¶								}¶								String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶								for (EHICommand c : newCommands) {¶									logContent += c.persist();¶								}¶								logContent += XML_FILE_ENDING;¶								try {¶									File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶									if (newLog.exists()) {¶										newLog.delete();¶									}¶									newLog.getParentFile().mkdirs();¶									newLog.createNewFile();¶									BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶									System.out.println("Writing to file " + newLog.getPath());¶									writer.write(logContent);¶									writer.close();¶									System.out.println("Finished writing to file " + newLog.getPath());¶								} catch (IOException e) {¶									e.printStackTrace();¶								}¶							}¶							synchronized (this) {¶								threadCount--;¶							}¶							joiner.finish();¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶//					if (i == assigns.length-1 && j == students.length-1) {¶//						try {¶//							thread.join();¶//						} catch (InterruptedException e) {¶//							e.printStackTrace();¶//						} ¶//						System.exit(0);¶//					}¶				}¶			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶	¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶//	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1441" _type="ShellCommand" date="Wed Jan 27 16:57:05 EST 2021" starttimestamp="1611781282317" timestamp="3343675" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1443" _type="MoveCaretCommand" caretOffset="27631" date="Wed Jan 27 16:57:06 EST 2021" docOffset="29133" starttimestamp="1611781282317" timestamp="3344009" />
  <Command __id="1445" _type="MoveCaretCommand" caretOffset="434" date="Wed Jan 27 16:57:07 EST 2021" docOffset="461" starttimestamp="1611781282317" timestamp="3345066" />
  <Command __id="1447" _type="SelectTextCommand" caretOffset="15079" date="Wed Jan 27 16:57:11 EST 2021" end="15079" start="15058" starttimestamp="1611781282317" timestamp="3348938" />
  <Command __id="1449" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Wed Jan 27 16:57:13 EST 2021" starttimestamp="1611781282317" timestamp="3350834" />
  <Command __id="1450" _type="MoveCaretCommand" caretOffset="658" date="Wed Jan 27 16:57:13 EST 2021" docOffset="685" starttimestamp="1611781282317" timestamp="3350927" />
  <Command __id="1451" _type="MoveCaretCommand" caretOffset="622" date="Wed Jan 27 16:57:14 EST 2021" docOffset="649" starttimestamp="1611781282317" timestamp="3352063" />
  <Command __id="1453" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Jan 27 16:57:15 EST 2021" starttimestamp="1611781282317" timestamp="3352713" />
  <Command __id="1454" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:15 EST 2021" starttimestamp="1611781282317" timestamp="3353111" />
  <Command __id="1456" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Jan 27 16:57:15 EST 2021" starttimestamp="1611781282317" timestamp="3353674" />
  <Command __id="1457" _type="MoveCaretCommand" caretOffset="626" date="Wed Jan 27 16:57:17 EST 2021" docOffset="653" starttimestamp="1611781282317" timestamp="3355558" />
  <Command __id="1459" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Jan 27 16:57:18 EST 2021" starttimestamp="1611781282317" timestamp="3356204" />
  <Command __id="1460" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:18 EST 2021" starttimestamp="1611781282317" timestamp="3356664" />
  <Command __id="1461" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:19 EST 2021" starttimestamp="1611781282317" timestamp="3356804" />
  <Command __id="1462" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:19 EST 2021" starttimestamp="1611781282317" timestamp="3356956" />
  <Command __id="1463" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:21 EST 2021" starttimestamp="1611781282317" timestamp="3359541" />
  <Command __id="1464" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Jan 27 16:57:22 EST 2021" starttimestamp="1611781282317" timestamp="3359918" />
  <Command __id="1465" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Jan 27 16:57:25 EST 2021" starttimestamp="1611781282317" timestamp="3362803" />
  <Command __id="1466" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Jan 27 16:57:25 EST 2021" starttimestamp="1611781282317" timestamp="3362947" />
  <Command __id="1467" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Jan 27 16:57:25 EST 2021" starttimestamp="1611781282317" timestamp="3363093" />
  <Command __id="1468" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Jan 27 16:57:25 EST 2021" starttimestamp="1611781282317" timestamp="3363233" />
  <Command __id="1448" _type="DiffBasedFileOpenCommand" date="Wed Jan 27 16:57:13 EST 2021" docASTNodeCount="78" docActiveCodeLength="675" docExpressionCount="38" docLength="983" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3350781">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶//	private static AExperimentalReplayer replayer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶		replayer = new AReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶//		replayer.analyzeFolder(classFolderPath);¶		replayer.createRestCommandLogs(classFolderPath);¶//		replayer = new AExperimentalReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createRestCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="1452" _type="Delete" date="Wed Jan 27 16:57:15 EST 2021" docASTNodeCount="83" docActiveCodeLength="717" docExpressionCount="42" docLength="981" endLine="16" length="2" offset="621" startLine="16" starttimestamp="1611781282317" timestamp="3352697">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1455" _type="Insert" date="Wed Jan 27 16:57:15 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="983" length="2" offset="665" starttimestamp="1611781282317" timestamp="3353659">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1458" _type="Insert" date="Wed Jan 27 16:57:18 EST 2021" docASTNodeCount="73" docActiveCodeLength="625" docExpressionCount="34" docLength="985" length="2" offset="621" starttimestamp="1611781282317" timestamp="3356190">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1470" _type="Insert" date="Wed Jan 27 16:57:27 EST 2021" docASTNodeCount="66" docActiveCodeLength="588" docExpressionCount="29" docLength="987" length="2" offset="538" starttimestamp="1611781282317" timestamp="3364815">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1475" _type="Insert" date="Wed Jan 27 16:57:28 EST 2021" docASTNodeCount="61" docActiveCodeLength="546" docExpressionCount="25" docLength="989" length="2" offset="579" starttimestamp="1611781282317" timestamp="3366323">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1483" _type="Delete" date="Wed Jan 27 16:57:30 EST 2021" docASTNodeCount="66" docActiveCodeLength="588" docExpressionCount="29" docLength="987" endLine="19" length="2" offset="778" startLine="19" starttimestamp="1611781282317" timestamp="3368037">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1494" _type="DiffBasedFileOpenCommand" date="Wed Jan 27 16:57:37 EST 2021" docASTNodeCount="485" docActiveCodeLength="2671" docExpressionCount="307" docLength="2671" projectName="Hermes" starttimestamp="1611781282317" timestamp="3375012">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\RestCommand.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.sun.rowset.internal.XmlResolver;

import fluorite.model.EHEventRecorder;

public class RestCommand extends AbstractCommand implements EHICommand{
	private static final String XML_RANGE = "range";
	private static final String XML_PREV = "prev";
	private static final String XML_NEXT = "next";
	private static final String XML_REST = "rest";
	private String prev, next, range;
	private long rest;

	public RestCommand() {}
	
	public RestCommand(String prev, String next, long rest, String range) {
		this.prev = prev;
		this.next = next;
		this.rest = rest;
		this.range = range;
	}
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_RANGE, range);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());
		dataMap.put(XML_PREV, prev);
		dataMap.put(XML_NEXT, next);
		dataMap.put(XML_REST, rest+"");
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "RestCommand";
	}

	@Override
	public String getName() {
		return "Rest";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			prev = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			next =textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_REST)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			rest = Long.getLong(textNode.getTextContent());
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			range =textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="1469" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Jan 27 16:57:26 EST 2021" starttimestamp="1611781282317" timestamp="3364235" />
  <Command __id="1471" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Jan 27 16:57:27 EST 2021" starttimestamp="1611781282317" timestamp="3364829" />
  <Command __id="1472" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:27 EST 2021" starttimestamp="1611781282317" timestamp="3365255" />
  <Command __id="1473" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:27 EST 2021" starttimestamp="1611781282317" timestamp="3365469" />
  <Command __id="1474" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Jan 27 16:57:28 EST 2021" starttimestamp="1611781282317" timestamp="3365815" />
  <Command __id="1476" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Jan 27 16:57:28 EST 2021" starttimestamp="1611781282317" timestamp="3366337" />
  <Command __id="1477" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:29 EST 2021" starttimestamp="1611781282317" timestamp="3366799" />
  <Command __id="1478" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:29 EST 2021" starttimestamp="1611781282317" timestamp="3366948" />
  <Command __id="1479" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:29 EST 2021" starttimestamp="1611781282317" timestamp="3367066" />
  <Command __id="1480" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:29 EST 2021" starttimestamp="1611781282317" timestamp="3367213" />
  <Command __id="1481" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:29 EST 2021" starttimestamp="1611781282317" timestamp="3367355" />
  <Command __id="1482" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Jan 27 16:57:29 EST 2021" starttimestamp="1611781282317" timestamp="3367639" />
  <Command __id="1484" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Jan 27 16:57:30 EST 2021" starttimestamp="1611781282317" timestamp="3368052" />
  <Command __id="1485" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:30 EST 2021" starttimestamp="1611781282317" timestamp="3368518" />
  <Command __id="1486" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:30 EST 2021" starttimestamp="1611781282317" timestamp="3368663" />
  <Command __id="1487" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Jan 27 16:57:31 EST 2021" starttimestamp="1611781282317" timestamp="3369160" />
  <Command __id="1488" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Jan 27 16:57:32 EST 2021" starttimestamp="1611781282317" timestamp="3370144" />
  <Command __id="1490" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Jan 27 16:57:34 EST 2021" starttimestamp="1611781282317" timestamp="3371801" />
  <Command __id="1491" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Jan 27 16:57:34 EST 2021" starttimestamp="1611781282317" timestamp="3372139" />
  <Command __id="1492" _type="EclipseCommand" commandID="" date="Wed Jan 27 16:57:34 EST 2021" starttimestamp="1611781282317" timestamp="3372282" />
  <Command __id="1493" _type="EclipseCommand" commandID="" date="Wed Jan 27 16:57:34 EST 2021" starttimestamp="1611781282317" timestamp="3372417" />
  <Command __id="1495" _type="MoveCaretCommand" caretOffset="1102" date="Wed Jan 27 16:57:37 EST 2021" docOffset="1391" starttimestamp="1611781282317" timestamp="3375151" />
  <Command __id="1497" _type="MoveCaretCommand" caretOffset="0" date="Wed Jan 27 16:57:48 EST 2021" docOffset="0" starttimestamp="1611781282317" timestamp="3386283" />
  <Command __id="1498" _type="MoveCaretCommand" caretOffset="2338" date="Wed Jan 27 16:58:38 EST 2021" docOffset="8102" starttimestamp="1611781282317" timestamp="3436213" />
  <Command __id="1500" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Jan 27 16:58:39 EST 2021" starttimestamp="1611781282317" timestamp="3437079" />
  <Command __id="1501" _type="MoveCaretCommand" caretOffset="2185" date="Wed Jan 27 16:58:49 EST 2021" docOffset="16115" starttimestamp="1611781282317" timestamp="3447259" />
  <Command __id="1503" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:58:50 EST 2021" starttimestamp="1611781282317" timestamp="3447900" />
  <Command __id="1504" _type="MoveCaretCommand" caretOffset="2247" date="Wed Jan 27 16:58:50 EST 2021" docOffset="16177" starttimestamp="1611781282317" timestamp="3448398" />
  <Command __id="1506" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:58:50 EST 2021" starttimestamp="1611781282317" timestamp="3448626" />
  <Command __id="1496" _type="DiffBasedFileOpenCommand" date="Wed Jan 27 16:57:48 EST 2021" docASTNodeCount="3263" docActiveCodeLength="20798" docExpressionCount="2227" docLength="21041" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3386022">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RestCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {1*1000, 2*1000,5*1000, 10*1000, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private AJoiner joiner;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createRestCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		joiner = new AJoiner(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				joiner.finish();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						joiner.finish();
						return;
					}
					for (File file : logs) {
						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
						if (commands.size() < 2) {
							continue;
						}
						List<EHICommand> newCommands = new ArrayList<>();
						EHICommand last = null;
						EHICommand cur = null;
						for (EHICommand command : commands) {
							if (cur == null) {
								cur = command;
								newCommands.add(command);
							} else {
								last = cur;
								cur = command;
								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
								if (rest >= 1*ONE_SECOND) {
									String range = "";
									if (rest < 2*ONE_SECOND) {
										range = "1s-2s";
									} else if (rest < 5*ONE_SECOND) {
										range = "2s-5s";
									} else if (rest < 10*ONE_SECOND) {
										range = "5s-10s";
									} else if (rest < 20*ONE_SECOND) {
										range = "10s-20s";
									} else if (rest < 30*ONE_SECOND) {
										range = "20s-30s";
									} else if (rest < ONE_MIN) {
										range = "30s-1m";
									} else if (rest < TWO_MIN) {
										range = "1m-2m";
									} else if (rest < FIVE_MIN) {
										range = "2m-5m";
									} else if (rest < TEN_MIN) {
										range = "5m-10m";
									} else if (rest < 3*TEN_MIN) {
										range = "10m-30m";
									} else if (rest < 6*TEN_MIN) {
										range = "30m-60m";
									} else {
										range = ">1h";
									}
									RestCommand rCommnad = new RestCommand(last.getCommandType(), cur.getCommandType(), rest, range);
									rCommnad.setStartTimestamp(last.getStartTimestamp());
									rCommnad.setTimestamp(last.getTimestamp()+1);
									newCommands.add(rCommnad);
								} 
								newCommands.add(command);
							}
						}
						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
						for (EHICommand c : newCommands) {
							logContent += c.persist();
						}
						logContent += XML_FILE_ENDING;
						try {
							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
							if (newLog.exists()) {
								newLog.delete();
							}
							newLog.getParentFile().mkdirs();
							newLog.createNewFile();
							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
							System.out.println("Writing to file " + newLog.getPath());
							writer.write(logContent);
							writer.close();
							System.out.println("Finished writing to file " + newLog.getPath());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					synchronized (this) {
						threadCount--;
					}
					joiner.finish();
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
//			if (j == students.length-1) {
//				try {
//					thread.join();
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} 
//				System.exit(0);
//			}
		}
		joiner.join();
		System.exit(0);
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)",
					"Active Time(20s)", "Rest Time(20s)", "# of Rests(20s)",
					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",
					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", 
					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
					"# of Days", "Time Spent Each Day"};
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					restSum[i] += restTime[1];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			for (int i = 0; i < restSum.length; i++) {
				sum[3*i+5] = restSum[i]+"";
			}
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1499" _type="Insert" date="Wed Jan 27 16:58:39 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20757" docExpressionCount="2223" docLength="21043" length="2" offset="8091" starttimestamp="1611781282317" timestamp="3437051">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1502" _type="Delete" date="Wed Jan 27 16:58:50 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20756" docExpressionCount="2223" docLength="21042" endLine="423" length="1" offset="16114" startLine="423" starttimestamp="1611781282317" timestamp="3447897">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="1505" _type="Delete" date="Wed Jan 27 16:58:50 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20755" docExpressionCount="2223" docLength="21041" endLine="424" length="1" offset="16176" startLine="424" starttimestamp="1611781282317" timestamp="3448622">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="1508" _type="Delete" date="Wed Jan 27 16:58:52 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20754" docExpressionCount="2223" docLength="21040" endLine="423" length="1" offset="16131" startLine="423" starttimestamp="1611781282317" timestamp="3449895">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="1511" _type="Delete" date="Wed Jan 27 16:58:53 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20753" docExpressionCount="2223" docLength="21039" endLine="424" length="1" offset="16192" startLine="424" starttimestamp="1611781282317" timestamp="3450883">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="1514" _type="Delete" date="Wed Jan 27 16:58:54 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20752" docExpressionCount="2223" docLength="21038" endLine="423" length="1" offset="16149" startLine="423" starttimestamp="1611781282317" timestamp="3451915">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="1518" _type="Delete" date="Wed Jan 27 16:58:55 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20751" docExpressionCount="2223" docLength="21037" endLine="424" length="1" offset="16209" startLine="424" starttimestamp="1611781282317" timestamp="3453131">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="1521" _type="Delete" date="Wed Jan 27 16:58:57 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20749" docExpressionCount="2223" docLength="21035" endLine="425" length="2" offset="16233" repeat="2" startLine="425" starttimestamp="1611781282317" timestamp="3454859" timestamp2="3455009">
    <text><![CDATA[30]]></text>
  </DocumentChange>
  <Command __id="1507" _type="MoveCaretCommand" caretOffset="2202" date="Wed Jan 27 16:58:52 EST 2021" docOffset="16132" starttimestamp="1611781282317" timestamp="3449710" />
  <Command __id="1509" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:58:52 EST 2021" starttimestamp="1611781282317" timestamp="3449898" />
  <Command __id="1510" _type="MoveCaretCommand" caretOffset="2263" date="Wed Jan 27 16:58:52 EST 2021" docOffset="16193" starttimestamp="1611781282317" timestamp="3450570" />
  <Command __id="1512" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:58:53 EST 2021" starttimestamp="1611781282317" timestamp="3450886" />
  <Command __id="1513" _type="MoveCaretCommand" caretOffset="2220" date="Wed Jan 27 16:58:54 EST 2021" docOffset="16150" starttimestamp="1611781282317" timestamp="3451717" />
  <Command __id="1515" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:58:54 EST 2021" starttimestamp="1611781282317" timestamp="3451917" />
  <Command __id="1516" _type="MoveCaretCommand" caretOffset="2281" date="Wed Jan 27 16:58:54 EST 2021" docOffset="16211" starttimestamp="1611781282317" timestamp="3452327" />
  <Command __id="1517" _type="MoveCaretCommand" caretOffset="2280" date="Wed Jan 27 16:58:55 EST 2021" docOffset="16210" starttimestamp="1611781282317" timestamp="3452959" />
  <Command __id="1519" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:58:55 EST 2021" starttimestamp="1611781282317" timestamp="3453135" />
  <Command __id="1520" _type="MoveCaretCommand" caretOffset="2305" date="Wed Jan 27 16:58:56 EST 2021" docOffset="16235" starttimestamp="1611781282317" timestamp="3453972" />
  <Command __id="1522" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:58:57 EST 2021" starttimestamp="1611781282317" timestamp="3454862" />
  <Command __id="1524" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:58:57 EST 2021" starttimestamp="1611781282317" timestamp="3455014" />
  <Command __id="1526" _type="InsertStringCommand" date="Wed Jan 27 16:58:59 EST 2021" starttimestamp="1611781282317" timestamp="3456754" timestamp2="3456754">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="1527" _type="MoveCaretCommand" caretOffset="2322" date="Wed Jan 27 16:59:00 EST 2021" docOffset="16252" starttimestamp="1611781282317" timestamp="3457726" />
  <Command __id="1529" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:59:00 EST 2021" starttimestamp="1611781282317" timestamp="3457987" />
  <Command __id="1531" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:59:00 EST 2021" starttimestamp="1611781282317" timestamp="3458137" />
  <Command __id="1533" _type="InsertStringCommand" date="Wed Jan 27 16:59:00 EST 2021" starttimestamp="1611781282317" timestamp="3458336" timestamp2="3458336">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="1534" _type="MoveCaretCommand" caretOffset="2339" date="Wed Jan 27 16:59:01 EST 2021" docOffset="16269" starttimestamp="1611781282317" timestamp="3459066" />
  <Command __id="1536" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:59:01 EST 2021" starttimestamp="1611781282317" timestamp="3459425" />
  <Command __id="1537" _type="MoveCaretCommand" caretOffset="2339" date="Wed Jan 27 16:59:02 EST 2021" docOffset="16269" starttimestamp="1611781282317" timestamp="3460149" />
  <Command __id="1539" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 16:59:02 EST 2021" starttimestamp="1611781282317" timestamp="3460291" />
  <Command __id="1541" _type="InsertStringCommand" date="Wed Jan 27 16:59:02 EST 2021" starttimestamp="1611781282317" timestamp="3460542" timestamp2="3460542">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="1542" _type="MoveCaretCommand" caretOffset="2364" date="Wed Jan 27 16:59:07 EST 2021" docOffset="16294" starttimestamp="1611781282317" timestamp="3464813" />
  <Command __id="1544" _type="InsertStringCommand" date="Wed Jan 27 16:59:08 EST 2021" starttimestamp="1611781282317" timestamp="3465727" timestamp2="3465727">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="1546" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Jan 27 16:59:08 EST 2021" starttimestamp="1611781282317" timestamp="3466411" />
  <Command __id="1548" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Jan 27 16:59:08 EST 2021" starttimestamp="1611781282317" timestamp="3466530" />
  <Command __id="1550" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Jan 27 16:59:09 EST 2021" starttimestamp="1611781282317" timestamp="3466697" />
  <Command __id="1552" _type="InsertStringCommand" date="Wed Jan 27 16:59:09 EST 2021" starttimestamp="1611781282317" timestamp="3467633" timestamp2="3467633">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1553" _type="SelectTextCommand" caretOffset="2385" date="Wed Jan 27 16:59:12 EST 2021" end="2385" start="2382" starttimestamp="1611781282317" timestamp="3470309" />
  <Command __id="1555" _type="InsertStringCommand" date="Wed Jan 27 16:59:13 EST 2021" starttimestamp="1611781282317" timestamp="3470784" timestamp2="3470784">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="1557" _type="InsertStringCommand" date="Wed Jan 27 16:59:13 EST 2021" starttimestamp="1611781282317" timestamp="3470883" timestamp2="3470883">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="1525" _type="Insert" date="Wed Jan 27 16:58:59 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20750" docExpressionCount="2223" docLength="21036" length="1" offset="16233" starttimestamp="1611781282317" timestamp="3456745">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="1528" _type="Delete" date="Wed Jan 27 16:59:00 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20748" docExpressionCount="2223" docLength="21034" endLine="425" length="2" offset="16250" repeat="2" startLine="425" starttimestamp="1611781282317" timestamp="3457984" timestamp2="3458133">
    <text><![CDATA[30]]></text>
  </DocumentChange>
  <DocumentChange __id="1532" _type="Insert" date="Wed Jan 27 16:59:00 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20749" docExpressionCount="2223" docLength="21035" length="1" offset="16250" starttimestamp="1611781282317" timestamp="3458329">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="1535" _type="Delete" date="Wed Jan 27 16:59:01 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20747" docExpressionCount="2223" docLength="21033" endLine="425" length="2" offset="16268" repeat="2" startLine="425" starttimestamp="1611781282317" timestamp="3459421" timestamp2="3460286">
    <text><![CDATA[30]]></text>
  </DocumentChange>
  <DocumentChange __id="1540" _type="Insert" date="Wed Jan 27 16:59:02 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20748" docExpressionCount="2223" docLength="21034" length="1" offset="16268" starttimestamp="1611781282317" timestamp="3460534">
    <text><![CDATA[5]]></text>
  </DocumentChange>
  <DocumentChange __id="1543" _type="Insert" date="Wed Jan 27 16:59:08 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20749" docExpressionCount="2223" docLength="21035" length="1" offset="16294" starttimestamp="1611781282317" timestamp="3465721">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="1545" _type="Delete" date="Wed Jan 27 16:59:08 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20746" docExpressionCount="2223" docLength="21032" endLine="426" length="3" offset="16295" repeat="3" startLine="426" starttimestamp="1611781282317" timestamp="3466406" timestamp2="3466691">
    <text><![CDATA[min]]></text>
  </DocumentChange>
  <DocumentChange __id="1551" _type="Insert" date="Wed Jan 27 16:59:09 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20747" docExpressionCount="2223" docLength="21033" length="1" offset="16295" starttimestamp="1611781282317" timestamp="3467627">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1554" _type="Replace" date="Wed Jan 27 16:59:13 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20745" docExpressionCount="2223" docLength="21031" endLine="426" insertionLength="1" int_docASTNodeCount="3258" int_docActiveCodeLength="20744" int_docExpressionCount="2223" int_docLength="21030" length="3" offset="16312" startLine="426" starttimestamp="1611781282317" timestamp="3470773">
    <deletedText><![CDATA[min]]></deletedText>
    <insertedText><![CDATA[0]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1556" _type="Insert" date="Wed Jan 27 16:59:13 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20746" docExpressionCount="2223" docLength="21032" length="1" offset="16313" starttimestamp="1611781282317" timestamp="3470877">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1559" _type="Replace" date="Wed Jan 27 16:59:15 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20744" docExpressionCount="2223" docLength="21030" endLine="426" insertionLength="1" int_docASTNodeCount="3258" int_docActiveCodeLength="20743" int_docExpressionCount="2223" int_docLength="21029" length="3" offset="16331" startLine="426" starttimestamp="1611781282317" timestamp="3473608">
    <deletedText><![CDATA[min]]></deletedText>
    <insertedText><![CDATA[0]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1561" _type="Insert" date="Wed Jan 27 16:59:15 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20745" docExpressionCount="2223" docLength="21031" length="1" offset="16332" starttimestamp="1611781282317" timestamp="3473650">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="1568" _type="RunCommand" date="Wed Jan 27 16:59:27 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3484747" type="Run" />
  <Command __id="1569" _type="RunCommand" date="Wed Jan 27 16:59:27 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3484747" type="Run" />
  <Command __id="1570" _type="ExceptionCommand" date="Wed Jan 27 16:59:28 EST 2021" starttimestamp="1611781282317" timestamp="3485776" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.NullPointerException
	at logAnalyzer.Driver.main(Driver.java:22)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1571" _type="MoveCaretCommand" caretOffset="527" date="Wed Jan 27 16:59:35 EST 2021" docOffset="554" starttimestamp="1611781282317" timestamp="3492727" />
  <Command __id="1578" _type="RunCommand" date="Wed Jan 27 16:59:40 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3498220" type="Run" />
  <Command __id="1579" _type="ConsoleOutput" date="Wed Jan 27 16:59:41 EST 2021" overflow="false" starttimestamp="1611781282317" timestamp="3499054" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse has 4 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="1580" _type="ConsoleOutput" date="Wed Jan 27 16:59:41 EST 2021" overflow="false" starttimestamp="1611781282317" timestamp="3499267" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse has "), Diff(DELETE,"4"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Log2013-09-13-"), Diff(DELETE,"14-36-31-023"), Diff(INSERT,"09-53-29-705"), Diff(EQUAL,".xml¶Reading "), Diff(INSERT,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse"), Diff(DELETE,"\Log2013-09-13-14-39-52-726.xml"), Diff(INSERT," has 2 file(s)"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"-1"), Diff(DELETE,"4-54-59-878"), Diff(INSERT,"0-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1581" _type="ShellCommand" date="Wed Jan 27 16:59:41 EST 2021" starttimestamp="1611781282317" timestamp="3499380" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1582" _type="ConsoleOutput" date="Wed Jan 27 16:59:41 EST 2021" overflow="false" starttimestamp="1611781282317" timestamp="3499554" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Log2013-09-12-15-05-47-820.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Log2013-09-12-10-40-05-321.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Log2013-09-16-10-05-18-718.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Log2013-09-15-15-38-06-069.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-10-54-43-267.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"3-09-53-29-705"), Diff(INSERT,"2-15-05-47-820.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Log2013-09-12-10-40-05-321.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Log2013-09-16-10-05-18-718"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18"), Diff(INSERT,"22"), Diff(EQUAL,"\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18"), Diff(INSERT,"22"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"7"), Diff(INSERT,"5"), Diff(EQUAL,"-1"), Diff(DELETE,"0-06-32-242"), Diff(INSERT,"5-38-06-069.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse has 3 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-10-54-43-267"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1583" _type="ConsoleOutput" date="Wed Jan 27 16:59:41 EST 2021" overflow="false" starttimestamp="1611781282317" timestamp="3499641" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-13-40-09-552.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"24"), Diff(EQUAL,"\Eclipse has "), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"19"), Diff(INSERT,"24"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5-05-47-820"), Diff(INSERT,"2-59-39-052"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"0\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"-40-0"), Diff(DELETE,"5-321"), Diff(INSERT,"9-552"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse has "), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-05-18-718"), Diff(INSERT,"4-39-04-982"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"5"), Diff(INSERT,"8"), Diff(EQUAL,"-15-3"), Diff(DELETE,"8"), Diff(INSERT,"3"), Diff(EQUAL,"-0"), Diff(DELETE,"6-069"), Diff(INSERT,"3-226"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse has "), Diff(DELETE,"3"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Log2013-09-"), Diff(DELETE,"14-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-10-54-43-267"), Diff(INSERT,"20-10-17-49-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="1584" _type="ConsoleOutput" date="Wed Jan 27 16:59:42 EST 2021" overflow="false" starttimestamp="1611781282317" timestamp="3499731" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Log2013-09-20-14-30-38-379.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse has "), Diff(DELETE,"3"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Log2013-09-"), Diff(DELETE,"14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-13-40-09-552.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse has 3 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-14-39-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Log2013-09-20-10-17-49-071.xml"), Diff(INSERT,"20-14-30-38-379.xml¶Reading student Eclipse"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1585" _type="ConsoleOutput" date="Wed Jan 27 16:59:42 EST 2021" overflow="false" starttimestamp="1611781282317" timestamp="3499805" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Log2013-09-23-12-56-55-221.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Log2013-09-11-15-13-48-829.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Log2013-09-23-12-56-55-221.xml¶"), Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"28"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"28"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse\Log2013-09-"), Diff(DELETE,"20-14-30-38-37"), Diff(INSERT,"11-15-13-48-82"), Diff(EQUAL,"9.xml¶Reading student Eclipse¶")]]]></diff>
  </Command>
  <Command __id="1586" _type="ConsoleOutput" date="Wed Jan 27 16:59:42 EST 2021" overflow="false" starttimestamp="1611781282317" timestamp="3499880" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Log2013-09-06-16-07-40-790.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Log2015-02-12-12-57-56-864.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse has 19 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-09-23-822.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-30-44-271.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-11-06-680.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"31\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Log2013-09-06-16-07-40-790.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Log2013-09-"), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"3-12-"), Diff(DELETE,"56-55-221"), Diff(INSERT,"11-53-568.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse has 3 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Log2015-02-12-12-35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Log2015-02-12-12-57-56-864"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse has "), Diff(DELETE,"2"), Diff(INSERT,"19"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30\Eclipse\Log2013-09-11-15-1"), Diff(INSERT,"pd1\Eclipse\Log2014-09-26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-02-09-5"), Diff(EQUAL,"3-"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL,"8-"), Diff(DELETE,"829.xml¶Reading student Eclipse"), Diff(INSERT,"501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-11-06-680.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1587" _type="ConsoleOutput" date="Wed Jan 27 16:59:42 EST 2021" overflow="false" starttimestamp="1611781282317" timestamp="3499980" type="ConsoleOutput">
    <outputString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-11-01-19-061.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-06-57-784.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-17-08-589.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Log2014-10-04-12-25-59-852.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Log2014-10-04-13-38-06-627.xml
Writing Experiment student 22 to ExperimentDistribution.csv
written Experiment student 22to ExperimentDistribution.csv
Writing Experiment student 33 to ExperimentDistribution.csv
written Experiment student 33to ExperimentDistribution.csv
Writing Experiment student 23 to ExperimentDistribution.csv
written Experiment student 23to ExperimentDistribution.csv
Writing Experiment student 24 to ExperimentDistribution.csv
written Experiment student 24to ExperimentDistribution.csv
Writing Experiment student 26 to ExperimentDistribution.csv
written Experiment student 26to ExperimentDistribution.csv
Writing Experiment student 16 to ExperimentDistribution.csv
written Experiment student 16to ExperimentDistribution.csv
Writing Experiment student 27 to ExperimentDistribution.csv
written Experiment student 27to ExperimentDistribution.csv
Writing Experiment student 17 to ExperimentDistribution.csv
written Experiment student 17to ExperimentDistribution.csv
Writing Experiment student 28 to ExperimentDistribution.csv
written Experiment student 28to ExperimentDistribution.csv
Writing Experiment student 18 to ExperimentDistribution.csv
written Experiment student 18to ExperimentDistribution.csv
Writing Experiment student 29 to ExperimentDistribution.csv
written Experiment student 29to ExperimentDistribution.csv
Writing Experiment student 19 to ExperimentDistribution.csv
written Experiment student 19to ExperimentDistribution.csv
Writing Experiment student pd1 to ExperimentDistribution.csv
written Experiment student pd1to ExperimentDistribution.csv
Writing Experiment student 30 to ExperimentDistribution.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Particpant"), Diff(INSERT,"Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse"), Diff(DELETE," has 2 file(s)"), Diff(INSERT,"\Log2014-10-04-10-55-07-198.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Log201"), Diff(DELETE,"3-09"), Diff(INSERT,"4-10"), Diff(EQUAL,"-0"), Diff(DELETE,"6"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"6"), Diff(INSERT,"1"), Diff(EQUAL,"-0"), Diff(DELETE,"7-40-790"), Diff(INSERT,"1-19-061"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse"), Diff(DELETE," has 2 file(s)"), Diff(INSERT,"\Log2014-10-04-11-54-18-232.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Log201"), Diff(DELETE,"3-09-13"), Diff(INSERT,"4-10-04"), Diff(EQUAL,"-12-11-5"), Diff(DELETE,"3-568"), Diff(INSERT,"4-779"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse"), Diff(DELETE," has 3 file(s)"), Diff(INSERT,"\Log2014-10-04-12-53-09-775.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Log201"), Diff(DELETE,"5-02-12-12-35-18-862"), Diff(INSERT,"4-10-04-13-06-57-784"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Log201"), Diff(DELETE,"5"), Diff(INSERT,"4-10"), Diff(EQUAL,"-0"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"2-57-56-864"), Diff(INSERT,"3-24-337"), Diff(EQUAL,".xml¶Reading "), Diff(DELETE,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse"), Diff(DELETE," has 19 file(s)"), Diff(INSERT,"\Log2014-10-04-13-15-38-180.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-"), Diff(DELETE,"09-26-10-09-23-822.xml¶Reading"), Diff(INSERT,"10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse"), Diff(DELETE,"\Log2014-09-26-10-30-44-271.xml"), Diff(INSERT," has 3 file(s)"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Log2014-"), Diff(DELETE,"09-26-10-32-16-955"), Diff(INSERT,"10-04-12-25-59-852"), Diff(EQUAL,".xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Log2014-10-0"), Diff(DELETE,"2-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"4-13-38-06-627.xml¶Writing Experiment student 22 to ExperimentDistribution.csv¶written Experiment student 22to ExperimentDistribution.csv¶Writing Experiment student 33 to ExperimentDistribution.csv¶written Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\H"), Diff(INSERT,"nt student 33to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\H"), Diff(INSERT,"ntDistribution.csv¶Writing Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\data\ExperimentalData\pd1\Eclipse\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\H"), Diff(INSERT,"nt student 23 to ExperimentDistribution.csv¶written Experiment student 23to ExperimentDistribution.csv¶Writing Experiment student 24 to ExperimentDistribution.csv¶written Experiment student 24to ExperimentDistribution.csv¶Writing Experiment student 26 to ExperimentDistribution.csv¶written Experiment student 26to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\H"), Diff(INSERT,"ntDistribution.csv¶Writing Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"nt student 16 to ExperimentDistribution.csv¶written Experiment student 16to ExperimentDistribution.csv¶Writing Experiment student 27 to ExperimentDistribution.csv¶written Experiment student 27to ExperimentDistribution.csv¶Writing Experiment student 17 to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\Hermes\H"), Diff(INSERT,"ntDistribution.csv¶written Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"nt student 17to ExperimentDistribution.csv¶Writing Experiment student 28 to ExperimentDistribution.csv¶written Experiment student 28to ExperimentDistribution.csv¶Writing Experiment student 18 to ExperimentDistribution.csv¶written Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\H"), Diff(INSERT,"nt student 18to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\H"), Diff(INSERT,"ntDistribution.csv¶Writing Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\h"), Diff(INSERT,"nt student 29 to ExperimentDistribution.csv¶written Experiment student 29to ExperimentDistribution.csv¶Writing Experiment student 19 to ExperimentDistribution.csv¶written Experiment student 19to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\git\H"), Diff(INSERT,"ntDistribution.csv¶Writing Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\H"), Diff(INSERT,"nt student pd1 to Exp"), Diff(EQUAL,"er"), Diff(INSERT,"i"), Diff(EQUAL,"me"), Diff(DELETE,"s\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-11-06-680.xml"), Diff(INSERT,"ntDistribution.csv¶written Experiment student pd1to ExperimentDistribution.csv¶Writing Experiment student 30 to ExperimentDistribution.csv"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1588" _type="ConsoleOutput" date="Wed Jan 27 16:59:42 EST 2021" overflow="false" starttimestamp="1611781282317" timestamp="3500065" type="ConsoleOutput">
    <outputString><![CDATA[written Experiment student 30to ExperimentDistribution.csv
Writing Experiment student 20 to ExperimentDistribution.csv
written Experiment student 20to ExperimentDistribution.csv
Writing Experiment student 31 to ExperimentDistribution.csv
written Experiment student 31to ExperimentDistribution.csv
Writing Experiment student 21 to ExperimentDistribution.csv
written Experiment student 21to ExperimentDistribution.csv
Writing Experiment student 32 to ExperimentDistribution.csv
written Experiment student 32to ExperimentDistribution.csv
Writing Experiment student pd2 to ExperimentDistribution.csv
written Experiment student pd2to ExperimentDistribution.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse has 3 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Log2014-10-04-12-25-59-852.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Log2014-10-04-13-38-06-627.xml¶Writing Experiment student 22 to ExperimentDistribution.csv¶written Experiment student 22to ExperimentDistribution.csv¶Writing Experiment student 33 to ExperimentDistribution.csv¶written Experiment student 33"), Diff(INSERT,"written Experiment student 30"), Diff(EQUAL,"to ExperimentDistribution.csv¶Writing Experiment student 2"), Diff(DELETE,"3"), Diff(INSERT,"0"), Diff(EQUAL," to ExperimentDistribution.csv¶written Experiment student 2"), Diff(DELETE,"3"), Diff(INSERT,"0"), Diff(EQUAL,"to ExperimentDistribution.csv¶Writing Experiment student "), Diff(DELETE,"24 to ExperimentDistribution.csv¶written Experiment student 24to ExperimentDistribution.csv¶Writing Experiment student 26 to ExperimentDistribution.csv¶written Experiment student 26to ExperimentDistribution.csv¶Writing Experiment student 16"), Diff(INSERT,"31"), Diff(EQUAL," to ExperimentDistribution.csv¶written Experiment student "), Diff(INSERT,"3"), Diff(EQUAL,"1"), Diff(DELETE,"6"), Diff(EQUAL,"to ExperimentDistribution.csv¶Writing Experiment student 2"), Diff(DELETE,"7 to ExperimentDistribution.csv¶written Experiment student 27to ExperimentDistribution.csv¶Writing Experiment student 17 to ExperimentDistribution.csv¶written Experiment student 17to ExperimentDistribution.csv¶Writing Experiment student 28 to ExperimentDistribution.csv¶written Experiment student 28to ExperimentDistribution.csv¶Writing Experiment student 18 to ExperimentDistribution.csv¶written Experiment student 18"), Diff(INSERT,"1 to ExperimentDistribution.csv¶written Experiment student 21"), Diff(EQUAL,"to ExperimentDistribution.csv¶Writing Experiment student "), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL," to ExperimentDistribution.csv¶written Experiment student "), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"9"), Diff(EQUAL,"to ExperimentDistribution.csv¶Writing Experiment student "), Diff(DELETE,"19 to ExperimentDistribution.csv¶written Experiment student 19to ExperimentDistribution.csv¶Writing Experiment student pd1 to ExperimentDistribution.csv¶written Experiment student pd1to ExperimentDistribution.csv¶Writing Experiment student 30 "), Diff(INSERT,"pd2 to ExperimentDistribution.csv¶written Experiment student pd2"), Diff(EQUAL,"to ExperimentDistribution.csv¶")]]]></diff>
  </Command>
  <Command __id="1589" _type="RunCommand" date="Wed Jan 27 16:59:42 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3500147" type="Run" />
  <Command __id="1590" _type="RunCommand" date="Wed Jan 27 16:59:42 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3500147" type="Run" />
  <Command __id="1591" _type="ShellCommand" date="Wed Jan 27 16:59:53 EST 2021" starttimestamp="1611781282317" timestamp="3511295" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1592" _type="ShellCommand" date="Wed Jan 27 16:59:58 EST 2021" starttimestamp="1611781282317" timestamp="3516586" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1671" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:51 EST 2021" starttimestamp="1611781282317" timestamp="3808704" />
  <Command __id="1672" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:51 EST 2021" starttimestamp="1611781282317" timestamp="3808780" />
  <Command __id="1673" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:51 EST 2021" starttimestamp="1611781282317" timestamp="3808780" />
  <Command __id="1674" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:51 EST 2021" starttimestamp="1611781282317" timestamp="3808853" />
  <Command __id="1675" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:51 EST 2021" starttimestamp="1611781282317" timestamp="3808853" />
  <Command __id="1676" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:51 EST 2021" starttimestamp="1611781282317" timestamp="3808915" />
  <Command __id="1677" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:51 EST 2021" starttimestamp="1611781282317" timestamp="3808915" />
  <Command __id="1678" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:51 EST 2021" starttimestamp="1611781282317" timestamp="3808977" />
  <Command __id="1679" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:51 EST 2021" starttimestamp="1611781282317" timestamp="3808977" />
  <Command __id="1680" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:51 EST 2021" starttimestamp="1611781282317" timestamp="3809039" />
  <Command __id="1682" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:52 EST 2021" starttimestamp="1611781282317" timestamp="3810097" />
  <Command __id="1683" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:52 EST 2021" starttimestamp="1611781282317" timestamp="3810104" />
  <Command __id="1684" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:52 EST 2021" starttimestamp="1611781282317" timestamp="3810104" />
  <Command __id="1685" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:04:52 EST 2021" starttimestamp="1611781282317" timestamp="3810122" />
  <Command __id="1686" _type="SelectTextCommand" caretOffset="588" date="Wed Jan 27 17:04:52 EST 2021" end="588" start="553" starttimestamp="1611781282317" timestamp="3810138" />
  <Command __id="1688" _type="MoveCaretCommand" caretOffset="137" date="Wed Jan 27 17:04:56 EST 2021" docOffset="137" starttimestamp="1611781282317" timestamp="3814351" />
  <Command __id="1690" _type="MoveCaretCommand" caretOffset="2403" date="Wed Jan 27 17:04:57 EST 2021" docOffset="16333" starttimestamp="1611781282317" timestamp="3815318" />
  <Command __id="1691" _type="SelectTextCommand" caretOffset="1019" date="Wed Jan 27 17:05:10 EST 2021" end="1019" start="1013" starttimestamp="1611781282317" timestamp="3827986" />
  <Command __id="1692" _type="MoveCaretCommand" caretOffset="1041" date="Wed Jan 27 17:05:11 EST 2021" docOffset="2324" starttimestamp="1611781282317" timestamp="3828706" />
  <Command __id="1693" _type="MoveCaretCommand" caretOffset="923" date="Wed Jan 27 17:05:11 EST 2021" docOffset="2206" starttimestamp="1611781282317" timestamp="3829143" />
  <Command __id="1694" _type="MoveCaretCommand" caretOffset="1033" date="Wed Jan 27 17:05:11 EST 2021" docOffset="2316" starttimestamp="1611781282317" timestamp="3829550" />
  <Command __id="1695" _type="MoveCaretCommand" caretOffset="1317" date="Wed Jan 27 17:05:19 EST 2021" docOffset="2600" starttimestamp="1611781282317" timestamp="3836785" />
  <Command __id="1696" _type="ShellCommand" date="Wed Jan 27 17:05:25 EST 2021" starttimestamp="1611781282317" timestamp="3843003" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1697" _type="ShellCommand" date="Wed Jan 27 17:06:21 EST 2021" starttimestamp="1611781282317" timestamp="3898933" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1698" _type="SelectTextCommand" caretOffset="474" date="Wed Jan 27 17:06:22 EST 2021" end="474" start="111" starttimestamp="1611781282317" timestamp="3899793" />
  <Command __id="1699" _type="MoveCaretCommand" caretOffset="474" date="Wed Jan 27 17:06:22 EST 2021" docOffset="1757" starttimestamp="1611781282317" timestamp="3900128" />
  <Command __id="1700" _type="ShellCommand" date="Wed Jan 27 17:16:15 EST 2021" starttimestamp="1611781282317" timestamp="4493677" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1701" _type="ShellCommand" date="Wed Jan 27 17:16:16 EST 2021" starttimestamp="1611781282317" timestamp="4493845" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1702" _type="ShellCommand" date="Wed Jan 27 17:16:16 EST 2021" starttimestamp="1611781282317" timestamp="4493871" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1703" _type="ShellCommand" date="Wed Jan 27 17:16:17 EST 2021" starttimestamp="1611781282317" timestamp="4495399" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1704" _type="ShellCommand" date="Wed Jan 27 17:16:17 EST 2021" starttimestamp="1611781282317" timestamp="4495452" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1705" _type="ShellCommand" date="Wed Jan 27 17:16:18 EST 2021" starttimestamp="1611781282317" timestamp="4496246" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1706" _type="MoveCaretCommand" caretOffset="474" date="Wed Jan 27 17:16:18 EST 2021" docOffset="1757" starttimestamp="1611781282317" timestamp="4496488" />
  <Command __id="1687" _type="DiffBasedFileOpenCommand" date="Wed Jan 27 17:04:56 EST 2021" docASTNodeCount="475" docActiveCodeLength="2620" docExpressionCount="298" docLength="2620" projectName="Hermes" starttimestamp="1611781282317" timestamp="3814134">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\RestCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.TreeMap;¶"), Diff(DELETE,"¶"), Diff(EQUAL,"import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶"), Diff(DELETE,"¶import com.sun.rowset.internal.XmlResolver;¶¶"), Diff(EQUAL,"import fluorite.model.EHEventRecorder;¶¶public class RestCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_RANGE = "range";¶	private static final String XML_PREV = "prev";¶	private static final String XML_NEXT = "next";¶	private static final String XML_REST = "rest";¶	private String prev, next, range;¶	private long rest;¶¶	public RestCommand() {}¶	¶	public RestCommand(String prev, String next, long rest, String range) {¶		this.prev = prev;¶		this.next = next;¶		this.rest = rest;¶		this.range = range;¶	}¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_RANGE, range);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());¶		dataMap.put(XML_PREV, prev);¶		dataMap.put(XML_NEXT, next);¶		dataMap.put(XML_REST, rest+"");¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "RestCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Rest";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prev = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			next =textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_REST)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			rest = Long.getLong(textNode.getTextContent());¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			range =textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import fluorite.model.EHEventRecorder;

public class RestCommand extends AbstractCommand implements EHICommand{
	private static final String XML_RANGE = "range";
	private static final String XML_PREV = "prev";
	private static final String XML_NEXT = "next";
	private static final String XML_REST = "rest";
	private String prev, next, range;
	private long rest;

	public RestCommand() {}
	
	public RestCommand(String prev, String next, long rest, String range) {
		this.prev = prev;
		this.next = next;
		this.rest = rest;
		this.range = range;
	}
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_RANGE, range);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());
		dataMap.put(XML_PREV, prev);
		dataMap.put(XML_NEXT, next);
		dataMap.put(XML_REST, rest+"");
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "RestCommand";
	}

	@Override
	public String getName() {
		return "Rest";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			prev = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			next =textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_REST)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			rest = Long.getLong(textNode.getTextContent());
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			range =textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="1689" _type="DiffBasedFileOpenCommand" date="Wed Jan 27 17:04:57 EST 2021" docASTNodeCount="3258" docActiveCodeLength="20745" docExpressionCount="2223" docLength="21031" projectName="LogAnalyzer" starttimestamp="1611781282317" timestamp="3815144">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RestCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {1*1000, 2*1000,5*1000, 10*1000, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		joiner = new AJoiner(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				joiner.finish();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						joiner.finish();¶						return;¶					}¶					for (File file : logs) {¶						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶						if (commands.size() < 2) {¶							continue;¶						}¶						List<EHICommand> newCommands = new ArrayList<>();¶						EHICommand last = null;¶						EHICommand cur = null;¶						for (EHICommand command : commands) {¶							if (cur == null) {¶								cur = command;¶								newCommands.add(command);¶							} else {¶								last = cur;¶								cur = command;¶								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶								if (rest >= 1*ONE_SECOND) {¶									String range = "";¶									if (rest < 2*ONE_SECOND) {¶										range = "1s-2s";¶									} else if (rest < 5*ONE_SECOND) {¶										range = "2s-5s";¶									} else if (rest < 10*ONE_SECOND) {¶										range = "5s-10s";¶									} else if (rest < 20*ONE_SECOND) {¶										range = "10s-20s";¶									} else if (rest < 30*ONE_SECOND) {¶										range = "20s-30s";¶									} else if (rest < ONE_MIN) {¶										range = "30s-1m";¶									} else if (rest < TWO_MIN) {¶										range = "1m-2m";¶									} else if (rest < FIVE_MIN) {¶										range = "2m-5m";¶									} else if (rest < TEN_MIN) {¶										range = "5m-10m";¶									} else if (rest < 3*TEN_MIN) {¶										range = "10m-30m";¶									} else if (rest < 6*TEN_MIN) {¶										range = "30m-60m";¶									} else {¶										range = ">1h";¶									}¶									RestCommand rCommnad = new RestCommand(last.getCommandType(), cur.getCommandType(), rest, range);¶									rCommnad.setStartTimestamp(last.getStartTimestamp());¶									rCommnad.setTimestamp(last.getTimestamp()+1);¶									newCommands.add(rCommnad);¶								} ¶								newCommands.add(command);¶							}¶						}¶						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶						for (EHICommand c : newCommands) {¶							logContent += c.persist();¶						}¶						logContent += XML_FILE_ENDING;¶						try {¶							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶							if (newLog.exists()) {¶								newLog.delete();¶							}¶							newLog.getParentFile().mkdirs();¶							newLog.createNewFile();¶							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶							System.out.println("Writing to file " + newLog.getPath());¶							writer.write(logContent);¶							writer.close();¶							System.out.println("Finished writing to file " + newLog.getPath());¶						} catch (IOException e) {¶							// TODO Auto-generated catch block¶							e.printStackTrace();¶						}¶					}¶					synchronized (this) {¶						threadCount--;¶					}¶					joiner.finish();¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶"), Diff(INSERT,"//"), Diff(EQUAL,"		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶					"Active Time(1"), Diff(DELETE,"0"), Diff(EQUAL,"s)", "Rest Time(1"), Diff(DELETE,"0"), Diff(EQUAL,"s)", "# of Rests(1"), Diff(DELETE,"0"), Diff(EQUAL,"s)",¶					"Active Time(2"), Diff(DELETE,"0"), Diff(EQUAL,"s)", "Rest Time(2"), Diff(DELETE,"0"), Diff(EQUAL,"s)", "# of Rests(2"), Diff(DELETE,"0"), Diff(EQUAL,"s)",¶					"Active Time("), Diff(DELETE,"30"), Diff(INSERT,"5"), Diff(EQUAL,"s)", "Rest Time("), Diff(DELETE,"30"), Diff(INSERT,"5"), Diff(EQUAL,"s)", "# of Rests("), Diff(DELETE,"30"), Diff(INSERT,"5"), Diff(EQUAL,"s)",¶					"Active Time(1"), Diff(DELETE,"min"), Diff(INSERT,"0s"), Diff(EQUAL,")", "Rest Time(1"), Diff(DELETE,"min"), Diff(INSERT,"0s"), Diff(EQUAL,")", "# of Rests(1"), Diff(DELETE,"min"), Diff(INSERT,"0s"), Diff(EQUAL,")", ¶					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶					"# of Days", "Time Spent Each Day"};¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					restSum[i] += restTime[1];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			for (int i = 0; i < restSum.length; i++) {¶				sum[3*i+5] = restSum[i]+"";¶			}¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RestCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {1*1000, 2*1000,5*1000, 10*1000, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private AJoiner joiner;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createRestCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		joiner = new AJoiner(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				joiner.finish();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						joiner.finish();
						return;
					}
					for (File file : logs) {
						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
						if (commands.size() < 2) {
							continue;
						}
						List<EHICommand> newCommands = new ArrayList<>();
						EHICommand last = null;
						EHICommand cur = null;
						for (EHICommand command : commands) {
							if (cur == null) {
								cur = command;
								newCommands.add(command);
							} else {
								last = cur;
								cur = command;
								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
								if (rest >= 1*ONE_SECOND) {
									String range = "";
									if (rest < 2*ONE_SECOND) {
										range = "1s-2s";
									} else if (rest < 5*ONE_SECOND) {
										range = "2s-5s";
									} else if (rest < 10*ONE_SECOND) {
										range = "5s-10s";
									} else if (rest < 20*ONE_SECOND) {
										range = "10s-20s";
									} else if (rest < 30*ONE_SECOND) {
										range = "20s-30s";
									} else if (rest < ONE_MIN) {
										range = "30s-1m";
									} else if (rest < TWO_MIN) {
										range = "1m-2m";
									} else if (rest < FIVE_MIN) {
										range = "2m-5m";
									} else if (rest < TEN_MIN) {
										range = "5m-10m";
									} else if (rest < 3*TEN_MIN) {
										range = "10m-30m";
									} else if (rest < 6*TEN_MIN) {
										range = "30m-60m";
									} else {
										range = ">1h";
									}
									RestCommand rCommnad = new RestCommand(last.getCommandType(), cur.getCommandType(), rest, range);
									rCommnad.setStartTimestamp(last.getStartTimestamp());
									rCommnad.setTimestamp(last.getTimestamp()+1);
									newCommands.add(rCommnad);
								} 
								newCommands.add(command);
							}
						}
						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
						for (EHICommand c : newCommands) {
							logContent += c.persist();
						}
						logContent += XML_FILE_ENDING;
						try {
							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
							if (newLog.exists()) {
								newLog.delete();
							}
							newLog.getParentFile().mkdirs();
							newLog.createNewFile();
							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
							System.out.println("Writing to file " + newLog.getPath());
							writer.write(logContent);
							writer.close();
							System.out.println("Finished writing to file " + newLog.getPath());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					synchronized (this) {
						threadCount--;
					}
					joiner.finish();
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
//			if (j == students.length-1) {
//				try {
//					thread.join();
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} 
//				System.exit(0);
//			}
		}
		joiner.join();
		System.exit(0);
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",
					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",
					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",
					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", 
					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
					"# of Days", "Time Spent Each Day"};
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					restSum[i] += restTime[1];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			for (int i = 0; i < restSum.length; i++) {
				sum[3*i+5] = restSum[i]+"";
			}
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <Command __id="1707" _type="MoveCaretCommand" caretOffset="2934" date="Wed Jan 27 17:16:55 EST 2021" docOffset="16864" starttimestamp="1611781282317" timestamp="4533572" />
  <DocumentChange __id="1708" _type="Insert" date="Wed Jan 27 17:16:59 EST 2021" docASTNodeCount="3262" docActiveCodeLength="20756" docExpressionCount="2224" docLength="21042" length="11" offset="16864" repeat="7" starttimestamp="1611781282317" timestamp="4537637" timestamp2="4538742">
    <text><![CDATA[
			String]]></text>
  </DocumentChange>
  <Command __id="1709" _type="InsertStringCommand" date="Wed Jan 27 17:16:59 EST 2021" starttimestamp="1611781282317" timestamp="4537649" timestamp2="4537649">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1711" _type="InsertStringCommand" date="Wed Jan 27 17:17:00 EST 2021" starttimestamp="1611781282317" timestamp="4538252" timestamp2="4538252">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1713" _type="InsertStringCommand" date="Wed Jan 27 17:17:00 EST 2021" starttimestamp="1611781282317" timestamp="4538488" timestamp2="4538488">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1714" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:00 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4538530" />
  <Command __id="1719" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:01 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4539007" />
  <DocumentChange __id="1720" _type="Replace" date="Wed Jan 27 17:17:01 EST 2021" docASTNodeCount="3260" docActiveCodeLength="20757" docExpressionCount="2225" docLength="21043" endLine="435" insertionLength="7" int_docASTNodeCount="3258" int_docActiveCodeLength="20750" int_docExpressionCount="2223" int_docLength="21036" length="6" offset="16869" startLine="435" starttimestamp="1611781282317" timestamp="4539012">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String[]]></insertedText>
  </DocumentChange>
  <Command __id="1721" _type="InsertStringCommand" date="Wed Jan 27 17:17:01 EST 2021" starttimestamp="1611781282317" timestamp="4539020" timestamp2="4539020">
    <data><![CDATA[[]]></data>
  </Command>
  <DocumentChange __id="1722" _type="Insert" date="Wed Jan 27 17:17:01 EST 2021" docASTNodeCount="3264" docActiveCodeLength="20767" docExpressionCount="2225" docLength="21053" length="10" offset="16876" repeat="10" starttimestamp="1611781282317" timestamp="4539069" timestamp2="4540839">
    <text><![CDATA[] hearder ]]></text>
  </DocumentChange>
  <Command __id="1723" _type="InsertStringCommand" date="Wed Jan 27 17:17:01 EST 2021" starttimestamp="1611781282317" timestamp="4539078" timestamp2="4539078">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="1725" _type="InsertStringCommand" date="Wed Jan 27 17:17:01 EST 2021" starttimestamp="1611781282317" timestamp="4539189" timestamp2="4539189">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1727" _type="InsertStringCommand" date="Wed Jan 27 17:17:02 EST 2021" starttimestamp="1611781282317" timestamp="4540024" timestamp2="4540024">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1728" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:02 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4540068" />
  <Command __id="1730" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:02 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4540175" />
  <Command __id="1732" _type="InsertStringCommand" date="Wed Jan 27 17:17:02 EST 2021" starttimestamp="1611781282317" timestamp="4540222" timestamp2="4540222">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1733" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:02 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4540265" />
  <Command __id="1734" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:02 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4540306" />
  <Command __id="1736" _type="InsertStringCommand" date="Wed Jan 27 17:17:02 EST 2021" starttimestamp="1611781282317" timestamp="4540316" timestamp2="4540316">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1737" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:02 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4540409" />
  <Command __id="1738" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:02 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4540439" />
  <Command __id="1740" _type="InsertStringCommand" date="Wed Jan 27 17:17:02 EST 2021" starttimestamp="1611781282317" timestamp="4540494" timestamp2="4540494">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1741" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:02 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4540588" />
  <Command __id="1742" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:02 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4540617" />
  <Command __id="1744" _type="InsertStringCommand" date="Wed Jan 27 17:17:03 EST 2021" starttimestamp="1611781282317" timestamp="4540705" timestamp2="4540705">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1746" _type="InsertStringCommand" date="Wed Jan 27 17:17:03 EST 2021" starttimestamp="1611781282317" timestamp="4540778" timestamp2="4540778">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1748" _type="InsertStringCommand" date="Wed Jan 27 17:17:03 EST 2021" starttimestamp="1611781282317" timestamp="4540845" timestamp2="4540845">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1749" _type="Delete" date="Wed Jan 27 17:17:03 EST 2021" docASTNodeCount="3263" docActiveCodeLength="20759" docExpressionCount="2224" docLength="21045" endLine="435" length="8" offset="16878" startLine="435" starttimestamp="1611781282317" timestamp="4541186">
    <text><![CDATA[hearder ]]></text>
  </DocumentChange>
  <Command __id="1750" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Wed Jan 27 17:17:03 EST 2021" starttimestamp="1611781282317" timestamp="4541190" />
  <DocumentChange __id="1751" _type="Insert" date="Wed Jan 27 17:17:03 EST 2021" docASTNodeCount="3267" docActiveCodeLength="20776" docExpressionCount="2227" docLength="21062" length="17" offset="16878" repeat="17" starttimestamp="1611781282317" timestamp="4541540" timestamp2="4546585">
    <text><![CDATA[header = new CSwr]]></text>
  </DocumentChange>
  <Command __id="1752" _type="InsertStringCommand" date="Wed Jan 27 17:17:03 EST 2021" starttimestamp="1611781282317" timestamp="4541545" timestamp2="4541545">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1754" _type="InsertStringCommand" date="Wed Jan 27 17:17:03 EST 2021" starttimestamp="1611781282317" timestamp="4541634" timestamp2="4541634">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1755" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:04 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4541727" />
  <Command __id="1757" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:04 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4541832" />
  <Command __id="1759" _type="InsertStringCommand" date="Wed Jan 27 17:17:04 EST 2021" starttimestamp="1611781282317" timestamp="4541991" timestamp2="4541991">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1760" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:04 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4542031" />
  <Command __id="1761" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:04 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4542067" />
  <Command __id="1763" _type="InsertStringCommand" date="Wed Jan 27 17:17:04 EST 2021" starttimestamp="1611781282317" timestamp="4542171" timestamp2="4542171">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1765" _type="InsertStringCommand" date="Wed Jan 27 17:17:04 EST 2021" starttimestamp="1611781282317" timestamp="4542222" timestamp2="4542222">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1766" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:04 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4542264" />
  <Command __id="1767" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:04 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4542310" />
  <Command __id="1769" _type="InsertStringCommand" date="Wed Jan 27 17:17:04 EST 2021" starttimestamp="1611781282317" timestamp="4542465" timestamp2="4542465">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1771" _type="InsertStringCommand" date="Wed Jan 27 17:17:04 EST 2021" starttimestamp="1611781282317" timestamp="4542583" timestamp2="4542583">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1773" _type="InsertStringCommand" date="Wed Jan 27 17:17:05 EST 2021" starttimestamp="1611781282317" timestamp="4542702" timestamp2="4542702">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1775" _type="InsertStringCommand" date="Wed Jan 27 17:17:06 EST 2021" starttimestamp="1611781282317" timestamp="4544174" timestamp2="4544174">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1777" _type="InsertStringCommand" date="Wed Jan 27 17:17:06 EST 2021" starttimestamp="1611781282317" timestamp="4544227" timestamp2="4544227">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1779" _type="InsertStringCommand" date="Wed Jan 27 17:17:06 EST 2021" starttimestamp="1611781282317" timestamp="4544258" timestamp2="4544258">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1780" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:06 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4544351" />
  <Command __id="1782" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:06 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4544540" />
  <Command __id="1784" _type="InsertStringCommand" date="Wed Jan 27 17:17:07 EST 2021" starttimestamp="1611781282317" timestamp="4545557" timestamp2="4545557">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1786" _type="InsertStringCommand" date="Wed Jan 27 17:17:07 EST 2021" starttimestamp="1611781282317" timestamp="4545649" timestamp2="4545649">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1788" _type="InsertStringCommand" date="Wed Jan 27 17:17:08 EST 2021" starttimestamp="1611781282317" timestamp="4546331" timestamp2="4546331">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1789" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:08 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4546374" />
  <DocumentChange __id="1791" _type="Delete" date="Wed Jan 27 17:17:09 EST 2021" docASTNodeCount="3265" docActiveCodeLength="20772" docExpressionCount="2226" docLength="21058" endLine="435" length="4" offset="16891" repeat="2" startLine="435" starttimestamp="1611781282317" timestamp="4547627" timestamp2="4548204">
    <text><![CDATA[CSwr]]></text>
  </DocumentChange>
  <Command __id="1792" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Wed Jan 27 17:17:09 EST 2021" starttimestamp="1611781282317" timestamp="4547631" />
  <Command __id="1794" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Wed Jan 27 17:17:10 EST 2021" starttimestamp="1611781282317" timestamp="4548207" />
  <DocumentChange __id="1795" _type="Insert" date="Wed Jan 27 17:17:12 EST 2021" docASTNodeCount="3266" docActiveCodeLength="20775" docExpressionCount="2227" docLength="21061" length="3" offset="16891" repeat="2" starttimestamp="1611781282317" timestamp="4549789" timestamp2="4551235">
    <text><![CDATA[{""]]></text>
  </DocumentChange>
  <Command __id="1796" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:12 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4549812" />
  <Command __id="1798" _type="InsertStringCommand" date="Wed Jan 27 17:17:13 EST 2021" starttimestamp="1611781282317" timestamp="4551238" timestamp2="4551238">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="1799" _type="Delete" date="Wed Jan 27 17:17:14 EST 2021" docASTNodeCount="3265" docActiveCodeLength="20772" docExpressionCount="2226" docLength="21058" endLine="435" length="3" offset="16891" repeat="3" startLine="435" starttimestamp="1611781282317" timestamp="4551922" timestamp2="4552344">
    <text><![CDATA[{""]]></text>
  </DocumentChange>
  <Command __id="1801" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 17:17:14 EST 2021" starttimestamp="1611781282317" timestamp="4551938" />
  <Command __id="1803" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Jan 27 17:17:14 EST 2021" starttimestamp="1611781282317" timestamp="4552348" />
  <Command __id="1805" _type="InsertStringCommand" date="Wed Jan 27 17:17:15 EST 2021" starttimestamp="1611781282317" timestamp="4553304" timestamp2="4553304">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1807" _type="InsertStringCommand" date="Wed Jan 27 17:17:15 EST 2021" starttimestamp="1611781282317" timestamp="4553563" timestamp2="4553563">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1808" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Jan 27 17:17:15 EST 2021" start_end="START" starttimestamp="1611781282317" timestamp="4553604" />
  <Command __id="1813" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Jan 27 17:17:18 EST 2021" start_end="END" starttimestamp="1611781282317" timestamp="4556346" />
  <Command __id="1816" _type="InsertStringCommand" date="Wed Jan 27 17:17:18 EST 2021" starttimestamp="1611781282317" timestamp="4556388" timestamp2="4556388">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1819" _type="UndoCommand" date="Wed Jan 27 17:17:19 EST 2021" starttimestamp="1611781282317" timestamp="4557221" />
  <Command __id="1820" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Jan 27 17:17:20 EST 2021" starttimestamp="1611781282317" timestamp="4558223" />
  <Command __id="1821" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Jan 27 17:17:20 EST 2021" starttimestamp="1611781282317" timestamp="4558546" />
  <Command __id="1822" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Jan 27 17:17:21 EST 2021" starttimestamp="1611781282317" timestamp="4558760" />
  <Command __id="1823" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Jan 27 17:17:21 EST 2021" starttimestamp="1611781282317" timestamp="4558938" />
  <DocumentChange __id="1804" _type="Insert" date="Wed Jan 27 17:17:15 EST 2021" docASTNodeCount="3267" docActiveCodeLength="20778" docExpressionCount="2227" docLength="21064" length="6" offset="16891" repeat="6" starttimestamp="1611781282317" timestamp="4553299" timestamp2="4554221">
    <text><![CDATA[String]]></text>
  </DocumentChange>
  <DocumentChange __id="1814" _type="Replace" date="Wed Jan 27 17:17:18 EST 2021" docASTNodeCount="3281" docActiveCodeLength="20827" docExpressionCount="2241" docLength="21113" endLine="435" insertionLength="51" int_docASTNodeCount="3267" int_docActiveCodeLength="20776" int_docExpressionCount="2227" int_docLength="21062" length="2" offset="16891" startLine="435" starttimestamp="1611781282317" timestamp="4556362">
    <deletedText><![CDATA[St]]></deletedText>
    <insertedText><![CDATA[com.sun.org.apache.xpath.internal.operations.String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1815" _type="Replace" date="Wed Jan 27 17:17:18 EST 2021" docASTNodeCount="3281" docActiveCodeLength="20825" docExpressionCount="2241" docLength="21111" endLine="435" insertionLength="2" int_docASTNodeCount="3281" int_docActiveCodeLength="20823" int_docExpressionCount="2241" int_docLength="21109" length="4" offset="16942" startLine="435" starttimestamp="1611781282317" timestamp="4556378">
    <deletedText><![CDATA[ring]]></deletedText>
    <insertedText><![CDATA[()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1817" _type="Replace" date="Wed Jan 27 17:17:19 EST 2021" docASTNodeCount="3281" docActiveCodeLength="20827" docExpressionCount="2241" docLength="21113" endLine="435" insertionLength="4" int_docASTNodeCount="3281" int_docActiveCodeLength="20823" int_docExpressionCount="2241" int_docLength="21109" length="2" offset="16942" startLine="435" starttimestamp="1611781282317" timestamp="4557160">
    <deletedText><![CDATA[()]]></deletedText>
    <insertedText><![CDATA[ring]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1818" _type="Replace" date="Wed Jan 27 17:17:19 EST 2021" docASTNodeCount="3267" docActiveCodeLength="20778" docExpressionCount="2227" docLength="21064" endLine="435" insertionLength="2" int_docASTNodeCount="3267" int_docActiveCodeLength="20776" int_docExpressionCount="2227" int_docLength="21062" length="51" offset="16891" startLine="435" starttimestamp="1611781282317" timestamp="4557166">
    <deletedText><![CDATA[com.sun.org.apache.xpath.internal.operations.String]]></deletedText>
    <insertedText><![CDATA[St]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1825" _type="Insert" date="Wed Jan 27 17:17:23 EST 2021" docASTNodeCount="3268" docActiveCodeLength="20781" docExpressionCount="2227" docLength="21067" length="3" offset="16897" repeat="2" starttimestamp="1611781282317" timestamp="4561332" timestamp2="4562831">
    <text><![CDATA[[];]]></text>
  </DocumentChange>
  <Command __id="1824" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Jan 27 17:17:22 EST 2021" starttimestamp="1611781282317" timestamp="4560656" />
  <Command __id="1826" _type="InsertStringCommand" date="Wed Jan 27 17:17:23 EST 2021" starttimestamp="1611781282317" timestamp="4561336" timestamp2="4561336">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1827" _type="InsertStringCommand" date="Wed Jan 27 17:17:23 EST 2021" starttimestamp="1611781282317" timestamp="4561370" timestamp2="4561370">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="1828" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Jan 27 17:17:24 EST 2021" starttimestamp="1611781282317" timestamp="4562020" />
  <Command __id="1829" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Jan 27 17:17:24 EST 2021" starttimestamp="1611781282317" timestamp="4562502" />
  <Command __id="1831" _type="InsertStringCommand" date="Wed Jan 27 17:17:25 EST 2021" starttimestamp="1611781282317" timestamp="4562838" timestamp2="4562838">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1832" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Jan 27 17:17:25 EST 2021" starttimestamp="1611781282317" timestamp="4563212" />
  <Command __id="1833" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Jan 27 17:17:25 EST 2021" starttimestamp="1611781282317" timestamp="4563430" />
  <Command __id="1835" _type="InsertStringCommand" date="Wed Jan 27 17:17:27 EST 2021" starttimestamp="1611781282317" timestamp="4564995" timestamp2="4564995">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="1837" _type="InsertStringCommand" date="Wed Jan 27 17:17:27 EST 2021" starttimestamp="1611781282317" timestamp="4565079" timestamp2="4565079">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="1838" _type="ShellCommand" date="Wed Jan 27 17:17:38 EST 2021" starttimestamp="1611781282317" timestamp="4575715" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1839" _type="ShellCommand" date="Wed Jan 27 17:17:38 EST 2021" starttimestamp="1611781282317" timestamp="4575887" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1840" _type="ShellCommand" date="Wed Jan 27 17:17:38 EST 2021" starttimestamp="1611781282317" timestamp="4575913" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1841" _type="ShellCommand" date="Wed Jan 27 17:17:39 EST 2021" starttimestamp="1611781282317" timestamp="4577541" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1842" _type="ShellCommand" date="Wed Jan 27 17:17:39 EST 2021" starttimestamp="1611781282317" timestamp="4577602" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="1834" _type="Insert" date="Wed Jan 27 17:17:27 EST 2021" docASTNodeCount="3269" docActiveCodeLength="20783" docExpressionCount="2228" docLength="21069" length="2" offset="16898" repeat="2" starttimestamp="1611781282317" timestamp="4564984" timestamp2="4565072">
    <text><![CDATA[10]]></text>
  </DocumentChange>
  <Command __id="1843" _type="ShellCommand" date="Wed Jan 27 17:17:44 EST 2021" starttimestamp="1611781282317" timestamp="4582145" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1845" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Jan 27 17:17:45 EST 2021" starttimestamp="1611781282317" timestamp="4583281" />
  <Command __id="1846" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Jan 27 17:17:45 EST 2021" starttimestamp="1611781282317" timestamp="4583653" />
  <Command __id="1847" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:17:46 EST 2021" starttimestamp="1611781282317" timestamp="4583744" />
  <Command __id="1848" _type="EclipseCommand" commandID="" date="Wed Jan 27 17:17:46 EST 2021" starttimestamp="1611781282317" timestamp="4583848" />
  <Command __id="1849" _type="ShellCommand" date="Wed Jan 27 17:17:47 EST 2021" starttimestamp="1611781282317" timestamp="4585368" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1850" _type="ShellCommand" date="Wed Jan 27 17:18:14 EST 2021" starttimestamp="1611781282317" timestamp="4612509" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1851" _type="ShellCommand" date="Wed Jan 27 17:18:16 EST 2021" starttimestamp="1611781282317" timestamp="4613860" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1852" _type="ShellCommand" date="Wed Jan 27 17:45:06 EST 2021" starttimestamp="1611781282317" timestamp="6224238" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1853" _type="ShellCommand" date="Wed Jan 27 17:45:08 EST 2021" starttimestamp="1611781282317" timestamp="6225970" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1854" _type="ShellCommand" date="Wed Jan 27 17:45:09 EST 2021" starttimestamp="1611781282317" timestamp="6226891" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1855" _type="RunCommand" date="Wed Jan 27 17:45:09 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1611781282317" timestamp="6227381" type="Run" />
  <Command __id="1856" _type="RunCommand" date="Wed Jan 27 17:45:09 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1611781282317" timestamp="6227381" type="Run" />
  <Command __id="1857" _type="ShellCommand" date="Wed Jan 27 17:45:10 EST 2021" starttimestamp="1611781282317" timestamp="6227807" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1858" _type="ConsoleOutput" date="Wed Jan 27 17:45:29 EST 2021" overflow="false" starttimestamp="1611781282317" timestamp="6246926" type="ConsoleOutput">
    <outputString><![CDATA[No support for IPv6 in jSLP yet (see https://bugs.eclipse.org/328074), skipping interface...
No support for IPv6 in jSLP yet (see https://bugs.eclipse.org/328074), skipping interface...
WARNING: Port 9278 already in use. This instance of R-OSGi is running on port 9279
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"written Experiment student 30to ExperimentDistribution.csv¶Writing Experiment student 20 to ExperimentDistribution.csv¶written Experiment student 20to ExperimentDistribution.csv¶Writing Experiment student 31 to ExperimentDistribution.csv¶written Experiment student 31to ExperimentDistribution.csv¶Writing Experiment student 21 to ExperimentDistribution.csv¶written Experiment student 21to ExperimentDistribution.csv¶Writing Experiment student 32 to ExperimentDistribution.csv¶written Experiment student 32to ExperimentDistribution.csv¶Writing Experiment student pd2 to ExperimentDistribution.csv¶written Experiment student pd2to ExperimentDistribution.csv"), Diff(INSERT,"No support for IPv6 in jSLP yet (see https://bugs.eclipse.org/328074), skipping interface...¶No support for IPv6 in jSLP yet (see https://bugs.eclipse.org/328074), skipping interface...¶WARNING: Port 9278 already in use. This instance of R-OSGi is running on port 9279"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1859" _type="ExceptionCommand" date="Wed Jan 27 17:45:29 EST 2021" starttimestamp="1611781282317" timestamp="6247624" type="Exception">
    <exceptionString><![CDATA[!SESSION 2021-01-27 17:45:09.837 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=1.8.0_241
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.platform.ide
Command-line arguments:  -product org.eclipse.platform.ide -data C:\Users\Zhizhou\new-version-eclipse-workspace/../new-running-workspace -dev file:C:/Users/Zhizhou/new-version-eclipse-workspace/.metadata/.plugins/org.eclipse.pde.core/Eclipse Application/dev.properties -os win32 -ws win32 -arch x86_64 -consoleLog

!ENTRY org.eclipse.jdt.junit 4 0 2021-01-27 17:45:29.829
!MESSAGE FrameworkEvent ERROR
!STACK 0
org.osgi.framework.BundleException: Could not resolve module: org.eclipse.jdt.junit [344]
  Another singleton bundle selected: osgi.identity; osgi.identity="org.eclipse.jdt.junit"; type="osgi.bundle"; version:Version="3.11.100.v20180829-0645"; singleton:="true"

	at org.eclipse.osgi.container.Module.start(Module.java:447)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1685)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1664)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1627)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1558)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:233)
	at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:343)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
</Events>
