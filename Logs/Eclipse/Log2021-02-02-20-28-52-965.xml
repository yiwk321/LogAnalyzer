<Events startTimestamp="1612315732965" logVersion="1.0.0.202101171653">
  <Command __id="1" _type="MoveCaretCommand" caretOffset="3024" date="Tue Feb 02 20:28:53 EST 2021" docOffset="4355" starttimestamp="1612315732965" timestamp="385" />
  <Command __id="2" _type="MoveCaretCommand" caretOffset="2986" date="Tue Feb 02 20:29:09 EST 2021" docOffset="4317" starttimestamp="1612315732965" timestamp="16842" />
  <Command __id="4" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:29:13 EST 2021" starttimestamp="1612315732965" timestamp="20965" />
  <Command __id="5" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:29:13 EST 2021" starttimestamp="1612315732965" timestamp="21014" />
  <Command __id="6" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:29:13 EST 2021" starttimestamp="1612315732965" timestamp="21015" />
  <Command __id="7" _type="ShellCommand" date="Tue Feb 02 20:29:13 EST 2021" starttimestamp="1612315732965" timestamp="21032" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:29:14 EST 2021" starttimestamp="1612315732965" timestamp="21124" />
  <Command __id="9" _type="ShellCommand" date="Tue Feb 02 20:29:14 EST 2021" starttimestamp="1612315732965" timestamp="21304" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10" _type="ShellCommand" date="Tue Feb 02 20:29:16 EST 2021" starttimestamp="1612315732965" timestamp="23525" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="11" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Feb 02 20:29:16 EST 2021" starttimestamp="1612315732965" timestamp="23594" />
  <Command __id="12" _type="ShellCommand" date="Tue Feb 02 20:29:18 EST 2021" starttimestamp="1612315732965" timestamp="25727" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="13" _type="ShellCommand" date="Tue Feb 02 20:29:43 EST 2021" starttimestamp="1612315732965" timestamp="50567" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="14" _type="ShellCommand" date="Tue Feb 02 20:29:44 EST 2021" starttimestamp="1612315732965" timestamp="51405" type="ECLIPSE_MINIMIZED" />
  <Command __id="15" _type="ShellCommand" date="Tue Feb 02 20:29:44 EST 2021" starttimestamp="1612315732965" timestamp="51419" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="16" _type="ShellCommand" date="Tue Feb 02 20:30:28 EST 2021" starttimestamp="1612315732965" timestamp="95940" type="ECLIPSE_MAXIMIZED" />
  <Command __id="17" _type="ShellCommand" date="Tue Feb 02 20:30:28 EST 2021" starttimestamp="1612315732965" timestamp="95999" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18" _type="MoveCaretCommand" caretOffset="2582" date="Tue Feb 02 20:30:37 EST 2021" docOffset="3913" starttimestamp="1612315732965" timestamp="104423" />
  <Command __id="19" _type="ShellCommand" date="Tue Feb 02 20:30:37 EST 2021" starttimestamp="1612315732965" timestamp="104689" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="20" _type="ShellCommand" date="Tue Feb 02 20:31:54 EST 2021" starttimestamp="1612315732965" timestamp="181267" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="21" _type="MoveCaretCommand" caretOffset="2590" date="Tue Feb 02 20:31:54 EST 2021" docOffset="3921" starttimestamp="1612315732965" timestamp="181358" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:28:53 EST 2021" docASTNodeCount="3487" docActiveCodeLength="21280" docExpressionCount="2376" docLength="22184" projectName="LogAnalyzer" starttimestamp="1612315732965" timestamp="203">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private CountDownLatch latch;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands;
						if (browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
						}
						for (File file : logs) {
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
									if (rest >= 1*ONE_SECOND) {
										String range = "";
										if (rest < 2*ONE_SECOND) {
											range = "1s-2s";
										} else if (rest < 5*ONE_SECOND) {
											range = "2s-5s";
										} else if (rest < 10*ONE_SECOND) {
											range = "5s-10s";
										} else if (rest < 20*ONE_SECOND) {
											range = "10s-20s";
										} else if (rest < 30*ONE_SECOND) {
											range = "20s-30s";
										} else if (rest < ONE_MIN) {
											range = "30s-1m";
										} else if (rest < TWO_MIN) {
											range = "1m-2m";
										} else if (rest < FIVE_MIN) {
											range = "2m-5m";
										} else if (rest < TEN_MIN) {
											range = "5m-10m";
										} else if (rest < 3*TEN_MIN) {
											range = "10m-30m";
										} else if (rest < 6*TEN_MIN) {
											range = "30m-60m";
										} else {
											range = ">1h";
										}
										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
										rCommnad.setStartTimestamp(last.getStartTimestamp());
										rCommnad.setTimestamp(last.getTimestamp()+1);
										newCommands.add(rCommnad);
									} 
									newCommands.add(command);
								}
							}
							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						// TODO: handle exception
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",
//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",
//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",
//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <Command __id="22" _type="MoveCaretCommand" caretOffset="1534" date="Tue Feb 02 20:32:07 EST 2021" docOffset="2865" starttimestamp="1612315732965" timestamp="194426" />
  <DocumentChange __id="23" _type="Insert" date="Tue Feb 02 20:32:08 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21299" docExpressionCount="2378" docLength="22203" length="19" offset="2865" repeat="17" starttimestamp="1612315732965" timestamp="195634" timestamp2="199488">
    <text><![CDATA[
	piruvate sttaic ]]></text>
  </DocumentChange>
  <Command __id="24" _type="InsertStringCommand" date="Tue Feb 02 20:32:08 EST 2021" starttimestamp="1612315732965" timestamp="195649" timestamp2="195649">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="26" _type="InsertStringCommand" date="Tue Feb 02 20:32:10 EST 2021" starttimestamp="1612315732965" timestamp="197485" timestamp2="197485">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="27" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:10 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="197965" />
  <Command __id="32" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:12 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="199325" />
  <Command __id="34" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199340" timestamp2="199340">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="36" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199356" timestamp2="199356">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="38" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199373" timestamp2="199373">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="40" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199385" timestamp2="199385">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="42" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199402" timestamp2="199402">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="44" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199426" timestamp2="199426">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="46" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199444" timestamp2="199444">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="48" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199457" timestamp2="199457">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="50" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199470" timestamp2="199470">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="52" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199483" timestamp2="199483">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="54" _type="InsertStringCommand" date="Tue Feb 02 20:32:12 EST 2021" starttimestamp="1612315732965" timestamp="199494" timestamp2="199494">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="55" _type="Delete" date="Tue Feb 02 20:32:13 EST 2021" docASTNodeCount="3487" docActiveCodeLength="21283" docExpressionCount="2376" docLength="22187" endLine="61" length="16" offset="2868" repeat="2" startLine="61" starttimestamp="1612315732965" timestamp="200130" timestamp2="200247">
    <text><![CDATA[piruvate sttaic ]]></text>
  </DocumentChange>
  <Command __id="56" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 02 20:32:13 EST 2021" starttimestamp="1612315732965" timestamp="200146" />
  <Command __id="58" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 02 20:32:13 EST 2021" starttimestamp="1612315732965" timestamp="200253" />
  <DocumentChange __id="59" _type="Insert" date="Tue Feb 02 20:32:13 EST 2021" docASTNodeCount="3488" docActiveCodeLength="21291" docExpressionCount="2376" docLength="22195" length="8" offset="2868" repeat="8" starttimestamp="1612315732965" timestamp="200633" timestamp2="201308">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <Command __id="60" _type="InsertStringCommand" date="Tue Feb 02 20:32:13 EST 2021" starttimestamp="1612315732965" timestamp="200639" timestamp2="200639">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="61" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:13 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="200680" />
  <Command __id="69" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:14 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="201363" />
  <DocumentChange __id="70" _type="Insert" date="Tue Feb 02 20:32:16 EST 2021" docASTNodeCount="3490" docActiveCodeLength="21304" docExpressionCount="2376" docLength="22208" length="13" offset="2876" repeat="13" starttimestamp="1612315732965" timestamp="203604" timestamp2="204778">
    <text><![CDATA[static final ]]></text>
  </DocumentChange>
  <Command __id="71" _type="InsertStringCommand" date="Tue Feb 02 20:32:16 EST 2021" starttimestamp="1612315732965" timestamp="203610" timestamp2="203610">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="72" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:16 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="203649" />
  <Command __id="79" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:17 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="204257" />
  <Command __id="81" _type="InsertStringCommand" date="Tue Feb 02 20:32:17 EST 2021" starttimestamp="1612315732965" timestamp="204382" timestamp2="204382">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="83" _type="InsertStringCommand" date="Tue Feb 02 20:32:17 EST 2021" starttimestamp="1612315732965" timestamp="204424" timestamp2="204424">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="84" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:17 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="204465" />
  <Command __id="89" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:17 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="204791" />
  <DocumentChange __id="90" _type="Insert" date="Tue Feb 02 20:32:21 EST 2021" docASTNodeCount="3490" docActiveCodeLength="21310" docExpressionCount="2376" docLength="22214" length="6" offset="2889" repeat="6" starttimestamp="1612315732965" timestamp="208479" timestamp2="208997">
    <text><![CDATA[String]]></text>
  </DocumentChange>
  <Command __id="91" _type="InsertStringCommand" date="Tue Feb 02 20:32:21 EST 2021" starttimestamp="1612315732965" timestamp="208485" timestamp2="208485">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="93" _type="InsertStringCommand" date="Tue Feb 02 20:32:21 EST 2021" starttimestamp="1612315732965" timestamp="208732" timestamp2="208732">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="94" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:21 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="208771" />
  <Command __id="99" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:22 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="209966" />
  <DocumentChange __id="100" _type="Replace" date="Tue Feb 02 20:32:22 EST 2021" docASTNodeCount="3490" docActiveCodeLength="21311" docExpressionCount="2376" docLength="22215" endLine="61" insertionLength="7" int_docASTNodeCount="3490" int_docActiveCodeLength="21304" int_docExpressionCount="2376" int_docLength="22208" length="6" offset="2889" startLine="61" starttimestamp="1612315732965" timestamp="209976">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String[]]></insertedText>
  </DocumentChange>
  <Command __id="101" _type="InsertStringCommand" date="Tue Feb 02 20:32:22 EST 2021" starttimestamp="1612315732965" timestamp="209989" timestamp2="209989">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="103" _type="InsertStringCommand" date="Tue Feb 02 20:32:22 EST 2021" starttimestamp="1612315732965" timestamp="210004" timestamp2="210004">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="105" _type="InsertStringCommand" date="Tue Feb 02 20:32:23 EST 2021" starttimestamp="1612315732965" timestamp="210843" timestamp2="210843">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="107" _type="InsertStringCommand" date="Tue Feb 02 20:32:24 EST 2021" starttimestamp="1612315732965" timestamp="211972" timestamp2="211972">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="108" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:24 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="212012" />
  <Command __id="110" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:25 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="212225" />
  <Command __id="112" _type="InsertStringCommand" date="Tue Feb 02 20:32:25 EST 2021" starttimestamp="1612315732965" timestamp="212294" timestamp2="212294">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="113" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:25 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="212333" />
  <Command __id="114" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:25 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="212365" />
  <Command __id="116" _type="InsertStringCommand" date="Tue Feb 02 20:32:25 EST 2021" starttimestamp="1612315732965" timestamp="212539" timestamp2="212539">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="117" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:25 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="212630" />
  <Command __id="118" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:25 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="212654" />
  <Command __id="120" _type="InsertStringCommand" date="Tue Feb 02 20:32:25 EST 2021" starttimestamp="1612315732965" timestamp="212671" timestamp2="212671">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="121" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:25 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="212757" />
  <Command __id="122" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:25 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="212778" />
  <Command __id="124" _type="InsertStringCommand" date="Tue Feb 02 20:32:26 EST 2021" starttimestamp="1612315732965" timestamp="213064" timestamp2="213064">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="125" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:26 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="213150" />
  <Command __id="126" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:26 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="213173" />
  <Command __id="128" _type="InsertStringCommand" date="Tue Feb 02 20:32:26 EST 2021" starttimestamp="1612315732965" timestamp="213260" timestamp2="213260">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="129" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:26 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="213344" />
  <Command __id="130" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:26 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="213374" />
  <Command __id="132" _type="InsertStringCommand" date="Tue Feb 02 20:32:26 EST 2021" starttimestamp="1612315732965" timestamp="213418" timestamp2="213418">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="133" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:26 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="213510" />
  <Command __id="134" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:26 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="213539" />
  <Command __id="136" _type="InsertStringCommand" date="Tue Feb 02 20:32:26 EST 2021" starttimestamp="1612315732965" timestamp="213992" timestamp2="213992">
    <data><![CDATA[U]]></data>
  </Command>
  <DocumentChange __id="102" _type="Insert" date="Tue Feb 02 20:32:22 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21325" docExpressionCount="2378" docLength="22229" length="14" offset="2896" repeat="14" starttimestamp="1612315732965" timestamp="209995" timestamp2="214462">
    <text><![CDATA[] providedURLS]]></text>
  </DocumentChange>
  <DocumentChange __id="143" _type="Delete" date="Tue Feb 02 20:32:27 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21324" docExpressionCount="2378" docLength="22228" endLine="61" length="1" offset="2909" startLine="61" starttimestamp="1612315732965" timestamp="214901">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="145" _type="Insert" date="Tue Feb 02 20:32:27 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21328" docExpressionCount="2378" docLength="22232" length="4" offset="2909" repeat="4" starttimestamp="1612315732965" timestamp="214957" timestamp2="215627">
    <text><![CDATA[s = ]]></text>
  </DocumentChange>
  <DocumentChange __id="157" _type="Delete" date="Tue Feb 02 20:32:30 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21318" docExpressionCount="2378" docLength="22222" endLine="61" length="10" offset="2898" repeat="2" startLine="61" starttimestamp="1612315732965" timestamp="217780" timestamp2="218163">
    <text><![CDATA[providedUR]]></text>
  </DocumentChange>
  <Command __id="138" _type="InsertStringCommand" date="Tue Feb 02 20:32:27 EST 2021" starttimestamp="1612315732965" timestamp="214122" timestamp2="214122">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="140" _type="InsertStringCommand" date="Tue Feb 02 20:32:27 EST 2021" starttimestamp="1612315732965" timestamp="214242" timestamp2="214242">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="142" _type="InsertStringCommand" date="Tue Feb 02 20:32:27 EST 2021" starttimestamp="1612315732965" timestamp="214468" timestamp2="214468">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="144" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:32:27 EST 2021" starttimestamp="1612315732965" timestamp="214910" />
  <Command __id="146" _type="InsertStringCommand" date="Tue Feb 02 20:32:27 EST 2021" starttimestamp="1612315732965" timestamp="214963" timestamp2="214963">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="147" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:32:28 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="215055" />
  <Command __id="148" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:32:28 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="215080" />
  <Command __id="150" _type="InsertStringCommand" date="Tue Feb 02 20:32:28 EST 2021" starttimestamp="1612315732965" timestamp="215445" timestamp2="215445">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="152" _type="InsertStringCommand" date="Tue Feb 02 20:32:28 EST 2021" starttimestamp="1612315732965" timestamp="215525" timestamp2="215525">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="154" _type="InsertStringCommand" date="Tue Feb 02 20:32:28 EST 2021" starttimestamp="1612315732965" timestamp="215632" timestamp2="215632">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="155" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 02 20:32:29 EST 2021" starttimestamp="1612315732965" timestamp="216559" />
  <Command __id="156" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 02 20:32:30 EST 2021" starttimestamp="1612315732965" timestamp="217438" />
  <Command __id="158" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 02 20:32:30 EST 2021" starttimestamp="1612315732965" timestamp="217786" />
  <Command __id="160" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 02 20:32:31 EST 2021" starttimestamp="1612315732965" timestamp="218168" />
  <Command __id="162" _type="InsertStringCommand" date="Tue Feb 02 20:32:32 EST 2021" starttimestamp="1612315732965" timestamp="219174" timestamp2="219174">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="164" _type="InsertStringCommand" date="Tue Feb 02 20:32:32 EST 2021" starttimestamp="1612315732965" timestamp="219255" timestamp2="219255">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="166" _type="InsertStringCommand" date="Tue Feb 02 20:32:32 EST 2021" starttimestamp="1612315732965" timestamp="219344" timestamp2="219344">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="168" _type="InsertStringCommand" date="Tue Feb 02 20:32:32 EST 2021" starttimestamp="1612315732965" timestamp="219551" timestamp2="219551">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="170" _type="InsertStringCommand" date="Tue Feb 02 20:32:32 EST 2021" starttimestamp="1612315732965" timestamp="219681" timestamp2="219681">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="172" _type="InsertStringCommand" date="Tue Feb 02 20:32:32 EST 2021" starttimestamp="1612315732965" timestamp="219947" timestamp2="219947">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="174" _type="InsertStringCommand" date="Tue Feb 02 20:32:33 EST 2021" starttimestamp="1612315732965" timestamp="220106" timestamp2="220106">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="176" _type="InsertStringCommand" date="Tue Feb 02 20:32:33 EST 2021" starttimestamp="1612315732965" timestamp="220257" timestamp2="220257">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="178" _type="InsertStringCommand" date="Tue Feb 02 20:32:33 EST 2021" starttimestamp="1612315732965" timestamp="220815" timestamp2="220815">
    <data><![CDATA[_]]></data>
  </Command>
  <Command __id="180" _type="InsertStringCommand" date="Tue Feb 02 20:32:34 EST 2021" starttimestamp="1612315732965" timestamp="221837" timestamp2="221837">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="182" _type="InsertStringCommand" date="Tue Feb 02 20:32:34 EST 2021" starttimestamp="1612315732965" timestamp="221966" timestamp2="221966">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="184" _type="InsertStringCommand" date="Tue Feb 02 20:32:35 EST 2021" starttimestamp="1612315732965" timestamp="222081" timestamp2="222081">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="186" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:32:35 EST 2021" starttimestamp="1612315732965" timestamp="222839" />
  <Command __id="188" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:32:35 EST 2021" starttimestamp="1612315732965" timestamp="222957" />
  <Command __id="189" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 02 20:32:36 EST 2021" starttimestamp="1612315732965" timestamp="223407" />
  <Command __id="191" _type="InsertStringCommand" date="Tue Feb 02 20:32:37 EST 2021" starttimestamp="1612315732965" timestamp="224266" timestamp2="224266">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="193" _type="InsertStringCommand" date="Tue Feb 02 20:32:37 EST 2021" starttimestamp="1612315732965" timestamp="224779" timestamp2="224779">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="195" _type="InsertStringCommand" date="Tue Feb 02 20:32:38 EST 2021" starttimestamp="1612315732965" timestamp="225510" timestamp2="225510">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="197" _type="InsertStringCommand" date="Tue Feb 02 20:32:39 EST 2021" starttimestamp="1612315732965" timestamp="226282" timestamp2="226282">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="198" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:32:39 EST 2021" starttimestamp="1612315732965" timestamp="226690" />
  <Command __id="199" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:32:39 EST 2021" starttimestamp="1612315732965" timestamp="226832" />
  <Command __id="200" _type="ShellCommand" date="Tue Feb 02 20:32:40 EST 2021" starttimestamp="1612315732965" timestamp="227551" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="161" _type="Insert" date="Tue Feb 02 20:32:32 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21330" docExpressionCount="2378" docLength="22234" length="12" offset="2898" repeat="12" starttimestamp="1612315732965" timestamp="219167" timestamp2="222075">
    <text><![CDATA[PROVIDED_URL]]></text>
  </DocumentChange>
  <DocumentChange __id="185" _type="Delete" date="Tue Feb 02 20:32:35 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21328" docExpressionCount="2378" docLength="22232" endLine="61" length="2" offset="2910" repeat="2" startLine="61" starttimestamp="1612315732965" timestamp="222834" timestamp2="222952">
    <text><![CDATA[Ls]]></text>
  </DocumentChange>
  <DocumentChange __id="190" _type="Insert" date="Tue Feb 02 20:32:37 EST 2021" docASTNodeCount="3497" docActiveCodeLength="21332" docExpressionCount="2379" docLength="22236" length="4" offset="2912" repeat="4" starttimestamp="1612315732965" timestamp="224259" timestamp2="226270">
    <text><![CDATA[ {};]]></text>
  </DocumentChange>
  <DocumentChange __id="205" _type="Insert" date="Tue Feb 02 20:32:45 EST 2021" docASTNodeCount="3500" docActiveCodeLength="21425" docExpressionCount="2382" docLength="22329" length="93" offset="2914" repeat="2" starttimestamp="1612315732965" timestamp="232941" timestamp2="233224">
    <text><![CDATA["http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html\r\n" + 
			""]]></text>
  </DocumentChange>
  <Command __id="201" _type="ShellCommand" date="Tue Feb 02 20:32:43 EST 2021" starttimestamp="1612315732965" timestamp="230545" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="202" _type="MoveCaretCommand" caretOffset="602" date="Tue Feb 02 20:32:43 EST 2021" docOffset="1933" starttimestamp="1612315732965" timestamp="230622" />
  <Command __id="203" _type="MoveCaretCommand" caretOffset="1584" date="Tue Feb 02 20:32:44 EST 2021" docOffset="2915" starttimestamp="1612315732965" timestamp="231589" />
  <Command __id="204" _type="MoveCaretCommand" caretOffset="1583" date="Tue Feb 02 20:32:45 EST 2021" docOffset="2914" starttimestamp="1612315732965" timestamp="232290" />
  <Command __id="206" _type="InsertStringCommand" date="Tue Feb 02 20:32:45 EST 2021" starttimestamp="1612315732965" timestamp="232957" timestamp2="232957">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="208" _type="PasteCommand" date="Tue Feb 02 20:32:46 EST 2021" starttimestamp="1612315732965" timestamp="233231" />
  <Command __id="210" _type="UndoCommand" date="Tue Feb 02 20:32:52 EST 2021" starttimestamp="1612315732965" timestamp="239745" />
  <DocumentChange __id="209" _type="Delete" date="Tue Feb 02 20:32:52 EST 2021" docASTNodeCount="3498" docActiveCodeLength="21334" docExpressionCount="2380" docLength="22238" endLine="62" length="91" offset="2915" startLine="61" starttimestamp="1612315732965" timestamp="239667">
    <text><![CDATA[http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html\r\n" + 
			"]]></text>
  </DocumentChange>
  <DocumentChange __id="212" _type="Delete" date="Tue Feb 02 20:32:54 EST 2021" docASTNodeCount="3497" docActiveCodeLength="21332" docExpressionCount="2379" docLength="22236" endLine="61" length="2" offset="2914" repeat="2" startLine="61" starttimestamp="1612315732965" timestamp="241800" timestamp2="241918">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="216" _type="Insert" date="Tue Feb 02 20:32:55 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21339" docExpressionCount="2378" docLength="22315" length="79" offset="2914" starttimestamp="1612315732965" timestamp="242048">
    <text><![CDATA[http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html
]]></text>
  </DocumentChange>
  <DocumentChange __id="218" _type="Delete" date="Tue Feb 02 20:32:55 EST 2021" docASTNodeCount="3497" docActiveCodeLength="21332" docExpressionCount="2379" docLength="22236" endLine="62" length="79" offset="2914" startLine="61" starttimestamp="1612315732965" timestamp="242774">
    <text><![CDATA[http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html
]]></text>
  </DocumentChange>
  <Command __id="211" _type="MoveCaretCommand" caretOffset="1585" date="Tue Feb 02 20:32:54 EST 2021" docOffset="2916" starttimestamp="1612315732965" timestamp="241165" />
  <Command __id="213" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:32:54 EST 2021" starttimestamp="1612315732965" timestamp="241808" />
  <Command __id="215" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:32:54 EST 2021" starttimestamp="1612315732965" timestamp="241926" />
  <Command __id="217" _type="PasteCommand" date="Tue Feb 02 20:32:55 EST 2021" starttimestamp="1612315732965" timestamp="242067" />
  <Command __id="219" _type="UndoCommand" date="Tue Feb 02 20:32:55 EST 2021" starttimestamp="1612315732965" timestamp="242795" />
  <Command __id="221" _type="InsertStringCommand" date="Tue Feb 02 20:32:56 EST 2021" starttimestamp="1612315732965" timestamp="243811" timestamp2="243811">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="223" _type="PasteCommand" date="Tue Feb 02 20:32:57 EST 2021" starttimestamp="1612315732965" timestamp="244316" />
  <Command __id="224" _type="ShellCommand" date="Tue Feb 02 20:32:58 EST 2021" starttimestamp="1612315732965" timestamp="245303" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="225" _type="ShellCommand" date="Tue Feb 02 20:32:59 EST 2021" starttimestamp="1612315732965" timestamp="246949" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="226" _type="MoveCaretCommand" caretOffset="1591" date="Tue Feb 02 20:33:00 EST 2021" docOffset="2922" starttimestamp="1612315732965" timestamp="247890" />
  <DocumentChange __id="220" _type="Insert" date="Tue Feb 02 20:32:56 EST 2021" docASTNodeCount="3500" docActiveCodeLength="21425" docExpressionCount="2382" docLength="22329" length="93" offset="2914" repeat="2" starttimestamp="1612315732965" timestamp="243806" timestamp2="244308">
    <text><![CDATA["http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html\r\n" + 
			""]]></text>
  </DocumentChange>
  <Command __id="227" _type="MoveCaretCommand" caretOffset="1676" date="Tue Feb 02 20:33:02 EST 2021" docOffset="3007" starttimestamp="1612315732965" timestamp="249241" />
  <Command __id="229" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:03 EST 2021" starttimestamp="1612315732965" timestamp="250363" />
  <Command __id="231" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:03 EST 2021" starttimestamp="1612315732965" timestamp="250521" />
  <Command __id="233" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:03 EST 2021" starttimestamp="1612315732965" timestamp="250667" />
  <Command __id="235" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:03 EST 2021" starttimestamp="1612315732965" timestamp="251018" />
  <Command __id="237" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:04 EST 2021" starttimestamp="1612315732965" timestamp="251255" />
  <Command __id="239" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:04 EST 2021" starttimestamp="1612315732965" timestamp="251583" />
  <Command __id="241" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:05 EST 2021" starttimestamp="1612315732965" timestamp="252287" />
  <Command __id="243" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:05 EST 2021" starttimestamp="1612315732965" timestamp="252489" />
  <Command __id="245" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:05 EST 2021" starttimestamp="1612315732965" timestamp="252720" />
  <Command __id="246" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:33:12 EST 2021" starttimestamp="1612315732965" timestamp="259202" />
  <Command __id="248" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:12 EST 2021" starttimestamp="1612315732965" timestamp="259671" />
  <Command __id="250" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:12 EST 2021" starttimestamp="1612315732965" timestamp="259814" />
  <Command __id="252" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:12 EST 2021" starttimestamp="1612315732965" timestamp="259939" />
  <Command __id="254" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:13 EST 2021" starttimestamp="1612315732965" timestamp="260125" />
  <DocumentChange __id="228" _type="Delete" date="Tue Feb 02 20:33:03 EST 2021" docASTNodeCount="3498" docActiveCodeLength="21415" docExpressionCount="2380" docLength="22319" endLine="62" length="10" offset="2997" repeat="9" startLine="61" starttimestamp="1612315732965" timestamp="250356" timestamp2="252715">
    <text><![CDATA[ + 
			""]]></text>
  </DocumentChange>
  <DocumentChange __id="247" _type="Delete" date="Tue Feb 02 20:33:12 EST 2021" docASTNodeCount="3498" docActiveCodeLength="21411" docExpressionCount="2380" docLength="22315" endLine="61" length="4" offset="2992" repeat="4" startLine="61" starttimestamp="1612315732965" timestamp="259665" timestamp2="260118">
    <text><![CDATA[\r\n]]></text>
  </DocumentChange>
  <Command __id="255" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 02 20:33:14 EST 2021" starttimestamp="1612315732965" timestamp="261787" />
  <Command __id="257" _type="InsertStringCommand" date="Tue Feb 02 20:33:15 EST 2021" starttimestamp="1612315732965" timestamp="262886" timestamp2="262886">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="259" _type="InsertStringCommand" date="Tue Feb 02 20:33:15 EST 2021" starttimestamp="1612315732965" timestamp="263029" timestamp2="263029">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="261" _type="InsertStringCommand" date="Tue Feb 02 20:33:17 EST 2021" starttimestamp="1612315732965" timestamp="264286" timestamp2="264286">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="262" _type="ShellCommand" date="Tue Feb 02 20:33:17 EST 2021" starttimestamp="1612315732965" timestamp="264722" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="263" _type="ShellCommand" date="Tue Feb 02 20:33:21 EST 2021" starttimestamp="1612315732965" timestamp="268037" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="264" _type="MoveCaretCommand" caretOffset="1665" date="Tue Feb 02 20:33:21 EST 2021" docOffset="2996" starttimestamp="1612315732965" timestamp="268104" />
  <Command __id="266" _type="PasteCommand" date="Tue Feb 02 20:33:21 EST 2021" starttimestamp="1612315732965" timestamp="268351" />
  <DocumentChange __id="256" _type="Insert" date="Tue Feb 02 20:33:15 EST 2021" docASTNodeCount="3499" docActiveCodeLength="21415" docExpressionCount="2381" docLength="22319" length="4" offset="2993" repeat="3" starttimestamp="1612315732965" timestamp="262870" timestamp2="264278">
    <text><![CDATA[, ""]]></text>
  </DocumentChange>
  <DocumentChange __id="265" _type="Insert" date="Tue Feb 02 20:33:21 EST 2021" docASTNodeCount="3501" docActiveCodeLength="21500" docExpressionCount="2383" docLength="22404" length="85" offset="2996" starttimestamp="1612315732965" timestamp="268334">
    <text><![CDATA[http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm\r\n" + 
			"]]></text>
  </DocumentChange>
  <Command __id="267" _type="MoveCaretCommand" caretOffset="1663" date="Tue Feb 02 20:33:26 EST 2021" docOffset="2994" starttimestamp="1612315732965" timestamp="274001" />
  <Command __id="268" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 02 20:33:27 EST 2021" starttimestamp="1612315732965" timestamp="274748" />
  <Command __id="270" _type="InsertStringCommand" date="Tue Feb 02 20:33:27 EST 2021" starttimestamp="1612315732965" timestamp="274978" timestamp2="274978">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="272" _type="InsertStringCommand" date="Tue Feb 02 20:33:29 EST 2021" starttimestamp="1612315732965" timestamp="276338" timestamp2="276338">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="274" _type="InsertStringCommand" date="Tue Feb 02 20:33:29 EST 2021" starttimestamp="1612315732965" timestamp="276583" timestamp2="276583">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="276" _type="InsertStringCommand" date="Tue Feb 02 20:33:29 EST 2021" starttimestamp="1612315732965" timestamp="276756" timestamp2="276756">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="278" _type="InsertStringCommand" date="Tue Feb 02 20:33:29 EST 2021" starttimestamp="1612315732965" timestamp="276900" timestamp2="276900">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="280" _type="InsertStringCommand" date="Tue Feb 02 20:33:30 EST 2021" starttimestamp="1612315732965" timestamp="277083" timestamp2="277083">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="282" _type="InsertStringCommand" date="Tue Feb 02 20:33:30 EST 2021" starttimestamp="1612315732965" timestamp="277296" timestamp2="277296">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="284" _type="InsertStringCommand" date="Tue Feb 02 20:33:30 EST 2021" starttimestamp="1612315732965" timestamp="277485" timestamp2="277485">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="286" _type="InsertStringCommand" date="Tue Feb 02 20:33:30 EST 2021" starttimestamp="1612315732965" timestamp="277681" timestamp2="277681">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="288" _type="InsertStringCommand" date="Tue Feb 02 20:33:30 EST 2021" starttimestamp="1612315732965" timestamp="277892" timestamp2="277892">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="290" _type="InsertStringCommand" date="Tue Feb 02 20:33:31 EST 2021" starttimestamp="1612315732965" timestamp="278308" timestamp2="278308">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="291" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 02 20:33:34 EST 2021" starttimestamp="1612315732965" timestamp="281241" />
  <Command __id="292" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 02 20:33:34 EST 2021" starttimestamp="1612315732965" timestamp="281842" />
  <Command __id="294" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:35 EST 2021" starttimestamp="1612315732965" timestamp="282420" />
  <Command __id="296" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:35 EST 2021" starttimestamp="1612315732965" timestamp="282580" />
  <Command __id="297" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:33:35 EST 2021" starttimestamp="1612315732965" timestamp="282989" />
  <Command __id="299" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:36 EST 2021" starttimestamp="1612315732965" timestamp="283441" />
  <Command __id="301" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:36 EST 2021" starttimestamp="1612315732965" timestamp="283577" />
  <Command __id="303" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:36 EST 2021" starttimestamp="1612315732965" timestamp="283696" />
  <Command __id="305" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:37 EST 2021" starttimestamp="1612315732965" timestamp="284060" />
  <Command __id="306" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 02 20:33:37 EST 2021" starttimestamp="1612315732965" timestamp="284474" />
  <Command __id="308" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:33:37 EST 2021" starttimestamp="1612315732965" timestamp="284984" />
  <Command __id="310" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:33:38 EST 2021" starttimestamp="1612315732965" timestamp="285313" />
  <Command __id="312" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:33:38 EST 2021" starttimestamp="1612315732965" timestamp="285600" />
  <Command __id="314" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Tue Feb 02 20:33:38 EST 2021" starttimestamp="1612315732965" timestamp="285918" />
  <Command __id="316" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:33:39 EST 2021" starttimestamp="1612315732965" timestamp="286308" />
  <Command __id="318" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:33:39 EST 2021" starttimestamp="1612315732965" timestamp="286450" />
  <Command __id="319" _type="ShellCommand" date="Tue Feb 02 20:33:39 EST 2021" starttimestamp="1612315732965" timestamp="286803" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="269" _type="Insert" date="Tue Feb 02 20:33:27 EST 2021" docASTNodeCount="3501" docActiveCodeLength="21515" docExpressionCount="2383" docLength="22419" length="15" offset="2995" repeat="11" starttimestamp="1612315732965" timestamp="274960" timestamp2="278306">
    <text><![CDATA[
													]]></text>
  </DocumentChange>
  <DocumentChange __id="293" _type="Delete" date="Tue Feb 02 20:33:35 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21513" docExpressionCount="2378" docLength="22417" endLine="62" length="2" offset="3087" repeat="2" startLine="62" starttimestamp="1612315732965" timestamp="282416" timestamp2="282576">
    <text><![CDATA[ +]]></text>
  </DocumentChange>
  <DocumentChange __id="298" _type="Delete" date="Tue Feb 02 20:33:36 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21509" docExpressionCount="2378" docLength="22413" endLine="62" length="4" offset="3082" repeat="4" startLine="62" starttimestamp="1612315732965" timestamp="283434" timestamp2="284053">
    <text><![CDATA[\r\n]]></text>
  </DocumentChange>
  <DocumentChange __id="307" _type="Delete" date="Tue Feb 02 20:33:37 EST 2021" docASTNodeCount="3499" docActiveCodeLength="21501" docExpressionCount="2381" docLength="22405" endLine="63" length="8" offset="3083" repeat="6" startLine="62" starttimestamp="1612315732965" timestamp="284978" timestamp2="286440">
    <text><![CDATA[ 
			""]]></text>
  </DocumentChange>
  <Command __id="320" _type="ShellCommand" date="Tue Feb 02 20:33:51 EST 2021" starttimestamp="1612315732965" timestamp="298047" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="321" _type="MoveCaretCommand" caretOffset="1664" date="Tue Feb 02 20:33:51 EST 2021" docOffset="2995" starttimestamp="1612315732965" timestamp="298124" />
  <Command __id="322" _type="MoveCaretCommand" caretOffset="1753" date="Tue Feb 02 20:33:51 EST 2021" docOffset="3084" starttimestamp="1612315732965" timestamp="298594" />
  <Command __id="323" _type="MoveCaretCommand" caretOffset="1752" date="Tue Feb 02 20:33:52 EST 2021" docOffset="3083" starttimestamp="1612315732965" timestamp="299103" />
  <Command __id="325" _type="InsertStringCommand" date="Tue Feb 02 20:33:52 EST 2021" starttimestamp="1612315732965" timestamp="300015" timestamp2="300015">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="327" _type="InsertStringCommand" date="Tue Feb 02 20:33:53 EST 2021" starttimestamp="1612315732965" timestamp="300252" timestamp2="300252">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="329" _type="InsertStringCommand" date="Tue Feb 02 20:33:54 EST 2021" starttimestamp="1612315732965" timestamp="301625" timestamp2="301625">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="331" _type="PasteCommand" date="Tue Feb 02 20:33:55 EST 2021" starttimestamp="1612315732965" timestamp="302081" />
  <DocumentChange __id="324" _type="Insert" date="Tue Feb 02 20:33:52 EST 2021" docASTNodeCount="3502" docActiveCodeLength="21588" docExpressionCount="2384" docLength="22492" length="87" offset="3083" repeat="4" starttimestamp="1612315732965" timestamp="300006" timestamp2="302072">
    <text><![CDATA[,
													"http://zetcode.com/gfx/java2d/shapesandfills/\r\n" + 
													""]]></text>
  </DocumentChange>
  <DocumentChange __id="334" _type="Delete" date="Tue Feb 02 20:33:56 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21586" docExpressionCount="2378" docLength="22490" endLine="63" length="2" offset="3150" repeat="2" startLine="63" starttimestamp="1612315732965" timestamp="303981" timestamp2="304118">
    <text><![CDATA[ +]]></text>
  </DocumentChange>
  <Command __id="332" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:33:56 EST 2021" starttimestamp="1612315732965" timestamp="303436" />
  <Command __id="333" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 02 20:33:56 EST 2021" starttimestamp="1612315732965" timestamp="303644" />
  <Command __id="335" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:56 EST 2021" starttimestamp="1612315732965" timestamp="303984" />
  <Command __id="337" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:57 EST 2021" starttimestamp="1612315732965" timestamp="304122" />
  <Command __id="339" _type="InsertStringCommand" date="Tue Feb 02 20:33:58 EST 2021" starttimestamp="1612315732965" timestamp="305295" timestamp2="305295">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="340" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:33:58 EST 2021" starttimestamp="1612315732965" timestamp="305675" />
  <Command __id="341" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:33:58 EST 2021" starttimestamp="1612315732965" timestamp="305813" />
  <Command __id="343" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:59 EST 2021" starttimestamp="1612315732965" timestamp="306286" />
  <Command __id="345" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:59 EST 2021" starttimestamp="1612315732965" timestamp="306410" />
  <Command __id="347" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:59 EST 2021" starttimestamp="1612315732965" timestamp="306558" />
  <Command __id="349" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:33:59 EST 2021" starttimestamp="1612315732965" timestamp="306668" />
  <Command __id="350" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 02 20:34:00 EST 2021" starttimestamp="1612315732965" timestamp="307547" />
  <Command __id="351" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:34:00 EST 2021" starttimestamp="1612315732965" timestamp="307779" />
  <Command __id="352" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:34:00 EST 2021" starttimestamp="1612315732965" timestamp="307947" />
  <Command __id="353" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:34:01 EST 2021" starttimestamp="1612315732965" timestamp="308076" />
  <Command __id="354" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:34:01 EST 2021" starttimestamp="1612315732965" timestamp="308220" />
  <Command __id="355" _type="ShellCommand" date="Tue Feb 02 20:34:01 EST 2021" starttimestamp="1612315732965" timestamp="308655" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="356" _type="ShellCommand" date="Tue Feb 02 20:34:04 EST 2021" starttimestamp="1612315732965" timestamp="311545" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="357" _type="MoveCaretCommand" caretOffset="1817" date="Tue Feb 02 20:34:04 EST 2021" docOffset="3148" starttimestamp="1612315732965" timestamp="311603" />
  <Command __id="358" _type="MoveCaretCommand" caretOffset="1833" date="Tue Feb 02 20:34:06 EST 2021" docOffset="3164" starttimestamp="1612315732965" timestamp="313244" />
  <Command __id="360" _type="PasteCommand" date="Tue Feb 02 20:34:06 EST 2021" starttimestamp="1612315732965" timestamp="313384" />
  <Command __id="379" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:34:13 EST 2021" starttimestamp="1612315732965" timestamp="320402" />
  <Command __id="380" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:34:13 EST 2021" starttimestamp="1612315732965" timestamp="320405" />
  <Command __id="381" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:34:13 EST 2021" starttimestamp="1612315732965" timestamp="320405" />
  <Command __id="382" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:34:13 EST 2021" starttimestamp="1612315732965" timestamp="320407" />
  <Command __id="383" _type="ShellCommand" date="Tue Feb 02 20:34:14 EST 2021" starttimestamp="1612315732965" timestamp="321789" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="384" _type="MoveCaretCommand" caretOffset="1817" date="Tue Feb 02 20:34:14 EST 2021" docOffset="3148" starttimestamp="1612315732965" timestamp="321867" />
  <Command __id="385" _type="MoveCaretCommand" caretOffset="1909" date="Tue Feb 02 20:34:15 EST 2021" docOffset="3240" starttimestamp="1612315732965" timestamp="322921" />
  <Command __id="386" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:34:16 EST 2021" starttimestamp="1612315732965" timestamp="323579" />
  <Command __id="388" _type="PasteCommand" date="Tue Feb 02 20:34:16 EST 2021" starttimestamp="1612315732965" timestamp="323784" />
  <Command __id="389" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:34:17 EST 2021" starttimestamp="1612315732965" timestamp="324563" />
  <Command __id="390" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 02 20:34:17 EST 2021" starttimestamp="1612315732965" timestamp="324746" />
  <Command __id="392" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:18 EST 2021" starttimestamp="1612315732965" timestamp="325143" />
  <Command __id="394" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:18 EST 2021" starttimestamp="1612315732965" timestamp="325289" />
  <Command __id="396" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:18 EST 2021" starttimestamp="1612315732965" timestamp="325429" />
  <Command __id="398" _type="InsertStringCommand" date="Tue Feb 02 20:34:19 EST 2021" starttimestamp="1612315732965" timestamp="326374" timestamp2="326374">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="400" _type="InsertStringCommand" date="Tue Feb 02 20:34:19 EST 2021" starttimestamp="1612315732965" timestamp="326590" timestamp2="326590">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="401" _type="ShellCommand" date="Tue Feb 02 20:34:21 EST 2021" starttimestamp="1612315732965" timestamp="328078" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="402" _type="ShellCommand" date="Tue Feb 02 20:34:25 EST 2021" starttimestamp="1612315732965" timestamp="332619" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="403" _type="MoveCaretCommand" caretOffset="1892" date="Tue Feb 02 20:34:25 EST 2021" docOffset="3223" starttimestamp="1612315732965" timestamp="332690" />
  <Command __id="404" _type="MoveCaretCommand" caretOffset="1975" date="Tue Feb 02 20:34:26 EST 2021" docOffset="3306" starttimestamp="1612315732965" timestamp="333886" />
  <Command __id="406" _type="PasteCommand" date="Tue Feb 02 20:34:27 EST 2021" starttimestamp="1612315732965" timestamp="334184" />
  <Command __id="407" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:34:27 EST 2021" starttimestamp="1612315732965" timestamp="334844" />
  <Command __id="408" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 02 20:34:28 EST 2021" starttimestamp="1612315732965" timestamp="335066" />
  <Command __id="410" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:28 EST 2021" starttimestamp="1612315732965" timestamp="335438" />
  <Command __id="412" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:28 EST 2021" starttimestamp="1612315732965" timestamp="335553" />
  <Command __id="414" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:28 EST 2021" starttimestamp="1612315732965" timestamp="335723" />
  <Command __id="416" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:28 EST 2021" starttimestamp="1612315732965" timestamp="335928" />
  <Command __id="418" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:29 EST 2021" starttimestamp="1612315732965" timestamp="336063" />
  <Command __id="420" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:29 EST 2021" starttimestamp="1612315732965" timestamp="336272" />
  <Command __id="422" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:29 EST 2021" starttimestamp="1612315732965" timestamp="336507" />
  <Command __id="424" _type="InsertStringCommand" date="Tue Feb 02 20:34:30 EST 2021" starttimestamp="1612315732965" timestamp="337277" timestamp2="337277">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="426" _type="InsertStringCommand" date="Tue Feb 02 20:34:30 EST 2021" starttimestamp="1612315732965" timestamp="337595" timestamp2="337595">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="427" _type="ShellCommand" date="Tue Feb 02 20:34:31 EST 2021" starttimestamp="1612315732965" timestamp="338036" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="338" _type="Insert" date="Tue Feb 02 20:33:58 EST 2021" docASTNodeCount="3501" docActiveCodeLength="21587" docExpressionCount="2383" docLength="22491" length="1" offset="3150" starttimestamp="1612315732965" timestamp="305292">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="342" _type="Delete" date="Tue Feb 02 20:33:59 EST 2021" docASTNodeCount="3501" docActiveCodeLength="21583" docExpressionCount="2383" docLength="22487" endLine="63" length="4" offset="3145" repeat="4" startLine="63" starttimestamp="1612315732965" timestamp="306274" timestamp2="306663">
    <text><![CDATA[\r\n]]></text>
  </DocumentChange>
  <DocumentChange __id="359" _type="Insert" date="Tue Feb 02 20:34:06 EST 2021" docASTNodeCount="3503" docActiveCodeLength="21663" docExpressionCount="2385" docLength="22567" length="80" offset="3164" starttimestamp="1612315732965" timestamp="313370">
    <text><![CDATA[http://www.tutorialspoint.com/javaexamples/gui_solid.htm\r\n" + 
													"]]></text>
  </DocumentChange>
  <DocumentChange __id="363" _type="Delete" date="Tue Feb 02 20:34:08 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21661" docExpressionCount="2378" docLength="22565" endLine="64" length="2" offset="3225" repeat="2" startLine="64" starttimestamp="1612315732965" timestamp="315066" timestamp2="315205">
    <text><![CDATA[ +]]></text>
  </DocumentChange>
  <DocumentChange __id="367" _type="Insert" date="Tue Feb 02 20:34:09 EST 2021" docASTNodeCount="3502" docActiveCodeLength="21662" docExpressionCount="2384" docLength="22566" length="1" offset="3225" starttimestamp="1612315732965" timestamp="316043">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="370" _type="Delete" date="Tue Feb 02 20:34:09 EST 2021" docASTNodeCount="3502" docActiveCodeLength="21658" docExpressionCount="2384" docLength="22562" endLine="64" length="4" offset="3220" repeat="4" startLine="64" starttimestamp="1612315732965" timestamp="316880" timestamp2="317270">
    <text><![CDATA[\r\n]]></text>
  </DocumentChange>
  <DocumentChange __id="387" _type="Insert" date="Tue Feb 02 20:34:16 EST 2021" docASTNodeCount="3504" docActiveCodeLength="21726" docExpressionCount="2386" docLength="22630" length="68" offset="3239" starttimestamp="1612315732965" timestamp="323769">
    <text><![CDATA[http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n" + 
													"]]></text>
  </DocumentChange>
  <DocumentChange __id="391" _type="Delete" date="Tue Feb 02 20:34:18 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21723" docExpressionCount="2378" docLength="22627" endLine="65" length="3" offset="3287" repeat="3" startLine="65" starttimestamp="1612315732965" timestamp="325140" timestamp2="325422">
    <text><![CDATA[" +]]></text>
  </DocumentChange>
  <DocumentChange __id="397" _type="Insert" date="Tue Feb 02 20:34:19 EST 2021" docASTNodeCount="3503" docActiveCodeLength="21725" docExpressionCount="2385" docLength="22629" length="2" offset="3287" repeat="2" starttimestamp="1612315732965" timestamp="326365" timestamp2="326583">
    <text><![CDATA[",]]></text>
  </DocumentChange>
  <DocumentChange __id="405" _type="Insert" date="Tue Feb 02 20:34:27 EST 2021" docASTNodeCount="3505" docActiveCodeLength="21822" docExpressionCount="2387" docLength="22726" length="97" offset="3306" starttimestamp="1612315732965" timestamp="334170">
    <text><![CDATA[http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm\r\n" + 
													"]]></text>
  </DocumentChange>
  <DocumentChange __id="409" _type="Delete" date="Tue Feb 02 20:34:28 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21815" docExpressionCount="2378" docLength="22719" endLine="66" length="7" offset="3379" repeat="7" startLine="66" starttimestamp="1612315732965" timestamp="335434" timestamp2="336504">
    <text><![CDATA[\r\n" +]]></text>
  </DocumentChange>
  <DocumentChange __id="423" _type="Insert" date="Tue Feb 02 20:34:30 EST 2021" docASTNodeCount="3504" docActiveCodeLength="21817" docExpressionCount="2386" docLength="22721" length="2" offset="3379" repeat="2" starttimestamp="1612315732965" timestamp="337269" timestamp2="337588">
    <text><![CDATA[",]]></text>
  </DocumentChange>
  <DocumentChange __id="431" _type="Insert" date="Tue Feb 02 20:34:36 EST 2021" docASTNodeCount="3506" docActiveCodeLength="21931" docExpressionCount="2388" docLength="22835" length="114" offset="3398" starttimestamp="1612315732965" timestamp="343362">
    <text><![CDATA[http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html\r\n" + 
													"]]></text>
  </DocumentChange>
  <DocumentChange __id="433" _type="Delete" date="Tue Feb 02 20:34:37 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21930" docExpressionCount="2378" docLength="22834" endLine="68" length="1" offset="3512" startLine="68" starttimestamp="1612315732965" timestamp="344055">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <Command __id="428" _type="ShellCommand" date="Tue Feb 02 20:34:34 EST 2021" starttimestamp="1612315732965" timestamp="341876" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="429" _type="MoveCaretCommand" caretOffset="1959" date="Tue Feb 02 20:34:34 EST 2021" docOffset="3290" starttimestamp="1612315732965" timestamp="341948" />
  <Command __id="430" _type="MoveCaretCommand" caretOffset="2067" date="Tue Feb 02 20:34:35 EST 2021" docOffset="3398" starttimestamp="1612315732965" timestamp="342939" />
  <Command __id="432" _type="PasteCommand" date="Tue Feb 02 20:34:36 EST 2021" starttimestamp="1612315732965" timestamp="343381" />
  <Command __id="434" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:34:37 EST 2021" starttimestamp="1612315732965" timestamp="344061" />
  <Command __id="436" _type="UndoCommand" date="Tue Feb 02 20:34:38 EST 2021" starttimestamp="1612315732965" timestamp="345450" />
  <Command __id="437" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:34:39 EST 2021" starttimestamp="1612315732965" timestamp="346069" />
  <Command __id="438" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 02 20:34:39 EST 2021" starttimestamp="1612315732965" timestamp="346496" />
  <Command __id="440" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:39 EST 2021" starttimestamp="1612315732965" timestamp="347004" />
  <Command __id="442" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:40 EST 2021" starttimestamp="1612315732965" timestamp="347146" />
  <Command __id="444" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:40 EST 2021" starttimestamp="1612315732965" timestamp="347311" />
  <Command __id="446" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:40 EST 2021" starttimestamp="1612315732965" timestamp="347474" />
  <Command __id="448" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:40 EST 2021" starttimestamp="1612315732965" timestamp="347584" />
  <Command __id="450" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:40 EST 2021" starttimestamp="1612315732965" timestamp="347738" />
  <Command __id="452" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:40 EST 2021" starttimestamp="1612315732965" timestamp="347878" />
  <Command __id="454" _type="InsertStringCommand" date="Tue Feb 02 20:34:41 EST 2021" starttimestamp="1612315732965" timestamp="348578" timestamp2="348578">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="456" _type="InsertStringCommand" date="Tue Feb 02 20:34:42 EST 2021" starttimestamp="1612315732965" timestamp="349489" timestamp2="349489">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="457" _type="ShellCommand" date="Tue Feb 02 20:34:43 EST 2021" starttimestamp="1612315732965" timestamp="350051" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="458" _type="ShellCommand" date="Tue Feb 02 20:34:48 EST 2021" starttimestamp="1612315732965" timestamp="355899" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="459" _type="MoveCaretCommand" caretOffset="2058" date="Tue Feb 02 20:34:48 EST 2021" docOffset="3389" starttimestamp="1612315732965" timestamp="355961" />
  <Command __id="460" _type="MoveCaretCommand" caretOffset="2176" date="Tue Feb 02 20:34:49 EST 2021" docOffset="3507" starttimestamp="1612315732965" timestamp="356896" />
  <Command __id="462" _type="PasteCommand" date="Tue Feb 02 20:34:50 EST 2021" starttimestamp="1612315732965" timestamp="357118" />
  <Command __id="463" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:34:50 EST 2021" starttimestamp="1612315732965" timestamp="357789" />
  <Command __id="464" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 02 20:34:50 EST 2021" starttimestamp="1612315732965" timestamp="357989" />
  <Command __id="466" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:51 EST 2021" starttimestamp="1612315732965" timestamp="358489" />
  <Command __id="468" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:51 EST 2021" starttimestamp="1612315732965" timestamp="358612" />
  <Command __id="470" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:51 EST 2021" starttimestamp="1612315732965" timestamp="358746" />
  <Command __id="472" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:51 EST 2021" starttimestamp="1612315732965" timestamp="358856" />
  <Command __id="474" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:51 EST 2021" starttimestamp="1612315732965" timestamp="358990" />
  <Command __id="476" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:52 EST 2021" starttimestamp="1612315732965" timestamp="359109" />
  <Command __id="478" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:52 EST 2021" starttimestamp="1612315732965" timestamp="359225" />
  <Command __id="480" _type="InsertStringCommand" date="Tue Feb 02 20:34:52 EST 2021" starttimestamp="1612315732965" timestamp="359863" timestamp2="359863">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="482" _type="InsertStringCommand" date="Tue Feb 02 20:34:53 EST 2021" starttimestamp="1612315732965" timestamp="360750" timestamp2="360750">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="483" _type="ShellCommand" date="Tue Feb 02 20:34:53 EST 2021" starttimestamp="1612315732965" timestamp="360952" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="484" _type="ShellCommand" date="Tue Feb 02 20:34:56 EST 2021" starttimestamp="1612315732965" timestamp="363819" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="485" _type="MoveCaretCommand" caretOffset="2057" date="Tue Feb 02 20:34:56 EST 2021" docOffset="3388" starttimestamp="1612315732965" timestamp="363878" />
  <Command __id="486" _type="MoveCaretCommand" caretOffset="2262" date="Tue Feb 02 20:34:57 EST 2021" docOffset="3593" starttimestamp="1612315732965" timestamp="364667" />
  <Command __id="488" _type="PasteCommand" date="Tue Feb 02 20:34:57 EST 2021" starttimestamp="1612315732965" timestamp="364881" />
  <Command __id="489" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:34:58 EST 2021" starttimestamp="1612315732965" timestamp="365527" />
  <Command __id="490" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 02 20:34:58 EST 2021" starttimestamp="1612315732965" timestamp="365758" />
  <Command __id="492" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:59 EST 2021" starttimestamp="1612315732965" timestamp="366110" />
  <Command __id="494" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:59 EST 2021" starttimestamp="1612315732965" timestamp="366254" />
  <Command __id="496" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:59 EST 2021" starttimestamp="1612315732965" timestamp="366396" />
  <Command __id="498" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:59 EST 2021" starttimestamp="1612315732965" timestamp="366645" />
  <Command __id="500" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:59 EST 2021" starttimestamp="1612315732965" timestamp="366764" />
  <Command __id="502" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:34:59 EST 2021" starttimestamp="1612315732965" timestamp="366918" />
  <Command __id="504" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:35:00 EST 2021" starttimestamp="1612315732965" timestamp="367071" />
  <Command __id="506" _type="InsertStringCommand" date="Tue Feb 02 20:35:00 EST 2021" starttimestamp="1612315732965" timestamp="367625" timestamp2="367625">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="507" _type="ShellCommand" date="Tue Feb 02 20:35:01 EST 2021" starttimestamp="1612315732965" timestamp="368064" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="508" _type="ShellCommand" date="Tue Feb 02 20:35:02 EST 2021" starttimestamp="1612315732965" timestamp="369875" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="509" _type="MoveCaretCommand" caretOffset="2359" date="Tue Feb 02 20:35:03 EST 2021" docOffset="3690" starttimestamp="1612315732965" timestamp="371026" />
  <Command __id="510" _type="MoveCaretCommand" caretOffset="2360" date="Tue Feb 02 20:35:04 EST 2021" docOffset="3691" starttimestamp="1612315732965" timestamp="371596" />
  <Command __id="512" _type="PasteCommand" date="Tue Feb 02 20:35:04 EST 2021" starttimestamp="1612315732965" timestamp="371802" />
  <Command __id="513" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:35:05 EST 2021" starttimestamp="1612315732965" timestamp="372576" />
  <Command __id="514" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 02 20:35:05 EST 2021" starttimestamp="1612315732965" timestamp="372786" />
  <Command __id="516" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:35:06 EST 2021" starttimestamp="1612315732965" timestamp="373094" />
  <Command __id="518" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:35:06 EST 2021" starttimestamp="1612315732965" timestamp="373223" />
  <Command __id="520" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:35:06 EST 2021" starttimestamp="1612315732965" timestamp="373374" />
  <Command __id="522" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:35:06 EST 2021" starttimestamp="1612315732965" timestamp="373594" />
  <Command __id="524" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:35:06 EST 2021" starttimestamp="1612315732965" timestamp="373727" />
  <Command __id="526" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:35:06 EST 2021" starttimestamp="1612315732965" timestamp="373914" />
  <Command __id="528" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:35:07 EST 2021" starttimestamp="1612315732965" timestamp="374037" />
  <Command __id="530" _type="InsertStringCommand" date="Tue Feb 02 20:35:07 EST 2021" starttimestamp="1612315732965" timestamp="374629" timestamp2="374629">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="532" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Tue Feb 02 20:35:07 EST 2021" starttimestamp="1612315732965" timestamp="374955" />
  <Command __id="534" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Tue Feb 02 20:35:08 EST 2021" starttimestamp="1612315732965" timestamp="375449" />
  <Command __id="536" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Tue Feb 02 20:35:08 EST 2021" starttimestamp="1612315732965" timestamp="376002" />
  <Command __id="538" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:35:09 EST 2021" starttimestamp="1612315732965" timestamp="376717" />
  <Command __id="540" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:35:09 EST 2021" starttimestamp="1612315732965" timestamp="376947" />
  <Command __id="541" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:35:17 EST 2021" starttimestamp="1612315732965" timestamp="384727" />
  <Command __id="542" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 02 20:35:18 EST 2021" starttimestamp="1612315732965" timestamp="385510" />
  <Command __id="544" _type="InsertStringCommand" date="Tue Feb 02 20:35:18 EST 2021" starttimestamp="1612315732965" timestamp="385821" timestamp2="385821">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="545" _type="ShellCommand" date="Tue Feb 02 20:35:20 EST 2021" starttimestamp="1612315732965" timestamp="387093" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="546" _type="ShellCommand" date="Tue Feb 02 20:35:23 EST 2021" starttimestamp="1612315732965" timestamp="390160" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="547" _type="ShellCommand" date="Tue Feb 02 20:35:23 EST 2021" starttimestamp="1612315732965" timestamp="390668" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="548" _type="ShellCommand" date="Tue Feb 02 20:35:25 EST 2021" starttimestamp="1612315732965" timestamp="392186" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="549" _type="MoveCaretCommand" caretOffset="1428" date="Tue Feb 02 20:35:25 EST 2021" docOffset="2759" starttimestamp="1612315732965" timestamp="392247" />
  <Command __id="554" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:35:36 EST 2021" docASTNodeCount="442" docActiveCodeLength="2587" docExpressionCount="273" docLength="2659" projectName="Hermes" starttimestamp="1612315732965" timestamp="403407">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\WebCommand.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import fluorite.model.EHEventRecorder;

public class WebCommand extends AbstractCommand implements EHICommand{
	private static final String XML_KEYWORD = "keyword";
	private static final String XML_URL = "URL";
//	private static final String XML_TITLE = "title";
	private static final String XML_TYPE = "type";
	private String keyword, url, type;	

	public WebCommand() {}
	
	public WebCommand(String keyword, String url) {
		this.keyword = keyword;
		this.url = url;
		//this.title = title;
		type = getType();
	}
	
	private String getType() {
		if (keyword.contains("Google Search")) {
			return "Search";
		}
		if (keyword.contains("Stack Overflow")) {
			return "Stack Overflow";
		}
		if (keyword.equals(url) && keyword.contains("google.com/url?")) {
			return "Search Result";
		}
		return "Link";
	}
	
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_TYPE, type);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new HashMap<String, String>();
		dataMap.put(XML_KEYWORD, keyword);
		dataMap.put(XML_URL, url);
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "WebCommand";
	}

	@Override
	public String getName() {
		return "Web";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			keyword = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			type = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			url = textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="555" _type="MoveCaretCommand" caretOffset="2104" date="Tue Feb 02 20:35:36 EST 2021" docOffset="2342" starttimestamp="1612315732965" timestamp="403570" />
  <Command __id="557" _type="MoveCaretCommand" caretOffset="1295" date="Tue Feb 02 20:35:41 EST 2021" docOffset="2626" starttimestamp="1612315732965" timestamp="408743" />
  <Command __id="855" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:37:18 EST 2021" docASTNodeCount="708" docActiveCodeLength="4683" docExpressionCount="421" docLength="5716" projectName="Hermes" starttimestamp="1612315732965" timestamp="505641">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\ProgramExecutionEvent.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Attr;
import org.w3c.dom.Element;

import fluorite.model.EHEventRecorder;

public class ProgramExecutionEvent 
	 extends AbstractCommand
//	extends edu.cmu.scs.fluorite.commands.RunCommand 
	implements EHICommand{
	int numEvents;
	public ProgramExecutionEvent() {
		super();
		
	}
	
//	
	public ProgramExecutionEvent(boolean debug, boolean terminate, String projectName, int exitValue, boolean hitBreakPoint, boolean stepEnd, 
			boolean stepInto, boolean stepReturn, int aNumEvents) {
//		super(debug, terminate, projectName, exitValue);
		mDebug = debug;
		mTerminate = terminate;
		mProjectName = projectName;
		// stuff added
		mHitBreakPoint = hitBreakPoint;
		mStepEnd = stepEnd;
		mStepInto = stepInto;
		mStepReturn = stepReturn;
		numEvents = aNumEvents;
	}
	public ProgramExecutionEvent(boolean debug, boolean terminate, String projectName, int exitValue, boolean hitBreakPoint, boolean stepEnd, 
			boolean stepInto, boolean stepReturn) {
		this(debug, terminate, projectName, exitValue, hitBreakPoint, stepEnd, stepInto, stepReturn, 0);
	}

	private boolean mDebug;
	private boolean mRun;
	private boolean mTerminate;
	private boolean mCreate;
	
	private String mProjectName;
	

	public boolean execute(IEditorPart target) {
		// TODO Auto-generated method stub
		return false;
	}

	public void dump() {
		// TODO Auto-generated method stub

	}

	public Map<String, String> getAttributesMap() {
		String kind;
		if(mTerminate)
			kind = "Terminate";
		if(mCreate)
			kind = "Create";
		if(mHitBreakPoint);
			kind = "HitBreakPoint";
		if(mStepEnd)
			kind = "StepEnd";
		if(mStepInto)
			kind = "StepInto";
		if(mStepReturn)
			kind = "StepReturn";
		
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put("type", mDebug ? "Debug" : "Run");
		attrMap.put("kind", kind);
		attrMap.put("projectName", mProjectName == null ? "(Unknown)"
				: mProjectName);
		return attrMap;
	}

	public Map<String, String> getDataMap() {
		return null;
	}

	
//	public String getName() {
//		return attr.getValue();
//	}

	public String getCommandType() {
		return "RunCommand";
	}

	public String getName() {
		
		String name = "";
		String debugRun = "";
		
		if(mTerminate)
			name = "Terminate";
		if(mCreate)
			name = "Create";
		if(mDebug)
			debugRun = "Debug";
		if(mRun)
			debugRun = "Run";
		if(mHitBreakPoint);
			name = "HitBreakPoint";
		if(mStepEnd)
			name = "StepEnd";
		if(mStepInto)
			name = "StepInto";
		if(mStepReturn)
			name = "StepReturn";
		
		
		return name + debugRun + "Application";
		
		
//		return (mTerminate ? "Terminate" : "Create") + " "
//				+ (mDebug ? "Debug" : "Run") + " Application";
	}

	public String getDescription() {
		// TODO Auto-generated method stub
		return null;
	}

	public String getCategory() {
		return EHEventRecorder.MacroCommandCategory;
	}

	public String getCategoryID() {
		return EHEventRecorder.MacroCommandCategoryID;
	}

	public boolean combine(EHICommand anotherCommand) {
		// TODO Auto-generated method stub
		return false;
	}
	
	// stuff added
	protected boolean mHitBreakPoint;
	protected boolean mStepEnd;
	protected boolean mStepInto;
	protected boolean mStepReturn;
	@Override
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		Attr  attr = null;
		
//		if ((attr = commandElement.getAttributeNode("type")) != null) {
//			mDebug = Boolean.parseBoolean(attr.getValue());
//		}
		
		if ((attr = commandElement.getAttributeNode("kind")) != null) {
			if (attr.getValue().equals( "Terminate"))
			{
//				mTerminate = true;
//				mCreate = false;
				mHitBreakPoint = false;
				mStepEnd = false;
		        mStepInto = false;;
				mStepReturn = false;
			}
			
			if (attr.getValue().equals( "Create"))
			{
//				mTerminate = false;
//				mCreate = true;
				mHitBreakPoint = false;
				mStepEnd = false;
		        mStepInto = false;;
				mStepReturn = false;
			}
			
			if (attr.getValue().equals( "HitBreakPoint"))
			{
//				mTerminate = false;
//				mCreate = false;
				mHitBreakPoint = true;
				mStepEnd = false;
		        mStepInto = false;;
				mStepReturn = false;
			}
			
			if (attr.getValue().equals("StepEnd"))
			{
//				mTerminate = false;
//				mCreate = false;
				mHitBreakPoint = false;
				mStepEnd = true;
		        mStepInto = false;;
				mStepReturn = false;
			}
			
			if (attr.getValue().equals("StepInto"))
			{
//				mTerminate = false;
//				mCreate = false;
				mHitBreakPoint = false;
				mStepEnd = false;
		        mStepInto = true;;
				mStepReturn = false;
			}
			
			if (attr.getValue().equals("StepReturn"))
			{
//				mTerminate = false;
//				mCreate = false;
				mHitBreakPoint = false;
				mStepEnd = false;
		        mStepInto = false;;
				mStepReturn = true;
			}
		}

//		if ((attr = commandElement.getAttributeNode("projectName")) != null) {
//			mProjectName = attr.getValue();
//		}
		
		if ((attr = commandElement.getAttributeNode("type")) != null ) {
			if (attr.getValue().equals("Run")) {
				mDebug = false;
				mRun = true;
			}
			if (attr.getValue().equals("Debug")) {
				mDebug = true;
				mRun = false;
			}
		}
	}
	public String toString() {
		String retVal = numEvents <= 1? 
				super.toString():
				super.toString() + ":" + numEvents;
		return retVal;
		
//		return numEvents > 1? super.toString():super.toString() + ":" + numEvents;
	}

}
]]></snapshot>
  </Command>
  <Command __id="856" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:37:18 EST 2021" starttimestamp="1612315732965" timestamp="505725" />
  <Command __id="857" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:37:18 EST 2021" starttimestamp="1612315732965" timestamp="505733" />
  <Command __id="858" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:37:18 EST 2021" starttimestamp="1612315732965" timestamp="505734" />
  <Command __id="859" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:37:18 EST 2021" starttimestamp="1612315732965" timestamp="505742" />
  <Command __id="860" _type="SelectTextCommand" caretOffset="804" date="Tue Feb 02 20:37:18 EST 2021" end="804" start="783" starttimestamp="1612315732965" timestamp="505792" />
  <Command __id="861" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:37:20 EST 2021" docASTNodeCount="3487" docActiveCodeLength="21283" docExpressionCount="2376" docLength="22187" projectName="LogAnalyzer" starttimestamp="1612315732965" timestamp="507184">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 6;¶	"), Diff(DELETE,"private static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", ¶													"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",¶													"http://zetcode.com/gfx/java2d/shapesandfills/", ¶													"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", ¶													"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", ¶													"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", ¶													"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", ¶													"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", ¶													"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", ¶													"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; "), Diff(EQUAL,"¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands;¶						if (browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶						}¶						for (File file : logs) {¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶									if (rest >= 1*ONE_SECOND) {¶										String range = "";¶										if (rest < 2*ONE_SECOND) {¶											range = "1s-2s";¶										} else if (rest < 5*ONE_SECOND) {¶											range = "2s-5s";¶										} else if (rest < 10*ONE_SECOND) {¶											range = "5s-10s";¶										} else if (rest < 20*ONE_SECOND) {¶											range = "10s-20s";¶										} else if (rest < 30*ONE_SECOND) {¶											range = "20s-30s";¶										} else if (rest < ONE_MIN) {¶											range = "30s-1m";¶										} else if (rest < TWO_MIN) {¶											range = "1m-2m";¶										} else if (rest < FIVE_MIN) {¶											range = "2m-5m";¶										} else if (rest < TEN_MIN) {¶											range = "5m-10m";¶										} else if (rest < 3*TEN_MIN) {¶											range = "10m-30m";¶										} else if (rest < 6*TEN_MIN) {¶											range = "30m-60m";¶										} else {¶											range = ">1h";¶										}¶										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶										rCommnad.setStartTimestamp(last.getStartTimestamp());¶										rCommnad.setTimestamp(last.getTimestamp()+1);¶										newCommands.add(rCommnad);¶									} ¶									newCommands.add(command);¶								}¶							}¶							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								// TODO Auto-generated catch block¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private CountDownLatch latch;
	private static final int THREAD_LIM = 6;
	
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands;
						if (browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
						}
						for (File file : logs) {
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
									if (rest >= 1*ONE_SECOND) {
										String range = "";
										if (rest < 2*ONE_SECOND) {
											range = "1s-2s";
										} else if (rest < 5*ONE_SECOND) {
											range = "2s-5s";
										} else if (rest < 10*ONE_SECOND) {
											range = "5s-10s";
										} else if (rest < 20*ONE_SECOND) {
											range = "10s-20s";
										} else if (rest < 30*ONE_SECOND) {
											range = "20s-30s";
										} else if (rest < ONE_MIN) {
											range = "30s-1m";
										} else if (rest < TWO_MIN) {
											range = "1m-2m";
										} else if (rest < FIVE_MIN) {
											range = "2m-5m";
										} else if (rest < TEN_MIN) {
											range = "5m-10m";
										} else if (rest < 3*TEN_MIN) {
											range = "10m-30m";
										} else if (rest < 6*TEN_MIN) {
											range = "30m-60m";
										} else {
											range = ">1h";
										}
										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
										rCommnad.setStartTimestamp(last.getStartTimestamp());
										rCommnad.setTimestamp(last.getTimestamp()+1);
										newCommands.add(rCommnad);
									} 
									newCommands.add(command);
								}
							}
							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						// TODO: handle exception
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",
//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",
//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",
//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <Command __id="862" _type="MoveCaretCommand" caretOffset="1537" date="Tue Feb 02 20:37:20 EST 2021" docOffset="2868" starttimestamp="1612315732965" timestamp="507328" />
  <Command __id="863" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 02 20:37:21 EST 2021" starttimestamp="1612315732965" timestamp="508314" />
  <Command __id="864" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:37:21 EST 2021" starttimestamp="1612315732965" timestamp="508403" />
  <Command __id="865" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:37:21 EST 2021" starttimestamp="1612315732965" timestamp="508532" />
  <DocumentChange __id="866" _type="Delete" date="Tue Feb 02 20:37:24 EST 2021" docASTNodeCount="3487" docActiveCodeLength="21280" docExpressionCount="2376" docLength="22184" endLine="62" length="3" offset="2867" startLine="61" starttimestamp="1612315732965" timestamp="511431">
    <text><![CDATA[	
]]></text>
  </DocumentChange>
  <Command __id="871" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:37:25 EST 2021" docASTNodeCount="477" docActiveCodeLength="3546" docExpressionCount="294" docLength="3618" projectName="Hermes" starttimestamp="1612315732965" timestamp="512942">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\WebCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.TreeMap;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class WebCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_KEYWORD = "keyword";¶	private static final String XML_URL = "URL";¶//	private static final String XML_TITLE = "title";¶	private static final String XML_TYPE = "type";¶	private String keyword, url, type;	"), Diff(INSERT,"¶	private static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",¶			"http://zetcode.com/gfx/java2d/shapesandfills/", ¶			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", ¶			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", ¶			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", ¶			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", ¶			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", ¶			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", ¶			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; "), Diff(EQUAL,"¶¶	public WebCommand() {}¶	¶	public WebCommand(String keyword, String url) {¶		this.keyword = keyword;¶		this.url = url;¶		//this.title = title;¶		type = getType();¶	}¶	¶	private String getType() {¶		"), Diff(INSERT,"for (String providedURL : PROVIDED_URL) {¶			if (url.equals(providedURL)) {¶				return "Instructor Provided Link";¶			}¶		}¶		"), Diff(EQUAL,"if (keyword.contains("Google Search")) {¶			return "Search";¶		}¶		if (keyword.contains("Stack Overflow")) {¶			return "Stack Overflow";¶		}¶		if (keyword.equals(url) && keyword.contains("google.com/url?")) {¶			return "Search Result";¶		}¶		return "Link";¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_TYPE, type);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new HashMap<String, String>();¶		dataMap.put(XML_KEYWORD, keyword);¶		dataMap.put(XML_URL, url);¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "WebCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Web";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			keyword = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			type = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			url = textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import fluorite.model.EHEventRecorder;

public class WebCommand extends AbstractCommand implements EHICommand{
	private static final String XML_KEYWORD = "keyword";
	private static final String XML_URL = "URL";
//	private static final String XML_TITLE = "title";
	private static final String XML_TYPE = "type";
	private String keyword, url, type;	
	private static final String[] PROVIDED_URL = {"http://www.cs.mun.ca/~rod/W12/cs2710/notes/graphics-intro/graphics-intro.html", 
			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/DrawRectangle.htm",
			"http://zetcode.com/gfx/java2d/shapesandfills/", 
			"http://www.tutorialspoint.com/javaexamples/gui_solid.htm", 
			"http://csis.pace.edu/~bergin/mvc/mvcgui.html\r\n", 
			"http://www.java2s.com/Tutorial/Java/0261__2D-Graphics/Fill3DRectangle.htm", 
			"http://www.java-tips.org/java-se-tips/java.awt.event/how-to-use-mouse-events-in-swing.html", 
			"http://php.scripts.psu.edu/djh300/cmpsc221/notes-graphics-intro.php", 
			"http://stackoverflow.com/questions/9333876/how-to-simply-implement-a-keylistener", 
			"http://stackoverflow.com/questions/15103553/difference-between-paint-and-paintcomponent"}; 

	public WebCommand() {}
	
	public WebCommand(String keyword, String url) {
		this.keyword = keyword;
		this.url = url;
		//this.title = title;
		type = getType();
	}
	
	private String getType() {
		for (String providedURL : PROVIDED_URL) {
			if (url.equals(providedURL)) {
				return "Instructor Provided Link";
			}
		}
		if (keyword.contains("Google Search")) {
			return "Search";
		}
		if (keyword.contains("Stack Overflow")) {
			return "Stack Overflow";
		}
		if (keyword.equals(url) && keyword.contains("google.com/url?")) {
			return "Search Result";
		}
		return "Link";
	}
	
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_TYPE, type);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new HashMap<String, String>();
		dataMap.put(XML_KEYWORD, keyword);
		dataMap.put(XML_URL, url);
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "WebCommand";
	}

	@Override
	public String getName() {
		return "Web";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_KEYWORD)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			keyword = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			type = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_URL)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			url = textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="896" _type="MoveCaretCommand" caretOffset="1251" date="Tue Feb 02 20:37:31 EST 2021" docOffset="1489" starttimestamp="1612315732965" timestamp="518067" />
  <Command __id="897" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:37:31 EST 2021" starttimestamp="1612315732965" timestamp="518812" />
  <Command __id="898" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:37:31 EST 2021" starttimestamp="1612315732965" timestamp="518819" />
  <Command __id="899" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:37:31 EST 2021" starttimestamp="1612315732965" timestamp="518820" />
  <Command __id="900" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:37:31 EST 2021" starttimestamp="1612315732965" timestamp="518827" />
  <Command __id="901" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Tue Feb 02 20:37:32 EST 2021" starttimestamp="1612315732965" timestamp="519309" />
  <Command __id="902" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:37:33 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35462" docExpressionCount="4130" docLength="36519" projectName="LogAnalyzer" starttimestamp="1612315732965" timestamp="520930">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	private Analyzer analyzer;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private int count = 0;
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	private static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private static final String XML_FILE_ENDING = "\r\n</Events>"; 
	private int threadCount = 0;
	private CountDownLatch latch;
	private static final int THREAD_LIM = 5;


	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",
//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		latch = new CountDownLatch(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					latch.countDown();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
								return;
							}
							try {
								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}finally {
								// TODO: handle finally clause
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
							}
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
//		return df.format(t/ONE_SECOND);
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			for(int k = 1; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {
//						continue;
//					}
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	protected List<EHICommand> readWebCommands(File file){
		if (!file.exists()) {
			return null;
		}
		List<EHICommand> retVal = new ArrayList<>();
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			String nextLine;
			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss aa");
			Date date;
			String keyword;
			String url;
			WebCommand webCommand;
			while ((nextLine = br.readLine()) != null) {
				try {
					String[] tokens = nextLine.split("\t");
					if (tokens.length >= 3) {
						date = format.parse(tokens[0]);
						keyword = tokens[1];
						url = tokens[2];
						webCommand = new WebCommand(keyword, url);
						webCommand.setStartTimestamp(date.getTime());
						retVal.add(webCommand);
					} else {
						System.out.println("Failed to parse WebCommand");
					}
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return retVal;
	}
	
	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
}
]]></snapshot>
  </Command>
  <Command __id="903" _type="SelectTextCommand" caretOffset="33450" date="Tue Feb 02 20:37:34 EST 2021" end="33450" start="33422" starttimestamp="1612315732965" timestamp="521123" />
  <Command __id="904" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:38:03 EST 2021" docASTNodeCount="3487" docActiveCodeLength="21280" docExpressionCount="2376" docLength="22184" projectName="LogAnalyzer" starttimestamp="1612315732965" timestamp="550721">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 6;¶	¶	"), Diff(DELETE,"¶	"), Diff(EQUAL,"public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands;¶						if (browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶						}¶						for (File file : logs) {¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶									if (rest >= 1*ONE_SECOND) {¶										String range = "";¶										if (rest < 2*ONE_SECOND) {¶											range = "1s-2s";¶										} else if (rest < 5*ONE_SECOND) {¶											range = "2s-5s";¶										} else if (rest < 10*ONE_SECOND) {¶											range = "5s-10s";¶										} else if (rest < 20*ONE_SECOND) {¶											range = "10s-20s";¶										} else if (rest < 30*ONE_SECOND) {¶											range = "20s-30s";¶										} else if (rest < ONE_MIN) {¶											range = "30s-1m";¶										} else if (rest < TWO_MIN) {¶											range = "1m-2m";¶										} else if (rest < FIVE_MIN) {¶											range = "2m-5m";¶										} else if (rest < TEN_MIN) {¶											range = "5m-10m";¶										} else if (rest < 3*TEN_MIN) {¶											range = "10m-30m";¶										} else if (rest < 6*TEN_MIN) {¶											range = "30m-60m";¶										} else {¶											range = ">1h";¶										}¶										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶										rCommnad.setStartTimestamp(last.getStartTimestamp());¶										rCommnad.setTimestamp(last.getTimestamp()+1);¶										newCommands.add(rCommnad);¶									} ¶									newCommands.add(command);¶								}¶							}¶							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								// TODO Auto-generated catch block¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private CountDownLatch latch;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands;
						if (browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
						}
						for (File file : logs) {
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
									if (rest >= 1*ONE_SECOND) {
										String range = "";
										if (rest < 2*ONE_SECOND) {
											range = "1s-2s";
										} else if (rest < 5*ONE_SECOND) {
											range = "2s-5s";
										} else if (rest < 10*ONE_SECOND) {
											range = "5s-10s";
										} else if (rest < 20*ONE_SECOND) {
											range = "10s-20s";
										} else if (rest < 30*ONE_SECOND) {
											range = "20s-30s";
										} else if (rest < ONE_MIN) {
											range = "30s-1m";
										} else if (rest < TWO_MIN) {
											range = "1m-2m";
										} else if (rest < FIVE_MIN) {
											range = "2m-5m";
										} else if (rest < TEN_MIN) {
											range = "5m-10m";
										} else if (rest < 3*TEN_MIN) {
											range = "10m-30m";
										} else if (rest < 6*TEN_MIN) {
											range = "30m-60m";
										} else {
											range = ">1h";
										}
										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
										rCommnad.setStartTimestamp(last.getStartTimestamp());
										rCommnad.setTimestamp(last.getTimestamp()+1);
										newCommands.add(rCommnad);
									} 
									newCommands.add(command);
								}
							}
							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						// TODO: handle exception
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",
//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",
//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",
//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <Command __id="905" _type="MoveCaretCommand" caretOffset="1536" date="Tue Feb 02 20:38:03 EST 2021" docOffset="2867" starttimestamp="1612315732965" timestamp="550856" />
  <Command __id="907" _type="SelectTextCommand" caretOffset="33450" date="Tue Feb 02 20:38:05 EST 2021" end="33450" start="33422" starttimestamp="1612315732965" timestamp="552569" />
  <Command __id="906" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:38:05 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35462" docExpressionCount="4130" docLength="36519" projectName="LogAnalyzer" starttimestamp="1612315732965" timestamp="552406">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		try {¶			BufferedReader br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss aa");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setStartTimestamp(date.getTime());¶						retVal.add(webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="908" _type="MoveCaretCommand" caretOffset="32852" date="Tue Feb 02 20:38:07 EST 2021" docOffset="34546" starttimestamp="1612315732965" timestamp="554102" />
  <Command __id="909" _type="MoveCaretCommand" caretOffset="32807" date="Tue Feb 02 20:38:07 EST 2021" docOffset="34501" starttimestamp="1612315732965" timestamp="554482" />
  <Command __id="910" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Tue Feb 02 20:38:08 EST 2021" starttimestamp="1612315732965" timestamp="555251" />
  <Command __id="912" _type="SelectTextCommand" caretOffset="3014" date="Tue Feb 02 20:38:09 EST 2021" end="3014" start="2975" starttimestamp="1612315732965" timestamp="556840" />
  <Command __id="911" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:38:09 EST 2021" docASTNodeCount="3487" docActiveCodeLength="21280" docExpressionCount="2376" docLength="22184" projectName="LogAnalyzer" starttimestamp="1612315732965" timestamp="556645">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands;¶						if (browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶						}¶						for (File file : logs) {¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶									if (rest >= 1*ONE_SECOND) {¶										String range = "";¶										if (rest < 2*ONE_SECOND) {¶											range = "1s-2s";¶										} else if (rest < 5*ONE_SECOND) {¶											range = "2s-5s";¶										} else if (rest < 10*ONE_SECOND) {¶											range = "5s-10s";¶										} else if (rest < 20*ONE_SECOND) {¶											range = "10s-20s";¶										} else if (rest < 30*ONE_SECOND) {¶											range = "20s-30s";¶										} else if (rest < ONE_MIN) {¶											range = "30s-1m";¶										} else if (rest < TWO_MIN) {¶											range = "1m-2m";¶										} else if (rest < FIVE_MIN) {¶											range = "2m-5m";¶										} else if (rest < TEN_MIN) {¶											range = "5m-10m";¶										} else if (rest < 3*TEN_MIN) {¶											range = "10m-30m";¶										} else if (rest < 6*TEN_MIN) {¶											range = "30m-60m";¶										} else {¶											range = ">1h";¶										}¶										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶										rCommnad.setStartTimestamp(last.getStartTimestamp());¶										rCommnad.setTimestamp(last.getTimestamp()+1);¶										newCommands.add(rCommnad);¶									} ¶									newCommands.add(command);¶								}¶							}¶							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								// TODO Auto-generated catch block¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
  </Command>
  <Command __id="913" _type="MoveCaretCommand" caretOffset="3024" date="Tue Feb 02 20:38:11 EST 2021" docOffset="4355" starttimestamp="1612315732965" timestamp="558571" />
  <Command __id="915" _type="MoveCaretCommand" caretOffset="32807" date="Tue Feb 02 20:38:15 EST 2021" docOffset="34501" starttimestamp="1612315732965" timestamp="562051" />
  <Command __id="916" _type="MoveCaretCommand" caretOffset="33730" date="Tue Feb 02 20:38:29 EST 2021" docOffset="35424" starttimestamp="1612315732965" timestamp="577013" />
  <Command __id="914" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:38:14 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35462" docExpressionCount="4130" docLength="36519" projectName="LogAnalyzer" starttimestamp="1612315732965" timestamp="561863">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		try {¶			BufferedReader br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss aa");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setStartTimestamp(date.getTime());¶						retVal.add(webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="918" _type="Insert" date="Tue Feb 02 20:38:35 EST 2021" docASTNodeCount="6156" docActiveCodeLength="35467" docExpressionCount="4131" docLength="36524" length="5" offset="35625" repeat="5" starttimestamp="1612315732965" timestamp="582422" timestamp2="582921">
    <text><![CDATA[ fian]]></text>
  </DocumentChange>
  <Command __id="917" _type="MoveCaretCommand" caretOffset="33931" date="Tue Feb 02 20:38:34 EST 2021" docOffset="35625" starttimestamp="1612315732965" timestamp="581835" />
  <Command __id="919" _type="InsertStringCommand" date="Tue Feb 02 20:38:35 EST 2021" starttimestamp="1612315732965" timestamp="582427" timestamp2="582427">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="921" _type="InsertStringCommand" date="Tue Feb 02 20:38:35 EST 2021" starttimestamp="1612315732965" timestamp="582648" timestamp2="582648">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="922" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:38:35 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="582689" />
  <Command __id="927" _type="UndoCommand" date="Tue Feb 02 20:38:37 EST 2021" starttimestamp="1612315732965" timestamp="584332" />
  <Command __id="928" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:38:37 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="584897" />
  <Command __id="929" _type="MoveCaretCommand" caretOffset="33717" date="Tue Feb 02 20:38:37 EST 2021" docOffset="35411" starttimestamp="1612315732965" timestamp="584968" />
  <DocumentChange __id="926" _type="Delete" date="Tue Feb 02 20:38:37 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35462" docExpressionCount="4130" docLength="36519" endLine="1028" length="5" offset="35625" startLine="1028" starttimestamp="1612315732965" timestamp="584321">
    <text><![CDATA[ fian]]></text>
  </DocumentChange>
  <Command __id="930" _type="MoveCaretCommand" caretOffset="33730" date="Tue Feb 02 20:38:43 EST 2021" docOffset="35424" starttimestamp="1612315732965" timestamp="590458" />
  <DocumentChange __id="931" _type="Insert" date="Tue Feb 02 20:38:46 EST 2021" docASTNodeCount="6156" docActiveCodeLength="35469" docExpressionCount="4131" docLength="36526" length="7" offset="35424" repeat="3" starttimestamp="1612315732965" timestamp="593848" timestamp2="594550">
    <text><![CDATA[
			br]]></text>
  </DocumentChange>
  <Command __id="932" _type="InsertStringCommand" date="Tue Feb 02 20:38:46 EST 2021" starttimestamp="1612315732965" timestamp="593859" timestamp2="593859">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="934" _type="InsertStringCommand" date="Tue Feb 02 20:38:47 EST 2021" starttimestamp="1612315732965" timestamp="594320" timestamp2="594320">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="935" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:38:47 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="594361" />
  <Command __id="937" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:38:47 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="594641" />
  <DocumentChange __id="938" _type="Replace" date="Tue Feb 02 20:38:47 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35470" docExpressionCount="4130" docLength="36527" endLine="1022" insertionLength="3" int_docASTNodeCount="6154" int_docActiveCodeLength="35467" int_docExpressionCount="4130" int_docLength="36524" length="2" offset="35429" startLine="1022" starttimestamp="1612315732965" timestamp="594650">
    <deletedText><![CDATA[br]]></deletedText>
    <insertedText><![CDATA[br.]]></insertedText>
  </DocumentChange>
  <Command __id="939" _type="InsertStringCommand" date="Tue Feb 02 20:38:47 EST 2021" starttimestamp="1612315732965" timestamp="594658" timestamp2="594658">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="940" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:38:47 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="594709" />
  <DocumentChange __id="941" _type="Insert" date="Tue Feb 02 20:38:48 EST 2021" docASTNodeCount="6158" docActiveCodeLength="35472" docExpressionCount="4133" docLength="36529" length="2" offset="35432" repeat="2" starttimestamp="1612315732965" timestamp="595258" timestamp2="595450">
    <text><![CDATA[cl]]></text>
  </DocumentChange>
  <Command __id="943" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:38:48 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="595764" />
  <Command __id="945" _type="InsertStringCommand" date="Tue Feb 02 20:38:48 EST 2021" starttimestamp="1612315732965" timestamp="595790" timestamp2="595790">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="946" _type="InsertStringCommand" date="Tue Feb 02 20:38:49 EST 2021" starttimestamp="1612315732965" timestamp="596221" timestamp2="596221">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="947" _type="MoveCaretCommand" caretOffset="33947" date="Tue Feb 02 20:38:52 EST 2021" docOffset="35641" starttimestamp="1612315732965" timestamp="599159" />
  <DocumentChange __id="944" _type="Replace" date="Tue Feb 02 20:38:48 EST 2021" docASTNodeCount="6158" docActiveCodeLength="35478" docExpressionCount="4133" docLength="36535" endLine="1022" insertionLength="8" int_docASTNodeCount="6154" int_docActiveCodeLength="35470" int_docExpressionCount="4130" int_docLength="36527" length="2" offset="35432" startLine="1022" starttimestamp="1612315732965" timestamp="595779">
    <deletedText><![CDATA[cl]]></deletedText>
    <insertedText><![CDATA[close();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="951" _type="Delete" date="Tue Feb 02 20:38:55 EST 2021" docASTNodeCount="6146" docActiveCodeLength="35412" docExpressionCount="4126" docLength="36469" endLine="998" length="66" offset="34627" startLine="997" starttimestamp="1612315732965" timestamp="602247">
    <text><![CDATA[			BufferedReader br = new BufferedReader(new FileReader(file));
]]></text>
  </DocumentChange>
  <DocumentChange __id="954" _type="Insert" date="Tue Feb 02 20:38:56 EST 2021" docASTNodeCount="6146" docActiveCodeLength="35416" docExpressionCount="4126" docLength="36473" length="4" offset="34616" starttimestamp="1612315732965" timestamp="603280">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="956" _type="Replace" date="Tue Feb 02 20:38:56 EST 2021" docASTNodeCount="6158" docActiveCodeLength="35479" docExpressionCount="4133" docLength="36536" endLine="996" insertionLength="65" int_docASTNodeCount="6146" int_docActiveCodeLength="35414" int_docExpressionCount="4126" int_docLength="36471" length="2" offset="34618" startLine="996" starttimestamp="1612315732965" timestamp="603578">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		BufferedReader br = new BufferedReader(new FileReader(file));
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="958" _type="Delete" date="Tue Feb 02 20:38:56 EST 2021" docASTNodeCount="6158" docActiveCodeLength="35477" docExpressionCount="4133" docLength="36534" endLine="998" length="2" offset="34683" startLine="997" starttimestamp="1612315732965" timestamp="604014">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="960" _type="Insert" date="Tue Feb 02 20:39:00 EST 2021" docASTNodeCount="6158" docActiveCodeLength="35479" docExpressionCount="4133" docLength="36536" length="2" offset="34683" starttimestamp="1612315732965" timestamp="607174">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="962" _type="Replace" date="Tue Feb 02 20:39:00 EST 2021" docASTNodeCount="6146" docActiveCodeLength="35416" docExpressionCount="4126" docLength="36473" endLine="997" insertionLength="2" int_docASTNodeCount="6146" int_docActiveCodeLength="35414" int_docExpressionCount="4126" int_docLength="36471" length="65" offset="34618" startLine="996" starttimestamp="1612315732965" timestamp="607525">
    <deletedText><![CDATA[		BufferedReader br = new BufferedReader(new FileReader(file));
]]></deletedText>
    <insertedText><![CDATA[		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="964" _type="Delete" date="Tue Feb 02 20:39:00 EST 2021" docASTNodeCount="6146" docActiveCodeLength="35412" docExpressionCount="4126" docLength="36469" endLine="996" length="4" offset="34616" startLine="995" starttimestamp="1612315732965" timestamp="607678">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="948" _type="MoveCaretCommand" caretOffset="32952" date="Tue Feb 02 20:38:54 EST 2021" docOffset="34646" starttimestamp="1612315732965" timestamp="601658" />
  <Command __id="949" _type="SelectTextCommand" caretOffset="32953" date="Tue Feb 02 20:38:54 EST 2021" end="32953" start="32951" starttimestamp="1612315732965" timestamp="601806" />
  <Command __id="950" _type="SelectTextCommand" caretOffset="32999" date="Tue Feb 02 20:38:54 EST 2021" end="32999" start="32933" starttimestamp="1612315732965" timestamp="601957" />
  <Command __id="952" _type="CutCommand" date="Tue Feb 02 20:38:55 EST 2021" starttimestamp="1612315732965" timestamp="602273" />
  <Command __id="953" _type="MoveCaretCommand" caretOffset="32922" date="Tue Feb 02 20:38:55 EST 2021" docOffset="34616" starttimestamp="1612315732965" timestamp="602624" />
  <Command __id="955" _type="InsertStringCommand" date="Tue Feb 02 20:38:56 EST 2021" starttimestamp="1612315732965" timestamp="603293" timestamp2="603293">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="957" _type="PasteCommand" date="Tue Feb 02 20:38:56 EST 2021" starttimestamp="1612315732965" timestamp="603590" />
  <Command __id="959" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 02 20:38:56 EST 2021" starttimestamp="1612315732965" timestamp="604016" />
  <Command __id="961" _type="UndoCommand" date="Tue Feb 02 20:39:00 EST 2021" starttimestamp="1612315732965" timestamp="607180" />
  <Command __id="963" _type="UndoCommand" date="Tue Feb 02 20:39:00 EST 2021" starttimestamp="1612315732965" timestamp="607547" />
  <Command __id="965" _type="UndoCommand" date="Tue Feb 02 20:39:00 EST 2021" starttimestamp="1612315732965" timestamp="607689" />
  <Command __id="967" _type="RedoCommand" date="Tue Feb 02 20:39:02 EST 2021" starttimestamp="1612315732965" timestamp="609476" />
  <Command __id="969" _type="RedoCommand" date="Tue Feb 02 20:39:02 EST 2021" starttimestamp="1612315732965" timestamp="609679" />
  <Command __id="970" _type="MoveCaretCommand" caretOffset="32945" date="Tue Feb 02 20:39:03 EST 2021" docOffset="34639" starttimestamp="1612315732965" timestamp="610439" />
  <DocumentChange __id="966" _type="Insert" date="Tue Feb 02 20:39:02 EST 2021" docASTNodeCount="6146" docActiveCodeLength="35416" docExpressionCount="4126" docLength="36473" length="4" offset="34616" starttimestamp="1612315732965" timestamp="609471">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="968" _type="Replace" date="Tue Feb 02 20:39:02 EST 2021" docASTNodeCount="6158" docActiveCodeLength="35479" docExpressionCount="4133" docLength="36536" endLine="996" insertionLength="65" int_docASTNodeCount="6146" int_docActiveCodeLength="35414" int_docExpressionCount="4126" int_docLength="36471" length="2" offset="34618" startLine="996" starttimestamp="1612315732965" timestamp="609664">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		BufferedReader br = new BufferedReader(new FileReader(file));
]]></insertedText>
  </DocumentChange>
  <Command __id="971" _type="SelectTextCommand" caretOffset="32987" date="Tue Feb 02 20:39:04 EST 2021" end="32987" start="32944" starttimestamp="1612315732965" timestamp="611962" />
  <DocumentChange __id="972" _type="Delete" date="Tue Feb 02 20:39:07 EST 2021" docASTNodeCount="6151" docActiveCodeLength="35435" docExpressionCount="4128" docLength="36492" endLine="996" length="44" offset="34637" repeat="2" startLine="996" starttimestamp="1612315732965" timestamp="614267" timestamp2="614835">
    <text><![CDATA[ = new BufferedReader(new FileReader(file));]]></text>
  </DocumentChange>
  <Command __id="973" _type="CutCommand" date="Tue Feb 02 20:39:07 EST 2021" starttimestamp="1612315732965" timestamp="614276" />
  <Command __id="975" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:39:07 EST 2021" starttimestamp="1612315732965" timestamp="614842" />
  <Command __id="977" _type="InsertStringCommand" date="Tue Feb 02 20:39:08 EST 2021" starttimestamp="1612315732965" timestamp="615095" timestamp2="615095">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="976" _type="Insert" date="Tue Feb 02 20:39:08 EST 2021" docASTNodeCount="6151" docActiveCodeLength="35436" docExpressionCount="4128" docLength="36493" length="1" offset="34637" starttimestamp="1612315732965" timestamp="615091">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="979" _type="Delete" date="Tue Feb 02 20:39:09 EST 2021" docASTNodeCount="6151" docActiveCodeLength="35434" docExpressionCount="4128" docLength="36491" endLine="998" length="2" offset="34640" startLine="997" starttimestamp="1612315732965" timestamp="616942">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="982" _type="Insert" date="Tue Feb 02 20:39:11 EST 2021" docASTNodeCount="6161" docActiveCodeLength="35487" docExpressionCount="4135" docLength="36544" length="53" offset="34647" repeat="7" starttimestamp="1612315732965" timestamp="618387" timestamp2="620399">
    <text><![CDATA[
			br = = new BufferedReader(new FileReader(file));]]></text>
  </DocumentChange>
  <Command __id="978" _type="MoveCaretCommand" caretOffset="32946" date="Tue Feb 02 20:39:09 EST 2021" docOffset="34640" starttimestamp="1612315732965" timestamp="616762" />
  <Command __id="980" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 02 20:39:09 EST 2021" starttimestamp="1612315732965" timestamp="616944" />
  <Command __id="981" _type="MoveCaretCommand" caretOffset="32953" date="Tue Feb 02 20:39:10 EST 2021" docOffset="34647" starttimestamp="1612315732965" timestamp="617710" />
  <Command __id="983" _type="InsertStringCommand" date="Tue Feb 02 20:39:11 EST 2021" starttimestamp="1612315732965" timestamp="618399" timestamp2="618399">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="985" _type="InsertStringCommand" date="Tue Feb 02 20:39:11 EST 2021" starttimestamp="1612315732965" timestamp="618548" timestamp2="618548">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="986" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:39:11 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="618590" />
  <Command __id="988" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:39:12 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="619330" />
  <Command __id="989" _type="InsertStringCommand" date="Tue Feb 02 20:39:12 EST 2021" starttimestamp="1612315732965" timestamp="619335" timestamp2="619335">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="991" _type="InsertStringCommand" date="Tue Feb 02 20:39:12 EST 2021" starttimestamp="1612315732965" timestamp="619649" timestamp2="619649">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="993" _type="InsertStringCommand" date="Tue Feb 02 20:39:12 EST 2021" starttimestamp="1612315732965" timestamp="619758" timestamp2="619758">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="995" _type="InsertStringCommand" date="Tue Feb 02 20:39:12 EST 2021" starttimestamp="1612315732965" timestamp="619850" timestamp2="619850">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="997" _type="PasteCommand" date="Tue Feb 02 20:39:13 EST 2021" starttimestamp="1612315732965" timestamp="620406" />
  <Command __id="999" _type="UndoCommand" date="Tue Feb 02 20:39:14 EST 2021" starttimestamp="1612315732965" timestamp="621693" />
  <Command __id="1001" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:39:15 EST 2021" starttimestamp="1612315732965" timestamp="622285" />
  <Command __id="1003" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:39:15 EST 2021" starttimestamp="1612315732965" timestamp="622412" />
  <Command __id="1005" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:39:15 EST 2021" starttimestamp="1612315732965" timestamp="622533" />
  <Command __id="1007" _type="InsertStringCommand" date="Tue Feb 02 20:39:16 EST 2021" starttimestamp="1612315732965" timestamp="623080" timestamp2="623080">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1009" _type="PasteCommand" date="Tue Feb 02 20:39:16 EST 2021" starttimestamp="1612315732965" timestamp="623337" />
  <Command __id="1010" _type="MoveCaretCommand" caretOffset="33749" date="Tue Feb 02 20:39:19 EST 2021" docOffset="35443" starttimestamp="1612315732965" timestamp="626539" />
  <Command __id="1011" _type="SelectTextCommand" caretOffset="33750" date="Tue Feb 02 20:39:19 EST 2021" end="33750" start="33745" starttimestamp="1612315732965" timestamp="626706" />
  <Command __id="1012" _type="SelectTextCommand" caretOffset="33755" date="Tue Feb 02 20:39:19 EST 2021" end="33755" start="33739" starttimestamp="1612315732965" timestamp="626848" />
  <Command __id="1014" _type="CutCommand" date="Tue Feb 02 20:39:20 EST 2021" starttimestamp="1612315732965" timestamp="627117" />
  <Command __id="1015" _type="MoveCaretCommand" caretOffset="33916" date="Tue Feb 02 20:39:20 EST 2021" docOffset="35610" starttimestamp="1612315732965" timestamp="627719" />
  <Command __id="1016" _type="MoveCaretCommand" caretOffset="33938" date="Tue Feb 02 20:39:22 EST 2021" docOffset="35632" starttimestamp="1612315732965" timestamp="629072" />
  <Command __id="1018" _type="InsertStringCommand" date="Tue Feb 02 20:39:22 EST 2021" starttimestamp="1612315732965" timestamp="629378" timestamp2="629378">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1020" _type="InsertStringCommand" date="Tue Feb 02 20:39:22 EST 2021" starttimestamp="1612315732965" timestamp="629697" timestamp2="629697">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1021" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:39:22 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="629739" />
  <Command __id="1028" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:39:24 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="631518" />
  <Command __id="1030" _type="InsertStringCommand" date="Tue Feb 02 20:39:24 EST 2021" starttimestamp="1612315732965" timestamp="631549" timestamp2="631549">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1032" _type="PasteCommand" date="Tue Feb 02 20:39:25 EST 2021" starttimestamp="1612315732965" timestamp="632320" />
  <Command __id="1034" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 02 20:39:26 EST 2021" starttimestamp="1612315732965" timestamp="633295" />
  <Command __id="1035" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:39:26 EST 2021" starttimestamp="1612315732965" timestamp="633621" />
  <Command __id="1036" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:39:27 EST 2021" starttimestamp="1612315732965" timestamp="634369" />
  <Command __id="1037" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 02 20:39:27 EST 2021" starttimestamp="1612315732965" timestamp="634552" />
  <Command __id="1039" _type="InsertStringCommand" date="Tue Feb 02 20:39:27 EST 2021" starttimestamp="1612315732965" timestamp="634700" timestamp2="634700">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1041" _type="InsertStringCommand" date="Tue Feb 02 20:39:28 EST 2021" starttimestamp="1612315732965" timestamp="635311" timestamp2="635311">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1042" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:39:28 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="635350" />
  <Command __id="1044" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:39:28 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="635539" />
  <Command __id="1046" _type="InsertStringCommand" date="Tue Feb 02 20:39:28 EST 2021" starttimestamp="1612315732965" timestamp="635718" timestamp2="635718">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1048" _type="InsertStringCommand" date="Tue Feb 02 20:39:29 EST 2021" starttimestamp="1612315732965" timestamp="636228" timestamp2="636228">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1049" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:39:29 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="636262" />
  <Command __id="1051" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:39:29 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="636530" />
  <Command __id="1053" _type="InsertStringCommand" date="Tue Feb 02 20:39:29 EST 2021" starttimestamp="1612315732965" timestamp="636545" timestamp2="636545">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1054" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:39:29 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="636597" />
  <Command __id="1056" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:39:30 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="637341" />
  <Command __id="1058" _type="InsertStringCommand" date="Tue Feb 02 20:39:30 EST 2021" starttimestamp="1612315732965" timestamp="637362" timestamp2="637362">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1060" _type="InsertStringCommand" date="Tue Feb 02 20:39:30 EST 2021" starttimestamp="1612315732965" timestamp="637494" timestamp2="637494">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1062" _type="InsertStringCommand" date="Tue Feb 02 20:39:30 EST 2021" starttimestamp="1612315732965" timestamp="637634" timestamp2="637634">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1064" _type="InsertStringCommand" date="Tue Feb 02 20:39:30 EST 2021" starttimestamp="1612315732965" timestamp="637738" timestamp2="637738">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1066" _type="InsertStringCommand" date="Tue Feb 02 20:39:30 EST 2021" starttimestamp="1612315732965" timestamp="638031" timestamp2="638031">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1067" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:39:31 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="638071" />
  <Command __id="1071" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:39:31 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="638774" />
  <Command __id="1072" _type="InsertStringCommand" date="Tue Feb 02 20:39:31 EST 2021" starttimestamp="1612315732965" timestamp="638777" timestamp2="638777">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1073" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 02 20:39:32 EST 2021" starttimestamp="1612315732965" timestamp="639460" />
  <Command __id="1074" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 02 20:39:32 EST 2021" starttimestamp="1612315732965" timestamp="639585" />
  <Command __id="1076" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 02 20:39:33 EST 2021" starttimestamp="1612315732965" timestamp="640040" />
  <Command __id="1078" _type="InsertStringCommand" date="Tue Feb 02 20:39:33 EST 2021" starttimestamp="1612315732965" timestamp="640187" timestamp2="640187">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="1079" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 02 20:39:33 EST 2021" starttimestamp="1612315732965" timestamp="640514" />
  <Command __id="1080" _type="MoveCaretCommand" caretOffset="32943" date="Tue Feb 02 20:39:40 EST 2021" docOffset="34637" starttimestamp="1612315732965" timestamp="647257" />
  <Command __id="1082" _type="InsertStringCommand" date="Tue Feb 02 20:39:40 EST 2021" starttimestamp="1612315732965" timestamp="647502" timestamp2="647502">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1084" _type="InsertStringCommand" date="Tue Feb 02 20:39:40 EST 2021" starttimestamp="1612315732965" timestamp="647860" timestamp2="647860">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1086" _type="InsertStringCommand" date="Tue Feb 02 20:39:40 EST 2021" starttimestamp="1612315732965" timestamp="647968" timestamp2="647968">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1088" _type="InsertStringCommand" date="Tue Feb 02 20:39:41 EST 2021" starttimestamp="1612315732965" timestamp="648159" timestamp2="648159">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1089" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:39:41 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="648203" />
  <Command __id="1093" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:39:42 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="649443" />
  <Command __id="1094" _type="MoveCaretCommand" caretOffset="32740" date="Tue Feb 02 20:39:42 EST 2021" docOffset="34434" starttimestamp="1612315732965" timestamp="649532" />
  <Command __id="1095" _type="MoveCaretCommand" caretOffset="33996" date="Tue Feb 02 20:39:44 EST 2021" docOffset="35690" starttimestamp="1612315732965" timestamp="651782" />
  <Command __id="1096" _type="SelectTextCommand" caretOffset="33996" date="Tue Feb 02 20:39:44 EST 2021" end="33996" start="33994" starttimestamp="1612315732965" timestamp="651935" />
  <Command __id="1097" _type="SelectTextCommand" caretOffset="34007" date="Tue Feb 02 20:39:45 EST 2021" end="34007" start="33991" starttimestamp="1612315732965" timestamp="652077" />
  <Command __id="1099" _type="CutCommand" date="Tue Feb 02 20:39:45 EST 2021" starttimestamp="1612315732965" timestamp="652217" />
  <Command __id="1100" _type="MoveCaretCommand" caretOffset="33966" date="Tue Feb 02 20:39:45 EST 2021" docOffset="35660" starttimestamp="1612315732965" timestamp="652472" />
  <Command __id="1101" _type="MoveCaretCommand" caretOffset="33983" date="Tue Feb 02 20:39:45 EST 2021" docOffset="35677" starttimestamp="1612315732965" timestamp="652831" />
  <Command __id="1103" _type="PasteCommand" date="Tue Feb 02 20:39:46 EST 2021" starttimestamp="1612315732965" timestamp="653105" />
  <Command __id="1105" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 02 20:39:46 EST 2021" starttimestamp="1612315732965" timestamp="653468" />
  <Command __id="1106" _type="MoveCaretCommand" caretOffset="33994" date="Tue Feb 02 20:39:47 EST 2021" docOffset="35688" starttimestamp="1612315732965" timestamp="654038" />
  <Command __id="1107" _type="ShellCommand" date="Tue Feb 02 20:39:53 EST 2021" starttimestamp="1612315732965" timestamp="660165" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1108" _type="ShellCommand" date="Tue Feb 02 20:39:53 EST 2021" starttimestamp="1612315732965" timestamp="660298" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1119" _type="MoveCaretCommand" caretOffset="34112" date="Tue Feb 02 20:39:54 EST 2021" docOffset="35806" starttimestamp="1612315732965" timestamp="661435" />
  <Command __id="1120" _type="MoveCaretCommand" caretOffset="33988" date="Tue Feb 02 20:39:55 EST 2021" docOffset="35682" starttimestamp="1612315732965" timestamp="662516" />
  <Command __id="1121" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 02 20:39:56 EST 2021" starttimestamp="1612315732965" timestamp="663274" />
  <Command __id="1122" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:39:56 EST 2021" starttimestamp="1612315732965" timestamp="663364" />
  <Command __id="1123" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:39:56 EST 2021" starttimestamp="1612315732965" timestamp="663507" />
  <Command __id="1124" _type="ShellCommand" date="Tue Feb 02 20:40:05 EST 2021" starttimestamp="1612315732965" timestamp="672935" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1125" _type="ShellCommand" date="Tue Feb 02 20:40:08 EST 2021" starttimestamp="1612315732965" timestamp="675196" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1126" _type="MoveCaretCommand" caretOffset="33940" date="Tue Feb 02 20:40:08 EST 2021" docOffset="35634" starttimestamp="1612315732965" timestamp="675617" />
  <Command __id="1127" _type="ShellCommand" date="Tue Feb 02 20:40:11 EST 2021" starttimestamp="1612315732965" timestamp="678447" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="998" _type="Delete" date="Tue Feb 02 20:39:14 EST 2021" docASTNodeCount="6151" docActiveCodeLength="35441" docExpressionCount="4128" docLength="36498" endLine="998" length="46" offset="34654" repeat="4" startLine="998" starttimestamp="1612315732965" timestamp="621687" timestamp2="622531">
    <text><![CDATA[ = = new BufferedReader(new FileReader(file));]]></text>
  </DocumentChange>
  <DocumentChange __id="1006" _type="Insert" date="Tue Feb 02 20:39:16 EST 2021" docASTNodeCount="6161" docActiveCodeLength="35485" docExpressionCount="4135" docLength="36542" length="44" offset="34654" repeat="2" starttimestamp="1612315732965" timestamp="623074" timestamp2="623331">
    <text><![CDATA[ = new BufferedReader(new FileReader(file));]]></text>
  </DocumentChange>
  <DocumentChange __id="1013" _type="Delete" date="Tue Feb 02 20:39:20 EST 2021" docASTNodeCount="6157" docActiveCodeLength="35469" docExpressionCount="4132" docLength="36526" endLine="1024" length="16" offset="35433" startLine="1023" starttimestamp="1612315732965" timestamp="627097">
    <text><![CDATA[			br.close();
]]></text>
  </DocumentChange>
  <DocumentChange __id="1017" _type="Insert" date="Tue Feb 02 20:39:22 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35477" docExpressionCount="4131" docLength="36534" length="8" offset="35632" repeat="8" starttimestamp="1612315732965" timestamp="629373" timestamp2="630715">
    <text><![CDATA[ finally]]></text>
  </DocumentChange>
  <DocumentChange __id="1029" _type="Replace" date="Tue Feb 02 20:39:24 EST 2021" docASTNodeCount="6158" docActiveCodeLength="35489" docExpressionCount="4132" docLength="36546" endLine="1029" insertionLength="19" int_docASTNodeCount="6157" int_docActiveCodeLength="35470" int_docExpressionCount="4132" int_docLength="36527" length="7" offset="35633" startLine="1029" starttimestamp="1612315732965" timestamp="631536">
    <deletedText><![CDATA[finally]]></deletedText>
    <insertedText><![CDATA[finally {
			
		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1031" _type="Replace" date="Tue Feb 02 20:39:25 EST 2021" docASTNodeCount="6162" docActiveCodeLength="35502" docExpressionCount="4135" docLength="36559" endLine="1030" insertionLength="16" int_docASTNodeCount="6158" int_docActiveCodeLength="35486" int_docExpressionCount="4132" int_docLength="36543" length="3" offset="35644" startLine="1030" starttimestamp="1612315732965" timestamp="632310">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			br.close();
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1033" _type="Delete" date="Tue Feb 02 20:39:26 EST 2021" docASTNodeCount="6162" docActiveCodeLength="35500" docExpressionCount="4135" docLength="36557" endLine="1032" length="2" offset="35660" startLine="1031" starttimestamp="1612315732965" timestamp="633288">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="1038" _type="Insert" date="Tue Feb 02 20:39:27 EST 2021" docASTNodeCount="6162" docActiveCodeLength="35507" docExpressionCount="4135" docLength="36564" length="7" offset="35642" repeat="3" starttimestamp="1612315732965" timestamp="634690" timestamp2="635527">
    <text><![CDATA[
			if]]></text>
  </DocumentChange>
  <DocumentChange __id="1045" _type="Replace" date="Tue Feb 02 20:39:28 EST 2021" docASTNodeCount="6165" docActiveCodeLength="35546" docExpressionCount="4136" docLength="36603" endLine="1030" insertionLength="41" int_docASTNodeCount="6162" int_docActiveCodeLength="35505" int_docExpressionCount="4135" int_docLength="36562" length="2" offset="35647" startLine="1030" starttimestamp="1612315732965" timestamp="635659">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
				
			}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1047" _type="Replace" date="Tue Feb 02 20:39:29 EST 2021" docASTNodeCount="6165" docActiveCodeLength="35525" docExpressionCount="4136" docLength="36582" endLine="1030" insertionLength="1" int_docASTNodeCount="6165" int_docActiveCodeLength="35524" int_docExpressionCount="4136" int_docLength="36581" length="22" offset="35651" startLine="1030" starttimestamp="1612315732965" timestamp="636219">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[b]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1050" _type="Insert" date="Tue Feb 02 20:39:29 EST 2021" docASTNodeCount="6165" docActiveCodeLength="35526" docExpressionCount="4136" docLength="36583" length="1" offset="35652" starttimestamp="1612315732965" timestamp="636440">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1052" _type="Replace" date="Tue Feb 02 20:39:29 EST 2021" docASTNodeCount="6167" docActiveCodeLength="35527" docExpressionCount="4137" docLength="36584" endLine="1030" insertionLength="3" int_docASTNodeCount="6165" int_docActiveCodeLength="35524" int_docExpressionCount="4136" int_docLength="36581" length="2" offset="35651" startLine="1030" starttimestamp="1612315732965" timestamp="636539">
    <deletedText><![CDATA[br]]></deletedText>
    <insertedText><![CDATA[br.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1055" _type="Delete" date="Tue Feb 02 20:39:30 EST 2021" docASTNodeCount="6165" docActiveCodeLength="35526" docExpressionCount="4136" docLength="36583" endLine="1030" length="1" offset="35653" startLine="1030" starttimestamp="1612315732965" timestamp="637218">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1057" _type="Replace" date="Tue Feb 02 20:39:30 EST 2021" docASTNodeCount="6165" docActiveCodeLength="35527" docExpressionCount="4136" docLength="36584" endLine="1030" insertionLength="3" int_docASTNodeCount="6165" int_docActiveCodeLength="35524" int_docExpressionCount="4136" int_docLength="36581" length="2" offset="35651" startLine="1030" starttimestamp="1612315732965" timestamp="637350">
    <deletedText><![CDATA[br]]></deletedText>
    <insertedText><![CDATA[br ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1059" _type="Insert" date="Tue Feb 02 20:39:30 EST 2021" docASTNodeCount="6167" docActiveCodeLength="35534" docExpressionCount="4138" docLength="36591" length="7" offset="35654" repeat="7" starttimestamp="1612315732965" timestamp="637493" timestamp2="638538">
    <text><![CDATA[== null]]></text>
  </DocumentChange>
  <DocumentChange __id="1075" _type="Delete" date="Tue Feb 02 20:39:33 EST 2021" docASTNodeCount="6167" docActiveCodeLength="35533" docExpressionCount="4138" docLength="36590" endLine="1030" length="1" offset="35654" startLine="1030" starttimestamp="1612315732965" timestamp="640036">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="1077" _type="Insert" date="Tue Feb 02 20:39:33 EST 2021" docASTNodeCount="6167" docActiveCodeLength="35534" docExpressionCount="4138" docLength="36591" length="1" offset="35654" starttimestamp="1612315732965" timestamp="640185">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="1081" _type="Insert" date="Tue Feb 02 20:39:40 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35541" docExpressionCount="4139" docLength="36598" length="7" offset="34637" repeat="7" starttimestamp="1612315732965" timestamp="647494" timestamp2="648539">
    <text><![CDATA[ = null]]></text>
  </DocumentChange>
  <DocumentChange __id="1098" _type="Delete" date="Tue Feb 02 20:39:45 EST 2021" docASTNodeCount="6164" docActiveCodeLength="35525" docExpressionCount="4136" docLength="36582" endLine="1034" length="16" offset="35685" startLine="1033" starttimestamp="1612315732965" timestamp="652208">
    <text><![CDATA[			br.close();
]]></text>
  </DocumentChange>
  <DocumentChange __id="1102" _type="Replace" date="Tue Feb 02 20:39:46 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35538" docExpressionCount="4139" docLength="36595" endLine="1031" insertionLength="17" int_docASTNodeCount="6164" int_docActiveCodeLength="35521" int_docExpressionCount="4136" int_docLength="36578" length="4" offset="35673" startLine="1031" starttimestamp="1612315732965" timestamp="653095">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[				br.close();
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1104" _type="Delete" date="Tue Feb 02 20:39:46 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35536" docExpressionCount="4139" docLength="36593" endLine="1033" length="2" offset="35690" startLine="1032" starttimestamp="1612315732965" timestamp="653465">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="1109" _type="Delete" date="Tue Feb 02 20:39:53 EST 2021" docASTNodeCount="6164" docActiveCodeLength="35525" docExpressionCount="4136" docLength="36582" endLine="1031" length="11" offset="35677" startLine="1031" starttimestamp="1612315732965" timestamp="660371">
    <text><![CDATA[br.close();]]></text>
  </DocumentChange>
  <DocumentChange __id="1110" _type="Insert" date="Tue Feb 02 20:39:53 EST 2021" docASTNodeCount="6180" docActiveCodeLength="35620" docExpressionCount="4144" docLength="36711" length="129" offset="35677" repeat="9" starttimestamp="1612315732965" timestamp="660378" timestamp2="660427">
    <text><![CDATA[try {
					br.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}]]></text>
  </DocumentChange>
  <Command __id="1128" _type="ShellCommand" date="Tue Feb 02 20:40:13 EST 2021" starttimestamp="1612315732965" timestamp="680597" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1129" _type="MoveCaretCommand" caretOffset="33955" date="Tue Feb 02 20:40:13 EST 2021" docOffset="35649" starttimestamp="1612315732965" timestamp="680920" />
  <Command __id="1131" _type="MoveCaretCommand" caretOffset="3024" date="Tue Feb 02 20:40:15 EST 2021" docOffset="4355" starttimestamp="1612315732965" timestamp="682420" />
  <Command __id="1132" _type="MoveCaretCommand" caretOffset="3492" date="Tue Feb 02 20:41:32 EST 2021" docOffset="4823" starttimestamp="1612315732965" timestamp="759102" />
  <Command __id="1133" _type="MoveCaretCommand" caretOffset="3472" date="Tue Feb 02 20:41:32 EST 2021" docOffset="4803" starttimestamp="1612315732965" timestamp="759576" />
  <Command __id="1134" _type="SelectTextCommand" caretOffset="3494" date="Tue Feb 02 20:41:46 EST 2021" end="3494" start="3483" starttimestamp="1612315732965" timestamp="773193" />
  <Command __id="1135" _type="MoveCaretCommand" caretOffset="3494" date="Tue Feb 02 20:41:46 EST 2021" docOffset="4825" starttimestamp="1612315732965" timestamp="773537" />
  <Command __id="1136" _type="MoveCaretCommand" caretOffset="3472" date="Tue Feb 02 20:42:04 EST 2021" docOffset="4803" starttimestamp="1612315732965" timestamp="791456" />
  <Command __id="1137" _type="MoveCaretCommand" caretOffset="3519" date="Tue Feb 02 20:42:13 EST 2021" docOffset="4850" starttimestamp="1612315732965" timestamp="800594" />
  <Command __id="1138" _type="MoveCaretCommand" caretOffset="3544" date="Tue Feb 02 20:42:14 EST 2021" docOffset="4875" starttimestamp="1612315732965" timestamp="801135" />
  <Command __id="1139" _type="MoveCaretCommand" caretOffset="6491" date="Tue Feb 02 20:42:49 EST 2021" docOffset="7822" starttimestamp="1612315732965" timestamp="836513" />
  <Command __id="1140" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.folding.collapse_all" date="Tue Feb 02 20:43:00 EST 2021" starttimestamp="1612315732965" timestamp="847047" />
  <Command __id="1130" _type="DiffBasedFileOpenCommand" date="Tue Feb 02 20:40:15 EST 2021" docASTNodeCount="3487" docActiveCodeLength="21280" docExpressionCount="2376" docLength="22184" projectName="LogAnalyzer" starttimestamp="1612315732965" timestamp="682274">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands;¶						if (browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶						}¶						for (File file : logs) {¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶									if (rest >= 1*ONE_SECOND) {¶										String range = "";¶										if (rest < 2*ONE_SECOND) {¶											range = "1s-2s";¶										} else if (rest < 5*ONE_SECOND) {¶											range = "2s-5s";¶										} else if (rest < 10*ONE_SECOND) {¶											range = "5s-10s";¶										} else if (rest < 20*ONE_SECOND) {¶											range = "10s-20s";¶										} else if (rest < 30*ONE_SECOND) {¶											range = "20s-30s";¶										} else if (rest < ONE_MIN) {¶											range = "30s-1m";¶										} else if (rest < TWO_MIN) {¶											range = "1m-2m";¶										} else if (rest < FIVE_MIN) {¶											range = "2m-5m";¶										} else if (rest < TEN_MIN) {¶											range = "5m-10m";¶										} else if (rest < 3*TEN_MIN) {¶											range = "10m-30m";¶										} else if (rest < 6*TEN_MIN) {¶											range = "30m-60m";¶										} else {¶											range = ">1h";¶										}¶										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶										rCommnad.setStartTimestamp(last.getStartTimestamp());¶										rCommnad.setTimestamp(last.getTimestamp()+1);¶										newCommands.add(rCommnad);¶									} ¶									newCommands.add(command);¶								}¶							}¶							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								// TODO Auto-generated catch block¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1141" _type="MoveCaretCommand" caretOffset="2270" date="Tue Feb 02 20:43:01 EST 2021" docOffset="22179" starttimestamp="1612315732965" timestamp="848547" />
  <DocumentChange __id="1142" _type="Insert" date="Tue Feb 02 20:43:02 EST 2021" docASTNodeCount="3487" docActiveCodeLength="21300" docExpressionCount="2376" docLength="22204" length="20" offset="22179" repeat="16" starttimestamp="1612315732965" timestamp="849292" timestamp2="852784">
    <text><![CDATA[
	private static
	]]></text>
  </DocumentChange>
  <Command __id="1143" _type="InsertStringCommand" date="Tue Feb 02 20:43:02 EST 2021" starttimestamp="1612315732965" timestamp="849300" timestamp2="849300">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1145" _type="InsertStringCommand" date="Tue Feb 02 20:43:02 EST 2021" starttimestamp="1612315732965" timestamp="849415" timestamp2="849415">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1146" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:43:02 EST 2021" starttimestamp="1612315732965" timestamp="850006" />
  <Command __id="1148" _type="InsertStringCommand" date="Tue Feb 02 20:43:04 EST 2021" starttimestamp="1612315732965" timestamp="851409" timestamp2="851409">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1149" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:04 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="851475" />
  <Command __id="1157" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:05 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="852040" />
  <Command __id="1159" _type="InsertStringCommand" date="Tue Feb 02 20:43:05 EST 2021" starttimestamp="1612315732965" timestamp="852211" timestamp2="852211">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1160" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:05 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="852253" />
  <DocumentChange __id="1166" _type="Delete" date="Tue Feb 02 20:43:06 EST 2021" docASTNodeCount="3487" docActiveCodeLength="21294" docExpressionCount="2376" docLength="22198" endLine="604" length="6" offset="22190" startLine="604" starttimestamp="1612315732965" timestamp="853103">
    <text><![CDATA[static]]></text>
  </DocumentChange>
  <Command __id="1167" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 02 20:43:06 EST 2021" starttimestamp="1612315732965" timestamp="853107" />
  <Command __id="1172" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:08 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="855355" />
  <Command __id="1174" _type="InsertStringCommand" date="Tue Feb 02 20:43:08 EST 2021" starttimestamp="1612315732965" timestamp="855445" timestamp2="855445">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1176" _type="InsertStringCommand" date="Tue Feb 02 20:43:08 EST 2021" starttimestamp="1612315732965" timestamp="855675" timestamp2="855675">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1177" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:08 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="855715" />
  <Command __id="1178" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:08 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="855736" />
  <Command __id="1180" _type="InsertStringCommand" date="Tue Feb 02 20:43:08 EST 2021" starttimestamp="1612315732965" timestamp="855749" timestamp2="855749">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1181" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:08 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="855839" />
  <Command __id="1182" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:08 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="855873" />
  <Command __id="1184" _type="InsertStringCommand" date="Tue Feb 02 20:43:08 EST 2021" starttimestamp="1612315732965" timestamp="855892" timestamp2="855892">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="1185" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:08 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="855985" />
  <Command __id="1186" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:08 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="856004" />
  <Command __id="1188" _type="InsertStringCommand" date="Tue Feb 02 20:43:09 EST 2021" starttimestamp="1612315732965" timestamp="856257" timestamp2="856257">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1189" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:09 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="856350" />
  <Command __id="1190" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:09 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="856368" />
  <Command __id="1192" _type="InsertStringCommand" date="Tue Feb 02 20:43:09 EST 2021" starttimestamp="1612315732965" timestamp="856431" timestamp2="856431">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1193" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:09 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="856517" />
  <Command __id="1194" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:09 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="856537" />
  <Command __id="1196" _type="InsertStringCommand" date="Tue Feb 02 20:43:09 EST 2021" starttimestamp="1612315732965" timestamp="856972" timestamp2="856972">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="1198" _type="InsertStringCommand" date="Tue Feb 02 20:43:10 EST 2021" starttimestamp="1612315732965" timestamp="857198" timestamp2="857198">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1199" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:10 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="857291" />
  <Command __id="1200" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:10 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="857310" />
  <Command __id="1202" _type="InsertStringCommand" date="Tue Feb 02 20:43:10 EST 2021" starttimestamp="1612315732965" timestamp="857330" timestamp2="857330">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1203" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:10 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="857424" />
  <Command __id="1204" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:10 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="857442" />
  <Command __id="1206" _type="InsertStringCommand" date="Tue Feb 02 20:43:11 EST 2021" starttimestamp="1612315732965" timestamp="858867" timestamp2="858867">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="1208" _type="InsertStringCommand" date="Tue Feb 02 20:43:11 EST 2021" starttimestamp="1612315732965" timestamp="859013" timestamp2="859013">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1209" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:12 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="859105" />
  <Command __id="1210" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:12 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="859123" />
  <Command __id="1212" _type="InsertStringCommand" date="Tue Feb 02 20:43:12 EST 2021" starttimestamp="1612315732965" timestamp="859139" timestamp2="859139">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1213" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:12 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="859232" />
  <Command __id="1214" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:12 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="859252" />
  <Command __id="1216" _type="InsertStringCommand" date="Tue Feb 02 20:43:12 EST 2021" starttimestamp="1612315732965" timestamp="859264" timestamp2="859264">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1218" _type="InsertStringCommand" date="Tue Feb 02 20:43:12 EST 2021" starttimestamp="1612315732965" timestamp="859314" timestamp2="859314">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1219" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:12 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="859405" />
  <Command __id="1220" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:12 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="859424" />
  <Command __id="1222" _type="InsertStringCommand" date="Tue Feb 02 20:43:12 EST 2021" starttimestamp="1612315732965" timestamp="859702" timestamp2="859702">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1224" _type="InsertStringCommand" date="Tue Feb 02 20:43:12 EST 2021" starttimestamp="1612315732965" timestamp="859797" timestamp2="859797">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1225" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:12 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="859888" />
  <Command __id="1226" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:12 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="859915" />
  <Command __id="1228" _type="InsertStringCommand" date="Tue Feb 02 20:43:12 EST 2021" starttimestamp="1612315732965" timestamp="859967" timestamp2="859967">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1229" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:13 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="860058" />
  <Command __id="1230" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:13 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="860076" />
  <Command __id="1232" _type="InsertStringCommand" date="Tue Feb 02 20:43:13 EST 2021" starttimestamp="1612315732965" timestamp="860157" timestamp2="860157">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1233" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:13 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="860248" />
  <Command __id="1234" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:13 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="860268" />
  <Command __id="1236" _type="InsertStringCommand" date="Tue Feb 02 20:43:13 EST 2021" starttimestamp="1612315732965" timestamp="860286" timestamp2="860286">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1237" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:13 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="860372" />
  <Command __id="1238" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:13 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="860398" />
  <DocumentChange __id="1168" _type="Insert" date="Tue Feb 02 20:43:08 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21318" docExpressionCount="2377" docLength="22222" length="24" offset="22190" repeat="24" starttimestamp="1612315732965" timestamp="855085" timestamp2="860404">
    <text><![CDATA[void maybeAddPauseComand]]></text>
  </DocumentChange>
  <DocumentChange __id="1243" _type="Delete" date="Tue Feb 02 20:43:13 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21315" docExpressionCount="2377" docLength="22219" endLine="604" length="3" offset="22211" repeat="3" startLine="604" starttimestamp="1612315732965" timestamp="860696" timestamp2="860922">
    <text><![CDATA[and]]></text>
  </DocumentChange>
  <DocumentChange __id="1249" _type="Insert" date="Tue Feb 02 20:43:14 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21325" docExpressionCount="2377" docLength="22229" length="10" offset="22211" repeat="9" starttimestamp="1612315732965" timestamp="861111" timestamp2="863883">
    <text><![CDATA[mand(ehic)]]></text>
  </DocumentChange>
  <DocumentChange __id="1271" _type="Replace" date="Tue Feb 02 20:43:17 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21331" docExpressionCount="2377" docLength="22235" endLine="604" insertionLength="10" int_docASTNodeCount="3492" int_docActiveCodeLength="21321" int_docExpressionCount="2377" int_docLength="22225" length="4" offset="22216" startLine="604" starttimestamp="1612315732965" timestamp="864105">
    <deletedText><![CDATA[ehic]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <Command __id="1240" _type="InsertStringCommand" date="Tue Feb 02 20:43:13 EST 2021" starttimestamp="1612315732965" timestamp="860410" timestamp2="860410">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1241" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:13 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="860500" />
  <Command __id="1242" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:13 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="860519" />
  <Command __id="1244" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:43:13 EST 2021" starttimestamp="1612315732965" timestamp="860698" />
  <Command __id="1246" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:43:13 EST 2021" starttimestamp="1612315732965" timestamp="860813" />
  <Command __id="1248" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:43:13 EST 2021" starttimestamp="1612315732965" timestamp="860924" />
  <Command __id="1250" _type="InsertStringCommand" date="Tue Feb 02 20:43:14 EST 2021" starttimestamp="1612315732965" timestamp="861116" timestamp2="861116">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1252" _type="InsertStringCommand" date="Tue Feb 02 20:43:14 EST 2021" starttimestamp="1612315732965" timestamp="861197" timestamp2="861197">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1253" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:14 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="861239" />
  <Command __id="1254" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:14 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="861258" />
  <Command __id="1256" _type="InsertStringCommand" date="Tue Feb 02 20:43:14 EST 2021" starttimestamp="1612315732965" timestamp="861322" timestamp2="861322">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1258" _type="InsertStringCommand" date="Tue Feb 02 20:43:14 EST 2021" starttimestamp="1612315732965" timestamp="861400" timestamp2="861400">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1259" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:14 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="861493" />
  <Command __id="1260" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:14 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="861518" />
  <Command __id="1262" _type="InsertStringCommand" date="Tue Feb 02 20:43:14 EST 2021" starttimestamp="1612315732965" timestamp="861984" timestamp2="861984">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1264" _type="InsertStringCommand" date="Tue Feb 02 20:43:16 EST 2021" starttimestamp="1612315732965" timestamp="863645" timestamp2="863645">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1266" _type="InsertStringCommand" date="Tue Feb 02 20:43:16 EST 2021" starttimestamp="1612315732965" timestamp="863702" timestamp2="863702">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1267" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:16 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="863743" />
  <Command __id="1270" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:17 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="864097" />
  <Command __id="1272" _type="InsertStringCommand" date="Tue Feb 02 20:43:17 EST 2021" starttimestamp="1612315732965" timestamp="864112" timestamp2="864112">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1274" _type="InsertStringCommand" date="Tue Feb 02 20:43:17 EST 2021" starttimestamp="1612315732965" timestamp="864324" timestamp2="864324">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1276" _type="InsertStringCommand" date="Tue Feb 02 20:43:18 EST 2021" starttimestamp="1612315732965" timestamp="865615" timestamp2="865615">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1278" _type="InsertStringCommand" date="Tue Feb 02 20:43:18 EST 2021" starttimestamp="1612315732965" timestamp="865665" timestamp2="865665">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1280" _type="InsertStringCommand" date="Tue Feb 02 20:43:18 EST 2021" starttimestamp="1612315732965" timestamp="865698" timestamp2="865698">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="1273" _type="Insert" date="Tue Feb 02 20:43:17 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21343" docExpressionCount="2379" docLength="22247" length="12" offset="22226" repeat="12" starttimestamp="1612315732965" timestamp="864322" timestamp2="867035">
    <text><![CDATA[ last, ehico]]></text>
  </DocumentChange>
  <DocumentChange __id="1301" _type="Replace" date="Tue Feb 02 20:43:20 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21348" docExpressionCount="2379" docLength="22252" endLine="604" insertionLength="10" int_docASTNodeCount="3496" int_docActiveCodeLength="21338" int_docExpressionCount="2379" int_docLength="22242" length="5" offset="22233" startLine="604" starttimestamp="1612315732965" timestamp="867269">
    <deletedText><![CDATA[ehico]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1303" _type="Insert" date="Tue Feb 02 20:43:20 EST 2021" docASTNodeCount="3500" docActiveCodeLength="21354" docExpressionCount="2381" docLength="22258" length="6" offset="22243" repeat="6" starttimestamp="1612315732965" timestamp="867773" timestamp2="869006">
    <text><![CDATA[ cur, ]]></text>
  </DocumentChange>
  <Command __id="1281" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:18 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="865739" />
  <Command __id="1282" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:18 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="865771" />
  <Command __id="1284" _type="InsertStringCommand" date="Tue Feb 02 20:43:18 EST 2021" starttimestamp="1612315732965" timestamp="865805" timestamp2="865805">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1285" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:18 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="865898" />
  <Command __id="1286" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:18 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="865918" />
  <Command __id="1288" _type="InsertStringCommand" date="Tue Feb 02 20:43:18 EST 2021" starttimestamp="1612315732965" timestamp="865928" timestamp2="865928">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1290" _type="InsertStringCommand" date="Tue Feb 02 20:43:19 EST 2021" starttimestamp="1612315732965" timestamp="866062" timestamp2="866062">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1292" _type="InsertStringCommand" date="Tue Feb 02 20:43:19 EST 2021" starttimestamp="1612315732965" timestamp="866702" timestamp2="866702">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1294" _type="InsertStringCommand" date="Tue Feb 02 20:43:19 EST 2021" starttimestamp="1612315732965" timestamp="866766" timestamp2="866766">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1296" _type="InsertStringCommand" date="Tue Feb 02 20:43:19 EST 2021" starttimestamp="1612315732965" timestamp="866814" timestamp2="866814">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1297" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:19 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="866852" />
  <Command __id="1300" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:20 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="867256" />
  <Command __id="1302" _type="InsertStringCommand" date="Tue Feb 02 20:43:20 EST 2021" starttimestamp="1612315732965" timestamp="867284" timestamp2="867284">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1304" _type="InsertStringCommand" date="Tue Feb 02 20:43:20 EST 2021" starttimestamp="1612315732965" timestamp="867775" timestamp2="867775">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1306" _type="InsertStringCommand" date="Tue Feb 02 20:43:21 EST 2021" starttimestamp="1612315732965" timestamp="868451" timestamp2="868451">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1307" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:21 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="868492" />
  <Command __id="1309" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:21 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="868587" />
  <Command __id="1311" _type="InsertStringCommand" date="Tue Feb 02 20:43:21 EST 2021" starttimestamp="1612315732965" timestamp="868630" timestamp2="868630">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1312" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:43:21 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="868671" />
  <Command __id="1313" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:43:21 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="868690" />
  <Command __id="1315" _type="InsertStringCommand" date="Tue Feb 02 20:43:21 EST 2021" starttimestamp="1612315732965" timestamp="868918" timestamp2="868918">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1317" _type="InsertStringCommand" date="Tue Feb 02 20:43:21 EST 2021" starttimestamp="1612315732965" timestamp="869008" timestamp2="869008">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1319" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:43:24 EST 2021" starttimestamp="1612315732965" timestamp="871142" />
  <Command __id="1321" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:43:24 EST 2021" starttimestamp="1612315732965" timestamp="871288" />
  <Command __id="1322" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 02 20:43:24 EST 2021" starttimestamp="1612315732965" timestamp="871910" />
  <Command __id="1324" _type="InsertStringCommand" date="Tue Feb 02 20:43:25 EST 2021" starttimestamp="1612315732965" timestamp="872222" timestamp2="872222">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="1326" _type="InsertStringCommand" date="Tue Feb 02 20:43:25 EST 2021" starttimestamp="1612315732965" timestamp="872386" timestamp2="872386">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1327" _type="MoveCaretCommand" caretOffset="2306" date="Tue Feb 02 20:43:31 EST 2021" docOffset="22215" starttimestamp="1612315732965" timestamp="878422" />
  <Command __id="1328" _type="MoveCaretCommand" caretOffset="2307" date="Tue Feb 02 20:43:31 EST 2021" docOffset="22216" starttimestamp="1612315732965" timestamp="878874" />
  <DocumentChange __id="1318" _type="Delete" date="Tue Feb 02 20:43:24 EST 2021" docASTNodeCount="3500" docActiveCodeLength="21352" docExpressionCount="2381" docLength="22256" endLine="604" length="2" offset="22247" repeat="2" startLine="604" starttimestamp="1612315732965" timestamp="871139" timestamp2="871286">
    <text><![CDATA[, ]]></text>
  </DocumentChange>
  <DocumentChange __id="1323" _type="Insert" date="Tue Feb 02 20:43:25 EST 2021" docASTNodeCount="3500" docActiveCodeLength="21362" docExpressionCount="2381" docLength="22266" length="10" offset="22248" repeat="2" starttimestamp="1612315732965" timestamp="872216" timestamp2="872378">
    <text><![CDATA[ {
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="1331" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21342" docExpressionCount="2378" docLength="22268" length="2" offset="4805" starttimestamp="1612315732965" timestamp="913579">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1332" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21319" docExpressionCount="2375" docLength="22270" length="2" offset="4829" starttimestamp="1612315732965" timestamp="913582">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1333" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="3473" docActiveCodeLength="21210" docExpressionCount="2359" docLength="22272" length="2" offset="4856" starttimestamp="1612315732965" timestamp="913584">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1334" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2965" docActiveCodeLength="21174" docExpressionCount="2021" docLength="22274" length="2" offset="4969" starttimestamp="1612315732965" timestamp="913591">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1335" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2965" docActiveCodeLength="21146" docExpressionCount="2021" docLength="22276" length="2" offset="5009" starttimestamp="1612315732965" timestamp="913606">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1336" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21110" docExpressionCount="2039" docLength="22278" length="2" offset="5041" starttimestamp="1612315732965" timestamp="913613">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1337" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21083" docExpressionCount="2039" docLength="22280" length="2" offset="5081" starttimestamp="1612315732965" timestamp="913621">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1338" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21040" docExpressionCount="2039" docLength="22282" length="2" offset="5112" starttimestamp="1612315732965" timestamp="913629">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1339" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21013" docExpressionCount="2039" docLength="22284" length="2" offset="5159" starttimestamp="1612315732965" timestamp="913636">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1340" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20969" docExpressionCount="2039" docLength="22286" length="2" offset="5190" starttimestamp="1612315732965" timestamp="913644">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1341" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20941" docExpressionCount="2039" docLength="22288" length="2" offset="5238" starttimestamp="1612315732965" timestamp="913651">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1342" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20897" docExpressionCount="2039" docLength="22290" length="2" offset="5270" starttimestamp="1612315732965" timestamp="913658">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1343" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20868" docExpressionCount="2039" docLength="22292" length="2" offset="5318" starttimestamp="1612315732965" timestamp="913666">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1344" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20824" docExpressionCount="2039" docLength="22294" length="2" offset="5351" starttimestamp="1612315732965" timestamp="913674">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1345" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20795" docExpressionCount="2039" docLength="22296" length="2" offset="5399" starttimestamp="1612315732965" timestamp="913681">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1346" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20757" docExpressionCount="2039" docLength="22298" length="2" offset="5432" starttimestamp="1612315732965" timestamp="913688">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1347" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20729" docExpressionCount="2039" docLength="22300" length="2" offset="5474" starttimestamp="1612315732965" timestamp="913695">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1348" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20691" docExpressionCount="2039" docLength="22302" length="2" offset="5506" starttimestamp="1612315732965" timestamp="913702">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1349" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20664" docExpressionCount="2039" docLength="22304" length="2" offset="5548" starttimestamp="1612315732965" timestamp="913709">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1350" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20625" docExpressionCount="2039" docLength="22306" length="2" offset="5579" starttimestamp="1612315732965" timestamp="913716">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1351" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20598" docExpressionCount="2039" docLength="22308" length="2" offset="5622" starttimestamp="1612315732965" timestamp="913728">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1352" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20560" docExpressionCount="2039" docLength="22310" length="2" offset="5653" starttimestamp="1612315732965" timestamp="913735">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1353" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20532" docExpressionCount="2039" docLength="22312" length="2" offset="5695" starttimestamp="1612315732965" timestamp="913743">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1354" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20492" docExpressionCount="2039" docLength="22314" length="2" offset="5727" starttimestamp="1612315732965" timestamp="913751">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1329" _type="SelectTextCommand" caretOffset="3154" date="Tue Feb 02 20:44:04 EST 2021" end="4531" start="3154" starttimestamp="1612315732965" timestamp="911663" />
  <Command __id="1330" _type="CopyCommand" date="Tue Feb 02 20:44:05 EST 2021" starttimestamp="1612315732965" timestamp="912409" />
  <Command __id="1368" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 02 20:44:06 EST 2021" starttimestamp="1612315732965" timestamp="913906" />
  <DocumentChange __id="1355" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20463" docExpressionCount="2039" docLength="22316" length="2" offset="5771" starttimestamp="1612315732965" timestamp="913759">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1356" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20423" docExpressionCount="2039" docLength="22318" length="2" offset="5804" starttimestamp="1612315732965" timestamp="913768">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1357" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20394" docExpressionCount="2039" docLength="22320" length="2" offset="5848" starttimestamp="1612315732965" timestamp="913774">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1358" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20376" docExpressionCount="2039" docLength="22322" length="2" offset="5881" starttimestamp="1612315732965" timestamp="913782">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1359" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20351" docExpressionCount="2039" docLength="22324" length="2" offset="5903" starttimestamp="1612315732965" timestamp="913790">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1360" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20340" docExpressionCount="2021" docLength="22326" length="2" offset="5932" starttimestamp="1612315732965" timestamp="913797">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1361" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20265" docExpressionCount="2021" docLength="22328" length="2" offset="5947" starttimestamp="1612315732965" timestamp="913830">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1362" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20202" docExpressionCount="2021" docLength="22330" length="2" offset="6026" starttimestamp="1612315732965" timestamp="913836">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1363" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20147" docExpressionCount="2021" docLength="22332" length="2" offset="6093" starttimestamp="1612315732965" timestamp="913842">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1364" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20111" docExpressionCount="2021" docLength="22334" length="2" offset="6152" starttimestamp="1612315732965" timestamp="913849">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1365" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="3309" docActiveCodeLength="20100" docExpressionCount="2242" docLength="22336" length="2" offset="6192" starttimestamp="1612315732965" timestamp="913851">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1366" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="3304" docActiveCodeLength="20066" docExpressionCount="2238" docLength="22338" length="2" offset="6207" starttimestamp="1612315732965" timestamp="913853">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1367" _type="Insert" date="Tue Feb 02 20:44:06 EST 2021" docASTNodeCount="2939" docActiveCodeLength="20057" docExpressionCount="2009" docLength="22340" length="2" offset="6245" starttimestamp="1612315732965" timestamp="913857">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1370" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="3304" docActiveCodeLength="20066" docExpressionCount="2238" docLength="22338" endLine="157" length="2" offset="6245" startLine="157" starttimestamp="1612315732965" timestamp="918745">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1371" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="3309" docActiveCodeLength="20100" docExpressionCount="2242" docLength="22336" endLine="156" length="2" offset="6207" startLine="156" starttimestamp="1612315732965" timestamp="918748">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1372" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20111" docExpressionCount="2021" docLength="22334" endLine="155" length="2" offset="6192" startLine="155" starttimestamp="1612315732965" timestamp="918766">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1373" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20147" docExpressionCount="2021" docLength="22332" endLine="154" length="2" offset="6152" startLine="154" starttimestamp="1612315732965" timestamp="918772">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1374" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20202" docExpressionCount="2021" docLength="22330" endLine="153" length="2" offset="6093" startLine="153" starttimestamp="1612315732965" timestamp="918778">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1375" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20265" docExpressionCount="2021" docLength="22328" endLine="152" length="2" offset="6026" startLine="152" starttimestamp="1612315732965" timestamp="918784">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1376" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20340" docExpressionCount="2021" docLength="22326" endLine="151" length="2" offset="5947" startLine="151" starttimestamp="1612315732965" timestamp="918791">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1377" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20351" docExpressionCount="2039" docLength="22324" endLine="150" length="2" offset="5932" startLine="150" starttimestamp="1612315732965" timestamp="918798">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1378" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20376" docExpressionCount="2039" docLength="22322" endLine="149" length="2" offset="5903" startLine="149" starttimestamp="1612315732965" timestamp="918805">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1379" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20394" docExpressionCount="2039" docLength="22320" endLine="148" length="2" offset="5881" startLine="148" starttimestamp="1612315732965" timestamp="918812">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1380" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20423" docExpressionCount="2039" docLength="22318" endLine="147" length="2" offset="5848" startLine="147" starttimestamp="1612315732965" timestamp="918819">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1381" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20463" docExpressionCount="2039" docLength="22316" endLine="146" length="2" offset="5804" startLine="146" starttimestamp="1612315732965" timestamp="918826">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1382" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20492" docExpressionCount="2039" docLength="22314" endLine="145" length="2" offset="5771" startLine="145" starttimestamp="1612315732965" timestamp="918834">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1383" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20532" docExpressionCount="2039" docLength="22312" endLine="144" length="2" offset="5727" startLine="144" starttimestamp="1612315732965" timestamp="918840">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1384" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20560" docExpressionCount="2039" docLength="22310" endLine="143" length="2" offset="5695" startLine="143" starttimestamp="1612315732965" timestamp="918847">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1385" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20598" docExpressionCount="2039" docLength="22308" endLine="142" length="2" offset="5653" startLine="142" starttimestamp="1612315732965" timestamp="918855">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1386" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20625" docExpressionCount="2039" docLength="22306" endLine="141" length="2" offset="5622" startLine="141" starttimestamp="1612315732965" timestamp="918862">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1387" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20664" docExpressionCount="2039" docLength="22304" endLine="140" length="2" offset="5579" startLine="140" starttimestamp="1612315732965" timestamp="918869">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1388" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20691" docExpressionCount="2039" docLength="22302" endLine="139" length="2" offset="5548" startLine="139" starttimestamp="1612315732965" timestamp="918876">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1389" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20729" docExpressionCount="2039" docLength="22300" endLine="138" length="2" offset="5506" startLine="138" starttimestamp="1612315732965" timestamp="918883">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1390" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20757" docExpressionCount="2039" docLength="22298" endLine="137" length="2" offset="5474" startLine="137" starttimestamp="1612315732965" timestamp="918891">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1391" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20795" docExpressionCount="2039" docLength="22296" endLine="136" length="2" offset="5432" startLine="136" starttimestamp="1612315732965" timestamp="918897">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1392" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20824" docExpressionCount="2039" docLength="22294" endLine="135" length="2" offset="5399" startLine="135" starttimestamp="1612315732965" timestamp="918910">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1393" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20868" docExpressionCount="2039" docLength="22292" endLine="134" length="2" offset="5351" startLine="134" starttimestamp="1612315732965" timestamp="918918">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1369" _type="MoveCaretCommand" caretOffset="4605" date="Tue Feb 02 20:44:08 EST 2021" docOffset="6256" starttimestamp="1612315732965" timestamp="916013" />
  <Command __id="1407" _type="UndoCommand" date="Tue Feb 02 20:44:12 EST 2021" starttimestamp="1612315732965" timestamp="919041" />
  <Command __id="1408" _type="SelectTextCommand" caretOffset="3380" date="Tue Feb 02 20:44:18 EST 2021" end="4520" start="3380" starttimestamp="1612315732965" timestamp="925894" />
  <DocumentChange __id="1394" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20897" docExpressionCount="2039" docLength="22290" endLine="133" length="2" offset="5318" startLine="133" starttimestamp="1612315732965" timestamp="918925">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1395" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20941" docExpressionCount="2039" docLength="22288" endLine="132" length="2" offset="5270" startLine="132" starttimestamp="1612315732965" timestamp="918933">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1396" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20969" docExpressionCount="2039" docLength="22286" endLine="131" length="2" offset="5238" startLine="131" starttimestamp="1612315732965" timestamp="918940">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1397" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21013" docExpressionCount="2039" docLength="22284" endLine="130" length="2" offset="5190" startLine="130" starttimestamp="1612315732965" timestamp="918947">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1398" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21040" docExpressionCount="2039" docLength="22282" endLine="129" length="2" offset="5159" startLine="129" starttimestamp="1612315732965" timestamp="918955">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1399" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21083" docExpressionCount="2039" docLength="22280" endLine="128" length="2" offset="5112" startLine="128" starttimestamp="1612315732965" timestamp="918962">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1400" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21110" docExpressionCount="2039" docLength="22278" endLine="127" length="2" offset="5081" startLine="127" starttimestamp="1612315732965" timestamp="918970">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1401" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2965" docActiveCodeLength="21146" docExpressionCount="2021" docLength="22276" endLine="126" length="2" offset="5041" startLine="126" starttimestamp="1612315732965" timestamp="918976">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1402" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="2965" docActiveCodeLength="21174" docExpressionCount="2021" docLength="22274" endLine="125" length="2" offset="5009" startLine="125" starttimestamp="1612315732965" timestamp="918982">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1403" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="3473" docActiveCodeLength="21210" docExpressionCount="2359" docLength="22272" endLine="124" length="2" offset="4969" startLine="124" starttimestamp="1612315732965" timestamp="918984">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1404" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21319" docExpressionCount="2375" docLength="22270" endLine="123" length="2" offset="4856" startLine="123" starttimestamp="1612315732965" timestamp="918986">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1405" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21342" docExpressionCount="2378" docLength="22268" endLine="122" length="2" offset="4829" startLine="122" starttimestamp="1612315732965" timestamp="918988">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1406" _type="Delete" date="Tue Feb 02 20:44:11 EST 2021" docASTNodeCount="3500" docActiveCodeLength="21362" docExpressionCount="2381" docLength="22266" endLine="121" length="2" offset="4805" startLine="121" starttimestamp="1612315732965" timestamp="918990">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1410" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="3496" docActiveCodeLength="21342" docExpressionCount="2378" docLength="22268" length="2" offset="4805" starttimestamp="1612315732965" timestamp="929862">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1411" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21319" docExpressionCount="2375" docLength="22270" length="2" offset="4829" starttimestamp="1612315732965" timestamp="929865">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1412" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="3473" docActiveCodeLength="21210" docExpressionCount="2359" docLength="22272" length="2" offset="4856" starttimestamp="1612315732965" timestamp="929867">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1413" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2965" docActiveCodeLength="21174" docExpressionCount="2021" docLength="22274" length="2" offset="4969" starttimestamp="1612315732965" timestamp="929873">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1414" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2965" docActiveCodeLength="21146" docExpressionCount="2021" docLength="22276" length="2" offset="5009" starttimestamp="1612315732965" timestamp="929879">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1415" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21110" docExpressionCount="2039" docLength="22278" length="2" offset="5041" starttimestamp="1612315732965" timestamp="929887">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1416" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21083" docExpressionCount="2039" docLength="22280" length="2" offset="5081" starttimestamp="1612315732965" timestamp="929894">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1417" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21040" docExpressionCount="2039" docLength="22282" length="2" offset="5112" starttimestamp="1612315732965" timestamp="929910">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1418" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="21013" docExpressionCount="2039" docLength="22284" length="2" offset="5159" starttimestamp="1612315732965" timestamp="929917">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1419" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20969" docExpressionCount="2039" docLength="22286" length="2" offset="5190" starttimestamp="1612315732965" timestamp="929925">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1420" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20941" docExpressionCount="2039" docLength="22288" length="2" offset="5238" starttimestamp="1612315732965" timestamp="929933">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1421" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20897" docExpressionCount="2039" docLength="22290" length="2" offset="5270" starttimestamp="1612315732965" timestamp="929941">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1422" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20868" docExpressionCount="2039" docLength="22292" length="2" offset="5318" starttimestamp="1612315732965" timestamp="929950">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1423" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20824" docExpressionCount="2039" docLength="22294" length="2" offset="5351" starttimestamp="1612315732965" timestamp="929958">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1424" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20795" docExpressionCount="2039" docLength="22296" length="2" offset="5399" starttimestamp="1612315732965" timestamp="929965">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1425" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20757" docExpressionCount="2039" docLength="22298" length="2" offset="5432" starttimestamp="1612315732965" timestamp="929973">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1426" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20729" docExpressionCount="2039" docLength="22300" length="2" offset="5474" starttimestamp="1612315732965" timestamp="929980">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1427" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20691" docExpressionCount="2039" docLength="22302" length="2" offset="5506" starttimestamp="1612315732965" timestamp="929988">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1428" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20664" docExpressionCount="2039" docLength="22304" length="2" offset="5548" starttimestamp="1612315732965" timestamp="929995">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1429" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20625" docExpressionCount="2039" docLength="22306" length="2" offset="5579" starttimestamp="1612315732965" timestamp="930002">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1430" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20598" docExpressionCount="2039" docLength="22308" length="2" offset="5622" starttimestamp="1612315732965" timestamp="930009">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1431" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20560" docExpressionCount="2039" docLength="22310" length="2" offset="5653" starttimestamp="1612315732965" timestamp="930017">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1432" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20532" docExpressionCount="2039" docLength="22312" length="2" offset="5695" starttimestamp="1612315732965" timestamp="930024">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1433" _type="Insert" date="Tue Feb 02 20:44:22 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20492" docExpressionCount="2039" docLength="22314" length="2" offset="5727" starttimestamp="1612315732965" timestamp="930032">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1434" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20463" docExpressionCount="2039" docLength="22316" length="2" offset="5771" starttimestamp="1612315732965" timestamp="930040">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1435" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20423" docExpressionCount="2039" docLength="22318" length="2" offset="5804" starttimestamp="1612315732965" timestamp="930046">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1436" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20394" docExpressionCount="2039" docLength="22320" length="2" offset="5848" starttimestamp="1612315732965" timestamp="930054">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1437" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20376" docExpressionCount="2039" docLength="22322" length="2" offset="5881" starttimestamp="1612315732965" timestamp="930061">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1438" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="2999" docActiveCodeLength="20351" docExpressionCount="2039" docLength="22324" length="2" offset="5903" starttimestamp="1612315732965" timestamp="930068">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1439" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20340" docExpressionCount="2021" docLength="22326" length="2" offset="5932" starttimestamp="1612315732965" timestamp="930075">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1440" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20265" docExpressionCount="2021" docLength="22328" length="2" offset="5947" starttimestamp="1612315732965" timestamp="930087">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1441" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20202" docExpressionCount="2021" docLength="22330" length="2" offset="6026" starttimestamp="1612315732965" timestamp="930094">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1442" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20147" docExpressionCount="2021" docLength="22332" length="2" offset="6093" starttimestamp="1612315732965" timestamp="930101">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1443" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="2965" docActiveCodeLength="20111" docExpressionCount="2021" docLength="22334" length="2" offset="6152" starttimestamp="1612315732965" timestamp="930107">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1444" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="3309" docActiveCodeLength="20100" docExpressionCount="2242" docLength="22336" length="2" offset="6192" starttimestamp="1612315732965" timestamp="930109">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1409" _type="SelectTextCommand" caretOffset="4520" date="Tue Feb 02 20:44:22 EST 2021" end="4520" start="3163" starttimestamp="1612315732965" timestamp="929298" />
  <Command __id="1446" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 02 20:44:23 EST 2021" starttimestamp="1612315732965" timestamp="930157" />
  <Command __id="1447" _type="MoveCaretCommand" caretOffset="4554" date="Tue Feb 02 20:44:23 EST 2021" docOffset="6205" starttimestamp="1612315732965" timestamp="931004" />
  <Command __id="1448" _type="MoveCaretCommand" caretOffset="6931" date="Tue Feb 02 20:44:25 EST 2021" docOffset="22326" starttimestamp="1612315732965" timestamp="932917" />
  <Command __id="1450" _type="PasteCommand" date="Tue Feb 02 20:44:26 EST 2021" starttimestamp="1612315732965" timestamp="933365" />
  <Command __id="1451" _type="SelectTextCommand" caretOffset="6931" date="Tue Feb 02 20:44:34 EST 2021" end="6960" start="6931" starttimestamp="1612315732965" timestamp="941575" />
  <Command __id="1453" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 02 20:44:34 EST 2021" starttimestamp="1612315732965" timestamp="942017" />
  <DocumentChange __id="1445" _type="Insert" date="Tue Feb 02 20:44:23 EST 2021" docASTNodeCount="3304" docActiveCodeLength="20066" docExpressionCount="2238" docLength="22338" length="2" offset="6207" starttimestamp="1612315732965" timestamp="930111">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1449" _type="Replace" date="Tue Feb 02 20:44:26 EST 2021" docASTNodeCount="3500" docActiveCodeLength="21182" docExpressionCount="2381" docLength="23454" endLine="605" insertionLength="1118" int_docASTNodeCount="3304" int_docActiveCodeLength="20064" int_docExpressionCount="2238" int_docLength="22336" length="2" offset="22324" startLine="605" starttimestamp="1612315732965" timestamp="933340">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		last = cur;
		cur = command;
		long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(last.getStartTimestamp());
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(command);
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1452" _type="Delete" date="Tue Feb 02 20:44:34 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21149" docExpressionCount="2375" docLength="23421" endLine="607" length="33" offset="22324" startLine="605" starttimestamp="1612315732965" timestamp="942000">
    <text><![CDATA[		last = cur;
		cur = command;
]]></text>
  </DocumentChange>
  <DocumentChange __id="1455" _type="Delete" date="Tue Feb 02 20:44:37 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21145" docExpressionCount="2375" docLength="23417" endLine="640" length="4" offset="23407" startLine="639" starttimestamp="1612315732965" timestamp="944591">
    <text><![CDATA[	}
]]></text>
  </DocumentChange>
  <DocumentChange __id="1457" _type="Insert" date="Tue Feb 02 20:44:48 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21149" docExpressionCount="2375" docLength="23421" length="4" offset="23407" starttimestamp="1612315732965" timestamp="955454">
    <text><![CDATA[	}
]]></text>
  </DocumentChange>
  <Command __id="1454" _type="MoveCaretCommand" caretOffset="8014" date="Tue Feb 02 20:44:37 EST 2021" docOffset="23409" starttimestamp="1612315732965" timestamp="944360" />
  <Command __id="1456" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 02 20:44:37 EST 2021" starttimestamp="1612315732965" timestamp="944594" />
  <Command __id="1458" _type="UndoCommand" date="Tue Feb 02 20:44:48 EST 2021" starttimestamp="1612315732965" timestamp="955460" />
  <Command __id="1460" _type="UndoCommand" date="Tue Feb 02 20:44:49 EST 2021" starttimestamp="1612315732965" timestamp="956566" />
  <DocumentChange __id="1459" _type="Insert" date="Tue Feb 02 20:44:49 EST 2021" docASTNodeCount="3500" docActiveCodeLength="21182" docExpressionCount="2381" docLength="23454" length="33" offset="22324" starttimestamp="1612315732965" timestamp="956562">
    <text><![CDATA[		last = cur;
		cur = command;
]]></text>
  </DocumentChange>
  <Command __id="1461" _type="MoveCaretCommand" caretOffset="8047" date="Tue Feb 02 20:44:53 EST 2021" docOffset="23442" starttimestamp="1612315732965" timestamp="960454" />
  <DocumentChange __id="1462" _type="Delete" date="Tue Feb 02 20:44:55 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21149" docExpressionCount="2375" docLength="23421" endLine="607" length="33" offset="22324" startLine="605" starttimestamp="1612315732965" timestamp="962225">
    <text><![CDATA[		last = cur;
		cur = command;
]]></text>
  </DocumentChange>
  <Command __id="1463" _type="RedoCommand" date="Tue Feb 02 20:44:55 EST 2021" starttimestamp="1612315732965" timestamp="962242" />
  <Command __id="1465" _type="RedoCommand" date="Tue Feb 02 20:44:55 EST 2021" starttimestamp="1612315732965" timestamp="962409" />
  <Command __id="1466" _type="MoveCaretCommand" caretOffset="6893" date="Tue Feb 02 20:45:01 EST 2021" docOffset="22288" starttimestamp="1612315732965" timestamp="968167" />
  <Command __id="1468" _type="InsertStringCommand" date="Tue Feb 02 20:45:01 EST 2021" starttimestamp="1612315732965" timestamp="968912" timestamp2="968912">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1469" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:45:01 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="969004" />
  <Command __id="1471" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:03 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="970983" />
  <Command __id="1472" _type="MoveCaretCommand" caretOffset="7105" date="Tue Feb 02 20:45:04 EST 2021" docOffset="22500" starttimestamp="1612315732965" timestamp="971066" />
  <DocumentChange __id="1464" _type="Delete" date="Tue Feb 02 20:44:55 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21145" docExpressionCount="2375" docLength="23417" endLine="640" length="4" offset="23407" startLine="639" starttimestamp="1612315732965" timestamp="962397">
    <text><![CDATA[	}
]]></text>
  </DocumentChange>
  <DocumentChange __id="1467" _type="Insert" date="Tue Feb 02 20:45:01 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21146" docExpressionCount="2375" docLength="23418" length="1" offset="22288" starttimestamp="1612315732965" timestamp="968904">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1470" _type="Delete" date="Tue Feb 02 20:45:02 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21145" docExpressionCount="2375" docLength="23417" endLine="604" length="1" offset="22288" startLine="604" starttimestamp="1612315732965" timestamp="969918">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="1474" _type="Insert" date="Tue Feb 02 20:45:05 EST 2021" docASTNodeCount="3492" docActiveCodeLength="21149" docExpressionCount="2375" docLength="23421" length="4" offset="22288" repeat="4" starttimestamp="1612315732965" timestamp="972773" timestamp2="973115">
    <text><![CDATA[List]]></text>
  </DocumentChange>
  <DocumentChange __id="1482" _type="Replace" date="Tue Feb 02 20:45:06 EST 2021" docASTNodeCount="3303" docActiveCodeLength="21152" docExpressionCount="2237" docLength="23424" endLine="604" insertionLength="7" int_docASTNodeCount="3492" int_docActiveCodeLength="21145" int_docExpressionCount="2375" int_docLength="23417" length="4" offset="22288" startLine="604" starttimestamp="1612315732965" timestamp="973540">
    <deletedText><![CDATA[List]]></deletedText>
    <insertedText><![CDATA[List<E>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1484" _type="Replace" date="Tue Feb 02 20:45:07 EST 2021" docASTNodeCount="3303" docActiveCodeLength="21152" docExpressionCount="2237" docLength="23424" endLine="604" insertionLength="1" int_docASTNodeCount="3301" int_docActiveCodeLength="21151" int_docExpressionCount="2236" int_docLength="23423" length="1" offset="22293" startLine="604" starttimestamp="1612315732965" timestamp="974400">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1486" _type="Insert" date="Tue Feb 02 20:45:07 EST 2021" docASTNodeCount="3303" docActiveCodeLength="21155" docExpressionCount="2237" docLength="23427" length="3" offset="22294" repeat="3" starttimestamp="1612315732965" timestamp="974468" timestamp2="974649">
    <text><![CDATA[hic]]></text>
  </DocumentChange>
  <DocumentChange __id="1493" _type="Replace" date="Tue Feb 02 20:45:07 EST 2021" docASTNodeCount="3303" docActiveCodeLength="21161" docExpressionCount="2237" docLength="23433" endLine="604" insertionLength="10" int_docASTNodeCount="3301" int_docActiveCodeLength="21151" int_docExpressionCount="2236" int_docLength="23423" length="4" offset="22293" startLine="604" starttimestamp="1612315732965" timestamp="974719">
    <deletedText><![CDATA[ehic]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1496" _type="Insert" date="Tue Feb 02 20:45:08 EST 2021" docASTNodeCount="3303" docActiveCodeLength="21162" docExpressionCount="2237" docLength="23434" length="1" offset="22304" starttimestamp="1612315732965" timestamp="975382">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1473" _type="MoveCaretCommand" caretOffset="6893" date="Tue Feb 02 20:45:05 EST 2021" docOffset="22288" starttimestamp="1612315732965" timestamp="972137" />
  <Command __id="1475" _type="InsertStringCommand" date="Tue Feb 02 20:45:05 EST 2021" starttimestamp="1612315732965" timestamp="972784" timestamp2="972784">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1477" _type="InsertStringCommand" date="Tue Feb 02 20:45:05 EST 2021" starttimestamp="1612315732965" timestamp="972926" timestamp2="972926">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1478" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:45:05 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="972969" />
  <Command __id="1481" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:06 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="973533" />
  <Command __id="1483" _type="InsertStringCommand" date="Tue Feb 02 20:45:06 EST 2021" starttimestamp="1612315732965" timestamp="973571" timestamp2="973571">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1485" _type="InsertStringCommand" date="Tue Feb 02 20:45:07 EST 2021" starttimestamp="1612315732965" timestamp="974411" timestamp2="974411">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1487" _type="InsertStringCommand" date="Tue Feb 02 20:45:07 EST 2021" starttimestamp="1612315732965" timestamp="974470" timestamp2="974470">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1489" _type="InsertStringCommand" date="Tue Feb 02 20:45:07 EST 2021" starttimestamp="1612315732965" timestamp="974506" timestamp2="974506">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1490" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:45:07 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="974545" />
  <Command __id="1492" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:07 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="974711" />
  <Command __id="1494" _type="InsertStringCommand" date="Tue Feb 02 20:45:07 EST 2021" starttimestamp="1612315732965" timestamp="974726" timestamp2="974726">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1495" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 02 20:45:08 EST 2021" starttimestamp="1612315732965" timestamp="975139" />
  <Command __id="1497" _type="InsertStringCommand" date="Tue Feb 02 20:45:08 EST 2021" starttimestamp="1612315732965" timestamp="975392" timestamp2="975392">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1499" _type="InsertStringCommand" date="Tue Feb 02 20:45:10 EST 2021" starttimestamp="1612315732965" timestamp="977864" timestamp2="977864">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1501" _type="InsertStringCommand" date="Tue Feb 02 20:45:10 EST 2021" starttimestamp="1612315732965" timestamp="977938" timestamp2="977938">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1503" _type="InsertStringCommand" date="Tue Feb 02 20:45:10 EST 2021" starttimestamp="1612315732965" timestamp="978003" timestamp2="978003">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1504" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:45:11 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="978094" />
  <Command __id="1506" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:11 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="978289" />
  <Command __id="1508" _type="InsertStringCommand" date="Tue Feb 02 20:45:11 EST 2021" starttimestamp="1612315732965" timestamp="978346" timestamp2="978346">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1509" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:45:11 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="978429" />
  <Command __id="1510" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:11 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="978449" />
  <Command __id="1512" _type="InsertStringCommand" date="Tue Feb 02 20:45:11 EST 2021" starttimestamp="1612315732965" timestamp="978490" timestamp2="978490">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1513" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:45:11 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="978582" />
  <Command __id="1514" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:11 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="978602" />
  <Command __id="1516" _type="InsertStringCommand" date="Tue Feb 02 20:45:11 EST 2021" starttimestamp="1612315732965" timestamp="978630" timestamp2="978630">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1518" _type="InsertStringCommand" date="Tue Feb 02 20:45:11 EST 2021" starttimestamp="1612315732965" timestamp="978717" timestamp2="978717">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1519" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:45:11 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="978757" />
  <Command __id="1520" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:11 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="978783" />
  <Command __id="1522" _type="InsertStringCommand" date="Tue Feb 02 20:45:11 EST 2021" starttimestamp="1612315732965" timestamp="978827" timestamp2="978827">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1524" _type="InsertStringCommand" date="Tue Feb 02 20:45:11 EST 2021" starttimestamp="1612315732965" timestamp="978877" timestamp2="978877">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1526" _type="InsertStringCommand" date="Tue Feb 02 20:45:11 EST 2021" starttimestamp="1612315732965" timestamp="978946" timestamp2="978946">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1527" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:45:12 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="979038" />
  <Command __id="1528" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:12 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="979057" />
  <Command __id="1530" _type="InsertStringCommand" date="Tue Feb 02 20:45:12 EST 2021" starttimestamp="1612315732965" timestamp="979644" timestamp2="979644">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1532" _type="InsertStringCommand" date="Tue Feb 02 20:45:12 EST 2021" starttimestamp="1612315732965" timestamp="979720" timestamp2="979720">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1533" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:13 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="980726" />
  <Command __id="1534" _type="MoveCaretCommand" caretOffset="8011" date="Tue Feb 02 20:45:31 EST 2021" docOffset="23406" starttimestamp="1612315732965" timestamp="998602" />
  <Command __id="1535" _type="MoveCaretCommand" caretOffset="8011" date="Tue Feb 02 20:45:32 EST 2021" docOffset="23406" starttimestamp="1612315732965" timestamp="999042" />
  <Command __id="1536" _type="MoveCaretCommand" caretOffset="8033" date="Tue Feb 02 20:45:32 EST 2021" docOffset="23428" starttimestamp="1612315732965" timestamp="999461" />
  <Command __id="1537" _type="SelectTextCommand" caretOffset="8038" date="Tue Feb 02 20:45:32 EST 2021" end="8038" start="8031" starttimestamp="1612315732965" timestamp="999606" />
  <Command __id="1539" _type="InsertStringCommand" date="Tue Feb 02 20:45:33 EST 2021" starttimestamp="1612315732965" timestamp="1000205" timestamp2="1000205">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1540" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:45:33 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1000244" />
  <Command __id="1543" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:34 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1001219" />
  <Command __id="1544" _type="MoveCaretCommand" caretOffset="8027" date="Tue Feb 02 20:45:34 EST 2021" docOffset="23422" starttimestamp="1612315732965" timestamp="1001309" />
  <Command __id="1545" _type="MoveCaretCommand" caretOffset="3152" date="Tue Feb 02 20:45:43 EST 2021" docOffset="4803" starttimestamp="1612315732965" timestamp="1010442" />
  <Command __id="1547" _type="InsertStringCommand" date="Tue Feb 02 20:45:44 EST 2021" starttimestamp="1612315732965" timestamp="1011073" timestamp2="1011073">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1549" _type="InsertStringCommand" date="Tue Feb 02 20:45:44 EST 2021" starttimestamp="1612315732965" timestamp="1011309" timestamp2="1011309">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1550" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:45:44 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1011352" />
  <Command __id="1558" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:45:45 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1012408" />
  <Command __id="1560" _type="InsertStringCommand" date="Tue Feb 02 20:45:45 EST 2021" starttimestamp="1612315732965" timestamp="1012515" timestamp2="1012515">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1561" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:45:47 EST 2021" starttimestamp="1612315732965" timestamp="1014441" />
  <Command __id="1562" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 02 20:45:47 EST 2021" starttimestamp="1612315732965" timestamp="1014757" />
  <Command __id="1563" _type="MoveCaretCommand" caretOffset="3121" date="Tue Feb 02 20:45:49 EST 2021" docOffset="4772" starttimestamp="1612315732965" timestamp="1016834" />
  <Command __id="1564" _type="MoveCaretCommand" caretOffset="3152" date="Tue Feb 02 20:45:50 EST 2021" docOffset="4803" starttimestamp="1612315732965" timestamp="1017396" />
  <DocumentChange __id="1498" _type="Insert" date="Tue Feb 02 20:45:10 EST 2021" docASTNodeCount="3499" docActiveCodeLength="21175" docExpressionCount="2378" docLength="23447" length="13" offset="22305" repeat="13" starttimestamp="1612315732965" timestamp="977857" timestamp2="979713">
    <text><![CDATA[newCommands, ]]></text>
  </DocumentChange>
  <DocumentChange __id="1538" _type="Replace" date="Tue Feb 02 20:45:33 EST 2021" docASTNodeCount="3499" docActiveCodeLength="21169" docExpressionCount="2378" docLength="23441" endLine="638" insertionLength="1" int_docASTNodeCount="3498" int_docActiveCodeLength="21168" int_docExpressionCount="2377" int_docLength="23440" length="7" offset="23426" startLine="638" starttimestamp="1612315732965" timestamp="1000197">
    <deletedText><![CDATA[command]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1541" _type="Insert" date="Tue Feb 02 20:45:33 EST 2021" docASTNodeCount="3499" docActiveCodeLength="21171" docExpressionCount="2378" docLength="23443" length="2" offset="23427" repeat="2" starttimestamp="1612315732965" timestamp="1000409" timestamp2="1000491">
    <text><![CDATA[ur]]></text>
  </DocumentChange>
  <DocumentChange __id="1546" _type="Insert" date="Tue Feb 02 20:45:44 EST 2021" docASTNodeCount="3134" docActiveCodeLength="21190" docExpressionCount="2149" docLength="23462" length="19" offset="4803" repeat="9" starttimestamp="1612315732965" timestamp="1011061" timestamp2="1012313">
    <text><![CDATA[
									maybeadd]]></text>
  </DocumentChange>
  <DocumentChange __id="1559" _type="Replace" date="Tue Feb 02 20:45:45 EST 2021" docASTNodeCount="3505" docActiveCodeLength="21227" docExpressionCount="2383" docLength="23499" endLine="121" insertionLength="45" int_docASTNodeCount="3499" int_docActiveCodeLength="21182" int_docExpressionCount="2378" int_docLength="23454" length="8" offset="4814" startLine="121" starttimestamp="1612315732965" timestamp="1012412">
    <deletedText><![CDATA[maybeadd]]></deletedText>
    <insertedText><![CDATA[maybeAddPauseCommand(newCommands, last, cur);]]></insertedText>
  </DocumentChange>
  <Command __id="1565" _type="SelectTextCommand" caretOffset="3229" date="Tue Feb 02 20:46:06 EST 2021" end="3259" start="3229" starttimestamp="1612315732965" timestamp="1033591" />
  <Command __id="1566" _type="MoveCaretCommand" caretOffset="3176" date="Tue Feb 02 20:46:07 EST 2021" docOffset="4827" starttimestamp="1612315732965" timestamp="1034211" />
  <Command __id="1567" _type="SelectTextCommand" caretOffset="3183" date="Tue Feb 02 20:46:07 EST 2021" end="3183" start="3163" starttimestamp="1612315732965" timestamp="1034374" />
  <Command __id="1568" _type="SelectTextCommand" caretOffset="3210" date="Tue Feb 02 20:46:07 EST 2021" end="3210" start="3154" starttimestamp="1612315732965" timestamp="1034495" />
  <DocumentChange __id="1569" _type="Delete" date="Tue Feb 02 20:46:08 EST 2021" docASTNodeCount="3499" docActiveCodeLength="21171" docExpressionCount="2378" docLength="23443" endLine="122" length="56" offset="4805" startLine="121" starttimestamp="1612315732965" timestamp="1035783">
    <text><![CDATA[									maybeAddPauseCommand(newCommands, last, cur);
]]></text>
  </DocumentChange>
  <Command __id="1570" _type="CutCommand" date="Tue Feb 02 20:46:08 EST 2021" starttimestamp="1612315732965" timestamp="1035796" />
  <Command __id="1571" _type="MoveCaretCommand" caretOffset="3203" date="Tue Feb 02 20:46:09 EST 2021" docOffset="4854" starttimestamp="1612315732965" timestamp="1036192" />
  <DocumentChange __id="1572" _type="Insert" date="Tue Feb 02 20:46:09 EST 2021" docASTNodeCount="3499" docActiveCodeLength="21182" docExpressionCount="2378" docLength="23454" length="11" offset="4854" starttimestamp="1612315732965" timestamp="1036574">
    <text><![CDATA[
									]]></text>
  </DocumentChange>
  <Command __id="1573" _type="InsertStringCommand" date="Tue Feb 02 20:46:09 EST 2021" starttimestamp="1612315732965" timestamp="1036585" timestamp2="1036585">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1574" _type="Replace" date="Tue Feb 02 20:46:09 EST 2021" docASTNodeCount="3505" docActiveCodeLength="21229" docExpressionCount="2383" docLength="23501" endLine="123" insertionLength="56" int_docASTNodeCount="3499" int_docActiveCodeLength="21173" int_docExpressionCount="2378" int_docLength="23445" length="9" offset="4856" startLine="123" starttimestamp="1612315732965" timestamp="1036816">
    <deletedText><![CDATA[									]]></deletedText>
    <insertedText><![CDATA[									maybeAddPauseCommand(newCommands, last, cur);
]]></insertedText>
  </DocumentChange>
  <Command __id="1575" _type="PasteCommand" date="Tue Feb 02 20:46:09 EST 2021" starttimestamp="1612315732965" timestamp="1036827" />
  <Command __id="1576" _type="MoveCaretCommand" caretOffset="3174" date="Tue Feb 02 20:46:10 EST 2021" docOffset="4825" starttimestamp="1612315732965" timestamp="1037464" />
  <Command __id="1577" _type="SelectTextCommand" caretOffset="3205" date="Tue Feb 02 20:46:11 EST 2021" end="3205" start="3172" starttimestamp="1612315732965" timestamp="1038303" />
  <Command __id="1580" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 02 20:46:12 EST 2021" starttimestamp="1612315732965" timestamp="1039113" />
  <DocumentChange __id="1578" _type="Delete" date="Tue Feb 02 20:46:12 EST 2021" docASTNodeCount="3509" docActiveCodeLength="21249" docExpressionCount="2386" docLength="23499" endLine="121" length="2" offset="4805" startLine="121" starttimestamp="1612315732965" timestamp="1039067">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1579" _type="Delete" date="Tue Feb 02 20:46:12 EST 2021" docASTNodeCount="3513" docActiveCodeLength="21272" docExpressionCount="2389" docLength="23497" endLine="122" length="2" offset="4827" startLine="122" starttimestamp="1612315732965" timestamp="1039069">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1581" _type="MoveCaretCommand" caretOffset="3218" date="Tue Feb 02 20:46:13 EST 2021" docOffset="4869" starttimestamp="1612315732965" timestamp="1040501" />
  <Command __id="1582" _type="SelectTextCommand" caretOffset="3213" date="Tue Feb 02 20:46:14 EST 2021" end="3257" start="3213" starttimestamp="1612315732965" timestamp="1041154" />
  <Command __id="1583" _type="MoveCaretCommand" caretOffset="3174" date="Tue Feb 02 20:46:15 EST 2021" docOffset="4825" starttimestamp="1612315732965" timestamp="1042079" />
  <DocumentChange __id="1584" _type="Insert" date="Tue Feb 02 20:46:21 EST 2021" docASTNodeCount="3515" docActiveCodeLength="21291" docExpressionCount="2389" docLength="23516" length="19" offset="4825" repeat="9" starttimestamp="1612315732965" timestamp="1048980" timestamp2="1050202">
    <text><![CDATA[
									maybeadd]]></text>
  </DocumentChange>
  <Command __id="1585" _type="InsertStringCommand" date="Tue Feb 02 20:46:21 EST 2021" starttimestamp="1612315732965" timestamp="1048991" timestamp2="1048991">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1587" _type="InsertStringCommand" date="Tue Feb 02 20:46:22 EST 2021" starttimestamp="1612315732965" timestamp="1049224" timestamp2="1049224">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1588" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:22 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1049268" />
  <Command __id="1596" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:23 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1050347" />
  <Command __id="1598" _type="InsertStringCommand" date="Tue Feb 02 20:46:23 EST 2021" starttimestamp="1612315732965" timestamp="1050457" timestamp2="1050457">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1599" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:25 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1052707" />
  <Command __id="1600" _type="MoveCaretCommand" caretOffset="3198" date="Tue Feb 02 20:46:25 EST 2021" docOffset="4849" starttimestamp="1612315732965" timestamp="1052805" />
  <Command __id="1602" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 02 20:46:26 EST 2021" starttimestamp="1612315732965" timestamp="1053431" />
  <Command __id="1604" _type="InsertStringCommand" date="Tue Feb 02 20:46:26 EST 2021" starttimestamp="1612315732965" timestamp="1053884" timestamp2="1053884">
    <data><![CDATA[W]]></data>
  </Command>
  <Command __id="1606" _type="InsertStringCommand" date="Tue Feb 02 20:46:27 EST 2021" starttimestamp="1612315732965" timestamp="1054056" timestamp2="1054056">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1607" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:27 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1054100" />
  <Command __id="1608" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:27 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1054129" />
  <Command __id="1610" _type="InsertStringCommand" date="Tue Feb 02 20:46:27 EST 2021" starttimestamp="1612315732965" timestamp="1054139" timestamp2="1054139">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1611" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:27 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1054233" />
  <Command __id="1612" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:27 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1054268" />
  <Command __id="1614" _type="InsertStringCommand" date="Tue Feb 02 20:46:27 EST 2021" starttimestamp="1612315732965" timestamp="1054301" timestamp2="1054301">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1615" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:27 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1054394" />
  <Command __id="1616" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:27 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1054429" />
  <Command __id="1618" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:46:27 EST 2021" starttimestamp="1612315732965" timestamp="1054624" />
  <Command __id="1620" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:46:27 EST 2021" starttimestamp="1612315732965" timestamp="1054750" />
  <Command __id="1622" _type="InsertStringCommand" date="Tue Feb 02 20:46:27 EST 2021" starttimestamp="1612315732965" timestamp="1054820" timestamp2="1054820">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1623" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:27 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1054915" />
  <Command __id="1624" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:27 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1054942" />
  <DocumentChange __id="1597" _type="Replace" date="Tue Feb 02 20:46:23 EST 2021" docASTNodeCount="3519" docActiveCodeLength="21328" docExpressionCount="2394" docLength="23553" endLine="122" insertionLength="45" int_docASTNodeCount="3513" int_docActiveCodeLength="21283" int_docExpressionCount="2389" int_docLength="23508" length="8" offset="4836" startLine="122" starttimestamp="1612315732965" timestamp="1050352">
    <deletedText><![CDATA[maybeadd]]></deletedText>
    <insertedText><![CDATA[maybeAddPauseCommand(newCommands, last, cur);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1601" _type="Delete" date="Tue Feb 02 20:46:26 EST 2021" docASTNodeCount="3519" docActiveCodeLength="21323" docExpressionCount="2394" docLength="23548" endLine="122" length="5" offset="4844" startLine="122" starttimestamp="1612315732965" timestamp="1053427">
    <text><![CDATA[Pause]]></text>
  </DocumentChange>
  <DocumentChange __id="1603" _type="Insert" date="Tue Feb 02 20:46:26 EST 2021" docASTNodeCount="3519" docActiveCodeLength="21327" docExpressionCount="2394" docLength="23552" length="4" offset="4844" repeat="4" starttimestamp="1612315732965" timestamp="1053878" timestamp2="1054295">
    <text><![CDATA[Wewb]]></text>
  </DocumentChange>
  <DocumentChange __id="1617" _type="Delete" date="Tue Feb 02 20:46:27 EST 2021" docASTNodeCount="3519" docActiveCodeLength="21325" docExpressionCount="2394" docLength="23550" endLine="122" length="2" offset="4846" repeat="2" startLine="122" starttimestamp="1612315732965" timestamp="1054622" timestamp2="1054748">
    <text><![CDATA[wb]]></text>
  </DocumentChange>
  <DocumentChange __id="1621" _type="Insert" date="Tue Feb 02 20:46:27 EST 2021" docASTNodeCount="3519" docActiveCodeLength="21326" docExpressionCount="2394" docLength="23551" length="1" offset="4846" starttimestamp="1612315732965" timestamp="1054815">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="1625" _type="MoveCaretCommand" caretOffset="7071" date="Tue Feb 02 20:46:34 EST 2021" docOffset="23549" starttimestamp="1612315732965" timestamp="1061379" />
  <Command __id="1626" _type="MoveCaretCommand" caretOffset="7068" date="Tue Feb 02 20:46:35 EST 2021" docOffset="23546" starttimestamp="1612315732965" timestamp="1062076" />
  <Command __id="1628" _type="InsertStringCommand" date="Tue Feb 02 20:46:42 EST 2021" starttimestamp="1612315732965" timestamp="1069161" timestamp2="1069161">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1630" _type="InsertStringCommand" date="Tue Feb 02 20:46:42 EST 2021" starttimestamp="1612315732965" timestamp="1069381" timestamp2="1069381">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1632" _type="InsertStringCommand" date="Tue Feb 02 20:46:42 EST 2021" starttimestamp="1612315732965" timestamp="1069447" timestamp2="1069447">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1633" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:42 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1069489" />
  <Command __id="1640" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:42 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1069979" />
  <Command __id="1642" _type="InsertStringCommand" date="Tue Feb 02 20:46:43 EST 2021" starttimestamp="1612315732965" timestamp="1070319" timestamp2="1070319">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="1643" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:43 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1070362" />
  <Command __id="1648" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:43 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1070649" />
  <Command __id="1650" _type="InsertStringCommand" date="Tue Feb 02 20:46:43 EST 2021" starttimestamp="1612315732965" timestamp="1070957" timestamp2="1070957">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1652" _type="InsertStringCommand" date="Tue Feb 02 20:46:43 EST 2021" starttimestamp="1612315732965" timestamp="1070996" timestamp2="1070996">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1653" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:44 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1071039" />
  <Command __id="1654" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:44 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1071057" />
  <Command __id="1656" _type="InsertStringCommand" date="Tue Feb 02 20:46:44 EST 2021" starttimestamp="1612315732965" timestamp="1071148" timestamp2="1071148">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="1657" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:44 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1071241" />
  <Command __id="1658" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:44 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1071259" />
  <Command __id="1660" _type="InsertStringCommand" date="Tue Feb 02 20:46:44 EST 2021" starttimestamp="1612315732965" timestamp="1071270" timestamp2="1071270">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1661" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:44 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1071363" />
  <Command __id="1662" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:44 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1071391" />
  <Command __id="1664" _type="InsertStringCommand" date="Tue Feb 02 20:46:44 EST 2021" starttimestamp="1612315732965" timestamp="1071404" timestamp2="1071404">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1665" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:44 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1071508" />
  <Command __id="1666" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:44 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1071531" />
  <Command __id="1668" _type="InsertStringCommand" date="Tue Feb 02 20:46:44 EST 2021" starttimestamp="1612315732965" timestamp="1071587" timestamp2="1071587">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1669" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:44 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1071677" />
  <Command __id="1670" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:44 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1071702" />
  <Command __id="1672" _type="InsertStringCommand" date="Tue Feb 02 20:46:44 EST 2021" starttimestamp="1612315732965" timestamp="1071747" timestamp2="1071747">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1673" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:44 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1071841" />
  <Command __id="1674" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:44 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1071867" />
  <Command __id="1676" _type="InsertStringCommand" date="Tue Feb 02 20:46:44 EST 2021" starttimestamp="1612315732965" timestamp="1071878" timestamp2="1071878">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1677" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:44 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1071970" />
  <Command __id="1678" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:44 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1071990" />
  <Command __id="1680" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:46:45 EST 2021" starttimestamp="1612315732965" timestamp="1072195" />
  <Command __id="1682" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:46:45 EST 2021" starttimestamp="1612315732965" timestamp="1072312" />
  <Command __id="1684" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:46:45 EST 2021" starttimestamp="1612315732965" timestamp="1072428" />
  <Command __id="1686" _type="InsertStringCommand" date="Tue Feb 02 20:46:45 EST 2021" starttimestamp="1612315732965" timestamp="1072674" timestamp2="1072674">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="1688" _type="InsertStringCommand" date="Tue Feb 02 20:46:45 EST 2021" starttimestamp="1612315732965" timestamp="1072906" timestamp2="1072906">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1689" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:45 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1072998" />
  <Command __id="1690" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:45 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1073017" />
  <Command __id="1692" _type="InsertStringCommand" date="Tue Feb 02 20:46:46 EST 2021" starttimestamp="1612315732965" timestamp="1073035" timestamp2="1073035">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1693" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:46 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1073129" />
  <Command __id="1694" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:46 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1073154" />
  <Command __id="1696" _type="InsertStringCommand" date="Tue Feb 02 20:46:46 EST 2021" starttimestamp="1612315732965" timestamp="1073463" timestamp2="1073463">
    <data><![CDATA[W]]></data>
  </Command>
  <Command __id="1698" _type="InsertStringCommand" date="Tue Feb 02 20:46:46 EST 2021" starttimestamp="1612315732965" timestamp="1073668" timestamp2="1073668">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1699" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:46 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1073761" />
  <Command __id="1700" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:46 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1073780" />
  <Command __id="1702" _type="InsertStringCommand" date="Tue Feb 02 20:46:46 EST 2021" starttimestamp="1612315732965" timestamp="1073879" timestamp2="1073879">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1703" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:46 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1073973" />
  <Command __id="1704" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:46 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1073992" />
  <Command __id="1706" _type="InsertStringCommand" date="Tue Feb 02 20:46:47 EST 2021" starttimestamp="1612315732965" timestamp="1074245" timestamp2="1074245">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1708" _type="InsertStringCommand" date="Tue Feb 02 20:46:47 EST 2021" starttimestamp="1612315732965" timestamp="1074404" timestamp2="1074404">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1709" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:47 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1074498" />
  <Command __id="1710" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:47 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1074522" />
  <Command __id="1712" _type="InsertStringCommand" date="Tue Feb 02 20:46:47 EST 2021" starttimestamp="1612315732965" timestamp="1074566" timestamp2="1074566">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1713" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:47 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1074660" />
  <Command __id="1714" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:47 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1074678" />
  <Command __id="1716" _type="InsertStringCommand" date="Tue Feb 02 20:46:47 EST 2021" starttimestamp="1612315732965" timestamp="1074785" timestamp2="1074785">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1717" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:47 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1074875" />
  <Command __id="1718" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:47 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1074893" />
  <Command __id="1720" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:46:48 EST 2021" starttimestamp="1612315732965" timestamp="1075224" />
  <Command __id="1722" _type="InsertStringCommand" date="Tue Feb 02 20:46:48 EST 2021" starttimestamp="1612315732965" timestamp="1075394" timestamp2="1075394">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1724" _type="InsertStringCommand" date="Tue Feb 02 20:46:48 EST 2021" starttimestamp="1612315732965" timestamp="1075489" timestamp2="1075489">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1725" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:48 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1075532" />
  <Command __id="1726" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:48 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1075552" />
  <Command __id="1728" _type="InsertStringCommand" date="Tue Feb 02 20:46:48 EST 2021" starttimestamp="1612315732965" timestamp="1075583" timestamp2="1075583">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1730" _type="InsertStringCommand" date="Tue Feb 02 20:46:48 EST 2021" starttimestamp="1612315732965" timestamp="1075647" timestamp2="1075647">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1731" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:48 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1075689" />
  <Command __id="1732" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:48 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1075712" />
  <Command __id="1734" _type="InsertStringCommand" date="Tue Feb 02 20:46:49 EST 2021" starttimestamp="1612315732965" timestamp="1076090" timestamp2="1076090">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1736" _type="InsertStringCommand" date="Tue Feb 02 20:46:49 EST 2021" starttimestamp="1612315732965" timestamp="1076915" timestamp2="1076915">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1738" _type="InsertStringCommand" date="Tue Feb 02 20:46:50 EST 2021" starttimestamp="1612315732965" timestamp="1077072" timestamp2="1077072">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1740" _type="InsertStringCommand" date="Tue Feb 02 20:46:50 EST 2021" starttimestamp="1612315732965" timestamp="1077136" timestamp2="1077136">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1741" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:50 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1077178" />
  <Command __id="1743" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:50 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1077449" />
  <Command __id="1745" _type="InsertStringCommand" date="Tue Feb 02 20:46:50 EST 2021" starttimestamp="1612315732965" timestamp="1077488" timestamp2="1077488">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="1747" _type="InsertStringCommand" date="Tue Feb 02 20:46:51 EST 2021" starttimestamp="1612315732965" timestamp="1078083" timestamp2="1078083">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1748" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:51 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1078169" />
  <Command __id="1751" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:51 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1078429" />
  <Command __id="1753" _type="InsertStringCommand" date="Tue Feb 02 20:46:51 EST 2021" starttimestamp="1612315732965" timestamp="1078445" timestamp2="1078445">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1754" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 02 20:46:53 EST 2021" starttimestamp="1612315732965" timestamp="1080086" />
  <Command __id="1756" _type="InsertStringCommand" date="Tue Feb 02 20:46:53 EST 2021" starttimestamp="1612315732965" timestamp="1080542" timestamp2="1080542">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1758" _type="InsertStringCommand" date="Tue Feb 02 20:46:53 EST 2021" starttimestamp="1612315732965" timestamp="1080764" timestamp2="1080764">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1760" _type="InsertStringCommand" date="Tue Feb 02 20:46:53 EST 2021" starttimestamp="1612315732965" timestamp="1080832" timestamp2="1080832">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1762" _type="InsertStringCommand" date="Tue Feb 02 20:46:53 EST 2021" starttimestamp="1612315732965" timestamp="1080876" timestamp2="1080876">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1763" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:53 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1080917" />
  <Command __id="1765" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:54 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1081092" />
  <Command __id="1767" _type="InsertStringCommand" date="Tue Feb 02 20:46:54 EST 2021" starttimestamp="1612315732965" timestamp="1081210" timestamp2="1081210">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1768" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:54 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1081296" />
  <Command __id="1769" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:54 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1081315" />
  <Command __id="1771" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:46:54 EST 2021" starttimestamp="1612315732965" timestamp="1081563" />
  <Command __id="1773" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 02 20:46:54 EST 2021" starttimestamp="1612315732965" timestamp="1081673" />
  <Command __id="1775" _type="InsertStringCommand" date="Tue Feb 02 20:46:54 EST 2021" starttimestamp="1612315732965" timestamp="1081804" timestamp2="1081804">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1777" _type="InsertStringCommand" date="Tue Feb 02 20:46:54 EST 2021" starttimestamp="1612315732965" timestamp="1081879" timestamp2="1081879">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1778" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:54 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1081970" />
  <Command __id="1779" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:54 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1081990" />
  <Command __id="1781" _type="InsertStringCommand" date="Tue Feb 02 20:46:54 EST 2021" starttimestamp="1612315732965" timestamp="1082016" timestamp2="1082016">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1782" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:55 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1082108" />
  <Command __id="1783" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:55 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1082133" />
  <Command __id="1785" _type="InsertStringCommand" date="Tue Feb 02 20:46:55 EST 2021" starttimestamp="1612315732965" timestamp="1082144" timestamp2="1082144">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1787" _type="InsertStringCommand" date="Tue Feb 02 20:46:55 EST 2021" starttimestamp="1612315732965" timestamp="1082228" timestamp2="1082228">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1788" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:55 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1082270" />
  <Command __id="1789" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:55 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1082292" />
  <Command __id="1791" _type="InsertStringCommand" date="Tue Feb 02 20:46:55 EST 2021" starttimestamp="1612315732965" timestamp="1082319" timestamp2="1082319">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1793" _type="InsertStringCommand" date="Tue Feb 02 20:46:55 EST 2021" starttimestamp="1612315732965" timestamp="1082383" timestamp2="1082383">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1794" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:55 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1082423" />
  <Command __id="1795" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:55 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1082448" />
  <Command __id="1797" _type="InsertStringCommand" date="Tue Feb 02 20:46:55 EST 2021" starttimestamp="1612315732965" timestamp="1082459" timestamp2="1082459">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1799" _type="InsertStringCommand" date="Tue Feb 02 20:46:55 EST 2021" starttimestamp="1612315732965" timestamp="1082544" timestamp2="1082544">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1801" _type="InsertStringCommand" date="Tue Feb 02 20:46:55 EST 2021" starttimestamp="1612315732965" timestamp="1082652" timestamp2="1082652">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1803" _type="InsertStringCommand" date="Tue Feb 02 20:46:56 EST 2021" starttimestamp="1612315732965" timestamp="1083172" timestamp2="1083172">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1805" _type="InsertStringCommand" date="Tue Feb 02 20:46:56 EST 2021" starttimestamp="1612315732965" timestamp="1083242" timestamp2="1083242">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1807" _type="InsertStringCommand" date="Tue Feb 02 20:46:56 EST 2021" starttimestamp="1612315732965" timestamp="1083288" timestamp2="1083288">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1808" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:56 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1083321" />
  <Command __id="1810" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:57 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1084058" />
  <Command __id="1812" _type="InsertStringCommand" date="Tue Feb 02 20:46:57 EST 2021" starttimestamp="1612315732965" timestamp="1084073" timestamp2="1084073">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1814" _type="InsertStringCommand" date="Tue Feb 02 20:46:57 EST 2021" starttimestamp="1612315732965" timestamp="1084523" timestamp2="1084523">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1816" _type="InsertStringCommand" date="Tue Feb 02 20:46:58 EST 2021" starttimestamp="1612315732965" timestamp="1085269" timestamp2="1085269">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1818" _type="InsertStringCommand" date="Tue Feb 02 20:46:58 EST 2021" starttimestamp="1612315732965" timestamp="1085306" timestamp2="1085306">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1820" _type="InsertStringCommand" date="Tue Feb 02 20:46:58 EST 2021" starttimestamp="1612315732965" timestamp="1085354" timestamp2="1085354">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1821" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:58 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1085396" />
  <Command __id="1822" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:58 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1085421" />
  <Command __id="1824" _type="InsertStringCommand" date="Tue Feb 02 20:46:58 EST 2021" starttimestamp="1612315732965" timestamp="1085438" timestamp2="1085438">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1825" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 02 20:46:58 EST 2021" start_end="START" starttimestamp="1612315732965" timestamp="1085530" />
  <Command __id="1826" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 02 20:46:58 EST 2021" start_end="END" starttimestamp="1612315732965" timestamp="1085549" />
  <Command __id="1828" _type="InsertStringCommand" date="Tue Feb 02 20:46:58 EST 2021" starttimestamp="1612315732965" timestamp="1085578" timestamp2="1085578">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="1830" _type="InsertStringCommand" date="Tue Feb 02 20:46:59 EST 2021" starttimestamp="1612315732965" timestamp="1086037" timestamp2="1086037">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1832" _type="InsertStringCommand" date="Tue Feb 02 20:46:59 EST 2021" starttimestamp="1612315732965" timestamp="1086376" timestamp2="1086376">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1627" _type="Insert" date="Tue Feb 02 20:46:42 EST 2021" docASTNodeCount="3524" docActiveCodeLength="21350" docExpressionCount="2395" docLength="23575" length="24" offset="23546" repeat="22" starttimestamp="1612315732965" timestamp="1069151" timestamp2="1071873">
    <text><![CDATA[
	private void maybeadd]]></text>
  </DocumentChange>
  <DocumentChange __id="1679" _type="Delete" date="Tue Feb 02 20:46:45 EST 2021" docASTNodeCount="3524" docActiveCodeLength="21347" docExpressionCount="2395" docLength="23572" endLine="644" length="3" offset="23567" repeat="3" startLine="644" starttimestamp="1612315732965" timestamp="1072193" timestamp2="1072426">
    <text><![CDATA[add]]></text>
  </DocumentChange>
  <DocumentChange __id="1685" _type="Insert" date="Tue Feb 02 20:46:45 EST 2021" docASTNodeCount="3524" docActiveCodeLength="21357" docExpressionCount="2395" docLength="23582" length="10" offset="23567" repeat="10" starttimestamp="1612315732965" timestamp="1072668" timestamp2="1074777">
    <text><![CDATA[AddWebComa]]></text>
  </DocumentChange>
  <DocumentChange __id="1719" _type="Delete" date="Tue Feb 02 20:46:48 EST 2021" docASTNodeCount="3524" docActiveCodeLength="21356" docExpressionCount="2395" docLength="23581" endLine="644" length="1" offset="23576" startLine="644" starttimestamp="1612315732965" timestamp="1075222">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="1721" _type="Insert" date="Tue Feb 02 20:46:48 EST 2021" docASTNodeCount="3524" docActiveCodeLength="21366" docExpressionCount="2395" docLength="23591" length="10" offset="23576" repeat="9" starttimestamp="1612315732965" timestamp="1075388" timestamp2="1077326">
    <text><![CDATA[mand(List)]]></text>
  </DocumentChange>
  <DocumentChange __id="1744" _type="Replace" date="Tue Feb 02 20:46:50 EST 2021" docASTNodeCount="3524" docActiveCodeLength="21369" docExpressionCount="2395" docLength="23594" endLine="644" insertionLength="7" int_docASTNodeCount="3524" int_docActiveCodeLength="21362" int_docExpressionCount="2395" int_docLength="23587" length="4" offset="23581" startLine="644" starttimestamp="1612315732965" timestamp="1077457">
    <deletedText><![CDATA[List]]></deletedText>
    <insertedText><![CDATA[List<E>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1746" _type="Replace" date="Tue Feb 02 20:46:51 EST 2021" docASTNodeCount="3524" docActiveCodeLength="21369" docExpressionCount="2395" docLength="23594" endLine="644" insertionLength="1" int_docASTNodeCount="3524" int_docActiveCodeLength="21368" int_docExpressionCount="2395" int_docLength="23593" length="1" offset="23586" startLine="644" starttimestamp="1612315732965" timestamp="1078075">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1749" _type="Insert" date="Tue Feb 02 20:46:51 EST 2021" docASTNodeCount="3524" docActiveCodeLength="21371" docExpressionCount="2395" docLength="23596" length="2" offset="23587" repeat="2" starttimestamp="1612315732965" timestamp="1078366" timestamp2="1078379">
    <text><![CDATA[hi]]></text>
  </DocumentChange>
  <DocumentChange __id="1752" _type="Replace" date="Tue Feb 02 20:46:51 EST 2021" docASTNodeCount="3524" docActiveCodeLength="21378" docExpressionCount="2395" docLength="23603" endLine="644" insertionLength="10" int_docASTNodeCount="3524" int_docActiveCodeLength="21368" int_docExpressionCount="2395" int_docLength="23593" length="3" offset="23586" startLine="644" starttimestamp="1612315732965" timestamp="1078437">
    <deletedText><![CDATA[ehi]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1755" _type="Insert" date="Tue Feb 02 20:46:53 EST 2021" docASTNodeCount="3531" docActiveCodeLength="21384" docExpressionCount="2398" docLength="23609" length="6" offset="23597" repeat="6" starttimestamp="1612315732965" timestamp="1080533" timestamp2="1081208">
    <text><![CDATA[ newco]]></text>
  </DocumentChange>
  <DocumentChange __id="1770" _type="Delete" date="Tue Feb 02 20:46:54 EST 2021" docASTNodeCount="3524" docActiveCodeLength="21382" docExpressionCount="2395" docLength="23607" endLine="644" length="2" offset="23601" repeat="2" startLine="644" starttimestamp="1612315732965" timestamp="1081560" timestamp2="1081670">
    <text><![CDATA[co]]></text>
  </DocumentChange>
  <DocumentChange __id="1774" _type="Insert" date="Tue Feb 02 20:46:54 EST 2021" docASTNodeCount="3531" docActiveCodeLength="21396" docExpressionCount="2398" docLength="23621" length="14" offset="23601" repeat="14" starttimestamp="1612315732965" timestamp="1081802" timestamp2="1083555">
    <text><![CDATA[Commands, ehic]]></text>
  </DocumentChange>
  <DocumentChange __id="1811" _type="Replace" date="Tue Feb 02 20:46:57 EST 2021" docASTNodeCount="3531" docActiveCodeLength="21402" docExpressionCount="2398" docLength="23627" endLine="644" insertionLength="10" int_docASTNodeCount="3531" int_docActiveCodeLength="21392" int_docExpressionCount="2398" int_docLength="23617" length="4" offset="23611" startLine="644" starttimestamp="1612315732965" timestamp="1084066">
    <deletedText><![CDATA[ehic]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1813" _type="Insert" date="Tue Feb 02 20:46:57 EST 2021" docASTNodeCount="3535" docActiveCodeLength="21413" docExpressionCount="2400" docLength="23638" length="11" offset="23621" repeat="11" starttimestamp="1612315732965" timestamp="1084521" timestamp2="1086667">
    <text><![CDATA[ last, ehic]]></text>
  </DocumentChange>
  <DocumentChange __id="1840" _type="Replace" date="Tue Feb 02 20:46:59 EST 2021" docASTNodeCount="3535" docActiveCodeLength="21419" docExpressionCount="2400" docLength="23644" endLine="644" insertionLength="10" int_docASTNodeCount="3535" int_docActiveCodeLength="21409" int_docExpressionCount="2400" int_docLength="23634" length="4" offset="23628" startLine="644" starttimestamp="1612315732965" timestamp="1086994">
    <deletedText><![CDATA[ehic]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1842" _type="Insert" date="Tue Feb 02 20:47:00 EST 2021" docASTNodeCount="3539" docActiveCodeLength="21423" docExpressionCount="2402" docLength="23648" length="4" offset="23638" repeat="4" starttimestamp="1612315732965" timestamp="1087344" timestamp2="1088074">
    <text><![CDATA[ cur]]></text>
  </DocumentChange>
  <DocumentChange __id="1854" _type="Insert" date="Tue Feb 02 20:47:01 EST 2021" docASTNodeCount="3539" docActiveCodeLength="21433" docExpressionCount="2402" docLength="23658" length="10" offset="23643" repeat="2" starttimestamp="1612315732965" timestamp="1088966" timestamp2="1089105">
    <text><![CDATA[ {
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="1944" _type="Insert" date="Tue Feb 02 20:48:20 EST 2021" docASTNodeCount="655" docActiveCodeLength="3927" docExpressionCount="420" docLength="3927" length="7" offset="1887" repeat="7" starttimestamp="1612315732965" timestamp="1167886" timestamp2="1169829">
    <text><![CDATA[ "Web";]]></text>
  </DocumentChange>
  <Command __id="1958" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176497" />
  <Command __id="1959" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176625" />
  <Command __id="1960" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176633" />
  <Command __id="1961" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176633" />
  <Command __id="1962" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176640" />
  <Command __id="1963" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176641" />
  <Command __id="1964" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176789" />
  <Command __id="1965" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176790" />
  <Command __id="1966" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176856" />
  <Command __id="1967" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176856" />
  <Command __id="1968" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176923" />
  <Command __id="1969" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176924" />
  <Command __id="1970" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176998" />
  <Command __id="1971" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:29 EST 2021" starttimestamp="1612315732965" timestamp="1176998" />
  <Command __id="1972" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:30 EST 2021" starttimestamp="1612315732965" timestamp="1177066" />
  <Command __id="1973" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:30 EST 2021" starttimestamp="1612315732965" timestamp="1177067" />
  <Command __id="1974" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:30 EST 2021" starttimestamp="1612315732965" timestamp="1177128" />
  <Command __id="1975" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:30 EST 2021" starttimestamp="1612315732965" timestamp="1177128" />
  <Command __id="1976" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:30 EST 2021" starttimestamp="1612315732965" timestamp="1177200" />
  <Command __id="1977" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:30 EST 2021" starttimestamp="1612315732965" timestamp="1177200" />
  <Command __id="1978" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:30 EST 2021" starttimestamp="1612315732965" timestamp="1177263" />
  <Command __id="1979" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:30 EST 2021" starttimestamp="1612315732965" timestamp="1177264" />
  <Command __id="1980" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:48:30 EST 2021" starttimestamp="1612315732965" timestamp="1177329" />
  <Command __id="1982" _type="MoveCaretCommand" caretOffset="7171" date="Tue Feb 02 20:48:32 EST 2021" docOffset="23649" starttimestamp="1612315732965" timestamp="1179235" />
  <Command __id="1983" _type="ShellCommand" date="Tue Feb 02 20:48:43 EST 2021" starttimestamp="1612315732965" timestamp="1190992" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1984" _type="ShellCommand" date="Tue Feb 02 20:48:48 EST 2021" starttimestamp="1612315732965" timestamp="1195127" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1985" _type="MoveCaretCommand" caretOffset="5372" date="Tue Feb 02 20:48:48 EST 2021" docOffset="7023" starttimestamp="1612315732965" timestamp="1195181" />
  <Command __id="1986" _type="MoveCaretCommand" caretOffset="5598" date="Tue Feb 02 20:48:54 EST 2021" docOffset="7249" starttimestamp="1612315732965" timestamp="1201464" />
  <Command __id="1987" _type="ShellCommand" date="Tue Feb 02 20:49:21 EST 2021" starttimestamp="1612315732965" timestamp="1228866" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1988" _type="ShellCommand" date="Tue Feb 02 20:49:36 EST 2021" starttimestamp="1612315732965" timestamp="1243533" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1989" _type="MoveCaretCommand" caretOffset="3201" date="Tue Feb 02 20:49:37 EST 2021" docOffset="4852" starttimestamp="1612315732965" timestamp="1244900" />
  <Command __id="1990" _type="MoveCaretCommand" caretOffset="3183" date="Tue Feb 02 20:49:39 EST 2021" docOffset="4834" starttimestamp="1612315732965" timestamp="1246356" />
  <Command __id="1991" _type="MoveCaretCommand" caretOffset="3194" date="Tue Feb 02 20:49:39 EST 2021" docOffset="4845" starttimestamp="1612315732965" timestamp="1246906" />
  <Command __id="1992" _type="MoveCaretCommand" caretOffset="3185" date="Tue Feb 02 20:49:42 EST 2021" docOffset="4836" starttimestamp="1612315732965" timestamp="1249187" />
  <Command __id="1994" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:53:29 EST 2021" starttimestamp="1612315732965" timestamp="1476770" />
  <Command __id="1995" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:53:29 EST 2021" starttimestamp="1612315732965" timestamp="1476777" />
  <Command __id="1996" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:53:29 EST 2021" starttimestamp="1612315732965" timestamp="1476777" />
  <Command __id="1997" _type="EclipseCommand" commandID="" date="Tue Feb 02 20:53:29 EST 2021" starttimestamp="1612315732965" timestamp="1476784" />
  <Command __id="1998" _type="ShellCommand" date="Tue Feb 02 22:33:20 EST 2021" starttimestamp="1612315732965" timestamp="7467603" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1999" _type="MoveCaretCommand" caretOffset="3327" date="Tue Feb 02 22:33:20 EST 2021" docOffset="4978" starttimestamp="1612315732965" timestamp="7467633" />
  <Command __id="2000" _type="ShellCommand" date="Tue Feb 02 22:33:21 EST 2021" starttimestamp="1612315732965" timestamp="7468229" type="ECLIPSE_LOST_FOCUS" />
</Events>
