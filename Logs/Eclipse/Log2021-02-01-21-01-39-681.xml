<Events startTimestamp="1612231299681" logVersion="1.0.0.202101171653">
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:01:39 EST 2021" docASTNodeCount="61" docActiveCodeLength="338" docExpressionCount="26" docLength="338" projectName="A0" starttimestamp="1612231299681" timestamp="110">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Sophomore 2st Sem\COMP533\A0\src\mapper\MapperFactory.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package mapper;

public class MapperFactory {
	private static Mapper<String, Integer> mapper;
	
	public static Mapper<String, Integer> getMapper(){
		if (mapper == null) 
			mapper = new ATokenCountingMapper();
		return mapper;
	}
	
	public static void setMapper(Mapper<String, Integer> aMapper) {
		mapper = aMapper;
	}
}
]]></snapshot>
  </Command>
  <Command __id="2" _type="ShellCommand" date="Mon Feb 01 21:01:43 EST 2021" starttimestamp="1612231299681" timestamp="4139" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3" _type="ShellCommand" date="Mon Feb 01 21:01:44 EST 2021" starttimestamp="1612231299681" timestamp="5125" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Mon Feb 01 21:01:44 EST 2021" starttimestamp="1612231299681" timestamp="5157" />
  <Command __id="5" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:01:46 EST 2021" docASTNodeCount="3420" docActiveCodeLength="20767" docExpressionCount="2338" docLength="21855" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="6596">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RestCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private AJoiner joiner;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createRestCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		joiner = new AJoiner(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				joiner.finish();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						joiner.finish();
						return;
					}
					for (File file : logs) {
						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
						if (commands.size() < 2) {
							continue;
						}
						List<EHICommand> newCommands = new ArrayList<>();
						EHICommand last = null;
						EHICommand cur = null;
						for (EHICommand command : commands) {
							if (cur == null) {
								cur = command;
								newCommands.add(command);
							} else {
								last = cur;
								cur = command;
								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
								if (rest >= 1*ONE_SECOND) {
									String range = "";
									if (rest < 2*ONE_SECOND) {
										range = "1s-2s";
									} else if (rest < 5*ONE_SECOND) {
										range = "2s-5s";
									} else if (rest < 10*ONE_SECOND) {
										range = "5s-10s";
									} else if (rest < 20*ONE_SECOND) {
										range = "10s-20s";
									} else if (rest < 30*ONE_SECOND) {
										range = "20s-30s";
									} else if (rest < ONE_MIN) {
										range = "30s-1m";
									} else if (rest < TWO_MIN) {
										range = "1m-2m";
									} else if (rest < FIVE_MIN) {
										range = "2m-5m";
									} else if (rest < TEN_MIN) {
										range = "5m-10m";
									} else if (rest < 3*TEN_MIN) {
										range = "10m-30m";
									} else if (rest < 6*TEN_MIN) {
										range = "30m-60m";
									} else {
										range = ">1h";
									}
									RestCommand rCommnad = new RestCommand(last.getCommandType(), cur.getCommandType(), rest, range);
									rCommnad.setStartTimestamp(last.getStartTimestamp());
									rCommnad.setTimestamp(last.getTimestamp()+1);
									newCommands.add(rCommnad);
								} 
								newCommands.add(command);
							}
						}
						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
						for (EHICommand c : newCommands) {
							logContent += c.persist();
						}
						logContent += XML_FILE_ENDING;
						try {
							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
							if (newLog.exists()) {
								newLog.delete();
							}
							newLog.getParentFile().mkdirs();
							newLog.createNewFile();
							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
							System.out.println("Writing to file " + newLog.getPath());
							writer.write(logContent);
							writer.close();
							System.out.println("Finished writing to file " + newLog.getPath());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					synchronized (this) {
						threadCount--;
					}
					joiner.finish();
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
//			if (j == students.length-1) {
//				try {
//					thread.join();
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} 
//				System.exit(0);
//			}
		}
		joiner.join();
		System.exit(0);
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",
//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",
//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",
//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <Command __id="6" _type="SelectTextCommand" caretOffset="14768" date="Mon Feb 01 21:01:46 EST 2021" end="14768" start="14465" starttimestamp="1612231299681" timestamp="6727" />
  <Command __id="7" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:01:47 EST 2021" docASTNodeCount="5915" docActiveCodeLength="33948" docExpressionCount="3990" docLength="35023" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="7762">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RestCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	private Analyzer analyzer;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private int count = 0;
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	private static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private static final String XML_FILE_ENDING = "\r\n</Events>"; 
	private int threadCount = 0;
	private AJoiner joiner;
	private static final int THREAD_LIM = 5;


	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",
//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createRestCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		joiner = new AJoiner(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					joiner.finish();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								joiner.finish();
								return;
							}
							for (File file : logs) {
								List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
								if (commands.size() < 2) {
									continue;
								}
								List<EHICommand> newCommands = new ArrayList<>();
								EHICommand last = null;
								EHICommand cur = null;
								for (EHICommand command : commands) {
									if (cur == null) {
										cur = command;
										newCommands.add(command);
									} else {
										last = cur;
										cur = command;
										long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
										if (rest >= 1*ONE_SECOND) {
											String range = "";
											if (rest < 2*ONE_SECOND) {
												range = "1s-2s";
											} else if (rest < 5*ONE_SECOND) {
												range = "2s-5s";
											} else if (rest < 10*ONE_SECOND) {
												range = "5s-10s";
											} else if (rest < 20*ONE_SECOND) {
												range = "10s-20s";
											} else if (rest < 30*ONE_SECOND) {
												range = "20s-30s";
											} else if (rest < ONE_MIN) {
												range = "30s-1m";
											} else if (rest < TWO_MIN) {
												range = "1m-2m";
											} else if (rest < FIVE_MIN) {
												range = "2m-5m";
											} else if (rest < TEN_MIN) {
												range = "5m-10m";
											} else if (rest < 3*TEN_MIN) {
												range = "10m-30m";
											} else if (rest < 6*TEN_MIN) {
												range = "30m-60m";
											} else {
												range = ">1h";
											}
											RestCommand rCommnad = new RestCommand(last.getCommandType(), cur.getCommandType(), rest, range);
											rCommnad.setStartTimestamp(last.getStartTimestamp());
											rCommnad.setTimestamp(last.getTimestamp()+1);
											newCommands.add(rCommnad);
										} 
										newCommands.add(command);
									}
								}
								String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
								for (EHICommand c : newCommands) {
									logContent += c.persist();
								}
								logContent += XML_FILE_ENDING;
								try {
									File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
									if (newLog.exists()) {
										newLog.delete();
									}
									newLog.getParentFile().mkdirs();
									newLog.createNewFile();
									BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
									System.out.println("Writing to file " + newLog.getPath());
									writer.write(logContent);
									writer.close();
									System.out.println("Finished writing to file " + newLog.getPath());
								} catch (IOException e) {
									e.printStackTrace();
								}
							}
							synchronized (this) {
								threadCount--;
							}
							joiner.finish();
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
//					if (i == assigns.length-1 && j == students.length-1) {
//						try {
//							thread.join();
//						} catch (InterruptedException e) {
//							e.printStackTrace();
//						} 
//						System.exit(0);
//					}
				}
			}
		}
		joiner.join();
		System.exit(0);
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
//		return df.format(t/ONE_SECOND);
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			for(int k = 1; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {
//						continue;
//					}
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
}
]]></snapshot>
  </Command>
  <Command __id="8" _type="MoveCaretCommand" caretOffset="10971" date="Mon Feb 01 21:01:47 EST 2021" docOffset="12506" starttimestamp="1612231299681" timestamp="7886" />
  <Command __id="9" _type="MoveCaretCommand" caretOffset="10926" date="Mon Feb 01 21:01:47 EST 2021" docOffset="12461" starttimestamp="1612231299681" timestamp="8266" />
  <Command __id="12" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:01:58 EST 2021" starttimestamp="1612231299681" timestamp="18772" />
  <Command __id="13" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:01:58 EST 2021" starttimestamp="1612231299681" timestamp="18810" />
  <Command __id="14" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:01:58 EST 2021" starttimestamp="1612231299681" timestamp="18824" />
  <Command __id="15" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:01:58 EST 2021" starttimestamp="1612231299681" timestamp="18931" />
  <Command __id="16" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:01:58 EST 2021" starttimestamp="1612231299681" timestamp="19184" />
  <Command __id="17" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:01:58 EST 2021" starttimestamp="1612231299681" timestamp="19188" />
  <Command __id="18" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:01:58 EST 2021" starttimestamp="1612231299681" timestamp="19189" />
  <Command __id="19" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:01:58 EST 2021" starttimestamp="1612231299681" timestamp="19194" />
  <Command __id="20" _type="MoveCaretCommand" caretOffset="704" date="Mon Feb 01 21:02:17 EST 2021" docOffset="731" starttimestamp="1612231299681" timestamp="38283" />
  <Command __id="21" _type="ShellCommand" date="Mon Feb 01 21:02:19 EST 2021" starttimestamp="1612231299681" timestamp="39783" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="22" _type="ShellCommand" date="Mon Feb 01 21:02:32 EST 2021" starttimestamp="1612231299681" timestamp="53287" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="23" _type="MoveCaretCommand" caretOffset="776" date="Mon Feb 01 21:02:33 EST 2021" docOffset="803" starttimestamp="1612231299681" timestamp="53370" />
  <Command __id="24" _type="ShellCommand" date="Mon Feb 01 21:02:39 EST 2021" starttimestamp="1612231299681" timestamp="60074" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="138" _type="MoveCaretCommand" caretOffset="2316" date="Mon Feb 01 21:03:39 EST 2021" docOffset="2554" starttimestamp="1612231299681" timestamp="119388" />
  <Command __id="139" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:39 EST 2021" starttimestamp="1612231299681" timestamp="120253" />
  <Command __id="140" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:39 EST 2021" starttimestamp="1612231299681" timestamp="120267" />
  <Command __id="141" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:39 EST 2021" starttimestamp="1612231299681" timestamp="120267" />
  <Command __id="142" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:39 EST 2021" starttimestamp="1612231299681" timestamp="120275" />
  <Command __id="143" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:39 EST 2021" starttimestamp="1612231299681" timestamp="120275" />
  <Command __id="144" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120337" />
  <Command __id="145" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120433" />
  <Command __id="146" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120437" />
  <Command __id="147" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120503" />
  <Command __id="148" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120503" />
  <Command __id="149" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120570" />
  <Command __id="150" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120571" />
  <Command __id="151" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120653" />
  <Command __id="152" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120654" />
  <Command __id="153" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120728" />
  <Command __id="154" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120728" />
  <Command __id="155" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120791" />
  <Command __id="156" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120791" />
  <Command __id="157" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120862" />
  <Command __id="158" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120862" />
  <Command __id="159" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120961" />
  <Command __id="160" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="120961" />
  <Command __id="161" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:40 EST 2021" starttimestamp="1612231299681" timestamp="121029" />
  <Command __id="163" _type="SelectTextCommand" caretOffset="14768" date="Mon Feb 01 21:03:41 EST 2021" end="14768" start="14465" starttimestamp="1612231299681" timestamp="121543" />
  <Command __id="164" _type="MoveCaretCommand" caretOffset="14548" date="Mon Feb 01 21:03:42 EST 2021" docOffset="15831" starttimestamp="1612231299681" timestamp="122337" />
  <Command __id="166" _type="ShellCommand" date="Mon Feb 01 21:03:42 EST 2021" starttimestamp="1612231299681" timestamp="122888" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="167" _type="FindCommand" caseSensitive="true" date="Mon Feb 01 21:03:45 EST 2021" forward="true" matchWord="false" offset="15831" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1612231299681" timestamp="125417" wrapSearch="true">
    <searchString><![CDATA[restcommand]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="168" _type="FindCommand" caseSensitive="true" date="Mon Feb 01 21:03:46 EST 2021" forward="true" matchWord="false" offset="15831" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1612231299681" timestamp="127160" wrapSearch="true">
    <searchString><![CDATA[restcommand]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="169" _type="FindCommand" caseSensitive="true" date="Mon Feb 01 21:03:47 EST 2021" forward="true" matchWord="false" offset="15831" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1612231299681" timestamp="127335" wrapSearch="true">
    <searchString><![CDATA[restcommand]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="170" _type="ShellCommand" date="Mon Feb 01 21:03:47 EST 2021" starttimestamp="1612231299681" timestamp="127946" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="171" _type="MoveCaretCommand" caretOffset="14645" date="Mon Feb 01 21:03:47 EST 2021" docOffset="15928" starttimestamp="1612231299681" timestamp="128168" />
  <Command __id="172" _type="SelectTextCommand" caretOffset="4289" date="Mon Feb 01 21:03:53 EST 2021" end="4397" start="4289" starttimestamp="1612231299681" timestamp="133949" />
  <Command __id="173" _type="MoveCaretCommand" caretOffset="4286" date="Mon Feb 01 21:03:54 EST 2021" docOffset="5569" starttimestamp="1612231299681" timestamp="134351" />
  <Command __id="174" _type="SelectTextCommand" caretOffset="4291" date="Mon Feb 01 21:03:54 EST 2021" end="4291" start="4280" starttimestamp="1612231299681" timestamp="134511" />
  <Command __id="175" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:54 EST 2021" starttimestamp="1612231299681" timestamp="135204" />
  <Command __id="177" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:54 EST 2021" starttimestamp="1612231299681" timestamp="135221" />
  <Command __id="178" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:54 EST 2021" starttimestamp="1612231299681" timestamp="135222" />
  <Command __id="179" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:03:54 EST 2021" starttimestamp="1612231299681" timestamp="135230" />
  <Command __id="180" _type="InsertStringCommand" date="Mon Feb 01 21:03:54 EST 2021" starttimestamp="1612231299681" timestamp="135239" timestamp2="135239">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="182" _type="InsertStringCommand" date="Mon Feb 01 21:03:55 EST 2021" starttimestamp="1612231299681" timestamp="135329" timestamp2="135329">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="183" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:03:55 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="135332" />
  <Command __id="187" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:03:56 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="136374" />
  <Command __id="191" _type="InsertStringCommand" date="Mon Feb 01 21:03:56 EST 2021" starttimestamp="1612231299681" timestamp="136433" timestamp2="136433">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="192" _type="MoveCaretCommand" caretOffset="4269" date="Mon Feb 01 21:03:57 EST 2021" docOffset="5592" starttimestamp="1612231299681" timestamp="137424" />
  <Command __id="193" _type="SelectTextCommand" caretOffset="4268" date="Mon Feb 01 21:03:57 EST 2021" end="4268" start="4231" starttimestamp="1612231299681" timestamp="137563" />
  <Command __id="194" _type="CopyCommand" date="Mon Feb 01 21:03:57 EST 2021" starttimestamp="1612231299681" timestamp="137777" />
  <Command __id="195" _type="MoveCaretCommand" caretOffset="4289" date="Mon Feb 01 21:03:58 EST 2021" docOffset="5612" starttimestamp="1612231299681" timestamp="138653" />
  <Command __id="196" _type="SelectTextCommand" caretOffset="4292" date="Mon Feb 01 21:03:58 EST 2021" end="4292" start="4280" starttimestamp="1612231299681" timestamp="138810" />
  <Command __id="197" _type="CopyCommand" date="Mon Feb 01 21:03:58 EST 2021" starttimestamp="1612231299681" timestamp="138973" />
  <Command __id="198" _type="MoveCaretCommand" caretOffset="4311" date="Mon Feb 01 21:03:59 EST 2021" docOffset="5634" starttimestamp="1612231299681" timestamp="139350" />
  <Command __id="199" _type="SelectTextCommand" caretOffset="4319" date="Mon Feb 01 21:03:59 EST 2021" end="4319" start="4308" starttimestamp="1612231299681" timestamp="139500" />
  <Command __id="201" _type="PasteCommand" date="Mon Feb 01 21:03:59 EST 2021" starttimestamp="1612231299681" timestamp="139566" />
  <Command __id="202" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 21:04:01 EST 2021" starttimestamp="1612231299681" timestamp="141807" />
  <Command __id="203" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:04:01 EST 2021" starttimestamp="1612231299681" timestamp="141890" />
  <Command __id="204" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:04:01 EST 2021" starttimestamp="1612231299681" timestamp="142031" />
  <Command __id="205" _type="MoveCaretCommand" caretOffset="24" date="Mon Feb 01 21:04:04 EST 2021" docOffset="24" starttimestamp="1612231299681" timestamp="144855" />
  <Command __id="206" _type="MoveCaretCommand" caretOffset="1291" date="Mon Feb 01 21:04:09 EST 2021" docOffset="1291" starttimestamp="1612231299681" timestamp="149613" />
  <Command __id="207" _type="SelectTextCommand" caretOffset="1298" date="Mon Feb 01 21:04:09 EST 2021" end="1298" start="1287" starttimestamp="1612231299681" timestamp="149794" />
  <Command __id="209" _type="PasteCommand" date="Mon Feb 01 21:04:09 EST 2021" starttimestamp="1612231299681" timestamp="149908" />
  <Command __id="210" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 21:04:10 EST 2021" starttimestamp="1612231299681" timestamp="150841" />
  <Command __id="211" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:04:10 EST 2021" starttimestamp="1612231299681" timestamp="150931" />
  <Command __id="212" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:04:10 EST 2021" starttimestamp="1612231299681" timestamp="151054" />
  <Command __id="214" _type="MoveCaretCommand" caretOffset="10926" date="Mon Feb 01 21:04:11 EST 2021" docOffset="12461" starttimestamp="1612231299681" timestamp="151830" />
  <DocumentChange __id="41" _type="Delete" date="Mon Feb 01 21:03:15 EST 2021" docASTNodeCount="67" docActiveCodeLength="2609" docExpressionCount="56" docLength="2609" endLine="12" length="3" offset="313" repeat="3" startLine="12" starttimestamp="1612231299681" timestamp="95417" timestamp2="95680">
    <text><![CDATA[pau]]></text>
  </DocumentChange>
  <DocumentChange __id="47" _type="Insert" date="Mon Feb 01 21:03:15 EST 2021" docASTNodeCount="475" docActiveCodeLength="2621" docExpressionCount="298" docLength="2621" length="12" offset="313" repeat="12" starttimestamp="1612231299681" timestamp="95966" timestamp2="97675">
    <text><![CDATA[PauseCommand]]></text>
  </DocumentChange>
  <Command __id="162" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:03:41 EST 2021" docASTNodeCount="3420" docActiveCodeLength="20767" docExpressionCount="2338" docLength="21855" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="121391">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RestCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		joiner = new AJoiner(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				joiner.finish();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						joiner.finish();¶						return;¶					}¶					for (File file : logs) {¶						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶						if (commands.size() < 2) {¶							continue;¶						}¶						List<EHICommand> newCommands = new ArrayList<>();¶						EHICommand last = null;¶						EHICommand cur = null;¶						for (EHICommand command : commands) {¶							if (cur == null) {¶								cur = command;¶								newCommands.add(command);¶							} else {¶								last = cur;¶								cur = command;¶								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶								if (rest >= 1*ONE_SECOND) {¶									String range = "";¶									if (rest < 2*ONE_SECOND) {¶										range = "1s-2s";¶									} else if (rest < 5*ONE_SECOND) {¶										range = "2s-5s";¶									} else if (rest < 10*ONE_SECOND) {¶										range = "5s-10s";¶									} else if (rest < 20*ONE_SECOND) {¶										range = "10s-20s";¶									} else if (rest < 30*ONE_SECOND) {¶										range = "20s-30s";¶									} else if (rest < ONE_MIN) {¶										range = "30s-1m";¶									} else if (rest < TWO_MIN) {¶										range = "1m-2m";¶									} else if (rest < FIVE_MIN) {¶										range = "2m-5m";¶									} else if (rest < TEN_MIN) {¶										range = "5m-10m";¶									} else if (rest < 3*TEN_MIN) {¶										range = "10m-30m";¶									} else if (rest < 6*TEN_MIN) {¶										range = "30m-60m";¶									} else {¶										range = ">1h";¶									}¶									RestCommand rCommnad = new RestCommand(last.getCommandType(), cur.getCommandType(), rest, range);¶									rCommnad.setStartTimestamp(last.getStartTimestamp());¶									rCommnad.setTimestamp(last.getTimestamp()+1);¶									newCommands.add(rCommnad);¶								} ¶								newCommands.add(command);¶							}¶						}¶						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶						for (EHICommand c : newCommands) {¶							logContent += c.persist();¶						}¶						logContent += XML_FILE_ENDING;¶						try {¶							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶							if (newLog.exists()) {¶								newLog.delete();¶							}¶							newLog.getParentFile().mkdirs();¶							newLog.createNewFile();¶							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶							System.out.println("Writing to file " + newLog.getPath());¶							writer.write(logContent);¶							writer.close();¶							System.out.println("Finished writing to file " + newLog.getPath());¶						} catch (IOException e) {¶							// TODO Auto-generated catch block¶							e.printStackTrace();¶						}¶					}¶					synchronized (this) {¶						threadCount--;¶					}¶					joiner.finish();¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="176" _type="Replace" date="Mon Feb 01 21:03:54 EST 2021" docASTNodeCount="3420" docActiveCodeLength="20757" docExpressionCount="2338" docLength="21845" endLine="143" insertionLength="1" int_docASTNodeCount="3418" int_docActiveCodeLength="20756" int_docExpressionCount="2338" int_docLength="21844" length="11" offset="5563" startLine="143" starttimestamp="1612231299681" timestamp="135226">
    <deletedText><![CDATA[RestCommand]]></deletedText>
    <insertedText><![CDATA[p]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="181" _type="Insert" date="Mon Feb 01 21:03:55 EST 2021" docASTNodeCount="3420" docActiveCodeLength="20761" docExpressionCount="2338" docLength="21849" length="4" offset="5564" repeat="4" starttimestamp="1612231299681" timestamp="135322" timestamp2="135754">
    <text><![CDATA[ause]]></text>
  </DocumentChange>
  <DocumentChange __id="188" _type="Replace" date="Mon Feb 01 21:03:56 EST 2021" docASTNodeCount="3420" docActiveCodeLength="20768" docExpressionCount="2338" docLength="21856" endLine="143" insertionLength="12" int_docASTNodeCount="3418" int_docActiveCodeLength="20756" int_docExpressionCount="2338" int_docLength="21844" length="5" offset="5563" startLine="143" starttimestamp="1612231299681" timestamp="136393">
    <deletedText><![CDATA[pause]]></deletedText>
    <insertedText><![CDATA[PauseCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="189" _type="Insert" date="Mon Feb 01 21:03:56 EST 2021" docASTNodeCount="3426" docActiveCodeLength="20808" docExpressionCount="2343" docLength="21896" length="40" offset="1139" repeat="2" starttimestamp="1612231299681" timestamp="136418" timestamp2="136422">
    <text><![CDATA[
import fluorite.commands.PauseCommand;]]></text>
  </DocumentChange>
  <DocumentChange __id="200" _type="Replace" date="Mon Feb 01 21:03:59 EST 2021" docASTNodeCount="3426" docActiveCodeLength="20809" docExpressionCount="2343" docLength="21897" endLine="144" insertionLength="12" int_docASTNodeCount="3229" int_docActiveCodeLength="20797" int_docExpressionCount="2198" int_docLength="21885" length="11" offset="5631" startLine="144" starttimestamp="1612231299681" timestamp="139553">
    <deletedText><![CDATA[RestCommand]]></deletedText>
    <insertedText><![CDATA[PauseCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="208" _type="Replace" date="Mon Feb 01 21:04:09 EST 2021" docASTNodeCount="3426" docActiveCodeLength="20810" docExpressionCount="2343" docLength="21898" endLine="33" insertionLength="12" int_docASTNodeCount="3420" int_docActiveCodeLength="20798" int_docExpressionCount="2338" int_docLength="21886" length="11" offset="1287" startLine="33" starttimestamp="1612231299681" timestamp="149895">
    <deletedText><![CDATA[RestCommand]]></deletedText>
    <insertedText><![CDATA[PauseCommand]]></insertedText>
  </DocumentChange>
  <Command __id="213" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:04:11 EST 2021" docASTNodeCount="5915" docActiveCodeLength="33948" docExpressionCount="3990" docLength="35023" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="151627">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RestCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		joiner = new AJoiner(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					joiner.finish();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								joiner.finish();¶								return;¶							}¶							for (File file : logs) {¶								List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶								if (commands.size() < 2) {¶									continue;¶								}¶								List<EHICommand> newCommands = new ArrayList<>();¶								EHICommand last = null;¶								EHICommand cur = null;¶								for (EHICommand command : commands) {¶									if (cur == null) {¶										cur = command;¶										newCommands.add(command);¶									} else {¶										last = cur;¶										cur = command;¶										long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶										if (rest >= 1*ONE_SECOND) {¶											String range = "";¶											if (rest < 2*ONE_SECOND) {¶												range = "1s-2s";¶											} else if (rest < 5*ONE_SECOND) {¶												range = "2s-5s";¶											} else if (rest < 10*ONE_SECOND) {¶												range = "5s-10s";¶											} else if (rest < 20*ONE_SECOND) {¶												range = "10s-20s";¶											} else if (rest < 30*ONE_SECOND) {¶												range = "20s-30s";¶											} else if (rest < ONE_MIN) {¶												range = "30s-1m";¶											} else if (rest < TWO_MIN) {¶												range = "1m-2m";¶											} else if (rest < FIVE_MIN) {¶												range = "2m-5m";¶											} else if (rest < TEN_MIN) {¶												range = "5m-10m";¶											} else if (rest < 3*TEN_MIN) {¶												range = "10m-30m";¶											} else if (rest < 6*TEN_MIN) {¶												range = "30m-60m";¶											} else {¶												range = ">1h";¶											}¶											RestCommand rCommnad = new RestCommand(last.getCommandType(), cur.getCommandType(), rest, range);¶											rCommnad.setStartTimestamp(last.getStartTimestamp());¶											rCommnad.setTimestamp(last.getTimestamp()+1);¶											newCommands.add(rCommnad);¶										} ¶										newCommands.add(command);¶									}¶								}¶								String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶								for (EHICommand c : newCommands) {¶									logContent += c.persist();¶								}¶								logContent += XML_FILE_ENDING;¶								try {¶									File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶									if (newLog.exists()) {¶										newLog.delete();¶									}¶									newLog.getParentFile().mkdirs();¶									newLog.createNewFile();¶									BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶									System.out.println("Writing to file " + newLog.getPath());¶									writer.write(logContent);¶									writer.close();¶									System.out.println("Finished writing to file " + newLog.getPath());¶								} catch (IOException e) {¶									e.printStackTrace();¶								}¶							}¶							synchronized (this) {¶								threadCount--;¶							}¶							joiner.finish();¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶//					if (i == assigns.length-1 && j == students.length-1) {¶//						try {¶//							thread.join();¶//						} catch (InterruptedException e) {¶//							e.printStackTrace();¶//						} ¶//						System.exit(0);¶//					}¶				}¶			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="217" _type="Replace" date="Mon Feb 01 21:04:15 EST 2021" docASTNodeCount="5915" docActiveCodeLength="33949" docExpressionCount="3990" docLength="35024" endLine="545" insertionLength="23" int_docASTNodeCount="5913" int_docActiveCodeLength="33926" int_docExpressionCount="3990" int_docLength="35001" length="22" offset="20875" startLine="545" starttimestamp="1612231299681" timestamp="156279">
    <deletedText><![CDATA[											RestCommand]]></deletedText>
    <insertedText><![CDATA[											PauseCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="221" _type="Replace" date="Mon Feb 01 21:04:16 EST 2021" docASTNodeCount="5915" docActiveCodeLength="33939" docExpressionCount="3990" docLength="35014" endLine="545" insertionLength="1" int_docASTNodeCount="5718" int_docActiveCodeLength="33938" int_docExpressionCount="3845" int_docLength="35013" length="11" offset="20914" startLine="545" starttimestamp="1612231299681" timestamp="157270">
    <deletedText><![CDATA[RestCommand]]></deletedText>
    <insertedText><![CDATA[v]]></insertedText>
  </DocumentChange>
  <Command __id="215" _type="MoveCaretCommand" caretOffset="19356" date="Mon Feb 01 21:04:15 EST 2021" docOffset="20891" starttimestamp="1612231299681" timestamp="156062" />
  <Command __id="216" _type="SelectTextCommand" caretOffset="19362" date="Mon Feb 01 21:04:15 EST 2021" end="19362" start="19351" starttimestamp="1612231299681" timestamp="156192" />
  <Command __id="218" _type="PasteCommand" date="Mon Feb 01 21:04:15 EST 2021" starttimestamp="1612231299681" timestamp="156290" />
  <Command __id="219" _type="MoveCaretCommand" caretOffset="19382" date="Mon Feb 01 21:04:16 EST 2021" docOffset="20917" starttimestamp="1612231299681" timestamp="157024" />
  <Command __id="220" _type="SelectTextCommand" caretOffset="19390" date="Mon Feb 01 21:04:16 EST 2021" end="19390" start="19379" starttimestamp="1612231299681" timestamp="157169" />
  <Command __id="222" _type="InsertStringCommand" date="Mon Feb 01 21:04:16 EST 2021" starttimestamp="1612231299681" timestamp="157285" timestamp2="157285">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="223" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:04:16 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="157316" />
  <Command __id="226" _type="PasteCommand" date="Mon Feb 01 21:04:18 EST 2021" starttimestamp="1612231299681" timestamp="158753" />
  <Command __id="227" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:04:18 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="158781" />
  <Command __id="228" _type="MoveCaretCommand" caretOffset="1470" date="Mon Feb 01 21:04:24 EST 2021" docOffset="1470" starttimestamp="1612231299681" timestamp="164633" />
  <Command __id="229" _type="SelectTextCommand" caretOffset="1475" date="Mon Feb 01 21:04:24 EST 2021" end="1475" start="1464" starttimestamp="1612231299681" timestamp="164797" />
  <Command __id="231" _type="PasteCommand" date="Mon Feb 01 21:04:24 EST 2021" starttimestamp="1612231299681" timestamp="164952" />
  <DocumentChange __id="224" _type="Delete" date="Mon Feb 01 21:04:18 EST 2021" docASTNodeCount="5718" docActiveCodeLength="33938" docExpressionCount="3845" docLength="35013" endLine="545" length="1" offset="20914" startLine="545" starttimestamp="1612231299681" timestamp="158633">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <DocumentChange __id="225" _type="Insert" date="Mon Feb 01 21:04:18 EST 2021" docASTNodeCount="5915" docActiveCodeLength="33950" docExpressionCount="3990" docLength="35025" length="12" offset="20914" starttimestamp="1612231299681" timestamp="158740">
    <text><![CDATA[PauseCommand]]></text>
  </DocumentChange>
  <DocumentChange __id="230" _type="Replace" date="Mon Feb 01 21:04:24 EST 2021" docASTNodeCount="5915" docActiveCodeLength="33951" docExpressionCount="3990" docLength="35026" endLine="38" insertionLength="12" int_docASTNodeCount="5909" int_docActiveCodeLength="33939" int_docExpressionCount="3985" int_docLength="35014" length="11" offset="1464" startLine="38" starttimestamp="1612231299681" timestamp="164944">
    <deletedText><![CDATA[RestCommand]]></deletedText>
    <insertedText><![CDATA[PauseCommand]]></insertedText>
  </DocumentChange>
  <Command __id="232" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 21:04:25 EST 2021" starttimestamp="1612231299681" timestamp="165988" />
  <Command __id="233" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:04:25 EST 2021" starttimestamp="1612231299681" timestamp="166072" />
  <Command __id="234" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:04:25 EST 2021" starttimestamp="1612231299681" timestamp="166205" />
  <Command __id="235" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:04:27 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="983" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="167345">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶//	private static AExperimentalReplayer replayer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶		replayer = new AReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶		replayer.analyzeFolder(classFolderPath);¶//		replayer.createRestCommandLogs(classFolderPath);¶//		replayer = new AExperimentalReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		replayer.createRestCommandLogs(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="236" _type="MoveCaretCommand" caretOffset="800" date="Mon Feb 01 21:04:27 EST 2021" docOffset="827" starttimestamp="1612231299681" timestamp="167473" />
  <Command __id="244" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:04:49 EST 2021" docASTNodeCount="61" docActiveCodeLength="338" docExpressionCount="26" docLength="338" projectName="A0" starttimestamp="1612231299681" timestamp="189902">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Sophomore 2st Sem\COMP533\A0\src\mapper\MapperFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package mapper;¶¶public class MapperFactory {¶	private static Mapper<String, Integer> mapper;¶	¶	public static Mapper<String, Integer> getMapper(){¶		if (mapper == null) ¶			mapper = new ATokenCountingMapper();¶		return mapper;¶	}¶	¶	public static void setMapper(Mapper<String, Integer> aMapper) {¶		mapper = aMapper;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="245" _type="MoveCaretCommand" caretOffset="235" date="Mon Feb 01 21:04:49 EST 2021" docOffset="235" starttimestamp="1612231299681" timestamp="190039" />
  <Command __id="247" _type="MoveCaretCommand" caretOffset="1299" date="Mon Feb 01 21:04:55 EST 2021" docOffset="1299" starttimestamp="1612231299681" timestamp="195554" />
  <Command __id="248" _type="MoveCaretCommand" caretOffset="882" date="Mon Feb 01 21:05:00 EST 2021" docOffset="882" starttimestamp="1612231299681" timestamp="200497" />
  <Command __id="249" _type="MoveCaretCommand" caretOffset="6088" date="Mon Feb 01 21:05:09 EST 2021" docOffset="6088" starttimestamp="1612231299681" timestamp="210229" />
  <Command __id="251" _type="ShellCommand" date="Mon Feb 01 21:05:13 EST 2021" starttimestamp="1612231299681" timestamp="213471" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="253" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:05:17 EST 2021" docASTNodeCount="475" docActiveCodeLength="2625" docExpressionCount="298" docLength="2625" projectName="Hermes" starttimestamp="1612231299681" timestamp="218066">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.TreeMap;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class PauseCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_RANGE = "range";¶	private static final String XML_PREV = "prev";¶	private static final String XML_NEXT = "next";¶	private static final String XML_REST = "rest";¶	private String prev, next, range;¶	private long rest;¶¶	public PauseCommand() {}¶	¶	public PauseCommand(String prev, String next, long rest, String range) {¶		this.prev = prev;¶		this.next = next;¶		this.rest = rest;¶		this.range = range;¶	}¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_RANGE, range);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());¶		dataMap.put(XML_PREV, prev);¶		dataMap.put(XML_NEXT, next);¶		dataMap.put(XML_REST, rest+"");¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "PauseCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Pause";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prev = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			next =textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_REST)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			rest = Long.getLong(textNode.getTextContent());¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			range =textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="254" _type="SelectTextCommand" caretOffset="87" date="Mon Feb 01 21:05:17 EST 2021" end="87" start="75" starttimestamp="1612231299681" timestamp="218297" />
  <Command __id="258" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:05:20 EST 2021" docASTNodeCount="475" docActiveCodeLength="2625" docExpressionCount="298" docLength="2625" projectName="Hermes" starttimestamp="1612231299681" timestamp="221110">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.TreeMap;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class PauseCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_RANGE = "range";¶	private static final String XML_PREV = "prev";¶	private static final String XML_NEXT = "next";¶	private static final String XML_REST = "rest";¶	private String prev, next, range;¶	private long rest;¶¶	public PauseCommand() {}¶	¶	public PauseCommand(String prev, String next, long rest, String range) {¶		this.prev = prev;¶		this.next = next;¶		this.rest = rest;¶		this.range = range;¶	}¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_RANGE, range);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());¶		dataMap.put(XML_PREV, prev);¶		dataMap.put(XML_NEXT, next);¶		dataMap.put(XML_REST, rest+"");¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "PauseCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Pause";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prev = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			next =textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_REST)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			rest = Long.getLong(textNode.getTextContent());¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			range =textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="259" _type="SelectTextCommand" caretOffset="443" date="Mon Feb 01 21:05:20 EST 2021" end="443" start="431" starttimestamp="1612231299681" timestamp="221310" />
  <Command __id="263" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:05:25 EST 2021" docASTNodeCount="61" docActiveCodeLength="338" docExpressionCount="26" docLength="338" projectName="A0" starttimestamp="1612231299681" timestamp="226089">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Sophomore 2st Sem\COMP533\A0\src\mapper\MapperFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package mapper;¶¶public class MapperFactory {¶	private static Mapper<String, Integer> mapper;¶	¶	public static Mapper<String, Integer> getMapper(){¶		if (mapper == null) ¶			mapper = new ATokenCountingMapper();¶		return mapper;¶	}¶	¶	public static void setMapper(Mapper<String, Integer> aMapper) {¶		mapper = aMapper;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="264" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Mon Feb 01 21:05:25 EST 2021" starttimestamp="1612231299681" timestamp="226145" />
  <Command __id="265" _type="MoveCaretCommand" caretOffset="235" date="Mon Feb 01 21:05:25 EST 2021" docOffset="235" starttimestamp="1612231299681" timestamp="226257" />
  <Command __id="267" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.forwardHistory" date="Mon Feb 01 21:05:26 EST 2021" starttimestamp="1612231299681" timestamp="227062" />
  <Command __id="268" _type="MoveCaretCommand" caretOffset="5634" date="Mon Feb 01 21:05:26 EST 2021" docOffset="5634" starttimestamp="1612231299681" timestamp="227173" />
  <Command __id="266" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:05:26 EST 2021" docASTNodeCount="3426" docActiveCodeLength="20810" docExpressionCount="2343" docLength="21898" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="226985">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		joiner = new AJoiner(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				joiner.finish();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						joiner.finish();¶						return;¶					}¶					for (File file : logs) {¶						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶						if (commands.size() < 2) {¶							continue;¶						}¶						List<EHICommand> newCommands = new ArrayList<>();¶						EHICommand last = null;¶						EHICommand cur = null;¶						for (EHICommand command : commands) {¶							if (cur == null) {¶								cur = command;¶								newCommands.add(command);¶							} else {¶								last = cur;¶								cur = command;¶								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶								if (rest >= 1*ONE_SECOND) {¶									String range = "";¶									if (rest < 2*ONE_SECOND) {¶										range = "1s-2s";¶									} else if (rest < 5*ONE_SECOND) {¶										range = "2s-5s";¶									} else if (rest < 10*ONE_SECOND) {¶										range = "5s-10s";¶									} else if (rest < 20*ONE_SECOND) {¶										range = "10s-20s";¶									} else if (rest < 30*ONE_SECOND) {¶										range = "20s-30s";¶									} else if (rest < ONE_MIN) {¶										range = "30s-1m";¶									} else if (rest < TWO_MIN) {¶										range = "1m-2m";¶									} else if (rest < FIVE_MIN) {¶										range = "2m-5m";¶									} else if (rest < TEN_MIN) {¶										range = "5m-10m";¶									} else if (rest < 3*TEN_MIN) {¶										range = "10m-30m";¶									} else if (rest < 6*TEN_MIN) {¶										range = "30m-60m";¶									} else {¶										range = ">1h";¶									}¶									PauseCommand rCommnad = new PauseCommand(last.getCommandType(), cur.getCommandType(), rest, range);¶									rCommnad.setStartTimestamp(last.getStartTimestamp());¶									rCommnad.setTimestamp(last.getTimestamp()+1);¶									newCommands.add(rCommnad);¶								} ¶								newCommands.add(command);¶							}¶						}¶						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶						for (EHICommand c : newCommands) {¶							logContent += c.persist();¶						}¶						logContent += XML_FILE_ENDING;¶						try {¶							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶							if (newLog.exists()) {¶								newLog.delete();¶							}¶							newLog.getParentFile().mkdirs();¶							newLog.createNewFile();¶							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶							System.out.println("Writing to file " + newLog.getPath());¶							writer.write(logContent);¶							writer.close();¶							System.out.println("Finished writing to file " + newLog.getPath());¶						} catch (IOException e) {¶							// TODO Auto-generated catch block¶							e.printStackTrace();¶						}¶					}¶					synchronized (this) {¶						threadCount--;¶					}¶					joiner.finish();¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="272" _type="Delete" date="Mon Feb 01 21:05:32 EST 2021" docASTNodeCount="3420" docActiveCodeLength="20770" docExpressionCount="2338" docLength="21858" endLine="34" length="40" offset="1262" startLine="33" starttimestamp="1612231299681" timestamp="232502">
    <text><![CDATA[import fluorite.commands.PauseCommand;
]]></text>
  </DocumentChange>
  <Command __id="269" _type="MoveCaretCommand" caretOffset="1258" date="Mon Feb 01 21:05:30 EST 2021" docOffset="1258" starttimestamp="1612231299681" timestamp="231188" />
  <Command __id="270" _type="MoveCaretCommand" caretOffset="1298" date="Mon Feb 01 21:05:31 EST 2021" docOffset="1298" starttimestamp="1612231299681" timestamp="231829" />
  <Command __id="271" _type="MoveCaretCommand" caretOffset="1295" date="Mon Feb 01 21:05:31 EST 2021" docOffset="1295" starttimestamp="1612231299681" timestamp="232293" />
  <Command __id="273" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 21:05:32 EST 2021" starttimestamp="1612231299681" timestamp="232511" />
  <Command __id="274" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:05:33 EST 2021" starttimestamp="1612231299681" timestamp="233477" />
  <Command __id="275" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 21:05:33 EST 2021" starttimestamp="1612231299681" timestamp="233495" />
  <Command __id="276" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:05:33 EST 2021" starttimestamp="1612231299681" timestamp="233598" />
  <Command __id="278" _type="MoveCaretCommand" caretOffset="1476" date="Mon Feb 01 21:05:34 EST 2021" docOffset="1476" starttimestamp="1612231299681" timestamp="235137" />
  <Command __id="280" _type="MoveCaretCommand" caretOffset="800" date="Mon Feb 01 21:05:35 EST 2021" docOffset="827" starttimestamp="1612231299681" timestamp="235580" />
  <Command __id="281" _type="MoveCaretCommand" caretOffset="636" date="Mon Feb 01 21:05:37 EST 2021" docOffset="663" starttimestamp="1612231299681" timestamp="237333" />
  <Command __id="277" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:05:34 EST 2021" docASTNodeCount="5915" docActiveCodeLength="33951" docExpressionCount="3990" docLength="35026" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="234978">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		joiner = new AJoiner(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					joiner.finish();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								joiner.finish();¶								return;¶							}¶							for (File file : logs) {¶								List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶								if (commands.size() < 2) {¶									continue;¶								}¶								List<EHICommand> newCommands = new ArrayList<>();¶								EHICommand last = null;¶								EHICommand cur = null;¶								for (EHICommand command : commands) {¶									if (cur == null) {¶										cur = command;¶										newCommands.add(command);¶									} else {¶										last = cur;¶										cur = command;¶										long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶										if (rest >= 1*ONE_SECOND) {¶											String range = "";¶											if (rest < 2*ONE_SECOND) {¶												range = "1s-2s";¶											} else if (rest < 5*ONE_SECOND) {¶												range = "2s-5s";¶											} else if (rest < 10*ONE_SECOND) {¶												range = "5s-10s";¶											} else if (rest < 20*ONE_SECOND) {¶												range = "10s-20s";¶											} else if (rest < 30*ONE_SECOND) {¶												range = "20s-30s";¶											} else if (rest < ONE_MIN) {¶												range = "30s-1m";¶											} else if (rest < TWO_MIN) {¶												range = "1m-2m";¶											} else if (rest < FIVE_MIN) {¶												range = "2m-5m";¶											} else if (rest < TEN_MIN) {¶												range = "5m-10m";¶											} else if (rest < 3*TEN_MIN) {¶												range = "10m-30m";¶											} else if (rest < 6*TEN_MIN) {¶												range = "30m-60m";¶											} else {¶												range = ">1h";¶											}¶											PauseCommand rCommnad = new PauseCommand(last.getCommandType(), cur.getCommandType(), rest, range);¶											rCommnad.setStartTimestamp(last.getStartTimestamp());¶											rCommnad.setTimestamp(last.getTimestamp()+1);¶											newCommands.add(rCommnad);¶										} ¶										newCommands.add(command);¶									}¶								}¶								String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶								for (EHICommand c : newCommands) {¶									logContent += c.persist();¶								}¶								logContent += XML_FILE_ENDING;¶								try {¶									File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶									if (newLog.exists()) {¶										newLog.delete();¶									}¶									newLog.getParentFile().mkdirs();¶									newLog.createNewFile();¶									BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶									System.out.println("Writing to file " + newLog.getPath());¶									writer.write(logContent);¶									writer.close();¶									System.out.println("Finished writing to file " + newLog.getPath());¶								} catch (IOException e) {¶									e.printStackTrace();¶								}¶							}¶							synchronized (this) {¶								threadCount--;¶							}¶							joiner.finish();¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶//					if (i == assigns.length-1 && j == students.length-1) {¶//						try {¶//							thread.join();¶//						} catch (InterruptedException e) {¶//							e.printStackTrace();¶//						} ¶//						System.exit(0);¶//					}¶				}¶			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="279" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:05:35 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="983" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="235438">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶//	private static AExperimentalReplayer replayer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶		replayer = new AReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶		replayer.analyzeFolder(classFolderPath);¶//		replayer.createRestCommandLogs(classFolderPath);¶//		replayer = new AExperimentalReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		replayer.createRestCommandLogs(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="282" _type="MoveCaretCommand" caretOffset="548" date="Mon Feb 01 21:05:40 EST 2021" docOffset="575" starttimestamp="1612231299681" timestamp="241308" />
  <Command __id="283" _type="MoveCaretCommand" caretOffset="592" date="Mon Feb 01 21:05:41 EST 2021" docOffset="619" starttimestamp="1612231299681" timestamp="241937" />
  <Command __id="285" _type="MoveCaretCommand" caretOffset="1476" date="Mon Feb 01 21:05:42 EST 2021" docOffset="1476" starttimestamp="1612231299681" timestamp="243208" />
  <Command __id="286" _type="MoveCaretCommand" caretOffset="3359" date="Mon Feb 01 21:05:47 EST 2021" docOffset="3359" starttimestamp="1612231299681" timestamp="248308" />
  <Command __id="287" _type="MoveCaretCommand" caretOffset="3357" date="Mon Feb 01 21:05:48 EST 2021" docOffset="3357" starttimestamp="1612231299681" timestamp="248684" />
  <Command __id="288" _type="MoveCaretCommand" caretOffset="3186" date="Mon Feb 01 21:05:48 EST 2021" docOffset="3186" starttimestamp="1612231299681" timestamp="249028" />
  <Command __id="289" _type="MoveCaretCommand" caretOffset="3357" date="Mon Feb 01 21:05:49 EST 2021" docOffset="3357" starttimestamp="1612231299681" timestamp="249510" />
  <Command __id="284" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:05:42 EST 2021" docASTNodeCount="5915" docActiveCodeLength="33951" docExpressionCount="3990" docLength="35026" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="243054">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		joiner = new AJoiner(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					joiner.finish();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								joiner.finish();¶								return;¶							}¶							for (File file : logs) {¶								List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶								if (commands.size() < 2) {¶									continue;¶								}¶								List<EHICommand> newCommands = new ArrayList<>();¶								EHICommand last = null;¶								EHICommand cur = null;¶								for (EHICommand command : commands) {¶									if (cur == null) {¶										cur = command;¶										newCommands.add(command);¶									} else {¶										last = cur;¶										cur = command;¶										long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶										if (rest >= 1*ONE_SECOND) {¶											String range = "";¶											if (rest < 2*ONE_SECOND) {¶												range = "1s-2s";¶											} else if (rest < 5*ONE_SECOND) {¶												range = "2s-5s";¶											} else if (rest < 10*ONE_SECOND) {¶												range = "5s-10s";¶											} else if (rest < 20*ONE_SECOND) {¶												range = "10s-20s";¶											} else if (rest < 30*ONE_SECOND) {¶												range = "20s-30s";¶											} else if (rest < ONE_MIN) {¶												range = "30s-1m";¶											} else if (rest < TWO_MIN) {¶												range = "1m-2m";¶											} else if (rest < FIVE_MIN) {¶												range = "2m-5m";¶											} else if (rest < TEN_MIN) {¶												range = "5m-10m";¶											} else if (rest < 3*TEN_MIN) {¶												range = "10m-30m";¶											} else if (rest < 6*TEN_MIN) {¶												range = "30m-60m";¶											} else {¶												range = ">1h";¶											}¶											PauseCommand rCommnad = new PauseCommand(last.getCommandType(), cur.getCommandType(), rest, range);¶											rCommnad.setStartTimestamp(last.getStartTimestamp());¶											rCommnad.setTimestamp(last.getTimestamp()+1);¶											newCommands.add(rCommnad);¶										} ¶										newCommands.add(command);¶									}¶								}¶								String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶								for (EHICommand c : newCommands) {¶									logContent += c.persist();¶								}¶								logContent += XML_FILE_ENDING;¶								try {¶									File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶									if (newLog.exists()) {¶										newLog.delete();¶									}¶									newLog.getParentFile().mkdirs();¶									newLog.createNewFile();¶									BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶									System.out.println("Writing to file " + newLog.getPath());¶									writer.write(logContent);¶									writer.close();¶									System.out.println("Finished writing to file " + newLog.getPath());¶								} catch (IOException e) {¶									e.printStackTrace();¶								}¶							}¶							synchronized (this) {¶								threadCount--;¶							}¶							joiner.finish();¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶//					if (i == assigns.length-1 && j == students.length-1) {¶//						try {¶//							thread.join();¶//						} catch (InterruptedException e) {¶//							e.printStackTrace();¶//						} ¶//						System.exit(0);¶//					}¶				}¶			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="290" _type="SelectTextCommand" caretOffset="3314" date="Mon Feb 01 21:06:03 EST 2021" end="3314" start="3299" starttimestamp="1612231299681" timestamp="263957" />
  <DocumentChange __id="291" _type="Replace" date="Mon Feb 01 21:06:07 EST 2021" docASTNodeCount="5909" docActiveCodeLength="33937" docExpressionCount="3988" docLength="35012" endLine="70" insertionLength="1" int_docASTNodeCount="5910" int_docActiveCodeLength="33936" int_docExpressionCount="3988" int_docLength="35011" length="15" offset="3299" startLine="70" starttimestamp="1612231299681" timestamp="268257">
    <deletedText><![CDATA[AJoiner joiner;]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <Command __id="292" _type="InsertStringCommand" date="Mon Feb 01 21:06:07 EST 2021" starttimestamp="1612231299681" timestamp="268267" timestamp2="268267">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="293" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:06:07 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="268295" />
  <DocumentChange __id="294" _type="Insert" date="Mon Feb 01 21:06:08 EST 2021" docASTNodeCount="5909" docActiveCodeLength="33941" docExpressionCount="3988" docLength="35016" length="4" offset="3300" repeat="4" starttimestamp="1612231299681" timestamp="268717" timestamp2="268783">
    <text><![CDATA[ound]]></text>
  </DocumentChange>
  <DocumentChange __id="298" _type="Delete" date="Mon Feb 01 21:06:09 EST 2021" docASTNodeCount="5909" docActiveCodeLength="33940" docExpressionCount="3988" docLength="35015" endLine="70" length="1" offset="3303" startLine="70" starttimestamp="1612231299681" timestamp="269370">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="299" _type="Insert" date="Mon Feb 01 21:06:09 EST 2021" docASTNodeCount="5909" docActiveCodeLength="33941" docExpressionCount="3988" docLength="35016" length="1" offset="3303" starttimestamp="1612231299681" timestamp="269400">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="300" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:06:09 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="270227" />
  <DocumentChange __id="301" _type="Replace" date="Mon Feb 01 21:06:09 EST 2021" docASTNodeCount="5909" docActiveCodeLength="33950" docExpressionCount="3988" docLength="35025" endLine="70" insertionLength="14" int_docASTNodeCount="5910" int_docActiveCodeLength="33936" int_docExpressionCount="3988" int_docLength="35011" length="5" offset="3299" startLine="70" starttimestamp="1612231299681" timestamp="270248">
    <deletedText><![CDATA[count]]></deletedText>
    <insertedText><![CDATA[CountDownLatch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="302" _type="Delete" date="Mon Feb 01 21:06:09 EST 2021" docASTNodeCount="5909" docActiveCodeLength="33948" docExpressionCount="3988" docLength="35023" endLine="18" length="2" offset="473" startLine="17" starttimestamp="1612231299681" timestamp="270264">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="303" _type="Insert" date="Mon Feb 01 21:06:09 EST 2021" docASTNodeCount="5917" docActiveCodeLength="33997" docExpressionCount="3995" docLength="35072" length="49" offset="473" repeat="3" starttimestamp="1612231299681" timestamp="270278" timestamp2="270300">
    <text><![CDATA[
import java.util.concurrent.CountDownLatch;

]]></text>
  </DocumentChange>
  <Command __id="306" _type="InsertStringCommand" date="Mon Feb 01 21:06:09 EST 2021" starttimestamp="1612231299681" timestamp="270315" timestamp2="270315">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="308" _type="InsertStringCommand" date="Mon Feb 01 21:06:10 EST 2021" starttimestamp="1612231299681" timestamp="270854" timestamp2="270854">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="310" _type="InsertStringCommand" date="Mon Feb 01 21:06:10 EST 2021" starttimestamp="1612231299681" timestamp="271286" timestamp2="271286">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="311" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:06:11 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="271326" />
  <Command __id="316" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:06:12 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="272395" />
  <Command __id="317" _type="InsertStringCommand" date="Mon Feb 01 21:06:12 EST 2021" starttimestamp="1612231299681" timestamp="272400" timestamp2="272400">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="319" _type="InsertStringCommand" date="Mon Feb 01 21:06:12 EST 2021" starttimestamp="1612231299681" timestamp="272788" timestamp2="272788">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="320" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 21:06:16 EST 2021" starttimestamp="1612231299681" timestamp="277271" />
  <Command __id="321" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:06:17 EST 2021" starttimestamp="1612231299681" timestamp="277361" />
  <Command __id="322" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:06:17 EST 2021" starttimestamp="1612231299681" timestamp="277565" />
  <DocumentChange __id="307" _type="Insert" date="Mon Feb 01 21:06:10 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34004" docExpressionCount="3997" docLength="35079" length="7" offset="3360" repeat="7" starttimestamp="1612231299681" timestamp="270847" timestamp2="272783">
    <text><![CDATA[ latch;]]></text>
  </DocumentChange>
  <Command __id="323" _type="MoveCaretCommand" caretOffset="18049" date="Mon Feb 01 21:06:22 EST 2021" docOffset="18049" starttimestamp="1612231299681" timestamp="282846" />
  <Command __id="324" _type="SelectTextCommand" caretOffset="18051" date="Mon Feb 01 21:06:22 EST 2021" end="18051" start="18048" starttimestamp="1612231299681" timestamp="283027" />
  <Command __id="325" _type="SelectTextCommand" caretOffset="18073" date="Mon Feb 01 21:06:22 EST 2021" end="18073" start="18037" starttimestamp="1612231299681" timestamp="283199" />
  <DocumentChange __id="326" _type="Delete" date="Mon Feb 01 21:06:24 EST 2021" docASTNodeCount="5916" docActiveCodeLength="33968" docExpressionCount="3992" docLength="35043" endLine="469" length="36" offset="18037" startLine="468" starttimestamp="1612231299681" timestamp="284389">
    <text><![CDATA[		joiner = new AJoiner(numThread);
]]></text>
  </DocumentChange>
  <Command __id="327" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:06:24 EST 2021" starttimestamp="1612231299681" timestamp="284402" />
  <DocumentChange __id="328" _type="Replace" date="Mon Feb 01 21:06:24 EST 2021" docASTNodeCount="5916" docActiveCodeLength="33970" docExpressionCount="3992" docLength="35045" endLine="468" insertionLength="4" int_docASTNodeCount="5916" int_docActiveCodeLength="33966" int_docExpressionCount="3992" int_docLength="35041" length="2" offset="18037" startLine="468" starttimestamp="1612231299681" timestamp="284869">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <Command __id="329" _type="InsertStringCommand" date="Mon Feb 01 21:06:24 EST 2021" starttimestamp="1612231299681" timestamp="284881" timestamp2="284881">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="330" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 21:06:25 EST 2021" starttimestamp="1612231299681" timestamp="285366" />
  <DocumentChange __id="331" _type="Insert" date="Mon Feb 01 21:06:25 EST 2021" docASTNodeCount="5918" docActiveCodeLength="33980" docExpressionCount="3993" docLength="35055" length="10" offset="18037" repeat="9" starttimestamp="1612231299681" timestamp="285548" timestamp2="286912">
    <text><![CDATA[		countdon]]></text>
  </DocumentChange>
  <Command __id="332" _type="InsertStringCommand" date="Mon Feb 01 21:06:25 EST 2021" starttimestamp="1612231299681" timestamp="285550" timestamp2="285550">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="334" _type="InsertStringCommand" date="Mon Feb 01 21:06:25 EST 2021" starttimestamp="1612231299681" timestamp="285980" timestamp2="285980">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="336" _type="InsertStringCommand" date="Mon Feb 01 21:06:25 EST 2021" starttimestamp="1612231299681" timestamp="286026" timestamp2="286026">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="337" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:06:25 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="286066" />
  <DocumentChange __id="344" _type="Delete" date="Mon Feb 01 21:06:27 EST 2021" docASTNodeCount="5916" docActiveCodeLength="33972" docExpressionCount="3992" docLength="35047" endLine="468" length="8" offset="18039" startLine="468" starttimestamp="1612231299681" timestamp="287746">
    <text><![CDATA[countdon]]></text>
  </DocumentChange>
  <Command __id="345" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:06:27 EST 2021" starttimestamp="1612231299681" timestamp="287751" />
  <Command __id="346" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:06:27 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="287865" />
  <DocumentChange __id="347" _type="Insert" date="Mon Feb 01 21:06:27 EST 2021" docASTNodeCount="5918" docActiveCodeLength="33975" docExpressionCount="3993" docLength="35050" length="3" offset="18039" repeat="3" starttimestamp="1612231299681" timestamp="288031" timestamp2="288268">
    <text><![CDATA[lat]]></text>
  </DocumentChange>
  <Command __id="348" _type="InsertStringCommand" date="Mon Feb 01 21:06:27 EST 2021" starttimestamp="1612231299681" timestamp="288037" timestamp2="288037">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="349" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:06:27 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="288077" />
  <Command __id="352" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:06:28 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="288712" />
  <DocumentChange __id="353" _type="Replace" date="Mon Feb 01 21:06:28 EST 2021" docASTNodeCount="5918" docActiveCodeLength="33977" docExpressionCount="3993" docLength="35052" endLine="468" insertionLength="5" int_docASTNodeCount="5916" int_docActiveCodeLength="33972" int_docExpressionCount="3992" int_docLength="35047" length="3" offset="18039" startLine="468" starttimestamp="1612231299681" timestamp="288720">
    <deletedText><![CDATA[lat]]></deletedText>
    <insertedText><![CDATA[latch]]></insertedText>
  </DocumentChange>
  <Command __id="354" _type="InsertStringCommand" date="Mon Feb 01 21:06:28 EST 2021" starttimestamp="1612231299681" timestamp="288727" timestamp2="288727">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="355" _type="Insert" date="Mon Feb 01 21:06:28 EST 2021" docASTNodeCount="5922" docActiveCodeLength="33988" docExpressionCount="3996" docLength="35063" length="11" offset="18044" repeat="11" starttimestamp="1612231299681" timestamp="289013" timestamp2="292174">
    <text><![CDATA[ = new coun]]></text>
  </DocumentChange>
  <Command __id="356" _type="InsertStringCommand" date="Mon Feb 01 21:06:28 EST 2021" starttimestamp="1612231299681" timestamp="289017" timestamp2="289017">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="358" _type="InsertStringCommand" date="Mon Feb 01 21:06:28 EST 2021" starttimestamp="1612231299681" timestamp="289138" timestamp2="289138">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="360" _type="InsertStringCommand" date="Mon Feb 01 21:06:28 EST 2021" starttimestamp="1612231299681" timestamp="289242" timestamp2="289242">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="362" _type="InsertStringCommand" date="Mon Feb 01 21:06:29 EST 2021" starttimestamp="1612231299681" timestamp="289562" timestamp2="289562">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="363" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:06:29 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="289602" />
  <Command __id="367" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:06:29 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="289908" />
  <Command __id="369" _type="InsertStringCommand" date="Mon Feb 01 21:06:29 EST 2021" starttimestamp="1612231299681" timestamp="290040" timestamp2="290040">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="370" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:06:29 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="290081" />
  <Command __id="374" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:06:31 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="292187" />
  <Command __id="377" _type="InsertStringCommand" date="Mon Feb 01 21:06:32 EST 2021" starttimestamp="1612231299681" timestamp="292356" timestamp2="292356">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="378" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 21:06:33 EST 2021" starttimestamp="1612231299681" timestamp="294031" />
  <Command __id="379" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:06:34 EST 2021" starttimestamp="1612231299681" timestamp="294711" />
  <Command __id="380" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 21:06:35 EST 2021" starttimestamp="1612231299681" timestamp="295895" />
  <Command __id="381" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 21:06:35 EST 2021" starttimestamp="1612231299681" timestamp="296121" />
  <Command __id="383" _type="InsertStringCommand" date="Mon Feb 01 21:06:36 EST 2021" starttimestamp="1612231299681" timestamp="296734" timestamp2="296734">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="384" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:06:36 EST 2021" starttimestamp="1612231299681" timestamp="297144" />
  <Command __id="385" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:06:37 EST 2021" starttimestamp="1612231299681" timestamp="297658" />
  <Command __id="386" _type="ShellCommand" date="Mon Feb 01 21:06:41 EST 2021" starttimestamp="1612231299681" timestamp="301695" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="387" _type="ShellCommand" date="Mon Feb 01 21:06:41 EST 2021" starttimestamp="1612231299681" timestamp="301788" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="388" _type="MoveCaretCommand" caretOffset="18077" date="Mon Feb 01 21:06:42 EST 2021" docOffset="18077" starttimestamp="1612231299681" timestamp="302837" />
  <DocumentChange __id="375" _type="Replace" date="Mon Feb 01 21:06:31 EST 2021" docASTNodeCount="5922" docActiveCodeLength="34001" docExpressionCount="3996" docLength="35076" endLine="468" insertionLength="14" int_docASTNodeCount="5922" int_docActiveCodeLength="33987" int_docExpressionCount="3996" int_docLength="35062" length="1" offset="18051" startLine="468" starttimestamp="1612231299681" timestamp="292196">
    <deletedText><![CDATA[c]]></deletedText>
    <insertedText><![CDATA[CountDownLatch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="376" _type="Replace" date="Mon Feb 01 21:06:31 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34009" docExpressionCount="3997" docLength="35084" endLine="468" insertionLength="11" int_docASTNodeCount="5922" int_docActiveCodeLength="33998" int_docExpressionCount="3996" int_docLength="35073" length="3" offset="18065" startLine="468" starttimestamp="1612231299681" timestamp="292211">
    <deletedText><![CDATA[oun]]></deletedText>
    <insertedText><![CDATA[(numThread)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="382" _type="Insert" date="Mon Feb 01 21:06:36 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34010" docExpressionCount="3997" docLength="35085" length="1" offset="18076" starttimestamp="1612231299681" timestamp="296726">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="394" _type="Replace" date="Mon Feb 01 21:06:59 EST 2021" docASTNodeCount="5921" docActiveCodeLength="33995" docExpressionCount="3995" docLength="35070" endLine="480" insertionLength="1" int_docASTNodeCount="5919" int_docActiveCodeLength="33994" int_docExpressionCount="3994" int_docLength="35069" length="16" offset="18534" startLine="480" starttimestamp="1612231299681" timestamp="319481">
    <deletedText><![CDATA[joiner.finish();]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="396" _type="Insert" date="Mon Feb 01 21:06:59 EST 2021" docASTNodeCount="5921" docActiveCodeLength="33997" docExpressionCount="3995" docLength="35072" length="2" offset="18535" repeat="2" starttimestamp="1612231299681" timestamp="319515" timestamp2="319731">
    <text><![CDATA[at]]></text>
  </DocumentChange>
  <DocumentChange __id="401" _type="Replace" date="Mon Feb 01 21:06:59 EST 2021" docASTNodeCount="5921" docActiveCodeLength="33999" docExpressionCount="3995" docLength="35074" endLine="480" insertionLength="5" int_docASTNodeCount="5919" int_docActiveCodeLength="33994" int_docExpressionCount="3994" int_docLength="35069" length="3" offset="18534" startLine="480" starttimestamp="1612231299681" timestamp="320271">
    <deletedText><![CDATA[lat]]></deletedText>
    <insertedText><![CDATA[latch]]></insertedText>
  </DocumentChange>
  <Command __id="390" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:06:59 EST 2021" starttimestamp="1612231299681" timestamp="319333" />
  <Command __id="391" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:06:59 EST 2021" starttimestamp="1612231299681" timestamp="319334" />
  <Command __id="392" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:06:59 EST 2021" starttimestamp="1612231299681" timestamp="319335" />
  <Command __id="393" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:06:59 EST 2021" starttimestamp="1612231299681" timestamp="319336" />
  <Command __id="395" _type="InsertStringCommand" date="Mon Feb 01 21:06:59 EST 2021" starttimestamp="1612231299681" timestamp="319489" timestamp2="319489">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="397" _type="InsertStringCommand" date="Mon Feb 01 21:06:59 EST 2021" starttimestamp="1612231299681" timestamp="319521" timestamp2="319521">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="398" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:06:59 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="319559" />
  <Command __id="400" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:06:59 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="320261" />
  <Command __id="402" _type="InsertStringCommand" date="Mon Feb 01 21:06:59 EST 2021" starttimestamp="1612231299681" timestamp="320281" timestamp2="320281">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="404" _type="InsertStringCommand" date="Mon Feb 01 21:07:00 EST 2021" starttimestamp="1612231299681" timestamp="320488" timestamp2="320488">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="405" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:07:00 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="320527" />
  <Command __id="407" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:07:02 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="323202" />
  <Command __id="409" _type="InsertStringCommand" date="Mon Feb 01 21:07:02 EST 2021" starttimestamp="1612231299681" timestamp="323219" timestamp2="323219">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="403" _type="Insert" date="Mon Feb 01 21:07:00 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34001" docExpressionCount="3997" docLength="35076" length="2" offset="18539" repeat="2" starttimestamp="1612231299681" timestamp="320482" timestamp2="321621">
    <text><![CDATA[.c]]></text>
  </DocumentChange>
  <DocumentChange __id="408" _type="Replace" date="Mon Feb 01 21:07:02 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34012" docExpressionCount="3997" docLength="35087" endLine="480" insertionLength="12" int_docASTNodeCount="5921" int_docActiveCodeLength="34000" int_docExpressionCount="3995" int_docLength="35075" length="1" offset="18540" startLine="480" starttimestamp="1612231299681" timestamp="323211">
    <deletedText><![CDATA[c]]></deletedText>
    <insertedText><![CDATA[countDown();]]></insertedText>
  </DocumentChange>
  <Command __id="410" _type="SelectTextCommand" caretOffset="19319" date="Mon Feb 01 21:07:08 EST 2021" end="19335" start="19319" starttimestamp="1612231299681" timestamp="329292" />
  <DocumentChange __id="411" _type="Replace" date="Mon Feb 01 21:07:10 EST 2021" docASTNodeCount="5921" docActiveCodeLength="33997" docExpressionCount="3995" docLength="35072" endLine="501" insertionLength="1" int_docASTNodeCount="5919" int_docActiveCodeLength="33996" int_docExpressionCount="3994" int_docLength="35071" length="16" offset="19319" startLine="501" starttimestamp="1612231299681" timestamp="330535">
    <deletedText><![CDATA[joiner.finish();]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="414" _type="Insert" date="Mon Feb 01 21:07:10 EST 2021" docASTNodeCount="5921" docActiveCodeLength="34001" docExpressionCount="3995" docLength="35076" length="4" offset="19320" repeat="4" starttimestamp="1612231299681" timestamp="330816" timestamp2="331056">
    <text><![CDATA[ontt]]></text>
  </DocumentChange>
  <DocumentChange __id="418" _type="Delete" date="Mon Feb 01 21:07:11 EST 2021" docASTNodeCount="5921" docActiveCodeLength="34000" docExpressionCount="3995" docLength="35075" endLine="501" length="1" offset="19323" startLine="501" starttimestamp="1612231299681" timestamp="331497">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="419" _type="Insert" date="Mon Feb 01 21:07:11 EST 2021" docASTNodeCount="5921" docActiveCodeLength="34001" docExpressionCount="3995" docLength="35076" length="1" offset="19323" starttimestamp="1612231299681" timestamp="331597">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="412" _type="InsertStringCommand" date="Mon Feb 01 21:07:10 EST 2021" starttimestamp="1612231299681" timestamp="330543" timestamp2="330543">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="413" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:07:10 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="330577" />
  <Command __id="428" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:07:15 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="335555" />
  <Command __id="430" _type="InsertStringCommand" date="Mon Feb 01 21:07:15 EST 2021" starttimestamp="1612231299681" timestamp="335571" timestamp2="335571">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="432" _type="InsertStringCommand" date="Mon Feb 01 21:07:15 EST 2021" starttimestamp="1612231299681" timestamp="335792" timestamp2="335792">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="433" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:07:15 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="335832" />
  <Command __id="435" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:07:16 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="336680" />
  <Command __id="437" _type="InsertStringCommand" date="Mon Feb 01 21:07:16 EST 2021" starttimestamp="1612231299681" timestamp="336699" timestamp2="336699">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="439" _type="InsertStringCommand" date="Mon Feb 01 21:07:16 EST 2021" starttimestamp="1612231299681" timestamp="336781" timestamp2="336781">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="440" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:07:16 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="336819" />
  <Command __id="442" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:07:18 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="338512" />
  <Command __id="443" _type="MoveCaretCommand" caretOffset="19309" date="Mon Feb 01 21:07:18 EST 2021" docOffset="19309" starttimestamp="1612231299681" timestamp="338584" />
  <Command __id="444" _type="SelectTextCommand" caretOffset="22262" date="Mon Feb 01 21:07:27 EST 2021" end="22278" start="22262" starttimestamp="1612231299681" timestamp="348164" />
  <Command __id="446" _type="InsertStringCommand" date="Mon Feb 01 21:07:28 EST 2021" starttimestamp="1612231299681" timestamp="349029" timestamp2="349029">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="448" _type="InsertStringCommand" date="Mon Feb 01 21:07:28 EST 2021" starttimestamp="1612231299681" timestamp="349050" timestamp2="349050">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="450" _type="InsertStringCommand" date="Mon Feb 01 21:07:28 EST 2021" starttimestamp="1612231299681" timestamp="349075" timestamp2="349075">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="451" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:07:28 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="349115" />
  <Command __id="455" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:07:29 EST 2021" starttimestamp="1612231299681" timestamp="350105" />
  <Command __id="459" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:07:30 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="350716" />
  <Command __id="461" _type="InsertStringCommand" date="Mon Feb 01 21:07:30 EST 2021" starttimestamp="1612231299681" timestamp="350733" timestamp2="350733">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="463" _type="InsertStringCommand" date="Mon Feb 01 21:07:30 EST 2021" starttimestamp="1612231299681" timestamp="350953" timestamp2="350953">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="464" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:07:30 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="350992" />
  <Command __id="468" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:07:31 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="351519" />
  <Command __id="470" _type="InsertStringCommand" date="Mon Feb 01 21:07:31 EST 2021" starttimestamp="1612231299681" timestamp="351535" timestamp2="351535">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="471" _type="MoveCaretCommand" caretOffset="19214" date="Mon Feb 01 21:07:44 EST 2021" docOffset="19214" starttimestamp="1612231299681" timestamp="364693" />
  <DocumentChange __id="420" _type="Delete" date="Mon Feb 01 21:07:12 EST 2021" docASTNodeCount="5919" docActiveCodeLength="33996" docExpressionCount="3994" docLength="35071" endLine="501" length="5" offset="19319" repeat="5" startLine="501" starttimestamp="1612231299681" timestamp="332898" timestamp2="334638">
    <text><![CDATA[contd]]></text>
  </DocumentChange>
  <DocumentChange __id="425" _type="Insert" date="Mon Feb 01 21:07:14 EST 2021" docASTNodeCount="5921" docActiveCodeLength="33999" docExpressionCount="3995" docLength="35074" length="3" offset="19319" repeat="3" starttimestamp="1612231299681" timestamp="334859" timestamp2="335016">
    <text><![CDATA[lat]]></text>
  </DocumentChange>
  <DocumentChange __id="429" _type="Replace" date="Mon Feb 01 21:07:15 EST 2021" docASTNodeCount="5921" docActiveCodeLength="34001" docExpressionCount="3995" docLength="35076" endLine="501" insertionLength="5" int_docASTNodeCount="5919" int_docActiveCodeLength="33996" int_docExpressionCount="3994" int_docLength="35071" length="3" offset="19319" startLine="501" starttimestamp="1612231299681" timestamp="335563">
    <deletedText><![CDATA[lat]]></deletedText>
    <insertedText><![CDATA[latch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="431" _type="Insert" date="Mon Feb 01 21:07:15 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34003" docExpressionCount="3997" docLength="35078" length="2" offset="19324" repeat="2" starttimestamp="1612231299681" timestamp="335787" timestamp2="336036">
    <text><![CDATA[.c]]></text>
  </DocumentChange>
  <DocumentChange __id="436" _type="Replace" date="Mon Feb 01 21:07:16 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34014" docExpressionCount="3997" docLength="35089" endLine="501" insertionLength="12" int_docASTNodeCount="5921" int_docActiveCodeLength="34002" int_docExpressionCount="3995" int_docLength="35077" length="1" offset="19325" startLine="501" starttimestamp="1612231299681" timestamp="336689">
    <deletedText><![CDATA[c]]></deletedText>
    <insertedText><![CDATA[countDown();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="438" _type="Insert" date="Mon Feb 01 21:07:16 EST 2021" docASTNodeCount="5925" docActiveCodeLength="34015" docExpressionCount="3998" docLength="35090" length="1" offset="19337" starttimestamp="1612231299681" timestamp="336779">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="441" _type="Delete" date="Mon Feb 01 21:07:16 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34014" docExpressionCount="3997" docLength="35089" endLine="501" length="1" offset="19337" startLine="501" starttimestamp="1612231299681" timestamp="337240">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="445" _type="Replace" date="Mon Feb 01 21:07:28 EST 2021" docASTNodeCount="5921" docActiveCodeLength="33999" docExpressionCount="3995" docLength="35074" endLine="579" insertionLength="1" int_docASTNodeCount="5919" int_docActiveCodeLength="33998" int_docExpressionCount="3994" int_docLength="35073" length="16" offset="22262" startLine="579" starttimestamp="1612231299681" timestamp="349022">
    <deletedText><![CDATA[joiner.finish();]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="447" _type="Insert" date="Mon Feb 01 21:07:28 EST 2021" docASTNodeCount="5921" docActiveCodeLength="34003" docExpressionCount="3995" docLength="35078" length="4" offset="22263" repeat="4" starttimestamp="1612231299681" timestamp="349044" timestamp2="349367">
    <text><![CDATA[ount]]></text>
  </DocumentChange>
  <DocumentChange __id="454" _type="Delete" date="Mon Feb 01 21:07:29 EST 2021" docASTNodeCount="5919" docActiveCodeLength="33998" docExpressionCount="3994" docLength="35073" endLine="579" length="5" offset="22262" startLine="579" starttimestamp="1612231299681" timestamp="350099">
    <text><![CDATA[count]]></text>
  </DocumentChange>
  <DocumentChange __id="456" _type="Insert" date="Mon Feb 01 21:07:29 EST 2021" docASTNodeCount="5921" docActiveCodeLength="34001" docExpressionCount="3995" docLength="35076" length="3" offset="22262" repeat="3" starttimestamp="1612231299681" timestamp="350174" timestamp2="350357">
    <text><![CDATA[lat]]></text>
  </DocumentChange>
  <DocumentChange __id="460" _type="Replace" date="Mon Feb 01 21:07:30 EST 2021" docASTNodeCount="5921" docActiveCodeLength="34003" docExpressionCount="3995" docLength="35078" endLine="579" insertionLength="5" int_docASTNodeCount="5919" int_docActiveCodeLength="33998" int_docExpressionCount="3994" int_docLength="35073" length="3" offset="22262" startLine="579" starttimestamp="1612231299681" timestamp="350724">
    <deletedText><![CDATA[lat]]></deletedText>
    <insertedText><![CDATA[latch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="462" _type="Insert" date="Mon Feb 01 21:07:30 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34007" docExpressionCount="3997" docLength="35082" length="4" offset="22267" repeat="4" starttimestamp="1612231299681" timestamp="350948" timestamp2="351311">
    <text><![CDATA[.cou]]></text>
  </DocumentChange>
  <DocumentChange __id="469" _type="Replace" date="Mon Feb 01 21:07:31 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34016" docExpressionCount="3997" docLength="35091" endLine="579" insertionLength="12" int_docASTNodeCount="5919" int_docActiveCodeLength="34004" int_docExpressionCount="3994" int_docLength="35079" length="3" offset="22268" startLine="579" starttimestamp="1612231299681" timestamp="351527">
    <deletedText><![CDATA[cou]]></deletedText>
    <insertedText><![CDATA[countDown();]]></insertedText>
  </DocumentChange>
  <Command __id="472" _type="MoveCaretCommand" caretOffset="19364" date="Mon Feb 01 21:07:56 EST 2021" docOffset="19364" starttimestamp="1612231299681" timestamp="376836" />
  <Command __id="474" _type="InsertStringCommand" date="Mon Feb 01 21:08:02 EST 2021" starttimestamp="1612231299681" timestamp="382876" timestamp2="382876">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="476" _type="InsertStringCommand" date="Mon Feb 01 21:08:02 EST 2021" starttimestamp="1612231299681" timestamp="383095" timestamp2="383095">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="477" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:08:02 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="383137" />
  <Command __id="480" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:08:04 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="384671" />
  <Command __id="482" _type="InsertStringCommand" date="Mon Feb 01 21:08:04 EST 2021" starttimestamp="1612231299681" timestamp="384712" timestamp2="384712">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="483" _type="MoveCaretCommand" caretOffset="19399" date="Mon Feb 01 21:08:06 EST 2021" docOffset="19399" starttimestamp="1612231299681" timestamp="386909" />
  <Command __id="485" _type="InsertStringCommand" date="Mon Feb 01 21:08:06 EST 2021" starttimestamp="1612231299681" timestamp="387233" timestamp2="387233">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="486" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:08:06 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="387272" />
  <Command __id="488" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:08:07 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="387565" />
  <Command __id="490" _type="InsertStringCommand" date="Mon Feb 01 21:08:07 EST 2021" starttimestamp="1612231299681" timestamp="387603" timestamp2="387603">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="491" _type="SelectTextCommand" caretOffset="22440" date="Mon Feb 01 21:08:18 EST 2021" end="22440" start="19533" starttimestamp="1612231299681" timestamp="398601" />
  <Command __id="493" _type="CutCommand" date="Mon Feb 01 21:08:18 EST 2021" starttimestamp="1612231299681" timestamp="399247" />
  <Command __id="494" _type="MoveCaretCommand" caretOffset="19364" date="Mon Feb 01 21:08:23 EST 2021" docOffset="19364" starttimestamp="1612231299681" timestamp="403950" />
  <Command __id="495" _type="MoveCaretCommand" caretOffset="19388" date="Mon Feb 01 21:08:24 EST 2021" docOffset="19388" starttimestamp="1612231299681" timestamp="404601" />
  <Command __id="497" _type="PasteCommand" date="Mon Feb 01 21:08:24 EST 2021" starttimestamp="1612231299681" timestamp="404886" />
  <Command __id="498" _type="SelectTextCommand" caretOffset="22285" date="Mon Feb 01 21:08:27 EST 2021" end="22370" start="22285" starttimestamp="1612231299681" timestamp="408200" />
  <Command __id="500" _type="CutCommand" date="Mon Feb 01 21:08:28 EST 2021" starttimestamp="1612231299681" timestamp="408391" />
  <Command __id="501" _type="MoveCaretCommand" caretOffset="22411" date="Mon Feb 01 21:08:29 EST 2021" docOffset="22411" starttimestamp="1612231299681" timestamp="409575" />
  <Command __id="503" _type="InsertStringCommand" date="Mon Feb 01 21:08:29 EST 2021" starttimestamp="1612231299681" timestamp="409866" timestamp2="409866">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="505" _type="PasteCommand" date="Mon Feb 01 21:08:29 EST 2021" starttimestamp="1612231299681" timestamp="410056" />
  <Command __id="506" _type="MoveCaretCommand" caretOffset="22525" date="Mon Feb 01 21:08:30 EST 2021" docOffset="22525" starttimestamp="1612231299681" timestamp="411205" />
  <Command __id="508" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 21:08:31 EST 2021" starttimestamp="1612231299681" timestamp="411494" />
  <Command __id="509" _type="MoveCaretCommand" caretOffset="19189" date="Mon Feb 01 21:08:41 EST 2021" docOffset="19189" starttimestamp="1612231299681" timestamp="421723" />
  <Command __id="510" _type="MoveCaretCommand" caretOffset="22285" date="Mon Feb 01 21:08:49 EST 2021" docOffset="22285" starttimestamp="1612231299681" timestamp="429574" />
  <Command __id="512" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 21:08:50 EST 2021" starttimestamp="1612231299681" timestamp="430398" />
  <Command __id="513" _type="MoveCaretCommand" caretOffset="22361" date="Mon Feb 01 21:08:51 EST 2021" docOffset="22361" starttimestamp="1612231299681" timestamp="431770" />
  <Command __id="514" _type="MoveCaretCommand" caretOffset="22342" date="Mon Feb 01 21:08:54 EST 2021" docOffset="22342" starttimestamp="1612231299681" timestamp="434581" />
  <Command __id="516" _type="InsertStringCommand" date="Mon Feb 01 21:08:54 EST 2021" starttimestamp="1612231299681" timestamp="435197" timestamp2="435197">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="518" _type="InsertStringCommand" date="Mon Feb 01 21:08:55 EST 2021" starttimestamp="1612231299681" timestamp="435336" timestamp2="435336">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="519" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:08:55 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="435376" />
  <Command __id="520" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:08:55 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="435537" />
  <Command __id="522" _type="InsertStringCommand" date="Mon Feb 01 21:08:55 EST 2021" starttimestamp="1612231299681" timestamp="435554" timestamp2="435554">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="523" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:08:55 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="435605" />
  <Command __id="526" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:08:56 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="436387" />
  <Command __id="528" _type="InsertStringCommand" date="Mon Feb 01 21:08:56 EST 2021" starttimestamp="1612231299681" timestamp="436404" timestamp2="436404">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="529" _type="MoveCaretCommand" caretOffset="22462" date="Mon Feb 01 21:09:05 EST 2021" docOffset="22462" starttimestamp="1612231299681" timestamp="446313" />
  <Command __id="530" _type="MoveCaretCommand" caretOffset="22482" date="Mon Feb 01 21:09:06 EST 2021" docOffset="22482" starttimestamp="1612231299681" timestamp="446790" />
  <Command __id="531" _type="MoveCaretCommand" caretOffset="22498" date="Mon Feb 01 21:09:06 EST 2021" docOffset="22498" starttimestamp="1612231299681" timestamp="447243" />
  <Command __id="532" _type="SelectTextCommand" caretOffset="23173" date="Mon Feb 01 21:09:38 EST 2021" end="23187" start="23173" starttimestamp="1612231299681" timestamp="479300" />
  <Command __id="534" _type="InsertStringCommand" date="Mon Feb 01 21:09:39 EST 2021" starttimestamp="1612231299681" timestamp="479991" timestamp2="479991">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="536" _type="InsertStringCommand" date="Mon Feb 01 21:09:39 EST 2021" starttimestamp="1612231299681" timestamp="480033" timestamp2="480033">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="537" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:09:39 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="480073" />
  <Command __id="539" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:09:40 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="481193" />
  <Command __id="541" _type="InsertStringCommand" date="Mon Feb 01 21:09:40 EST 2021" starttimestamp="1612231299681" timestamp="481211" timestamp2="481211">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="543" _type="InsertStringCommand" date="Mon Feb 01 21:09:41 EST 2021" starttimestamp="1612231299681" timestamp="481524" timestamp2="481524">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="544" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:09:41 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="481565" />
  <Command __id="545" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:09:43 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="484011" />
  <Command __id="547" _type="InsertStringCommand" date="Mon Feb 01 21:09:43 EST 2021" starttimestamp="1612231299681" timestamp="484023" timestamp2="484023">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="548" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:09:45 EST 2021" starttimestamp="1612231299681" timestamp="485927" />
  <Command __id="549" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:09:45 EST 2021" starttimestamp="1612231299681" timestamp="486090" />
  <Command __id="550" _type="ShellCommand" date="Mon Feb 01 21:09:50 EST 2021" starttimestamp="1612231299681" timestamp="491130" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="551" _type="ShellCommand" date="Mon Feb 01 21:09:50 EST 2021" starttimestamp="1612231299681" timestamp="491241" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="473" _type="Insert" date="Mon Feb 01 21:08:02 EST 2021" docASTNodeCount="5923" docActiveCodeLength="34028" docExpressionCount="3997" docLength="35103" length="12" offset="19364" repeat="4" starttimestamp="1612231299681" timestamp="382860" timestamp2="383313">
    <text><![CDATA[
							try]]></text>
  </DocumentChange>
  <DocumentChange __id="481" _type="Replace" date="Mon Feb 01 21:08:04 EST 2021" docASTNodeCount="5926" docActiveCodeLength="34080" docExpressionCount="3997" docLength="35185" endLine="504" insertionLength="85" int_docASTNodeCount="5923" int_docActiveCodeLength="34025" int_docExpressionCount="3997" int_docLength="35100" length="3" offset="19373" startLine="504" starttimestamp="1612231299681" timestamp="384691">
    <deletedText><![CDATA[try]]></deletedText>
    <insertedText><![CDATA[try {
								
							} finally {
								// TODO: handle finally clause
							}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="484" _type="Insert" date="Mon Feb 01 21:08:06 EST 2021" docASTNodeCount="5926" docActiveCodeLength="34082" docExpressionCount="3997" docLength="35187" length="2" offset="19399" repeat="2" starttimestamp="1612231299681" timestamp="387228" timestamp2="387376">
    <text><![CDATA[ca]]></text>
  </DocumentChange>
  <DocumentChange __id="489" _type="Replace" date="Mon Feb 01 21:08:07 EST 2021" docASTNodeCount="5932" docActiveCodeLength="34121" docExpressionCount="3999" docLength="35251" endLine="506" insertionLength="66" int_docASTNodeCount="5926" int_docActiveCodeLength="34080" int_docExpressionCount="3997" int_docLength="35185" length="2" offset="19399" startLine="506" starttimestamp="1612231299681" timestamp="387592">
    <deletedText><![CDATA[ca]]></deletedText>
    <insertedText><![CDATA[catch (Exception e) {
								// TODO: handle exception
							}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="492" _type="Delete" date="Mon Feb 01 21:08:18 EST 2021" docASTNodeCount="5517" docActiveCodeLength="31214" docExpressionCount="3709" docLength="32344" endLine="586" length="2907" offset="19533" startLine="511" starttimestamp="1612231299681" timestamp="399214">
    <text><![CDATA[for (File file : logs) {
								List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
								if (commands.size() < 2) {
									continue;
								}
								List<EHICommand> newCommands = new ArrayList<>();
								EHICommand last = null;
								EHICommand cur = null;
								for (EHICommand command : commands) {
									if (cur == null) {
										cur = command;
										newCommands.add(command);
									} else {
										last = cur;
										cur = command;
										long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
										if (rest >= 1*ONE_SECOND) {
											String range = "";
											if (rest < 2*ONE_SECOND) {
												range = "1s-2s";
											} else if (rest < 5*ONE_SECOND) {
												range = "2s-5s";
											} else if (rest < 10*ONE_SECOND) {
												range = "5s-10s";
											} else if (rest < 20*ONE_SECOND) {
												range = "10s-20s";
											} else if (rest < 30*ONE_SECOND) {
												range = "20s-30s";
											} else if (rest < ONE_MIN) {
												range = "30s-1m";
											} else if (rest < TWO_MIN) {
												range = "1m-2m";
											} else if (rest < FIVE_MIN) {
												range = "2m-5m";
											} else if (rest < TEN_MIN) {
												range = "5m-10m";
											} else if (rest < 3*TEN_MIN) {
												range = "10m-30m";
											} else if (rest < 6*TEN_MIN) {
												range = "30m-60m";
											} else {
												range = ">1h";
											}
											PauseCommand rCommnad = new PauseCommand(last.getCommandType(), cur.getCommandType(), rest, range);
											rCommnad.setStartTimestamp(last.getStartTimestamp());
											rCommnad.setTimestamp(last.getTimestamp()+1);
											newCommands.add(rCommnad);
										} 
										newCommands.add(command);
									}
								}
								String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
								for (EHICommand c : newCommands) {
									logContent += c.persist();
								}
								logContent += XML_FILE_ENDING;
								try {
									File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
									if (newLog.exists()) {
										newLog.delete();
									}
									newLog.getParentFile().mkdirs();
									newLog.createNewFile();
									BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
									System.out.println("Writing to file " + newLog.getPath());
									writer.write(logContent);
									writer.close();
									System.out.println("Finished writing to file " + newLog.getPath());
								} catch (IOException e) {
									e.printStackTrace();
								}
							}
							synchronized (this) {
								threadCount--;
							}
							latch.countDown();]]></text>
  </DocumentChange>
  <DocumentChange __id="496" _type="Replace" date="Mon Feb 01 21:08:24 EST 2021" docASTNodeCount="5932" docActiveCodeLength="34196" docExpressionCount="3999" docLength="35326" endLine="505" insertionLength="2990" int_docASTNodeCount="5517" int_docActiveCodeLength="31206" int_docExpressionCount="3709" int_docLength="32336" length="8" offset="19380" startLine="505" starttimestamp="1612231299681" timestamp="404834">
    <deletedText><![CDATA[								]]></deletedText>
    <insertedText><![CDATA[								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last.getCommandType(), cur.getCommandType(), rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="499" _type="Delete" date="Mon Feb 01 21:08:28 EST 2021" docASTNodeCount="5922" docActiveCodeLength="34111" docExpressionCount="3993" docLength="35241" endLine="580" length="85" offset="22285" startLine="577" starttimestamp="1612231299681" timestamp="408380">
    <text><![CDATA[synchronized (this) {
									threadCount--;
								}
								latch.countDown();]]></text>
  </DocumentChange>
  <DocumentChange __id="502" _type="Insert" date="Mon Feb 01 21:08:29 EST 2021" docASTNodeCount="5922" docActiveCodeLength="34121" docExpressionCount="3993" docLength="35251" length="10" offset="22411" starttimestamp="1612231299681" timestamp="409851">
    <text><![CDATA[
								]]></text>
  </DocumentChange>
  <DocumentChange __id="504" _type="Replace" date="Mon Feb 01 21:08:29 EST 2021" docASTNodeCount="5932" docActiveCodeLength="34206" docExpressionCount="3999" docLength="35336" endLine="582" insertionLength="93" int_docASTNodeCount="5922" int_docActiveCodeLength="34113" int_docExpressionCount="3993" int_docLength="35243" length="8" offset="22413" startLine="582" starttimestamp="1612231299681" timestamp="410042">
    <deletedText><![CDATA[								]]></deletedText>
    <insertedText><![CDATA[								synchronized (this) {
									threadCount--;
								}
								latch.countDown();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="507" _type="Delete" date="Mon Feb 01 21:08:31 EST 2021" docASTNodeCount="5932" docActiveCodeLength="34197" docExpressionCount="3999" docLength="35327" endLine="588" length="9" offset="22518" startLine="587" starttimestamp="1612231299681" timestamp="411492">
    <text><![CDATA[							
]]></text>
  </DocumentChange>
  <DocumentChange __id="511" _type="Delete" date="Mon Feb 01 21:08:50 EST 2021" docASTNodeCount="5932" docActiveCodeLength="34187" docExpressionCount="3999" docLength="35317" endLine="578" length="10" offset="22277" startLine="577" starttimestamp="1612231299681" timestamp="430396">
    <text><![CDATA[								
]]></text>
  </DocumentChange>
  <DocumentChange __id="515" _type="Insert" date="Mon Feb 01 21:08:54 EST 2021" docASTNodeCount="5386" docActiveCodeLength="34198" docExpressionCount="3635" docLength="35328" length="11" offset="22342" repeat="2" starttimestamp="1612231299681" timestamp="435177" timestamp2="435330">
    <text><![CDATA[
								e]]></text>
  </DocumentChange>
  <DocumentChange __id="521" _type="Replace" date="Mon Feb 01 21:08:55 EST 2021" docASTNodeCount="5386" docActiveCodeLength="34199" docExpressionCount="3635" docLength="35329" endLine="579" insertionLength="2" int_docASTNodeCount="5932" int_docActiveCodeLength="34197" int_docExpressionCount="3999" int_docLength="35327" length="1" offset="22352" startLine="579" starttimestamp="1612231299681" timestamp="435545">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA[e.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="524" _type="Insert" date="Mon Feb 01 21:08:55 EST 2021" docASTNodeCount="5386" docActiveCodeLength="34201" docExpressionCount="3635" docLength="35331" length="2" offset="22354" repeat="2" starttimestamp="1612231299681" timestamp="435751" timestamp2="435766">
    <text><![CDATA[pr]]></text>
  </DocumentChange>
  <DocumentChange __id="527" _type="Replace" date="Mon Feb 01 21:08:56 EST 2021" docASTNodeCount="5936" docActiveCodeLength="34217" docExpressionCount="4002" docLength="35347" endLine="579" insertionLength="18" int_docASTNodeCount="5386" int_docActiveCodeLength="34199" int_docExpressionCount="3635" int_docLength="35329" length="2" offset="22354" startLine="579" starttimestamp="1612231299681" timestamp="436395">
    <deletedText><![CDATA[pr]]></deletedText>
    <insertedText><![CDATA[printStackTrace();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="533" _type="Replace" date="Mon Feb 01 21:09:39 EST 2021" docASTNodeCount="5936" docActiveCodeLength="34204" docExpressionCount="4000" docLength="35334" endLine="617" insertionLength="1" int_docASTNodeCount="5932" int_docActiveCodeLength="34203" int_docExpressionCount="3999" int_docLength="35333" length="14" offset="23173" startLine="617" starttimestamp="1612231299681" timestamp="479984">
    <deletedText><![CDATA[joiner.join();]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="535" _type="Insert" date="Mon Feb 01 21:09:39 EST 2021" docASTNodeCount="5936" docActiveCodeLength="34206" docExpressionCount="4000" docLength="35336" length="2" offset="23174" repeat="2" starttimestamp="1612231299681" timestamp="480028" timestamp2="480205">
    <text><![CDATA[at]]></text>
  </DocumentChange>
  <DocumentChange __id="540" _type="Replace" date="Mon Feb 01 21:09:40 EST 2021" docASTNodeCount="5936" docActiveCodeLength="34208" docExpressionCount="4000" docLength="35338" endLine="617" insertionLength="5" int_docASTNodeCount="5932" int_docActiveCodeLength="34203" int_docExpressionCount="3999" int_docLength="35333" length="3" offset="23173" startLine="617" starttimestamp="1612231299681" timestamp="481202">
    <deletedText><![CDATA[lat]]></deletedText>
    <insertedText><![CDATA[latch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="542" _type="Insert" date="Mon Feb 01 21:09:41 EST 2021" docASTNodeCount="5934" docActiveCodeLength="34209" docExpressionCount="4001" docLength="35339" length="1" offset="23178" starttimestamp="1612231299681" timestamp="481519">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="546" _type="Insert" date="Mon Feb 01 21:09:43 EST 2021" docASTNodeCount="5936" docActiveCodeLength="34217" docExpressionCount="4002" docLength="35347" length="8" offset="23179" starttimestamp="1612231299681" timestamp="484019">
    <text><![CDATA[await();]]></text>
  </DocumentChange>
  <DocumentChange __id="552" _type="Delete" date="Mon Feb 01 21:09:50 EST 2021" docASTNodeCount="5932" docActiveCodeLength="34203" docExpressionCount="3999" docLength="35333" endLine="617" length="14" offset="23173" startLine="617" starttimestamp="1612231299681" timestamp="491299">
    <text><![CDATA[latch.await();]]></text>
  </DocumentChange>
  <DocumentChange __id="553" _type="Insert" date="Mon Feb 01 21:09:50 EST 2021" docASTNodeCount="5948" docActiveCodeLength="34300" docExpressionCount="4007" docLength="35464" length="131" offset="23173" repeat="9" starttimestamp="1612231299681" timestamp="491307" timestamp2="491375">
    <text><![CDATA[try {
			latch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></text>
  </DocumentChange>
  <Command __id="562" _type="MoveCaretCommand" caretOffset="23304" date="Mon Feb 01 21:09:52 EST 2021" docOffset="23304" starttimestamp="1612231299681" timestamp="492756" />
  <DocumentChange __id="563" _type="Insert" date="Mon Feb 01 21:09:57 EST 2021" docASTNodeCount="5952" docActiveCodeLength="34305" docExpressionCount="4008" docLength="35469" length="5" offset="23304" repeat="5" starttimestamp="1612231299681" timestamp="497830" timestamp2="498392">
    <text><![CDATA[ fina]]></text>
  </DocumentChange>
  <Command __id="564" _type="InsertStringCommand" date="Mon Feb 01 21:09:57 EST 2021" starttimestamp="1612231299681" timestamp="497838" timestamp2="497838">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="566" _type="InsertStringCommand" date="Mon Feb 01 21:09:57 EST 2021" starttimestamp="1612231299681" timestamp="498117" timestamp2="498117">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="567" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:09:57 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="498158" />
  <Command __id="571" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:09:58 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="498670" />
  <DocumentChange __id="572" _type="Replace" date="Mon Feb 01 21:09:58 EST 2021" docASTNodeCount="5951" docActiveCodeLength="34312" docExpressionCount="4009" docLength="35476" endLine="622" insertionLength="11" int_docASTNodeCount="5948" int_docActiveCodeLength="34301" int_docExpressionCount="4007" int_docLength="35465" length="4" offset="23305" startLine="622" starttimestamp="1612231299681" timestamp="498678">
    <deletedText><![CDATA[fina]]></deletedText>
    <insertedText><![CDATA[finalize();]]></insertedText>
  </DocumentChange>
  <Command __id="573" _type="InsertStringCommand" date="Mon Feb 01 21:09:58 EST 2021" starttimestamp="1612231299681" timestamp="498686" timestamp2="498686">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="574" _type="Replace" date="Mon Feb 01 21:09:59 EST 2021" docASTNodeCount="5952" docActiveCodeLength="34305" docExpressionCount="4008" docLength="35469" endLine="622" insertionLength="4" int_docASTNodeCount="5948" int_docActiveCodeLength="34301" int_docExpressionCount="4007" int_docLength="35465" length="11" offset="23305" startLine="622" starttimestamp="1612231299681" timestamp="499620">
    <deletedText><![CDATA[finalize();]]></deletedText>
    <insertedText><![CDATA[fina]]></insertedText>
  </DocumentChange>
  <Command __id="575" _type="UndoCommand" date="Mon Feb 01 21:09:59 EST 2021" starttimestamp="1612231299681" timestamp="499660" />
  <DocumentChange __id="576" _type="Replace" date="Mon Feb 01 21:10:00 EST 2021" docASTNodeCount="5952" docActiveCodeLength="34302" docExpressionCount="4008" docLength="35466" endLine="622" insertionLength="1" int_docASTNodeCount="5948" int_docActiveCodeLength="34301" int_docExpressionCount="4007" int_docLength="35465" length="4" offset="23305" startLine="622" starttimestamp="1612231299681" timestamp="500564">
    <deletedText><![CDATA[fina]]></deletedText>
    <insertedText><![CDATA[f]]></insertedText>
  </DocumentChange>
  <Command __id="577" _type="InsertStringCommand" date="Mon Feb 01 21:10:00 EST 2021" starttimestamp="1612231299681" timestamp="500570" timestamp2="500570">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="578" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:10:00 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="500606" />
  <DocumentChange __id="579" _type="Insert" date="Mon Feb 01 21:10:00 EST 2021" docASTNodeCount="5952" docActiveCodeLength="34305" docExpressionCount="4008" docLength="35469" length="3" offset="23306" repeat="3" starttimestamp="1612231299681" timestamp="500740" timestamp2="500925">
    <text><![CDATA[ian]]></text>
  </DocumentChange>
  <DocumentChange __id="582" _type="Delete" date="Mon Feb 01 21:10:01 EST 2021" docASTNodeCount="5952" docActiveCodeLength="34303" docExpressionCount="4008" docLength="35467" endLine="622" length="2" offset="23307" repeat="2" startLine="622" starttimestamp="1612231299681" timestamp="501571" timestamp2="501691">
    <text><![CDATA[an]]></text>
  </DocumentChange>
  <DocumentChange __id="584" _type="Insert" date="Mon Feb 01 21:10:01 EST 2021" docASTNodeCount="5942" docActiveCodeLength="34308" docExpressionCount="4003" docLength="35472" length="5" offset="23307" repeat="5" starttimestamp="1612231299681" timestamp="501880" timestamp2="502355">
    <text><![CDATA[nally]]></text>
  </DocumentChange>
  <Command __id="589" _type="ShellCommand" date="Mon Feb 01 21:10:03 EST 2021" starttimestamp="1612231299681" timestamp="504214" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="590" _type="ShellCommand" date="Mon Feb 01 21:10:04 EST 2021" starttimestamp="1612231299681" timestamp="504370" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="591" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:10:04 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="504378" />
  <Command __id="593" _type="MoveCaretCommand" caretOffset="23319" date="Mon Feb 01 21:10:04 EST 2021" docOffset="23319" starttimestamp="1612231299681" timestamp="504476" />
  <Command __id="594" _type="MoveCaretCommand" caretOffset="23332" date="Mon Feb 01 21:10:05 EST 2021" docOffset="23332" starttimestamp="1612231299681" timestamp="505789" />
  <Command __id="595" _type="SelectTextCommand" caretOffset="23334" date="Mon Feb 01 21:10:05 EST 2021" end="23334" start="23328" starttimestamp="1612231299681" timestamp="505959" />
  <Command __id="596" _type="SelectTextCommand" caretOffset="23345" date="Mon Feb 01 21:10:05 EST 2021" end="23345" start="23326" starttimestamp="1612231299681" timestamp="506114" />
  <Command __id="598" _type="CutCommand" date="Mon Feb 01 21:10:05 EST 2021" starttimestamp="1612231299681" timestamp="506269" />
  <Command __id="599" _type="MoveCaretCommand" caretOffset="23319" date="Mon Feb 01 21:10:06 EST 2021" docOffset="23319" starttimestamp="1612231299681" timestamp="506606" />
  <Command __id="601" _type="PasteCommand" date="Mon Feb 01 21:10:06 EST 2021" starttimestamp="1612231299681" timestamp="506728" />
  <Command __id="603" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 21:10:06 EST 2021" starttimestamp="1612231299681" timestamp="507172" />
  <Command __id="604" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:10:07 EST 2021" starttimestamp="1612231299681" timestamp="508005" />
  <Command __id="605" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 21:10:07 EST 2021" starttimestamp="1612231299681" timestamp="508025" />
  <Command __id="606" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:10:07 EST 2021" starttimestamp="1612231299681" timestamp="508177" />
  <Command __id="607" _type="SelectTextCommand" caretOffset="22747" date="Mon Feb 01 21:10:32 EST 2021" end="22747" start="22630" starttimestamp="1612231299681" timestamp="532821" />
  <Command __id="608" _type="MoveCaretCommand" caretOffset="22747" date="Mon Feb 01 21:10:32 EST 2021" docOffset="22747" starttimestamp="1612231299681" timestamp="533120" />
  <DocumentChange __id="1234" _type="Insert" date="Mon Feb 01 21:16:44 EST 2021" docASTNodeCount="490" docActiveCodeLength="2867" docExpressionCount="307" docLength="2867" length="7" offset="1005" repeat="7" starttimestamp="1612231299681" timestamp="905023" timestamp2="907114">
    <text><![CDATA[Delete_]]></text>
  </DocumentChange>
  <Command __id="1235" _type="InsertStringCommand" date="Mon Feb 01 21:16:44 EST 2021" starttimestamp="1612231299681" timestamp="905027" timestamp2="905027">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="1237" _type="InsertStringCommand" date="Mon Feb 01 21:16:44 EST 2021" starttimestamp="1612231299681" timestamp="905284" timestamp2="905284">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1239" _type="InsertStringCommand" date="Mon Feb 01 21:16:45 EST 2021" starttimestamp="1612231299681" timestamp="905451" timestamp2="905451">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1241" _type="InsertStringCommand" date="Mon Feb 01 21:16:45 EST 2021" starttimestamp="1612231299681" timestamp="905529" timestamp2="905529">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1243" _type="InsertStringCommand" date="Mon Feb 01 21:16:45 EST 2021" starttimestamp="1612231299681" timestamp="905696" timestamp2="905696">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1245" _type="InsertStringCommand" date="Mon Feb 01 21:16:45 EST 2021" starttimestamp="1612231299681" timestamp="905764" timestamp2="905764">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1247" _type="InsertStringCommand" date="Mon Feb 01 21:16:46 EST 2021" starttimestamp="1612231299681" timestamp="907118" timestamp2="907118">
    <data><![CDATA[_]]></data>
  </Command>
  <Command __id="1248" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:17:03 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="983" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="924232">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶//	private static AExperimentalReplayer replayer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶		replayer = new AReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶		replayer.analyzeFolder(classFolderPath);¶//		replayer.createRestCommandLogs(classFolderPath);¶//		replayer = new AExperimentalReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		replayer.createRestCommandLogs(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="1249" _type="MoveCaretCommand" caretOffset="592" date="Mon Feb 01 21:17:04 EST 2021" docOffset="619" starttimestamp="1612231299681" timestamp="924431" />
  <Command __id="1250" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:17:04 EST 2021" docASTNodeCount="5949" docActiveCodeLength="34300" docExpressionCount="4007" docLength="35255" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="924963">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶"), Diff(INSERT,"import java.util.concurrent.CountDownLatch;¶¶"), Diff(EQUAL,"import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private "), Diff(DELETE,"AJoiner joiner"), Diff(INSERT,"CountDownLatch latch"), Diff(EQUAL,";¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		"), Diff(DELETE,"joiner"), Diff(INSERT,"latch"), Diff(EQUAL," = new "), Diff(DELETE,"AJoiner"), Diff(INSERT,"CountDownLatch"), Diff(EQUAL,"(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					"), Diff(DELETE,"joiner.finish"), Diff(INSERT,"latch.countDown"), Diff(EQUAL,"();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								"), Diff(DELETE,"joiner.finish"), Diff(INSERT,"latch.countDown"), Diff(EQUAL,"();¶								return;¶							}¶							"), Diff(INSERT,"try {¶								"), Diff(EQUAL,"for (File file : logs) {¶								"), Diff(INSERT,"	"), Diff(EQUAL,"List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶								"), Diff(INSERT,"	"), Diff(EQUAL,"if (commands.size() < 2) {¶									"), Diff(INSERT,"	"), Diff(EQUAL,"continue;¶								"), Diff(INSERT,"	"), Diff(EQUAL,"}¶								"), Diff(INSERT,"	"), Diff(EQUAL,"List<EHICommand> newCommands = new ArrayList<>();¶								"), Diff(INSERT,"	"), Diff(EQUAL,"EHICommand last = null;¶								"), Diff(INSERT,"	"), Diff(EQUAL,"EHICommand cur = null;¶								"), Diff(INSERT,"	"), Diff(EQUAL,"for (EHICommand command : commands) {¶									"), Diff(INSERT,"	"), Diff(EQUAL,"if (cur == null) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"cur = command;¶										"), Diff(INSERT,"	"), Diff(EQUAL,"newCommands.add(command);¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"last = cur;¶										"), Diff(INSERT,"	"), Diff(EQUAL,"cur = command;¶										"), Diff(INSERT,"	"), Diff(EQUAL,"long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶										"), Diff(INSERT,"	"), Diff(EQUAL,"if (rest >= 1*ONE_SECOND) {¶											"), Diff(INSERT,"	"), Diff(EQUAL,"String range = "";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"if (rest < 2*ONE_SECOND) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "1s-2s";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 5*ONE_SECOND) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "2s-5s";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 10*ONE_SECOND) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "5s-10s";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 20*ONE_SECOND) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "10s-20s";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 30*ONE_SECOND) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "20s-30s";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < ONE_MIN) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "30s-1m";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < TWO_MIN) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "1m-2m";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < FIVE_MIN) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "2m-5m";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < TEN_MIN) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "5m-10m";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 3*TEN_MIN) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "10m-30m";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 6*TEN_MIN) {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = "30m-60m";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"} else {¶												"), Diff(INSERT,"	"), Diff(EQUAL,"range = ">1h";¶											"), Diff(INSERT,"	"), Diff(EQUAL,"}¶											"), Diff(INSERT,"	"), Diff(EQUAL,"PauseCommand rCommnad = new PauseCommand(last.getCommandType(), cur.getCommandType(), rest, range);¶											"), Diff(INSERT,"	"), Diff(EQUAL,"rCommnad.setStartTimestamp(last.getStartTimestamp());¶											"), Diff(INSERT,"	"), Diff(EQUAL,"rCommnad.setTimestamp(last.getTimestamp()+1);¶											"), Diff(INSERT,"	"), Diff(EQUAL,"newCommands.add(rCommnad);¶										"), Diff(INSERT,"	"), Diff(EQUAL,"} ¶										"), Diff(INSERT,"	"), Diff(EQUAL,"newCommands.add(command);¶									"), Diff(INSERT,"	"), Diff(EQUAL,"}¶								"), Diff(INSERT,"	"), Diff(EQUAL,"}¶								"), Diff(INSERT,"	"), Diff(EQUAL,"String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶								"), Diff(INSERT,"	"), Diff(EQUAL,"for (EHICommand c : newCommands) {¶									"), Diff(INSERT,"	"), Diff(EQUAL,"logContent += c.persist();¶								"), Diff(INSERT,"	"), Diff(EQUAL,"}¶								"), Diff(INSERT,"	"), Diff(EQUAL,"logContent += XML_FILE_ENDING;¶								"), Diff(INSERT,"	"), Diff(EQUAL,"try {¶									"), Diff(INSERT,"	"), Diff(EQUAL,"File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶									"), Diff(INSERT,"	"), Diff(EQUAL,"if (newLog.exists()) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"newLog.delete();¶									"), Diff(INSERT,"	"), Diff(EQUAL,"}¶									"), Diff(INSERT,"	"), Diff(EQUAL,"newLog.getParentFile().mkdirs();¶									"), Diff(INSERT,"	"), Diff(EQUAL,"newLog.createNewFile();¶									"), Diff(INSERT,"	"), Diff(EQUAL,"BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶									"), Diff(INSERT,"	"), Diff(EQUAL,"System.out.println("Writing to file " + newLog.getPath());¶									"), Diff(INSERT,"	"), Diff(EQUAL,"writer.write(logContent);¶									"), Diff(INSERT,"	"), Diff(EQUAL,"writer.close();¶									"), Diff(INSERT,"	"), Diff(EQUAL,"System.out.println("Finished writing to file " + newLog.getPath());¶								"), Diff(INSERT,"	"), Diff(EQUAL,"} catch (IOException e) {¶									"), Diff(INSERT,"	"), Diff(EQUAL,"e.printStackTrace();¶								"), Diff(INSERT,"	"), Diff(EQUAL,"}¶							"), Diff(INSERT,"	"), Diff(EQUAL,"}¶							"), Diff(INSERT,"} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								"), Diff(EQUAL,"synchronized (this) {¶								"), Diff(INSERT,"	"), Diff(EQUAL,"threadCount--;¶							"), Diff(INSERT,"	"), Diff(EQUAL,"}¶							"), Diff(INSERT,"	"), Diff(DELETE,"joiner.finish();"), Diff(INSERT,"latch.countDown();¶							}"), Diff(EQUAL,"¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶"), Diff(DELETE,"//"), Diff(EQUAL,"				"), Diff(DELETE,"	if (i == assigns.length-1 && j == students.length-1) {¶//				"), Diff(INSERT,"}¶			}¶		}¶"), Diff(EQUAL,"		try {¶"), Diff(DELETE,"//"), Diff(EQUAL,"			"), Diff(DELETE,"				thread.join();¶//				"), Diff(INSERT,"latch.await();¶"), Diff(EQUAL,"		} catch (InterruptedException e) {¶"), Diff(DELETE,"//"), Diff(EQUAL,"			"), Diff(DELETE,"	"), Diff(INSERT,"// TODO Auto-generated catch block¶"), Diff(EQUAL,"			e.printStackTrace();¶"), Diff(DELETE,"//			"), Diff(EQUAL,"		"), Diff(DELETE,"	"), Diff(EQUAL,"} "), Diff(DELETE,"¶//			"), Diff(INSERT,"finally {¶"), Diff(EQUAL,"			System.exit(0);¶"), Diff(DELETE,"//					}¶				}¶			}¶		}¶		joiner.join();¶		System.exit(0);"), Diff(INSERT,"		}"), Diff(EQUAL,"¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	private Analyzer analyzer;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private int count = 0;
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	private static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private static final String XML_FILE_ENDING = "\r\n</Events>"; 
	private int threadCount = 0;
	private CountDownLatch latch;
	private static final int THREAD_LIM = 5;


	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",
//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createRestCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		latch = new CountDownLatch(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					latch.countDown();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
								return;
							}
							try {
								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last.getCommandType(), cur.getCommandType(), rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}finally {
								// TODO: handle finally clause
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
							}
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
//		return df.format(t/ONE_SECOND);
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			for(int k = 1; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {
//						continue;
//					}
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
}
]]></snapshot>
  </Command>
  <Command __id="1251" _type="MoveCaretCommand" caretOffset="22928" date="Mon Feb 01 21:17:04 EST 2021" docOffset="22928" starttimestamp="1612231299681" timestamp="925081" />
  <Command __id="1252" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:17:05 EST 2021" docASTNodeCount="3420" docActiveCodeLength="20770" docExpressionCount="2338" docLength="21858" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="926035">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶"), Diff(DELETE,"import fluorite.commands.PauseCommand;¶"), Diff(EQUAL,"import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		joiner = new AJoiner(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				joiner.finish();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						joiner.finish();¶						return;¶					}¶					for (File file : logs) {¶						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶						if (commands.size() < 2) {¶							continue;¶						}¶						List<EHICommand> newCommands = new ArrayList<>();¶						EHICommand last = null;¶						EHICommand cur = null;¶						for (EHICommand command : commands) {¶							if (cur == null) {¶								cur = command;¶								newCommands.add(command);¶							} else {¶								last = cur;¶								cur = command;¶								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶								if (rest >= 1*ONE_SECOND) {¶									String range = "";¶									if (rest < 2*ONE_SECOND) {¶										range = "1s-2s";¶									} else if (rest < 5*ONE_SECOND) {¶										range = "2s-5s";¶									} else if (rest < 10*ONE_SECOND) {¶										range = "5s-10s";¶									} else if (rest < 20*ONE_SECOND) {¶										range = "10s-20s";¶									} else if (rest < 30*ONE_SECOND) {¶										range = "20s-30s";¶									} else if (rest < ONE_MIN) {¶										range = "30s-1m";¶									} else if (rest < TWO_MIN) {¶										range = "1m-2m";¶									} else if (rest < FIVE_MIN) {¶										range = "2m-5m";¶									} else if (rest < TEN_MIN) {¶										range = "5m-10m";¶									} else if (rest < 3*TEN_MIN) {¶										range = "10m-30m";¶									} else if (rest < 6*TEN_MIN) {¶										range = "30m-60m";¶									} else {¶										range = ">1h";¶									}¶									PauseCommand rCommnad = new PauseCommand(last.getCommandType(), cur.getCommandType(), rest, range);¶									rCommnad.setStartTimestamp(last.getStartTimestamp());¶									rCommnad.setTimestamp(last.getTimestamp()+1);¶									newCommands.add(rCommnad);¶								} ¶								newCommands.add(command);¶							}¶						}¶						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶						for (EHICommand c : newCommands) {¶							logContent += c.persist();¶						}¶						logContent += XML_FILE_ENDING;¶						try {¶							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶							if (newLog.exists()) {¶								newLog.delete();¶							}¶							newLog.getParentFile().mkdirs();¶							newLog.createNewFile();¶							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶							System.out.println("Writing to file " + newLog.getPath());¶							writer.write(logContent);¶							writer.close();¶							System.out.println("Finished writing to file " + newLog.getPath());¶						} catch (IOException e) {¶							// TODO Auto-generated catch block¶							e.printStackTrace();¶						}¶					}¶					synchronized (this) {¶						threadCount--;¶					}¶					joiner.finish();¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private AJoiner joiner;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createRestCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		joiner = new AJoiner(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				joiner.finish();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						joiner.finish();
						return;
					}
					for (File file : logs) {
						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
						if (commands.size() < 2) {
							continue;
						}
						List<EHICommand> newCommands = new ArrayList<>();
						EHICommand last = null;
						EHICommand cur = null;
						for (EHICommand command : commands) {
							if (cur == null) {
								cur = command;
								newCommands.add(command);
							} else {
								last = cur;
								cur = command;
								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
								if (rest >= 1*ONE_SECOND) {
									String range = "";
									if (rest < 2*ONE_SECOND) {
										range = "1s-2s";
									} else if (rest < 5*ONE_SECOND) {
										range = "2s-5s";
									} else if (rest < 10*ONE_SECOND) {
										range = "5s-10s";
									} else if (rest < 20*ONE_SECOND) {
										range = "10s-20s";
									} else if (rest < 30*ONE_SECOND) {
										range = "20s-30s";
									} else if (rest < ONE_MIN) {
										range = "30s-1m";
									} else if (rest < TWO_MIN) {
										range = "1m-2m";
									} else if (rest < FIVE_MIN) {
										range = "2m-5m";
									} else if (rest < TEN_MIN) {
										range = "5m-10m";
									} else if (rest < 3*TEN_MIN) {
										range = "10m-30m";
									} else if (rest < 6*TEN_MIN) {
										range = "30m-60m";
									} else {
										range = ">1h";
									}
									PauseCommand rCommnad = new PauseCommand(last.getCommandType(), cur.getCommandType(), rest, range);
									rCommnad.setStartTimestamp(last.getStartTimestamp());
									rCommnad.setTimestamp(last.getTimestamp()+1);
									newCommands.add(rCommnad);
								} 
								newCommands.add(command);
							}
						}
						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
						for (EHICommand c : newCommands) {
							logContent += c.persist();
						}
						logContent += XML_FILE_ENDING;
						try {
							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
							if (newLog.exists()) {
								newLog.delete();
							}
							newLog.getParentFile().mkdirs();
							newLog.createNewFile();
							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
							System.out.println("Writing to file " + newLog.getPath());
							writer.write(logContent);
							writer.close();
							System.out.println("Finished writing to file " + newLog.getPath());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					synchronized (this) {
						threadCount--;
					}
					joiner.finish();
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
//			if (j == students.length-1) {
//				try {
//					thread.join();
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} 
//				System.exit(0);
//			}
		}
		joiner.join();
		System.exit(0);
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",
//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",
//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",
//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <Command __id="1253" _type="MoveCaretCommand" caretOffset="1262" date="Mon Feb 01 21:17:05 EST 2021" docOffset="1262" starttimestamp="1612231299681" timestamp="926186" />
  <Command __id="1255" _type="MoveCaretCommand" caretOffset="22928" date="Mon Feb 01 21:17:06 EST 2021" docOffset="22928" starttimestamp="1612231299681" timestamp="926807" />
  <Command __id="1256" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.folding.collapse_all" date="Mon Feb 01 21:17:12 EST 2021" starttimestamp="1612231299681" timestamp="933089" />
  <Command __id="1257" _type="SelectTextCommand" caretOffset="2732" date="Mon Feb 01 21:17:24 EST 2021" end="2732" start="2154" starttimestamp="1612231299681" timestamp="945150" />
  <Command __id="1272" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:17:47 EST 2021" docASTNodeCount="490" docActiveCodeLength="2867" docExpressionCount="307" docLength="2867" projectName="Hermes" starttimestamp="1612231299681" timestamp="967814">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.commands;¶¶import java.util.Comparator;¶import java.util.HashMap;¶import java.util.Map;¶import java.util.TreeMap;¶import org.eclipse.ui.IEditorPart;¶import org.w3c.dom.Element;¶import org.w3c.dom.Node;¶import org.w3c.dom.NodeList;¶import fluorite.model.EHEventRecorder;¶¶public class PauseCommand extends AbstractCommand implements EHICommand{¶	private static final String XML_RANGE = "range";¶	private static final String XML_PREV = "prev";¶	private static final String XML_NEXT = "next";¶	private static final String XML_REST = "rest";¶	private String prev, next, range, type;¶	private long rest;¶¶	public PauseCommand() {}¶	¶	public PauseCommand(String prev, String next, long rest, String range) {¶		this.prev = prev;¶		this.next = next;¶		this.rest = rest;¶		this.range = range;¶		this.type = getType();¶	}¶	¶	private String getType() {¶		switch (prev) {¶		case "Insert":¶		case "Delete":¶		case "Copy":¶		case "Paste":¶		case "Replace":¶		case "Delete_¶			return "Edit";¶		default:¶			break;¶		}¶	}¶	¶	@Override¶	public boolean execute(IEditorPart target) {¶		return false;¶	}¶¶	@Override¶	public void dump() {¶	}¶¶	@Override¶	public Map<String, String> getAttributesMap() {¶		Map<String, String> attrMap = new HashMap<String, String>();¶		attrMap.put(XML_RANGE, range);¶		return attrMap;¶	}¶¶	@Override¶	public Map<String, String> getDataMap() {¶		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());¶		dataMap.put(XML_PREV, prev);¶		dataMap.put(XML_NEXT, next);¶		dataMap.put(XML_REST, rest+"");¶		return dataMap;¶	}¶¶	@Override¶	public String getCommandType() {¶		return "PauseCommand";¶	}¶¶	@Override¶	public String getName() {¶		return "Pause";¶	}¶¶	@Override¶	public String getDescription() {¶		return null;¶	}¶¶	@Override¶	public String getCategory() {¶		return EHEventRecorder.UserMacroCategoryName;¶	}¶¶	@Override¶	public String getCategoryID() {¶		return EHEventRecorder.UserMacroCategoryID;¶	}¶	¶	public void createFrom(Element commandElement) {¶		super.createFrom(commandElement);¶		¶		NodeList nodeList = null;¶¶		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			prev = textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			next =textNode.getTextContent();¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_REST)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			rest = Long.getLong(textNode.getTextContent());¶		}¶		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {¶			Node textNode = nodeList.item(0);¶			range =textNode.getTextContent();¶		}¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1276" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Mon Feb 01 21:17:53 EST 2021" starttimestamp="1612231299681" timestamp="973351" />
  <Command __id="1278" _type="SelectTextCommand" caretOffset="5662" date="Mon Feb 01 21:17:54 EST 2021" end="5662" start="5588" starttimestamp="1612231299681" timestamp="975019" />
  <Command __id="1279" _type="MoveCaretCommand" caretOffset="5610" date="Mon Feb 01 21:17:58 EST 2021" docOffset="5610" starttimestamp="1612231299681" timestamp="978857" />
  <Command __id="1280" _type="SelectTextCommand" caretOffset="5626" date="Mon Feb 01 21:17:59 EST 2021" end="5626" start="5609" starttimestamp="1612231299681" timestamp="980236" />
  <Command __id="1282" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:18:00 EST 2021" starttimestamp="1612231299681" timestamp="980697" />
  <Command __id="1283" _type="SelectTextCommand" caretOffset="5631" date="Mon Feb 01 21:18:03 EST 2021" end="5631" start="5614" starttimestamp="1612231299681" timestamp="983647" />
  <Command __id="1285" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:18:03 EST 2021" starttimestamp="1612231299681" timestamp="983800" />
  <DocumentChange __id="2060" _type="Insert" date="Mon Feb 01 21:23:28 EST 2021" docASTNodeCount="607" docActiveCodeLength="3644" docExpressionCount="387" docLength="3644" length="41" offset="1564" repeat="2" starttimestamp="1612231299681" timestamp="1308713" timestamp2="1309228">
    <text><![CDATA[ || command instanceof EHExceptionCommand]]></text>
  </DocumentChange>
  <DocumentChange __id="2066" _type="Delete" date="Mon Feb 01 21:23:32 EST 2021" docASTNodeCount="604" docActiveCodeLength="3614" docExpressionCount="386" docLength="3614" endLine="46" length="30" offset="1421" startLine="43" starttimestamp="1612231299681" timestamp="1312329">
    <text><![CDATA[		if (condition) {
			
		}
]]></text>
  </DocumentChange>
  <Command __id="2069" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1317719" />
  <Command __id="2070" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1317809" />
  <Command __id="2071" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1317818" />
  <Command __id="2072" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1317818" />
  <Command __id="2073" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1317824" />
  <Command __id="2074" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1317824" />
  <Command __id="2075" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1318017" />
  <Command __id="2076" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1318019" />
  <Command __id="2077" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1318085" />
  <Command __id="2078" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1318085" />
  <Command __id="2079" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1318150" />
  <Command __id="2080" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1318150" />
  <Command __id="2081" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1318224" />
  <Command __id="2082" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1318224" />
  <Command __id="2083" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1318312" />
  <Command __id="2084" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:37 EST 2021" starttimestamp="1612231299681" timestamp="1318313" />
  <Command __id="2085" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:38 EST 2021" starttimestamp="1612231299681" timestamp="1318374" />
  <Command __id="2086" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:38 EST 2021" starttimestamp="1612231299681" timestamp="1318375" />
  <Command __id="2087" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:38 EST 2021" starttimestamp="1612231299681" timestamp="1318494" />
  <Command __id="2088" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:38 EST 2021" starttimestamp="1612231299681" timestamp="1318494" />
  <Command __id="2089" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:38 EST 2021" starttimestamp="1612231299681" timestamp="1318561" />
  <Command __id="2090" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:38 EST 2021" starttimestamp="1612231299681" timestamp="1318561" />
  <Command __id="2091" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:23:38 EST 2021" starttimestamp="1612231299681" timestamp="1318627" />
  <Command __id="2093" _type="SelectTextCommand" caretOffset="2732" date="Mon Feb 01 21:23:40 EST 2021" end="2732" start="2154" starttimestamp="1612231299681" timestamp="1320681" />
  <Command __id="2094" _type="MoveCaretCommand" caretOffset="2357" date="Mon Feb 01 21:23:41 EST 2021" docOffset="13775" starttimestamp="1612231299681" timestamp="1321534" />
  <Command __id="2095" _type="SelectTextCommand" caretOffset="5982" date="Mon Feb 01 21:24:00 EST 2021" end="5982" start="5965" starttimestamp="1612231299681" timestamp="1341001" />
  <Command __id="2097" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:24:01 EST 2021" starttimestamp="1612231299681" timestamp="1341545" />
  <Command __id="2141" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:24:20 EST 2021" docASTNodeCount="61" docActiveCodeLength="338" docExpressionCount="26" docLength="338" projectName="A0" starttimestamp="1612231299681" timestamp="1360429">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Sophomore 2st Sem\COMP533\A0\src\mapper\MapperFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package mapper;¶¶public class MapperFactory {¶	private static Mapper<String, Integer> mapper;¶	¶	public static Mapper<String, Integer> getMapper(){¶		if (mapper == null) ¶			mapper = new ATokenCountingMapper();¶		return mapper;¶	}¶	¶	public static void setMapper(Mapper<String, Integer> aMapper) {¶		mapper = aMapper;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2142" _type="MoveCaretCommand" caretOffset="235" date="Mon Feb 01 21:24:20 EST 2021" docOffset="235" starttimestamp="1612231299681" timestamp="1360542" />
  <Command __id="2143" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:24:22 EST 2021" docASTNodeCount="3416" docActiveCodeLength="20736" docExpressionCount="2334" docLength="21824" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1362377">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		joiner = new AJoiner(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				joiner.finish();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						joiner.finish();¶						return;¶					}¶					for (File file : logs) {¶						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶						if (commands.size() < 2) {¶							continue;¶						}¶						List<EHICommand> newCommands = new ArrayList<>();¶						EHICommand last = null;¶						EHICommand cur = null;¶						for (EHICommand command : commands) {¶							if (cur == null) {¶								cur = command;¶								newCommands.add(command);¶							} else {¶								last = cur;¶								cur = command;¶								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶								if (rest >= 1*ONE_SECOND) {¶									String range = "";¶									if (rest < 2*ONE_SECOND) {¶										range = "1s-2s";¶									} else if (rest < 5*ONE_SECOND) {¶										range = "2s-5s";¶									} else if (rest < 10*ONE_SECOND) {¶										range = "5s-10s";¶									} else if (rest < 20*ONE_SECOND) {¶										range = "10s-20s";¶									} else if (rest < 30*ONE_SECOND) {¶										range = "20s-30s";¶									} else if (rest < ONE_MIN) {¶										range = "30s-1m";¶									} else if (rest < TWO_MIN) {¶										range = "1m-2m";¶									} else if (rest < FIVE_MIN) {¶										range = "2m-5m";¶									} else if (rest < TEN_MIN) {¶										range = "5m-10m";¶									} else if (rest < 3*TEN_MIN) {¶										range = "10m-30m";¶									} else if (rest < 6*TEN_MIN) {¶										range = "30m-60m";¶									} else {¶										range = ">1h";¶									}¶									PauseCommand rCommnad = new PauseCommand(last"), Diff(DELETE,".getCommandType(), cur.getCommandType()"), Diff(INSERT,", cur"), Diff(EQUAL,", rest, range);¶									rCommnad.setStartTimestamp(last.getStartTimestamp());¶									rCommnad.setTimestamp(last.getTimestamp()+1);¶									newCommands.add(rCommnad);¶								} ¶								newCommands.add(command);¶							}¶						}¶						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶						for (EHICommand c : newCommands) {¶							logContent += c.persist();¶						}¶						logContent += XML_FILE_ENDING;¶						try {¶							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶							if (newLog.exists()) {¶								newLog.delete();¶							}¶							newLog.getParentFile().mkdirs();¶							newLog.createNewFile();¶							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶							System.out.println("Writing to file " + newLog.getPath());¶							writer.write(logContent);¶							writer.close();¶							System.out.println("Finished writing to file " + newLog.getPath());¶						} catch (IOException e) {¶							// TODO Auto-generated catch block¶							e.printStackTrace();¶						}¶					}¶					synchronized (this) {¶						threadCount--;¶					}¶					joiner.finish();¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private AJoiner joiner;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createRestCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		joiner = new AJoiner(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				joiner.finish();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						joiner.finish();
						return;
					}
					for (File file : logs) {
						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
						if (commands.size() < 2) {
							continue;
						}
						List<EHICommand> newCommands = new ArrayList<>();
						EHICommand last = null;
						EHICommand cur = null;
						for (EHICommand command : commands) {
							if (cur == null) {
								cur = command;
								newCommands.add(command);
							} else {
								last = cur;
								cur = command;
								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
								if (rest >= 1*ONE_SECOND) {
									String range = "";
									if (rest < 2*ONE_SECOND) {
										range = "1s-2s";
									} else if (rest < 5*ONE_SECOND) {
										range = "2s-5s";
									} else if (rest < 10*ONE_SECOND) {
										range = "5s-10s";
									} else if (rest < 20*ONE_SECOND) {
										range = "10s-20s";
									} else if (rest < 30*ONE_SECOND) {
										range = "20s-30s";
									} else if (rest < ONE_MIN) {
										range = "30s-1m";
									} else if (rest < TWO_MIN) {
										range = "1m-2m";
									} else if (rest < FIVE_MIN) {
										range = "2m-5m";
									} else if (rest < TEN_MIN) {
										range = "5m-10m";
									} else if (rest < 3*TEN_MIN) {
										range = "10m-30m";
									} else if (rest < 6*TEN_MIN) {
										range = "30m-60m";
									} else {
										range = ">1h";
									}
									PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
									rCommnad.setStartTimestamp(last.getStartTimestamp());
									rCommnad.setTimestamp(last.getTimestamp()+1);
									newCommands.add(rCommnad);
								} 
								newCommands.add(command);
							}
						}
						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
						for (EHICommand c : newCommands) {
							logContent += c.persist();
						}
						logContent += XML_FILE_ENDING;
						try {
							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
							if (newLog.exists()) {
								newLog.delete();
							}
							newLog.getParentFile().mkdirs();
							newLog.createNewFile();
							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
							System.out.println("Writing to file " + newLog.getPath());
							writer.write(logContent);
							writer.close();
							System.out.println("Finished writing to file " + newLog.getPath());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					synchronized (this) {
						threadCount--;
					}
					joiner.finish();
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
//			if (j == students.length-1) {
//				try {
//					thread.join();
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} 
//				System.exit(0);
//			}
		}
		joiner.join();
		System.exit(0);
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",
//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",
//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",
//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <Command __id="2144" _type="MoveCaretCommand" caretOffset="5614" date="Mon Feb 01 21:24:22 EST 2021" docOffset="5614" starttimestamp="1612231299681" timestamp="1362508" />
  <Command __id="2390" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:25:54 EST 2021" docASTNodeCount="5591" docActiveCodeLength="43211" docExpressionCount="3518" docLength="59905" projectName="Hermes" starttimestamp="1612231299681" timestamp="1454961">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\model\EHEventRecorder.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package fluorite.model;¶¶import java.io.File;¶import java.io.StringWriter;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Calendar;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Map;¶import java.util.Timer;¶import java.util.TimerTask;¶import java.util.concurrent.ArrayBlockingQueue;¶import java.util.concurrent.BlockingQueue;¶import java.util.logging.FileHandler;¶import java.util.logging.Handler;¶import java.util.logging.Level;¶import java.util.logging.LogRecord;¶import java.util.logging.Logger;¶¶import javax.xml.parsers.DocumentBuilder;¶import javax.xml.parsers.DocumentBuilderFactory;¶import javax.xml.parsers.ParserConfigurationException;¶import javax.xml.transform.OutputKeys;¶import javax.xml.transform.Transformer;¶import javax.xml.transform.TransformerConfigurationException;¶import javax.xml.transform.TransformerException;¶import javax.xml.transform.TransformerFactory;¶import javax.xml.transform.dom.DOMSource;¶import javax.xml.transform.stream.StreamResult;¶¶import org.eclipse.core.resources.IProject;¶import org.eclipse.core.runtime.IPath;¶import org.eclipse.core.runtime.ListenerList;¶import org.eclipse.core.variables.VariablesPlugin;¶import org.eclipse.debug.core.DebugPlugin;¶import org.eclipse.jface.action.IAction;¶import org.eclipse.jface.preference.IPreferenceStore;¶import org.eclipse.jface.resource.ImageDescriptor;¶import org.eclipse.jface.text.source.ISourceViewer;¶import org.eclipse.swt.SWT;¶import org.eclipse.swt.custom.StyledText;¶import org.eclipse.swt.graphics.Image;¶import org.eclipse.swt.widgets.Display;¶import org.eclipse.swt.widgets.Listener;¶import org.eclipse.swt.widgets.Tray;¶import org.eclipse.swt.widgets.TrayItem;¶import org.eclipse.ui.IEditorPart;¶import org.eclipse.ui.IPartService;¶import org.eclipse.ui.IWorkbench;¶import org.eclipse.ui.IWorkbenchCommandConstants;¶import org.eclipse.ui.IWorkbenchWindow;¶import org.eclipse.ui.PlatformUI;¶import org.eclipse.ui.console.ConsolePlugin;¶import org.eclipse.ui.part.MultiPageEditorPart;¶import org.eclipse.ui.texteditor.AbstractTextEditor;¶import org.eclipse.ui.texteditor.ITextEditorActionConstants;¶import org.w3c.dom.Document;¶import org.w3c.dom.Element;¶¶import analyzer.extension.replayView.LogSender;¶import config.HelperConfigurationManagerFactory;¶import dayton.ellwanger.hermes.HermesActivator;¶import difficultyPrediction.ADifficultyPredictionPluginEventProcessor;¶import fluorite.actions.FindAction;¶import fluorite.commands.AbstractCommand;¶import fluorite.commands.BaseDocumentChangeEvent;¶import fluorite.commands.DifficultyCommand;¶import fluorite.commands.FileOpenCommand;¶import fluorite.commands.FindCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.MoveCaretCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.PredictionCommand;¶import fluorite.commands.SelectTextCommand;¶import fluorite.plugin.EHActivator;¶import fluorite.preferences.Initializer;¶import fluorite.recorders.EHBreakPointRecorder;¶import fluorite.recorders.EHCompletionRecorder;¶import fluorite.recorders.EHConsoleRecorder;¶import fluorite.recorders.EHDebugEventSetRecorder;¶import fluorite.recorders.EHDocumentRecorder;¶import fluorite.recorders.EHExecutionRecorder;¶import fluorite.recorders.EHPartRecorder;¶import fluorite.recorders.EHShellRecorder;¶import fluorite.recorders.EHStyledTextEventRecorder;¶import fluorite.recorders.EHVariableValueRecorder;¶import fluorite.util.EHUtilities;¶import util.trace.Tracer;¶import util.trace.plugin.PluginStopped;¶import util.trace.recorder.AddedCommandToBuffers;¶import util.trace.recorder.CombinedCommand;¶import util.trace.recorder.CommandLoggingInitiated;¶import util.trace.recorder.DocumentChangeCommandExecuted;¶import util.trace.recorder.DocumentChangeCommandNotified;¶import util.trace.recorder.DocumentChangeFinalizedEventNotified;¶import util.trace.recorder.ForwardedCommandToPredictor;¶import util.trace.recorder.IgnoredCommandAsRecordingSuspended;¶import util.trace.recorder.LogFileCreated;¶import util.trace.recorder.LogHandlerBound;¶import util.trace.recorder.MacroRecordingStarted;¶import util.trace.recorder.NewMacroCommand;¶import util.trace.recorder.NonDocumentChangeCommandExecuted;¶import util.trace.recorder.NonDocumentChangeCommandNotified;¶import util.trace.recorder.PendingCommandsLogBegin;¶import util.trace.recorder.PendingCommandsLogEnd;¶import util.trace.recorder.ReceivedCommand;¶import util.trace.recorder.RecordedCommandsCleared;¶import util.trace.recorder.RemovedCommandFromBuffers;¶import util.trace.workbench.PartListenerAdded;¶¶/*¶ * Cannot extend EventRecorder as it has a private constructor¶ */¶public class EHEventRecorder {¶¶	public static final String MacroCommandCategory = "EventLogger utility command";¶	public static final String MacroCommandCategoryID = "eventlogger.category.utility.command";¶	public static final String UserMacroCategoryID = "eventlogger.category.usermacros";¶	public static final String UserMacroCategoryName = "User defined editor macros";¶	public static final String AnnotationCategory = "Annotation";¶	public static final String AnnotationCategoryID = "eventlogger.category.annotation";¶//	public static final String DocumentChangeCategory = "Every document changes";¶	public static final String DocumentChangeCategory = "DocumentChange";¶	public static final String DocumentChangeCategoryID = "eventlogger.category.documentChange";¶	public static final String DifficultyCategory = "Difficulty";¶	public static final String DifficultyCategoryID = "eventerlogger.category.Difficulty";¶¶	public static final String WebCategory = "Web";¶	public static final String WebCategoryID = "eventerlogger.category.Web";¶¶	public static final String XML_Macro_Tag = "Events";¶	public static final String XML_ID_Tag = "__id";¶	public static final String XML_Description_Tag = "description";¶	public static final String XML_Command_Tag = "Command";¶	public static final String XML_DifficultyStatus_Tag = "DifficultyStatus";¶	public static final String XML_DocumentChange_Tag = "DocumentChange";¶	public static final String XML_Annotation_Tag = "Annotation";¶	public static final String XML_CommandType_ATTR = "_type";¶	public static final String PREF_USER_MACRO_DEFINITIONS = "Preference_UserMacroDefinitions";¶¶	private IEditorPart mEditor;¶	private LinkedList<EHICommand> allDocAndNonDocCommands;¶	private LinkedList<EHICommand> mNormalCommands;¶	private LinkedList<EHICommand> mDocumentChangeCommands;¶	public static int MAX_PENDING_LOGGED_COMMANDS = 256;¶	protected BlockingQueue<EHICommand> loggableCommandQueue = new ArrayBlockingQueue<>(MAX_PENDING_LOGGED_COMMANDS);¶	protected Thread commandLoggingThread;¶	private boolean mCurrentlyExecutingCommand;¶	private boolean mRecordCommands = false;¶	private IAction mSavedFindAction;¶¶	private int mLastCaretOffset;¶	private int mLastSelectionStart;¶	private int mLastSelectionEnd;¶	protected long lastCommandTimeStamp;¶	protected int commandFlushTime;¶	private long mStartTimestamp;¶	protected long lastSuccessfulWriteTime;¶	public static final int IDLE_TIME = 1000*60*3; // 3 minutes¶¶¶	private boolean mStarted;¶	private boolean mAssistSession;¶¶	private boolean mCombineCommands;¶	private boolean mNormalCommandCombinable;¶	private boolean mDocChangeCombinable;¶	private int mCombineTimeThreshold;¶	protected int numReceivedCommands;¶	protected int numNotifiedCommands;¶	protected int numDataEvents;¶	protected int numFinalizedDataEvents;¶¶	private BaseDocumentChangeEvent mLastFiredDocumentChange;¶¶	private Timer mTimer;¶	private TimerTask mNormalTimerTask;¶	private TimerTask mDocChangeTimerTask;¶¶	private ListenerList mDocumentChangeListeners;¶	private ListenerList<EHCommandExecutionListener> mCommandExecutionListeners;¶	protected ListenerList<RecorderListener> recorderListener;¶	protected ListenerList<EclipseEventListener> eventListener;¶¶	private List<Runnable> mScheduledTasks;¶¶	private static EHEventRecorder instance = null;¶	// private static DifficultyRobot statusPredictor = null;¶¶	private static TrayItem trayItem;¶	static boolean asyncFireEvent = true;¶	// private static ToolTip balloonTip;¶¶	// protected Thread difficultyPredictionThread;¶	// protected DifficultyPredictionRunnable difficultyPredictionRunnable;¶	// protected BlockingQueue<ICommand> pendingPredictionCommands;¶	//¶	// enum PredictorThreadOption {¶	// USE_CURRENT_THREAD,¶	// NO_PROCESSING,¶	// THREAD_PER_ACTION,¶	// SINGLE_THREAD¶	// } ;¶	//// PredictorThreadOption predictorThreadOption =¶	// PredictorThreadOption.THREAD_PER_ACTION;¶	//// PredictorThreadOption predictorThreadOption =¶	// PredictorThreadOption.USE_CURRENT_THREAD;¶	//// PredictorThreadOption predictorThreadOption =¶	// PredictorThreadOption.NO_PROCESSING;¶	// PredictorThreadOption predictorThreadOption =¶	// PredictorThreadOption.SINGLE_THREAD;¶¶	private EHICommand lastCommand;¶	private boolean isLoggingRestCommand = false;¶//	private List<EHICommand> commandsToSend = new ArrayList<>();¶	private ArrayBlockingQueue<EHICommand> commandBuffer = new ArrayBlockingQueue<>(200);¶	¶	private final static Logger LOGGER = Logger.getLogger(EHEventRecorder.class.getName());¶	protected Map<String, Logger> projectToLogger = new HashMap<>();¶¶	protected Logger projectLogger() {¶		IProject aProject = EHUtilities.getAndStoreCurrentProject();¶		if (aProject == null) {¶			return null;¶		}¶		String aProjectName = aProject.getName();¶		Logger aLogger = projectToLogger.get(aProjectName);¶		if (aLogger == null) {¶			aLogger = Logger.getLogger(aProjectName);¶			boolean aSuccess = initializeProjectLogger(aProject, aLogger);¶			if (aSuccess) {¶				projectToLogger.put(aProjectName, aLogger);¶			} else {¶				return null;¶			}¶		}¶		return aLogger;¶	}¶	protected Logger projectLogger(EHICommand aCommand) {¶		IProject aProject = aCommand.getProject();¶		if (aProject == null) {¶			return null;¶		}¶		String aProjectName = aProject.getName();¶		Logger aLogger = projectToLogger.get(aProjectName);¶		if (aLogger == null) {¶			aLogger = Logger.getLogger(aProjectName);¶			boolean aSuccess = initializeProjectLogger(aProject, aLogger);¶			if (aSuccess) {¶				projectToLogger.put(aProjectName, aLogger);¶			} else {¶				return null;¶			}¶		}¶		return aLogger;¶	}¶¶	public static EHEventRecorder getInstance() {¶		if (instance == null) {¶			instance = new EHEventRecorder();¶		}¶¶		return instance;¶	}¶¶	private EHEventRecorder() {¶		mEditor = null;¶¶		mStarted = false;¶		mAssistSession = false;¶¶		mDocumentChangeListeners = new ListenerList();¶		mCommandExecutionListeners = new ListenerList<>();¶		recorderListener = new ListenerList<>();¶		eventListener = new ListenerList<>();¶¶		mTimer = new Timer();¶¶		mScheduledTasks = new ArrayList<Runnable>();¶		commandFlushTime = HelperConfigurationManagerFactory.getSingleton().getCommandFlushTime();¶//		if (HelperConfigurationManagerFactory.getSingleton().isSeparateLoggingThreads() && commandLoggingThread == null) {¶//			commandLoggingThread= new Thread(()->processLoggableCommandsAsync());¶//			int aPriority = HelperConfigurationManagerFactory.getSingleton().getLoggingThreadPriority();¶//			commandLoggingThread.setPriority(aPriority);¶//			commandLoggingThread.setName("Command Logging Thread");¶//			commandLoggingThread.start();¶//		}¶¶		// statusPredictor = new DifficultyRobot("");¶	}¶	¶	protected synchronized void createCommandLoggingThread() {¶//		if (HelperConfigurationManagerFactory.getSingleton().isSeparateLoggingThreads() && commandLoggingThread == null) {¶			commandLoggingThread= new Thread(()->processLoggableCommandsAsync());¶			int aPriority = HelperConfigurationManagerFactory.getSingleton().getLoggingThreadPriority();¶			commandLoggingThread.setPriority(aPriority);¶			commandLoggingThread.setName("Command Logging Thread");¶			commandLoggingThread.start();¶//		}¶	}¶¶	public void setCurrentlyExecutingCommand(boolean executingCommand) {¶		mCurrentlyExecutingCommand = executingCommand;¶	}¶¶	public boolean isCurrentlyExecutingCommand() {¶		return mCurrentlyExecutingCommand;¶	}¶¶	public void setIncrementalFindForward(boolean incrementalFindForward) {¶		mIncrementalFindForward = incrementalFindForward;¶	}¶¶	public boolean isIncrementalFindForward() {¶		return mIncrementalFindForward;¶	}¶¶	public void setIncrementalFindMode(boolean incrementalFindMode) {¶		mIncrementalFindMode = incrementalFindMode;¶	}¶¶	public boolean isIncrementalFindMode() {¶		return mIncrementalFindMode;¶	}¶¶	public void setIncrementalListener(Listener incrementalListener) {¶		mIncrementalListener = incrementalListener;¶	}¶¶	public int getLastCaretOffset() {¶		return mLastCaretOffset;¶	}¶¶	public int getLastSelectionStart() {¶		return mLastSelectionStart;¶	}¶¶	public int getLastSelectionEnd() {¶		return mLastSelectionEnd;¶	}¶¶	public void setAssistSession(boolean assistSession) {¶		mAssistSession = assistSession;¶	}¶¶	public boolean isAssistSession() {¶		return mAssistSession;¶	}¶¶	public void addDocumentChangeListener(EHDocumentChangeListener docChangeListener) {¶		mDocumentChangeListeners.add(docChangeListener);¶	}¶¶	public void removeDocumentChangeListener(EHDocumentChangeListener docChangeListener) {¶		mDocumentChangeListeners.remove(docChangeListener);¶	}¶¶	public void addRecorderListener(RecorderListener aListener) {¶		recorderListener.add(aListener);¶		if (mStartTimestamp > 0) {¶			aListener.eventRecordingStarted(mStartTimestamp);¶		}¶	}¶¶	public void removeRecorderListeer(RecorderListener aListener) {¶		recorderListener.remove(aListener);¶	}¶¶	public void addEclipseEventListener(EclipseEventListener aListener) {¶		eventListener.add(aListener);¶		addRecorderListener(aListener);¶		// recorderListener.add(aListener);¶	}¶¶	public void removeEclipseEventListener(RecorderListener aListener) {¶		eventListener.remove(aListener);¶		recorderListener.remove(aListener);¶	}¶¶	public void addCommandExecutionListener(EHCommandExecutionListener aListener) {¶		mCommandExecutionListeners.add(aListener);¶	}¶¶	public void removeCommandExecutionListener(EHCommandExecutionListener aListener) {¶		mDocumentChangeListeners.remove(aListener);¶	}¶¶	public void setCombineCommands(boolean enabled) {¶		mCombineCommands = enabled;¶	}¶¶	public boolean getCombineCommands() {¶		return mCombineCommands;¶	}¶¶	public void setCombineTimeThreshold(int newThreshold) {¶		mCombineTimeThreshold = newThreshold;¶	}¶¶	public int getCombineTimeThreshold() {¶		return mCombineTimeThreshold;¶	}¶¶	private Timer getTimer() {¶		return mTimer;¶	}¶¶	public void fireActiveFileChangedEvent(FileOpenCommand foc) {¶		for (Object listenerObj : mDocumentChangeListeners.getListeners()) {¶			((EHDocumentChangeListener) listenerObj).activeFileChanged(foc);¶		}¶	}¶¶	public void fireDocumentChangedEvent(BaseDocumentChangeEvent docChange) {¶		numDataEvents++;¶		for (Object listenerObj : mDocumentChangeListeners.getListeners()) {¶			((EHDocumentChangeListener) listenerObj).documentChanged(docChange);¶		}¶		for (Object listenerObj : eventListener.getListeners()) {¶			((EclipseEventListener) listenerObj).documentChanged(docChange.getClass().getSimpleName(),¶					docChange.getTimestamp());¶		}¶	}¶¶	public void fireCommandExecutedEvent(EHICommand command) {¶		for (Object listenerObj : mCommandExecutionListeners.getListeners()) {¶			((EHCommandExecutionListener) listenerObj).commandExecuted(command);¶		}¶		for (Object listenerObj : eventListener.getListeners()) {¶			((EclipseEventListener) listenerObj).commandExecuted(command.getClass().getSimpleName(),¶					command.getTimestamp());¶		}¶	}¶¶	public void notifyRecordingStarted(long aStartTimestamp) {¶		for (Object listenerObj : recorderListener.getListeners()) {¶			((RecorderListener) listenerObj).eventRecordingStarted(aStartTimestamp);¶		}¶	}¶	¶	public void notifyTimestampReset(long aStartTimestamp) {¶		for (Object listenerObj : recorderListener.getListeners()) {¶			((RecorderListener) listenerObj).timestampReset(aStartTimestamp);¶		}¶	}¶¶	public void notifyRecordingEnded() {¶		for (Object listenerObj : recorderListener.getListeners()) {¶			((RecorderListener) listenerObj).eventRecordingEnded();¶		}¶		for (Object listenerObj : eventListener.getListeners()) {¶			((EclipseEventListener) listenerObj).eventRecordingEnded();¶		}¶	}¶¶	public synchronized void fireDocumentChangeFinalizedEvent(BaseDocumentChangeEvent docChange) {¶		if (docChange instanceof FileOpenCommand) {¶			return;¶		}¶¶		if (docChange == mLastFiredDocumentChange) {¶			return;¶		}¶		numFinalizedDataEvents++;¶		for (Object listenerObj : mDocumentChangeListeners.getListeners()) {¶			// System.out.println ("ASYNC EXEC ProCESSED");¶¶			((EHDocumentChangeListener) listenerObj).documentChangeFinalized(docChange);¶		}¶¶		for (Object listenerObj : eventListener.getListeners()) {¶			((EclipseEventListener) listenerObj).documentChangeFinalized(docChange.getTimestamp());¶		}¶¶		mLastFiredDocumentChange = docChange;¶	}¶¶	public void addListeners() {¶		addListeners(EHUtilities.getActiveEditor());¶	}¶¶	public void addListeners(IEditorPart editor) {¶		mEditor = editor;¶		final StyledText styledText = EHUtilities.getStyledText(mEditor);¶		final ISourceViewer viewer = EHUtilities.getSourceViewer(mEditor);¶¶		if (styledText == null || viewer == null)¶			return;¶¶		EHStyledTextEventRecorder.getInstance().addListeners(editor);¶¶		EHDocumentRecorder.getInstance().addListeners(editor);¶¶		EHExecutionRecorder.getInstance().addListeners(editor);¶¶		EHCompletionRecorder.getInstance().addListeners(editor);¶¶		registerFindAction();¶¶		styledText.getDisplay().asyncExec(new Runnable() {¶			public void run() {¶				mLastCaretOffset = styledText.getCaretOffset();¶¶				mLastSelectionStart = styledText.getSelection().x;¶				mLastSelectionEnd = styledText.getSelection().y;¶				if (mLastSelectionStart != mLastSelectionEnd) {¶					recordCommand(new SelectTextCommand(mLastSelectionStart, mLastSelectionEnd, mLastCaretOffset));¶				} else {¶					recordCommand(new MoveCaretCommand(mLastCaretOffset, viewer.getSelectedRange().x));¶				}¶			}¶		});¶	}¶¶	public void removeListeners() {¶		if (mEditor == null) {¶			return;¶		}¶¶		try {¶			EHStyledTextEventRecorder.getInstance().removeListeners(mEditor);¶¶			EHDocumentRecorder.getInstance().removeListeners(mEditor);¶¶			EHExecutionRecorder.getInstance().removeListeners(mEditor);¶¶			EHCompletionRecorder.getInstance().removeListeners(mEditor);¶			// TODO add any listeners I have not created here¶¶			unregisterFindAction();¶		} catch (Exception e) {¶			// catch all exceptions since we don't want anything bad that¶			// happens to prevent other cleanup¶			e.printStackTrace();¶		}¶¶		mEditor = null;¶	}¶¶	private void registerFindAction() {¶		AbstractTextEditor ate = findTextEditor(getEditor());¶		if (ate != null) {¶			mSavedFindAction = ate.getAction(ITextEditorActionConstants.FIND);¶			IAction findAction = new FindAction();¶			findAction.setActionDefinitionId(IWorkbenchCommandConstants.EDIT_FIND_AND_REPLACE);¶			ate.setAction(ITextEditorActionConstants.FIND, findAction);¶		}¶¶	}¶¶	private void unregisterFindAction() {¶		AbstractTextEditor ate = findTextEditor(getEditor());¶		if (ate != null) {¶			ate.setAction(ITextEditorActionConstants.FIND, mSavedFindAction);¶		}¶	}¶¶	public static AbstractTextEditor findTextEditor(IEditorPart editor) {¶		if (editor instanceof AbstractTextEditor)¶			return (AbstractTextEditor) editor;¶¶		if (editor instanceof MultiPageEditorPart) {¶			MultiPageEditorPart mpe = (MultiPageEditorPart) editor;¶			IEditorPart[] parts = mpe.findEditors(editor.getEditorInput());¶			for (IEditorPart editorPart : parts) {¶				if (editorPart instanceof AbstractTextEditor) {¶					return (AbstractTextEditor) editorPart;¶				}¶			}¶		}¶¶		return null;¶	}¶¶	public void scheduleTask(Runnable runnable) {¶		if (mStarted) {¶			runnable.run();¶		} else {¶			mScheduledTasks.add(runnable);¶		}¶	}¶¶	// protected void maybeCreateDifficultyPredictionThread() {¶	// if (predictorThreadOption == PredictorThreadOption.SINGLE_THREAD &&¶	// pendingPredictionCommands == null) {¶	// // create the difficulty prediction thread¶	// difficultyPredictionRunnable = new ADifficultyPredictionRunnable();¶	// pendingPredictionCommands =¶	// difficultyPredictionRunnable.getPendingCommands();¶	// difficultyPredictionThread = new Thread(difficultyPredictionRunnable);¶	// difficultyPredictionThread.setName(DifficultyPredictionRunnable.DIFFICULTY_PREDICTION_THREAD_NAME);¶	// difficultyPredictionThread.setPriority(Math.min(¶	// Thread.currentThread().getPriority(),¶	// DifficultyPredictionRunnable.DIFFICULTY_PREDICTION_THREAD_PRIORITY));¶	// difficultyPredictionThread.start();¶	// PluginThreadCreated.newCase(difficultyPredictionThread.getName(), this);¶	// }¶	// }¶	protected void initTimestamp() {¶		mStartTimestamp = Calendar.getInstance().getTime().getTime();¶		lastSuccessfulWriteTime = mStartTimestamp;¶¶	}¶	public void initCommands() {¶		setPlugInMode(false);¶		MacroRecordingStarted.newCase(this);¶		allDocAndNonDocCommands = new LinkedList<EHICommand>();¶		mNormalCommands = new LinkedList<EHICommand>();¶		mDocumentChangeCommands = new LinkedList<EHICommand>();¶		mCurrentlyExecutingCommand = false;¶		Tracer.info(this, " Recording started");¶		mRecordCommands = true;¶//		mStartTimestamp = Calendar.getInstance().getTime().getTime();¶		initTimestamp();¶		ADifficultyPredictionPluginEventProcessor.getInstance().commandProcessingStarted();¶¶		// later commands¶		initializeLogger();¶¶		// Set the combine time threshold.¶		// IPreferenceStore prefStore = edu.cmu.scs.fluorite.plugin.Activator¶		// .getDefault().getPreferenceStore();¶		//¶		// setCombineCommands(prefStore¶		// .getBoolean(Initializer.Pref_CombineCommands));¶		// setCombineTimeThreshold(prefStore¶		// .getInt(Initializer.Pref_CombineTimeThreshold));¶		commandBuffer = LogSender.getInstance().getCommandBuffer();¶		¶		mStarted = true;¶		notifyRecordingStarted(mStartTimestamp);¶¶	}¶¶	protected boolean plugInMode = false;¶¶	public boolean isPlugInMode() {¶		return plugInMode;¶	}¶¶	public void setPlugInMode(boolean plugInMode) {¶		this.plugInMode = plugInMode;¶	}¶¶	public void start() {¶		initCommands();¶		setPlugInMode(true);¶		// FactoriesSelector.configureFactories();¶		// MacroRecordingStarted.newCase(this);¶		// EventLoggerConsole.getConsole().writeln("***Started macro recording",¶		// EventLoggerConsole.Type_RecordingCommand);¶		// mCommands = new LinkedList<ICommand>();¶		// mNormalCommands = new LinkedList<ICommand>();¶		// mDocumentChangeCommands = new LinkedList<ICommand>();¶		// mCurrentlyExecutingCommand = false;¶		// System.out.println (" Recording started");¶		// mRecordCommands = true;¶		// mStartTimestamp = Calendar.getInstance().getTime().getTime();¶		ADifficultyPredictionPluginEventProcessor.getInstance().commandProcessingStarted();¶		// maybeCreateDifficultyPredictionThread();¶		EHUtilities.setDisplay(PlatformUI.getWorkbench().getDisplay());¶		EHUtilities.setCurrentWorkbenchWindow(PlatformUI.getWorkbench().getActiveWorkbenchWindow());¶		// EHUtilities.openEditor("DummyProj",¶		// "D:/Test/DummyProject/src/HelloWorld.java");¶		// have to create the tray icon on the UI thread¶		PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {¶			@Override¶			public void run() {¶				createTrayIcon();¶			}¶		});¶¶		for (IWorkbenchWindow window : PlatformUI.getWorkbench().getWorkbenchWindows()) {¶			IPartService service = window.getPartService();¶			if (service != null) {¶				service.addPartListener(EHPartRecorder.getInstance());¶				PartListenerAdded.newCase(service, EHPartRecorder.getInstance(), this);¶¶				if (service.getActivePart() instanceof IEditorPart) {¶					EHPartRecorder.getInstance().partActivated(service.getActivePart());¶				}¶			}¶		}¶		// IWizardDescriptor[] aDescriptors =¶		// PlatformUI.getWorkbench().getNewWizardRegistry().getPrimaryWizards();¶¶		PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().addShellListener(EHShellRecorder.getInstance());¶¶		DebugPlugin.getDefault().addDebugEventListener(EHDebugEventSetRecorder.getInstance());¶¶		// listen for exceptions¶		ConsolePlugin.getDefault().getConsoleManager().addConsoleListener(EHConsoleRecorder.getInstance());¶¶		// listen for adding breakpoints and removing breakpoints¶		DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(EHBreakPointRecorder.getInstance());¶¶		// try {¶		// VariablesPlugin plugIn = VariablesPlugin.getDefault();¶		// IStringVariableManager manager = plugIn.getStringVariableManager();¶		// manager.addValueVariableListener(VariableValueRecorder.getInstance());¶		// } catch (Exception e) {¶		// e.printStackTrace();¶		// }¶¶		// initializeLogger();¶		//¶		// // Set the combine time threshold.¶		IPreferenceStore prefStore = EHActivator.getDefault().getPreferenceStore();¶¶		setCombineCommands(prefStore.getBoolean(Initializer.Pref_CombineCommands));¶		setCombineTimeThreshold(prefStore.getInt(Initializer.Pref_CombineTimeThreshold));¶¶		// mStarted = true;¶¶		// Execute all the scheduled tasks.¶		for (Runnable runnable : mScheduledTasks) {¶			runnable.run();¶		}¶¶	}¶¶	private final static String ICON_PATH = "icons/spy.png";¶¶	@SuppressWarnings("deprecation")¶	public static void createTrayIcon() {¶		Tray tray = PlatformUI.getWorkbench().getDisplay().getSystemTray();¶¶		// check is for systems that don't support Tray¶		if (tray != null) {¶			try {¶				// URL url = new¶				// URL(fluorite.plugin.Activator.getDefault().getDescriptor().getInstallURL(),¶				// ICON_PATH);¶				URL url = new URL(HermesActivator.getInstallURL(), ICON_PATH);¶				ImageDescriptor imageDescriptior = ImageDescriptor.createFromURL(url);¶				Image image = imageDescriptior.createImage();¶				trayItem = new TrayItem(tray, SWT.NONE);¶				trayItem.setImage(image);¶			} catch (MalformedURLException e) {¶				e.printStackTrace();¶			}¶		}¶	}¶¶	public static TrayItem getTrayItem() {¶		return trayItem;¶	}¶¶	public void stop() {¶		PluginStopped.newCase(this);¶		if (mStarted == false) {¶			return;¶		}¶¶		updateIncrementalFindMode();¶¶		// Flush the commands that are not yet logged into the file.¶		PendingCommandsLogBegin.newCase(allDocAndNonDocCommands, this);¶		for (EHICommand command : allDocAndNonDocCommands) {¶			maybeLog(Level.FINE, null, command);¶			// LOGGER.log(Level.FINE, null, command);¶		}¶		PendingCommandsLogEnd.newCase(allDocAndNonDocCommands, this);¶¶		try {¶			IWorkbench workbench = PlatformUI.getWorkbench();¶			if (workbench != null) {¶				IWorkbenchWindow window = workbench.getActiveWorkbenchWindow();¶				if (window != null) {¶					IPartService partService = window.getPartService();¶					if (partService != null) {¶						partService.removePartListener(EHPartRecorder.getInstance());¶					}¶				}¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶		// try {¶		// DebugPlugin.getDefault().removeDebugEventListener(¶		// DebugEventSetRecorder.getInstance());¶		// } catch (Exception e) {¶		// e.printStackTrace();¶		// }¶¶		try {¶			VariablesPlugin.getDefault().getStringVariableManager()¶					.removeValueVariableListener(EHVariableValueRecorder.getInstance());¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶		// purge timer events.¶		getTimer().cancel();¶		getTimer().purge();¶		ADifficultyPredictionPluginEventProcessor.getInstance().commandProcessingStopped();¶		// pendingPredictionCommands.add(new AnEndOfQueueCommand());¶		notifyRecordingEnded();¶	}¶¶	protected Logger workspaceLogger() {¶		return LOGGER;¶	}¶¶	public static final String PROJECT_LOGGER_FILE_NAME = "Logs/Eclipse";¶	public static Map<Logger, File> loggerToFileName = new HashMap();¶¶	protected boolean initializeProjectLogger(IProject aProject, Logger aLogger) {¶		IPath aProjectLocation = aProject.getLocation();¶		File aProjectFileLocation = aProjectLocation.toFile();¶		File aLogFileLocation = new File(aProjectFileLocation, PROJECT_LOGGER_FILE_NAME);¶		File aCreatedFile = maybeCreateDirectory(aLogFileLocation, false);¶//		loggerToFileName.put(aLogger, aLogFileLocation);¶		if (aCreatedFile == null)¶			return false;¶		initializeLogger(aLogger, aCreatedFile);¶		return true;¶¶	}¶¶	// private void initializeLogger() {¶	//// setLogLevel(Level.FINE);¶	// LOGGER.setLevel(Level.FINE);¶	//¶	// File outputFile = null;¶	// try {¶	// File logLocation = getLogLocation();¶	// outputFile = new File(logLocation,¶	// EHEventRecorder.getUniqueMacroNameByTimestamp(getStartTimestamp(),¶	// false));¶	// LogFileCreated.newCase(outputFile.getName(), this);¶	//¶	// FileHandler handler = new FileHandler(outputFile.getPath());¶	// handler.setEncoding("UTF-8");¶	// handler.setFormatter(new EHXMLFormatter(getStartTimestamp()));¶	//¶	// LOGGER.addHandler(handler);¶	// LogHandlerBound.newCase(handler, this);¶	// } catch (Exception e) {¶	// e.printStackTrace();¶	// }¶	// }¶	private void initializeLogger() {¶		// setLogLevel(Level.FINE);¶		// LOGGER.setLevel(Level.FINE);¶¶		File outputFile = null;¶		try {¶			File aLogFileLocation = getWorkspaceLogLocation();¶			File aCreatedFile = maybeCreateDirectory(aLogFileLocation, true);¶			if (aCreatedFile == null)¶				return;¶			initializeLogger(workspaceLogger(), aCreatedFile);¶			// return true;¶¶			// initializeLogger(workspaceLogger(), outputFile);¶			// LogFileCreated.newCase(outputFile.getName(), this);¶			//¶			// FileHandler handler = new FileHandler(outputFile.getPath());¶			// handler.setEncoding("UTF-8");¶			// handler.setFormatter(new EHXMLFormatter(getStartTimestamp()));¶			//¶			// LOGGER.addHandler(handler);¶			// LogHandlerBound.newCase(handler, this);¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶	}¶//	private void initializeLogger() {¶//		// setLogLevel(Level.FINE);¶//		// LOGGER.setLevel(Level.FINE);¶//¶//		File outputFile = null;¶//		try {¶//			File aLogFileLocation = getWorkspaceLogLocation();¶//			File aCreatedFile = maybeCreateDirectory(aLogFileLocation, true);¶//			if (aCreatedFile == null)¶//				return;¶//			initializeLogger(workspaceLogger(), aCreatedFile);¶//			// return true;¶//¶//			// initializeLogger(workspaceLogger(), outputFile);¶//			// LogFileCreated.newCase(outputFile.getName(), this);¶//			//¶//			// FileHandler handler = new FileHandler(outputFile.getPath());¶//			// handler.setEncoding("UTF-8");¶//			// handler.setFormatter(new EHXMLFormatter(getStartTimestamp()));¶//			//¶//			// LOGGER.addHandler(handler);¶//			// LogHandlerBound.newCase(handler, this);¶//		} catch (Exception e) {¶//			e.printStackTrace();¶//		}¶//	}¶¶	protected void initializeLogger(Logger aLogger, File logDirectory) {¶		aLogger.setLevel(Level.FINE);¶		File outputFile = null;¶		try {¶			outputFile = new File(logDirectory,¶					EHEventRecorder.getUniqueMacroNameByTimestamp(getStartTimestamp(), false));¶			LogFileCreated.newCase(outputFile.getName(), this);¶			initializeLoggerFile(aLogger, outputFile);¶//			FileHandler handler = new FileHandler(outputFile.getPath());¶//			handler.setEncoding("UTF-8");¶//			handler.setFormatter(new EHXMLFormatter(getStartTimestamp()));¶//¶//			aLogger.addHandler(handler);¶//			loggerToFileName.put(aLogger, outputFile);¶//			LogHandlerBound.newCase(handler, this);¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶	protected void initializeLoggerFile(Logger aLogger, File outputFile) {¶		aLogger.setLevel(Level.FINE);¶		try {¶			¶¶			FileHandler handler = new FileHandler(outputFile.getPath());¶			handler.setEncoding("UTF-8");¶			handler.setFormatter(new EHXMLFormatter(getStartTimestamp()));¶¶			aLogger.addHandler(handler);¶			loggerToFileName.put(aLogger, outputFile);¶			LogHandlerBound.newCase(handler, this);¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	protected File maybeCreateDirectory(File logLocation, boolean isGlobalLogger) {¶		try {¶			// File logLocation =¶			// HermesActivator.getDefault().getStateLocation().append("Logs")¶			// .toFile();¶			if (!logLocation.exists()) {¶				if (!logLocation.mkdirs()) {¶					throw new Exception("Could not make log directory!");¶				}¶			}¶			return logLocation;¶		} catch (Exception e) {¶			if (isGlobalLogger)¶				return new File("Logs");¶			else¶				return null;¶		}¶	}¶¶	public EHEvents getRecordedEventsSoFar() {¶		return getRecordedEvents(allDocAndNonDocCommands);¶	}¶¶	public EHEvents getRecordedEvents(List<EHICommand> commands) {¶		return new EHEvents(commands, "", Long.toString(getStartTimestamp()), "", getStartTimestamp());¶	}¶¶	public static final String WORKSPACE_LOG_NAME = "Logs";¶¶	/**¶	 * This is the workspace logger¶	 * ¶	 * @return¶	 * @throws Exception¶	 */¶	private File getWorkspaceLogLocation() throws Exception {¶		try {¶			File logLocation = HermesActivator.getDefault().getStateLocation().append(WORKSPACE_LOG_NAME).toFile();¶			if (!logLocation.exists()) {¶				if (!logLocation.mkdirs()) {¶					throw new Exception("Could not make log directory!");¶				}¶			}¶			return logLocation;¶		} catch (Exception e) {¶			return new File(WORKSPACE_LOG_NAME);¶		}¶	}¶¶	private boolean mIncrementalFindMode = false;¶	private boolean mIncrementalFindForward = true;¶	private Listener mIncrementalListener = null;¶¶	public IEditorPart getEditor() {¶		return mEditor;¶	}¶¶	public void updateIncrementalFindMode() {¶		if (!mIncrementalFindMode)¶			return;¶¶		StyledText st = EHUtilities.getStyledText(EHUtilities.getActiveEditor());¶		Listener[] currentListeners = st.getListeners(SWT.MouseUp);¶		boolean stillInList = false;¶		for (Listener listener : currentListeners) {¶			if (listener == mIncrementalListener) {¶				stillInList = true;¶				break;¶			}¶		}¶¶		if (!stillInList) {¶			mIncrementalFindMode = false;¶¶			// add find command representing whatever is currently selected¶			String selectionText = st.getSelectionText();¶			FindCommand findCommand = new FindCommand(selectionText);¶			findCommand.setSearchForward(mIncrementalFindForward);¶			recordCommand(findCommand);¶			// System.out.println("Incremental find string: " + selectionText);¶		}¶	}¶¶	// @Override¶	// public void modifyText(ExtendedModifyEvent event)¶	// {¶	// // if (!mCurrentlyExecutingCommand)¶	// // {¶	// // System.out.println(event);¶	// // }¶	// // //the text modify event is used to handle character insert/delete¶	// events¶	// // if (event.replacedText.length()>0)¶	// // {¶	// // mCommands.add(new StyledTextCommand(ST.DELETE_NEXT));¶	// // }¶	// //¶	// // if ()¶	// }¶¶	public void endIncrementalFindMode() {¶¶	}¶¶	public void pauseRecording() {¶		mRecordCommands = false;¶	}¶¶	public void resumeRecording() {¶		mRecordCommands = true;¶	}¶¶	boolean isPredictionRelatedCommand(final EHICommand newCommand) {¶		return newCommand instanceof PredictionCommand || newCommand instanceof DifficultyCommand;¶	}¶¶	public int getNumNotifiedCommands() {¶		return numNotifiedCommands;¶	}¶¶	public int getNumReceivedCommnads() {¶		return numReceivedCommands;¶	}¶¶	public int getNumDataEvents() {¶		return numDataEvents;¶	}¶¶	public int getNumFinalizedDataEvents() {¶		return numFinalizedDataEvents;¶	}¶¶	protected void notifyCommandAndDocChangeListeners(EHICommand newCommand, EHICommand lastCommand) {¶		numNotifiedCommands++;¶		if (newCommand instanceof BaseDocumentChangeEvent) {¶			if (!(newCommand instanceof FileOpenCommand)) {¶				fireDocumentChangedEvent((BaseDocumentChangeEvent) newCommand);¶				DocumentChangeCommandNotified.newCase((BaseDocumentChangeEvent) newCommand, numReceivedCommands, mStartTimestamp, this);¶			}¶¶			if (lastCommand instanceof BaseDocumentChangeEvent && lastCommand != mLastFiredDocumentChange) {¶				fireDocumentChangeFinalizedEvent((BaseDocumentChangeEvent) lastCommand);¶¶				DocumentChangeFinalizedEventNotified.newCase((BaseDocumentChangeEvent) lastCommand,numReceivedCommands, mStartTimestamp,¶						this);¶			}¶		} else {¶			fireCommandExecutedEvent(newCommand);¶			NonDocumentChangeCommandNotified.newCase(newCommand, numReceivedCommands, mStartTimestamp, this);¶		}¶	}¶¶	protected void maybeLog(Level aLevel, String aMessage, Object anObject) {¶		try {¶		if (HelperConfigurationManagerFactory.getSingleton().isLogWorkspace()) {¶			log(workspaceLogger(), aLevel, aMessage, anObject);¶//			System.out.println ("Current thread: " + Thread.currentThread() + " " + anObject);¶		}¶		if (HelperConfigurationManagerFactory.getSingleton().isLogProject()) {¶			log(projectLogger(), aLevel, aMessage, anObject);¶		}¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶	}¶	protected void maybeLog(EHICommand aCommand, Level aLevel, String aMessage, Object anObject) {¶		try {¶		if (HelperConfigurationManagerFactory.getSingleton().isLogWorkspace()) {¶			log(workspaceLogger(), aLevel, aMessage, anObject);¶//			System.out.println ("Current thread: " + Thread.currentThread() + " " + anObject);¶		}¶		if (HelperConfigurationManagerFactory.getSingleton().isLogProject()) {¶			log(projectLogger(aCommand), aLevel, aMessage, anObject);¶		}¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶	}¶	protected boolean hasBeenIdle(long aCurrentTimeStamp) {¶		return (aCurrentTimeStamp - lastSuccessfulWriteTime) > IDLE_TIME;¶	}¶	protected void log(Logger aLogger, Level aLevel, String aMessage, Object anObject) {¶		if (aLogger == null) {¶			return;¶		}¶ 		File aFile = loggerToFileName.get(aLogger);¶		long aPreWriteTime = aFile.lastModified();¶		doLog(aLogger, aLevel, aMessage, anObject);¶		long aPostWriteTime = aFile.lastModified();¶		if ((aPreWriteTime == aPostWriteTime)) {¶			if (hasBeenIdle(aPostWriteTime)) {¶				handleStaleLog(aLogger, aLevel, aMessage, anObject, aFile);¶			}		¶		} else {¶			lastSuccessfulWriteTime = aPostWriteTime;¶		}¶	}¶	protected void doLog(Logger aLogger, Level aLevel, String aMessage, Object anObject) {¶//		if (aLogger == null) {¶//			return;¶//		}¶//		File aFile = loggerToFileName.get(aLogger);¶//		long aPreWriteTime = aFile.lastModified();¶		aLogger.log(aLevel, aMessage, anObject);¶		Handler[] aHandlers = aLogger.getHandlers();¶		for (Handler aHandler:aHandlers) {¶			aHandler.flush();¶			FileHandler aFileHandler = (FileHandler) aHandler;¶		}¶//		long aPostWriteTime = aFile.lastModified();¶//		if (aPreWriteTime == aPostWriteTime) {¶//			handleStaleLog(aLogger, aLevel, aMessage, anObject, aFile);¶//		}¶¶¶	}¶	¶	protected void handleStaleLog(Logger aLogger, Level aLevel, String aMessage, Object anObject, File aFile) {¶		Handler[] aHandlers = aLogger.getHandlers();¶¶		for (Handler aHandler:aHandlers) {¶			aLogger.removeHandler(aHandler);¶			aHandler.close();			¶		}¶//		mStartTimestamp = System.currentTimeMillis();¶		initTimestamp();¶		notifyTimestampReset(getStartTimestamp());¶		AbstractCommand.resetCommandID();¶		initializeLoggerFile(aLogger, aFile.getParentFile());¶		doLog(aLogger, aLevel, aMessage, anObject);¶		¶	}¶	/*¶	 * Do not empty the current command list so that the last command can be¶	 * combined with future commands Do not empty list if current command¶	 * type is the same asprevious command type except the first time we run¶	 * it Rationale is that document change commands (e.g. insert) should¶	 * trigger normal command (e.g move caret) logging Vice versa also,¶	 * combine a bunch of inserts until a move caret is detected¶	 * ¶	 * It seems first commands are doc change¶	 * ¶	 * First can get out of sync. So maybe we should flush the cache if the¶	 * size gets too large¶	 */¶	public synchronized void processPendingCombinableCommandsSerial(LinkedList<EHICommand> docOrNormalCommands, long timestamp) {¶		PendingCommandsLogBegin.newCase(docOrNormalCommands, this);¶¶		boolean isOutOfSync = docOrNormalCommands.size() >= HelperConfigurationManagerFactory.getSingleton()¶				.getSegmentLength();¶		boolean isFlushCommandList = ¶		numReceivedCommands > 1 && (timestamp - lastCommandTimeStamp) > commandFlushTime;¶lastCommandTimeStamp = timestamp;	¶		// while (docOrNormalCommands.size() > 1 &&¶		// docOrNormalCommands.getFirst() == allDocAndNonDocCommands.getFirst())¶		// {¶		while (docOrNormalCommands.size() > 1¶				&& (docOrNormalCommands.getFirst() == allDocAndNonDocCommands.getFirst() || isOutOfSync || isFlushCommandList)) {¶			try {¶				final EHICommand firstCmd = docOrNormalCommands.getFirst();¶				firstCmd.setProject(EHUtilities.getAndStoreCurrentProject());¶//				CommandLoggingInitiated.newCase(firstCmd, numReceivedCommands, mStartTimestamp, this);¶				// System.out.println("***Logging command" + firstCmd);¶				maybeLog(firstCmd, Level.FINE, null, firstCmd);¶				// LOGGER.log(Level.FINE, null, firstCmd);¶				// System.out.println ("LOGGING COMMAND:" + firstCmd + " THIS is¶				// what should be sent to prediction, not individual commands");¶¶				// Remove the first item from the list¶				docOrNormalCommands.removeFirst();¶				allDocAndNonDocCommands.removeFirst();¶				RemovedCommandFromBuffers.newCase(firstCmd.toString(), docOrNormalCommands.toString(),¶						allDocAndNonDocCommands.toString(), this);¶				// System.out.println("Giving command to pluginevent processor"¶				// + firstCmd);¶//				ForwardedCommandToPredictor.newCase(firstCmd, numReceivedCommands, mStartTimestamp, this);¶¶//				ADifficultyPredictionPluginEventProcessor.getInstance().newCommand(firstCmd);¶				processLoggableCommand(firstCmd);¶			} catch (Exception e) {¶				e.printStackTrace();¶			}¶¶		}¶		PendingCommandsLogEnd.newCase(docOrNormalCommands, this);¶		RecordedCommandsCleared.newCase(docOrNormalCommands, this);¶	}¶	protected  void processLoggableCommandsAsync() {¶		while (true) {¶			try {¶				EHICommand aNextCommand = loggableCommandQueue.take();¶				processLoggableCommand(aNextCommand);¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶		}¶		¶	}¶	protected void processLoggableCommand(EHICommand aCommand) {¶		maybeLog(aCommand, Level.FINE, null, aCommand);¶		CommandLoggingInitiated.newCase(aCommand, numReceivedCommands, mStartTimestamp, this);¶¶		ForwardedCommandToPredictor.newCase(aCommand, numReceivedCommands, mStartTimestamp, this);¶		ADifficultyPredictionPluginEventProcessor.getInstance().newCommand(aCommand);¶		¶		¶		¶		¶	}¶	public synchronized void processPendingCombinableCommandsAsync(LinkedList<EHICommand> docOrNormalCommands, long timestamp) {¶		PendingCommandsLogBegin.newCase(docOrNormalCommands, this);¶¶		boolean isOutOfSync = docOrNormalCommands.size() >= HelperConfigurationManagerFactory.getSingleton()¶				.getSegmentLength();¶		boolean isFlushCommandList = ¶		numReceivedCommands > 1 && (timestamp - lastCommandTimeStamp) > commandFlushTime;¶		lastCommandTimeStamp = timestamp;	¶		// while (docOrNormalCommands.size() > 1 &&¶		// docOrNormalCommands.getFirst() == allDocAndNonDocCommands.getFirst())¶		// {¶		while (docOrNormalCommands.size() > 1¶				&& (docOrNormalCommands.getFirst() == allDocAndNonDocCommands.getFirst() || isOutOfSync || isFlushCommandList)) {¶			try {¶				final EHICommand firstCmd = docOrNormalCommands.getFirst();¶				CommandLoggingInitiated.newCase(firstCmd, numReceivedCommands, mStartTimestamp, this);¶				// System.out.println("***Logging command" + firstCmd);¶//				maybeLog(Level.FINE, null, firstCmd);¶				// LOGGER.log(Level.FINE, null, firstCmd);¶				// System.out.println ("LOGGING COMMAND:" + firstCmd + " THIS is¶				// what should be sent to prediction, not individual commands");¶¶				// Remove the first item from the list¶				docOrNormalCommands.removeFirst();¶				allDocAndNonDocCommands.removeFirst();¶				RemovedCommandFromBuffers.newCase(firstCmd.toString(), docOrNormalCommands.toString(),¶						allDocAndNonDocCommands.toString(), this);¶				// System.out.println("Giving command to pluginevent processor"¶				// + firstCmd);¶//				ForwardedCommandToPredictor.newCase(firstCmd, numReceivedCommands, mStartTimestamp, this);¶¶//				ADifficultyPredictionPluginEventProcessor.getInstance().newCommand(firstCmd);¶				firstCmd.setProject(EHUtilities.getAndStoreCurrentProject());¶				loggableCommandQueue.offer(firstCmd);¶			} catch (Exception e) {¶				e.printStackTrace();¶			}¶¶		}¶		PendingCommandsLogEnd.newCase(docOrNormalCommands, this);¶		RecordedCommandsCleared.newCase(docOrNormalCommands, this);¶	}¶¶	/*¶	 * Get a concurrent modification event¶	 */¶	public synchronized void recordCommand(final EHICommand newCommand) {¶		// System.out.println("Recording command:" + newCommand);¶		ReceivedCommand.newCase(newCommand, numReceivedCommands, mStartTimestamp, this);¶		numReceivedCommands++;¶¶		if (!mRecordCommands) {¶			// System.out.println("Ignoring command:" + newCommand);¶			IgnoredCommandAsRecordingSuspended.newCase(newCommand,numReceivedCommands, mStartTimestamp, this);¶¶			return;¶		}¶		// long values cannot be null, but they are initialized by default to 0L¶		// if (newCommand.getTimestamp() == 0L) {¶		// long timestamp = Calendar.getInstance().getTime().getTime();¶		// timestamp -= mStartTimestamp;¶		// NewMacroCommand.newCase(newCommand.getName(), timestamp, this);¶		// newCommand.setTimestamp(timestamp);¶		// newCommand.setTimestamp2(timestamp);¶		// } else {¶		// NewMacroCommand.newCase(newCommand.getName(),¶		// newCommand.getTimestamp(), this);¶		// newCommand.setTimestamp(newCommand.getTimestamp() - mStartTimestamp);¶		// newCommand.setTimestamp2(newCommand.getTimestamp() -¶		// mStartTimestamp);¶		// }¶		long timestamp = Calendar.getInstance().getTime().getTime();¶		timestamp -= mStartTimestamp;¶		¶//		boolean isFlushCommandList = ¶//				numReceivedCommands > 1 && (timestamp - lastCommandTimeStamp) > commandFlushTime;¶//		lastCommandTimeStamp = timestamp;		¶		¶		// NewMacroCommand.newCase(newCommand.getName(), mStartTimestamp, this);¶		NewMacroCommand.newCase(newCommand.toString(), mStartTimestamp, this);¶		newCommand.setStartTimestamp(mStartTimestamp);¶		newCommand.setTimestamp(timestamp);¶		newCommand.setTimestamp2(timestamp);¶		maybeAddRestCommand(newCommand, mStartTimestamp+timestamp);¶		try {¶			commandBuffer.put(newCommand);¶		} catch (InterruptedException e1) {¶			// TODO Auto-generated catch block¶			e1.printStackTrace();¶		}¶		lastCommand = newCommand;¶¶		// NewMacroCommand.newCase(newCommand.getName(),¶		// newCommand.getTimestamp(), this);¶		// newCommand.setTimestamp(newCommand.getTimestamp() - mStartTimestamp);¶		// newCommand.setTimestamp2(newCommand.getTimestamp() -¶		// mStartTimestamp);¶		// EventLoggerConsole.getConsole().writeln(¶		// "*Command added to macro: " + newCommand.getName()¶		// + "\ttimestamp: " + timestamp,¶		// EventLoggerConsole.Type_RecordingCommand);¶¶		final boolean isDocChange = (newCommand instanceof BaseDocumentChangeEvent);¶		final LinkedList<EHICommand> docOrNormalCommands = isDocChange ? mDocumentChangeCommands : mNormalCommands;¶		if (isDocChange) {¶			DocumentChangeCommandExecuted.newCase((BaseDocumentChangeEvent) newCommand, numReceivedCommands, mStartTimestamp, this);¶		} else {¶			NonDocumentChangeCommandExecuted.newCase(newCommand, numReceivedCommands, mStartTimestamp, this);¶		}¶		// System.out.println(" isDocChange" + isDocChange + " commandslist:" +¶		// docOrNormalCommands);¶¶		boolean combined = false;¶		final EHICommand lastCommand = docOrNormalCommands.size() > 0¶				? docOrNormalCommands.get(docOrNormalCommands.size() - 1) : null;¶		mDocChangeCombinable = true;¶		try {¶			// See if combining with previous command is possible .¶			if (!isPredictionRelatedCommand(newCommand) && lastCommand != null¶					&& isCombineEnabled(newCommand, lastCommand, isDocChange)) {¶				// combined = lastCommand.combineWith(newCommand);¶				combined = AbstractCommand.combineWith((AbstractCommand) lastCommand, newCommand);¶¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶		// System.out¶		// .println("Combining command:" + combined + " newCommand" + newCommand¶		// + " lastCommand " + lastCommand);¶		if (combined) {¶			CombinedCommand.newCase(newCommand.toString(), lastCommand.toString(), this);¶		}¶		// If combining has failed, just add it.¶		if (!combined) {¶			// System.out.println("Adding command:" + newCommand + " to both¶			// commands and mCommands");¶			// we do not add combined command to buffers as repeat count of¶			// lastcommand takes care of this info¶			// A timer determines if the combine is actually done or not, as it¶			// changes instance variables¶			docOrNormalCommands.add(newCommand);¶			allDocAndNonDocCommands.add(newCommand);¶			AddedCommandToBuffers.newCase(newCommand, docOrNormalCommands.toString(),¶					allDocAndNonDocCommands.toString(), this);¶			notifyCommandAndDocChangeListeners(newCommand, lastCommand);¶			/*¶			 * The code below is old fluorite¶			 */¶			// if (newCommand instanceof EHBaseDocumentChangeEvent &&¶			// !(newCommand instanceof EHFileOpenCommand)) {¶			// DocumentChangedEvent((EHBaseDocumentChangeEvent) newCommand);¶			//¶			// if (lastCommand instanceof EHBaseDocumentChangeEvent &&¶			// lastCommand != mLastFiredDocumentChange) {¶			// fireDocumentChangeFinalizedEvent((EHBaseDocumentChangeEvent)¶			// lastCommand);¶			// }¶			// }¶¶		}¶		if (HelperConfigurationManagerFactory.getSingleton().isSeparateLoggingThreads()) {¶			if (commandLoggingThread == null)¶				createCommandLoggingThread();¶			processPendingCombinableCommandsAsync(docOrNormalCommands, timestamp);¶¶		} else {¶			processPendingCombinableCommandsSerial(docOrNormalCommands, timestamp);¶		}¶¶		// if (mCommands.getFirst() != commands.getFirst()) {¶		// System.err.println("Commands and mcommands have diverged because we¶		// chnaged command type");¶		// }¶¶		// moving to where the command i logged so that one can get the combined¶		// event¶		// ADifficultyPredictionPluginEventProcessor.getInstance().newCommand(newCommand);¶//		PendingCommandsLogBegin.newCase(docOrNormalCommands, this);¶		// Log to the file.¶		/*¶		 * Do not empty the current command list so that the last command can be¶		 * combined with future commands Do not empty list if current command¶		 * type is the same asprevious command type except the first time we run¶		 * it Rationale is that document change commands (e.g. insert) should¶		 * trigger normal command (e.g move caret) logging Vice versa also,¶		 * combine a bunch of inserts until a move caret is detected¶		 * ¶		 * It seems first commands are doc change¶		 * ¶		 * First can get out of sync. So maybe we should flush the cache if the¶		 * size gets too large¶		 */¶//		boolean isOutOfSync = docOrNormalCommands.size() >= HelperConfigurationManagerFactory.getSingleton()¶//				.getSegmentLength();¶		// while (docOrNormalCommands.size() > 1 &&¶		// docOrNormalCommands.getFirst() == allDocAndNonDocCommands.getFirst())¶		// {¶		¶//		while (docOrNormalCommands.size() > 1¶//				&& (docOrNormalCommands.getFirst() == allDocAndNonDocCommands.getFirst() || isOutOfSync || isFlushCommandList)) {¶//			try {¶//				final EHICommand firstCmd = docOrNormalCommands.getFirst();¶//				CommandLoggingInitiated.newCase(firstCmd, numReceivedCommands, mStartTimestamp, this);¶//				// System.out.println("***Logging command" + firstCmd);¶//				maybeLog(Level.FINE, null, firstCmd);¶//				// LOGGER.log(Level.FINE, null, firstCmd);¶//				// System.out.println ("LOGGING COMMAND:" + firstCmd + " THIS is¶//				// what should be sent to prediction, not individual commands");¶//¶//				// Remove the first item from the list¶//				docOrNormalCommands.removeFirst();¶//				allDocAndNonDocCommands.removeFirst();¶//				RemovedCommandFromBuffers.newCase(firstCmd.toString(), docOrNormalCommands.toString(),¶//						allDocAndNonDocCommands.toString(), this);¶//				// System.out.println("Giving command to pluginevent processor"¶//				// + firstCmd);¶//				ForwardedCommandToPredictor.newCase(firstCmd, numReceivedCommands, mStartTimestamp, this);¶//¶//				ADifficultyPredictionPluginEventProcessor.getInstance().newCommand(firstCmd);¶//			} catch (Exception e) {¶//				e.printStackTrace();¶//			}¶//¶//		}¶//		PendingCommandsLogEnd.newCase(docOrNormalCommands, this);¶//		RecordedCommandsCleared.newCase(docOrNormalCommands, this);¶		¶		¶¶		if (!isAsyncFireEvent())¶			return;¶		// perhaps this is screwing performance¶¶		// WHY do we need all of the stuff below¶		if (isPlugInMode()) {¶			StyledText styledText = EHUtilities.getStyledText(EHUtilities.getActiveEditor());¶			if (styledText != null) {¶				this.mLastCaretOffset = styledText.getCaretOffset();¶				this.mLastSelectionStart = styledText.getSelection().x;¶				this.mLastSelectionEnd = styledText.getSelection().y;¶			}¶		}¶¶		// Deal with timer.¶		// TODO Refactor!! maybe use State pattern or something, using inner¶		// classes.¶		if (isDocChange) {¶			if (mDocChangeTimerTask != null) {¶				mDocChangeTimerTask.cancel();¶			}¶¶			mDocChangeTimerTask = new TimerTask() {¶				public void run() {¶					 System.out.println(Thread.currentThread() + "NEW THREAD! THIS MAY BE THE ISSUE	 WITH PERFOMANCE");¶					mDocChangeCombinable = false;¶					// System.out.println("COMBINABLE: FALSE");¶¶					try {¶¶						final EHICommand lastCommand = (mDocumentChangeCommands.size() > 0)¶								? mDocumentChangeCommands.get(mDocumentChangeCommands.size() - 1) : null;¶						if (lastCommand != null && lastCommand != mLastFiredDocumentChange) {¶							Display.getDefault().asyncExec(new Runnable() {¶								public void run() {¶									 System.out.println(Thread.currentThread() + "Fire doc change finalize");¶¶									fireDocumentChangeFinalizedEvent((BaseDocumentChangeEvent) lastCommand);¶								}¶							});¶						}¶¶					} catch (Exception e) {¶						e.printStackTrace();¶					}¶				}¶			};¶			getTimer().schedule(mDocChangeTimerTask, (long) getCombineTimeThreshold());¶			mDocChangeCombinable = true;¶			// System.out.println(" EVENT Recorder Combinable ");¶		} else {¶			if (mNormalTimerTask != null) {¶				mNormalTimerTask.cancel();¶			}¶¶			mNormalTimerTask = new TimerTask() {¶				public void run() {¶					mNormalCommandCombinable = false;¶				}¶			};¶			getTimer().schedule(mNormalTimerTask, (long) getCombineTimeThreshold());¶			mNormalCommandCombinable = true;¶		}¶	}¶¶	private void maybeAddRestCommand(EHICommand next, long timestamp) {¶		if (isLoggingRestCommand == true) {¶			return;¶		}¶		isLoggingRestCommand = true;¶		long s = 1000;¶		if (lastCommand != null) {¶			long rest = timestamp-lastCommand.getStartTimestamp()-lastCommand.getTimestamp();¶			if (rest >= s) {¶				String range = "";¶				if (rest < 2*s) {¶					range = "1s-2s";¶				} else if (rest < 5*s) {¶					range = "2s-5s";¶				} else if (rest < 10*s) {¶					range = "5s-10s";¶				} else if (rest < 20*s) {¶					range = "10s-20s";¶				} else if (rest < 30*s) {¶					range = "20s-30s";¶				} else if (rest < 60*s) {¶					range = "30s-1m";¶				} else if (rest < 2*60*s) {¶					range = "1m-2m";¶				} else if (rest < 5*60*s) {¶					range = "2m-5m";¶				} else if (rest < 10*60*s) {¶					range = "5m-10m";¶				} else if (rest < 30*60*s) {¶					range = "10m-30m";¶				} else if (rest < 60*60*s) {¶					range = "30m-60m";¶				} else {¶					range = ">1h";¶				}¶				PauseCommand rCommnad = new PauseCommand(lastCommand, next, rest, range);¶				recordCommand(rCommnad);¶			}¶		}¶		isLoggingRestCommand = false;¶	}¶	// public void changeStatusInHelpView(PredictionCommand predictionCommand) {¶	// String status = "";¶	// switch (predictionCommand.getPredictionType()) {¶	// case MakingProgress:¶	// status = StatusConsts.MAKING_PROGRESS_STATUS;¶	// break;¶	// case HavingDifficulty:¶	// status = StatusConsts.SLOW_PROGRESS_STATUS;¶	// break;¶	// case Indeterminate:¶	// status = StatusConsts.INDETERMINATE;¶	// break;¶	// }¶	//¶	// showStatusInBallonTip(status);¶	// HelpViewPart.displayStatusInformation(status);¶	// }¶¶	// private void showStatusInBallonTip(String status) {¶	// if (balloonTip == null) {¶	// balloonTip = new ToolTip(PlatformUI.getWorkbench()¶	// .getActiveWorkbenchWindow().getShell(), SWT.BALLOON¶	// | SWT.ICON_INFORMATION);¶	//¶	// }¶	//¶	// if (!balloonTip.isDisposed()) {¶	// balloonTip.setMessage("Status: " + status);¶	// balloonTip.setText("Status Change Notification");¶	// trayItem.setToolTip(balloonTip);¶	// balloonTip.setVisible(true);¶	// }¶	//¶	// }¶¶	private boolean isCombineEnabled(EHICommand newCommand, EHICommand lastCommand, boolean isDocChange) {¶		return getCombineCommands() && (isDocChange ? mDocChangeCombinable : mNormalCommandCombinable);¶	}¶¶	public long getStartTimestamp() {¶		return mStartTimestamp;¶	}¶¶	// in replay mode¶	public void setStartTimeStamp(long newVal) {¶		mStartTimestamp = newVal;¶	}¶¶	public static String getUniqueMacroNameByTimestamp(long timestamp, boolean autosave) {¶		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		return "Log" + format.format(new Date(timestamp)) + (autosave ? "-Autosave" : "") + ".xml";¶	}¶¶	public static Document createDocument(EHEvents events) {¶		DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();¶		try {¶			DocumentBuilder docBuilder = dbfac.newDocumentBuilder();¶			Document doc = docBuilder.newDocument();¶¶			// create the root element and add it to the document¶			Element root = doc.createElement(XML_Macro_Tag);¶			doc.appendChild(root);¶			events.persist(doc, root);¶¶			return doc;¶¶		} catch (ParserConfigurationException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶		}¶		return null;¶	}¶¶	public static String outputXML(Document doc) {¶		try {¶			// set up a transformer¶			TransformerFactory transfac = TransformerFactory.newInstance();¶			Transformer trans = transfac.newTransformer();¶			trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");¶			trans.setOutputProperty(OutputKeys.INDENT, "yes");¶¶			// create string from xml tree¶			StringWriter sw = new StringWriter();¶			StreamResult result = new StreamResult(sw);¶			DOMSource source = new DOMSource(doc);¶			trans.transform(source, result);¶			String xmlString = sw.toString();¶			return xmlString;¶		} catch (TransformerConfigurationException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (TransformerException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶		}¶		return null;¶	}¶¶	public static String persistMacro(EHEvents macro) {¶		Document doc = createDocument(macro);¶		return outputXML(doc);¶	}¶¶	public static boolean isAsyncFireEvent() {¶		return asyncFireEvent;¶	}¶¶	public static void setAsyncFireEvent(boolean asyncFireEvent) {¶		EHEventRecorder.asyncFireEvent = asyncFireEvent;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2392" _type="MoveCaretCommand" caretOffset="56312" date="Mon Feb 01 21:25:58 EST 2021" docOffset="56312" starttimestamp="1612231299681" timestamp="1458333" />
  <Command __id="2393" _type="MoveCaretCommand" caretOffset="56312" date="Mon Feb 01 21:25:58 EST 2021" docOffset="56312" starttimestamp="1612231299681" timestamp="1458333" />
  <Command __id="2394" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:26:01 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34266" docExpressionCount="4003" docLength="35221" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1462070">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2395" _type="MoveCaretCommand" caretOffset="5970" date="Mon Feb 01 21:26:01 EST 2021" docOffset="21058" starttimestamp="1612231299681" timestamp="1462215" />
  <Command __id="2396" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:26:02 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="983" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1462965">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶//	private static AExperimentalReplayer replayer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶		replayer = new AReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶		replayer.analyzeFolder(classFolderPath);¶//		replayer.createRestCommandLogs(classFolderPath);¶//		replayer = new AExperimentalReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		replayer.createRestCommandLogs(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="2399" _type="ShellCommand" date="Mon Feb 01 21:26:16 EST 2021" starttimestamp="1612231299681" timestamp="1476384" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2400" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:26:27 EST 2021" docASTNodeCount="80" docActiveCodeLength="559" docExpressionCount="36" docLength="559" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1487405">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AJoiner.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

public class AJoiner{
	private int numMaxThreads;
	private int numFinishedThreads;
	
	public AJoiner(int num) {
		numMaxThreads = num;
		numFinishedThreads = 0;
	}

	public synchronized void finish() {
		numFinishedThreads++;
		if (numFinishedThreads >= numMaxThreads) {
			this.notify();
			numFinishedThreads = 0;
		}
	}

	public synchronized void join() {
		if (numFinishedThreads < numMaxThreads) {
			try {
				this.wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2401" _type="Insert" date="Mon Feb 01 21:26:27 EST 2021" docASTNodeCount="119" docActiveCodeLength="781" docExpressionCount="61" docLength="781" length="222" offset="552" repeat="4" starttimestamp="1612231299681" timestamp="1487435" timestamp2="1487437">
    <text><![CDATA[

	public static void main(String[] args) {
		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {
					Node textNode = nodeList.item(0);
					range =textNode.getTextContent();
				}
	}]]></text>
  </DocumentChange>
  <Command __id="2405" _type="PasteCommand" date="Mon Feb 01 21:26:27 EST 2021" starttimestamp="1612231299681" timestamp="1487508" />
  <Command __id="2406" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:26:27 EST 2021" starttimestamp="1612231299681" timestamp="1487640" />
  <Command __id="2407" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:26:27 EST 2021" starttimestamp="1612231299681" timestamp="1487648" />
  <Command __id="2408" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:26:27 EST 2021" starttimestamp="1612231299681" timestamp="1487648" />
  <Command __id="2409" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:26:27 EST 2021" starttimestamp="1612231299681" timestamp="1487656" />
  <Command __id="2410" _type="MoveCaretCommand" caretOffset="770" date="Mon Feb 01 21:26:27 EST 2021" docOffset="770" starttimestamp="1612231299681" timestamp="1487715" />
  <Command __id="2415" _type="UndoCommand" date="Mon Feb 01 21:26:30 EST 2021" starttimestamp="1612231299681" timestamp="1490851" />
  <DocumentChange __id="2411" _type="Delete" date="Mon Feb 01 21:26:30 EST 2021" docASTNodeCount="80" docActiveCodeLength="559" docExpressionCount="36" docLength="559" endLine="34" length="222" offset="552" repeat="4" startLine="27" starttimestamp="1612231299681" timestamp="1490831" timestamp2="1490833">
    <text><![CDATA[

	public static void main(String[] args) {
		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {
					Node textNode = nodeList.item(0);
					range =textNode.getTextContent();
				}
	}]]></text>
  </DocumentChange>
  <Command __id="2417" _type="ShellCommand" date="Mon Feb 01 21:26:35 EST 2021" starttimestamp="1612231299681" timestamp="1496246" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2418" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:26:35 EST 2021" starttimestamp="1612231299681" timestamp="1496279" />
  <Command __id="2419" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 01 21:26:35 EST 2021" starttimestamp="1612231299681" timestamp="1496280" />
  <Command __id="2420" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:26:36 EST 2021" starttimestamp="1612231299681" timestamp="1496393" />
  <Command __id="2421" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:26:37 EST 2021" docASTNodeCount="3416" docActiveCodeLength="20736" docExpressionCount="2334" docLength="21824" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1498285">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		joiner = new AJoiner(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				joiner.finish();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						joiner.finish();¶						return;¶					}¶					for (File file : logs) {¶						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶						if (commands.size() < 2) {¶							continue;¶						}¶						List<EHICommand> newCommands = new ArrayList<>();¶						EHICommand last = null;¶						EHICommand cur = null;¶						for (EHICommand command : commands) {¶							if (cur == null) {¶								cur = command;¶								newCommands.add(command);¶							} else {¶								last = cur;¶								cur = command;¶								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶								if (rest >= 1*ONE_SECOND) {¶									String range = "";¶									if (rest < 2*ONE_SECOND) {¶										range = "1s-2s";¶									} else if (rest < 5*ONE_SECOND) {¶										range = "2s-5s";¶									} else if (rest < 10*ONE_SECOND) {¶										range = "5s-10s";¶									} else if (rest < 20*ONE_SECOND) {¶										range = "10s-20s";¶									} else if (rest < 30*ONE_SECOND) {¶										range = "20s-30s";¶									} else if (rest < ONE_MIN) {¶										range = "30s-1m";¶									} else if (rest < TWO_MIN) {¶										range = "1m-2m";¶									} else if (rest < FIVE_MIN) {¶										range = "2m-5m";¶									} else if (rest < TEN_MIN) {¶										range = "5m-10m";¶									} else if (rest < 3*TEN_MIN) {¶										range = "10m-30m";¶									} else if (rest < 6*TEN_MIN) {¶										range = "30m-60m";¶									} else {¶										range = ">1h";¶									}¶									PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶									rCommnad.setStartTimestamp(last.getStartTimestamp());¶									rCommnad.setTimestamp(last.getTimestamp()+1);¶									newCommands.add(rCommnad);¶								} ¶								newCommands.add(command);¶							}¶						}¶						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶						for (EHICommand c : newCommands) {¶							logContent += c.persist();¶						}¶						logContent += XML_FILE_ENDING;¶						try {¶							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶							if (newLog.exists()) {¶								newLog.delete();¶							}¶							newLog.getParentFile().mkdirs();¶							newLog.createNewFile();¶							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶							System.out.println("Writing to file " + newLog.getPath());¶							writer.write(logContent);¶							writer.close();¶							System.out.println("Finished writing to file " + newLog.getPath());¶						} catch (IOException e) {¶							// TODO Auto-generated catch block¶							e.printStackTrace();¶						}¶					}¶					synchronized (this) {¶						threadCount--;¶					}¶					joiner.finish();¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2422" _type="MoveCaretCommand" caretOffset="5614" date="Mon Feb 01 21:26:38 EST 2021" docOffset="5614" starttimestamp="1612231299681" timestamp="1498517" />
  <Command __id="2423" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:26:44 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34266" docExpressionCount="4003" docLength="35221" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1504556">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2424" _type="MoveCaretCommand" caretOffset="5970" date="Mon Feb 01 21:26:44 EST 2021" docOffset="21058" starttimestamp="1612231299681" timestamp="1504682" />
  <Command __id="2426" _type="MoveCaretCommand" caretOffset="5614" date="Mon Feb 01 21:26:46 EST 2021" docOffset="5614" starttimestamp="1612231299681" timestamp="1507201" />
  <Command __id="2427" _type="SelectTextCommand" caretOffset="2754" date="Mon Feb 01 21:26:51 EST 2021" end="2769" start="2754" starttimestamp="1612231299681" timestamp="1512161" />
  <Command __id="2429" _type="InsertStringCommand" date="Mon Feb 01 21:26:52 EST 2021" starttimestamp="1612231299681" timestamp="1512908" timestamp2="1512908">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2431" _type="InsertStringCommand" date="Mon Feb 01 21:26:52 EST 2021" starttimestamp="1612231299681" timestamp="1512954" timestamp2="1512954">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2432" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:26:52 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1512996" />
  <Command __id="2436" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:26:53 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1513982" />
  <Command __id="2442" _type="InsertStringCommand" date="Mon Feb 01 21:26:53 EST 2021" starttimestamp="1612231299681" timestamp="1514044" timestamp2="1514044">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2444" _type="InsertStringCommand" date="Mon Feb 01 21:26:53 EST 2021" starttimestamp="1612231299681" timestamp="1514221" timestamp2="1514221">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2446" _type="InsertStringCommand" date="Mon Feb 01 21:26:54 EST 2021" starttimestamp="1612231299681" timestamp="1514346" timestamp2="1514346">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2447" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:26:54 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1514375" />
  <Command __id="2452" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:26:54 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1515096" />
  <Command __id="2453" _type="InsertStringCommand" date="Mon Feb 01 21:26:54 EST 2021" starttimestamp="1612231299681" timestamp="1515099" timestamp2="1515099">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2455" _type="InsertStringCommand" date="Mon Feb 01 21:26:54 EST 2021" starttimestamp="1612231299681" timestamp="1515304" timestamp2="1515304">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2456" _type="MoveCaretCommand" caretOffset="3379" date="Mon Feb 01 21:26:58 EST 2021" docOffset="3379" starttimestamp="1612231299681" timestamp="1518450" />
  <Command __id="2457" _type="SelectTextCommand" caretOffset="3382" date="Mon Feb 01 21:26:58 EST 2021" end="3382" start="3379" starttimestamp="1612231299681" timestamp="1518622" />
  <Command __id="2458" _type="SelectTextCommand" caretOffset="3410" date="Mon Feb 01 21:26:58 EST 2021" end="3410" start="3368" starttimestamp="1612231299681" timestamp="1518754" />
  <Command __id="2460" _type="InsertStringCommand" date="Mon Feb 01 21:26:59 EST 2021" starttimestamp="1612231299681" timestamp="1519711" timestamp2="1519711">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2461" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:26:59 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1519737" />
  <Command __id="2463" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:27:00 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1520702" />
  <Command __id="2465" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:27:00 EST 2021" starttimestamp="1612231299681" timestamp="1521242" />
  <Command __id="2467" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:27:01 EST 2021" starttimestamp="1612231299681" timestamp="1521372" />
  <Command __id="2469" _type="InsertStringCommand" date="Mon Feb 01 21:27:01 EST 2021" starttimestamp="1612231299681" timestamp="1521804" timestamp2="1521804">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2470" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 21:27:01 EST 2021" starttimestamp="1612231299681" timestamp="1522091" />
  <Command __id="2472" _type="InsertStringCommand" date="Mon Feb 01 21:27:02 EST 2021" starttimestamp="1612231299681" timestamp="1522375" timestamp2="1522375">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="2474" _type="InsertStringCommand" date="Mon Feb 01 21:27:02 EST 2021" starttimestamp="1612231299681" timestamp="1522982" timestamp2="1522982">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2475" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:27:02 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1523024" />
  <Command __id="2479" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:27:03 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1523907" />
  <Command __id="2481" _type="InsertStringCommand" date="Mon Feb 01 21:27:03 EST 2021" starttimestamp="1612231299681" timestamp="1523931" timestamp2="1523931">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2483" _type="UndoCommand" date="Mon Feb 01 21:27:04 EST 2021" starttimestamp="1612231299681" timestamp="1524654" />
  <Command __id="2485" _type="InsertStringCommand" date="Mon Feb 01 21:27:04 EST 2021" starttimestamp="1612231299681" timestamp="1524996" timestamp2="1524996">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2487" _type="InsertStringCommand" date="Mon Feb 01 21:27:04 EST 2021" starttimestamp="1612231299681" timestamp="1525039" timestamp2="1525039">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2488" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:27:04 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1525081" />
  <Command __id="2492" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:27:05 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1525731" />
  <Command __id="2493" _type="InsertStringCommand" date="Mon Feb 01 21:27:05 EST 2021" starttimestamp="1612231299681" timestamp="1525735" timestamp2="1525735">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2495" _type="InsertStringCommand" date="Mon Feb 01 21:27:05 EST 2021" starttimestamp="1612231299681" timestamp="1526058" timestamp2="1526058">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2497" _type="InsertStringCommand" date="Mon Feb 01 21:27:05 EST 2021" starttimestamp="1612231299681" timestamp="1526298" timestamp2="1526298">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2499" _type="InsertStringCommand" date="Mon Feb 01 21:27:06 EST 2021" starttimestamp="1612231299681" timestamp="1526415" timestamp2="1526415">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2501" _type="InsertStringCommand" date="Mon Feb 01 21:27:06 EST 2021" starttimestamp="1612231299681" timestamp="1526908" timestamp2="1526908">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2502" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:27:06 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1526952" />
  <Command __id="2506" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:27:06 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1527233" />
  <Command __id="2508" _type="InsertStringCommand" date="Mon Feb 01 21:27:07 EST 2021" starttimestamp="1612231299681" timestamp="1527558" timestamp2="1527558">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2510" _type="InsertStringCommand" date="Mon Feb 01 21:27:07 EST 2021" starttimestamp="1612231299681" timestamp="1527581" timestamp2="1527581">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2511" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:27:07 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1527627" />
  <Command __id="2514" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:27:08 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1528857" />
  <Command __id="2517" _type="InsertStringCommand" date="Mon Feb 01 21:27:08 EST 2021" starttimestamp="1612231299681" timestamp="1528994" timestamp2="1528994">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2518" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 21:27:10 EST 2021" starttimestamp="1612231299681" timestamp="1531116" />
  <Command __id="2520" _type="InsertStringCommand" date="Mon Feb 01 21:27:11 EST 2021" starttimestamp="1612231299681" timestamp="1531624" timestamp2="1531624">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2425" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:26:46 EST 2021" docASTNodeCount="3416" docActiveCodeLength="20736" docExpressionCount="2334" docLength="21824" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1507045">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private AJoiner joiner;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		joiner = new AJoiner(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				joiner.finish();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						joiner.finish();¶						return;¶					}¶					for (File file : logs) {¶						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶						if (commands.size() < 2) {¶							continue;¶						}¶						List<EHICommand> newCommands = new ArrayList<>();¶						EHICommand last = null;¶						EHICommand cur = null;¶						for (EHICommand command : commands) {¶							if (cur == null) {¶								cur = command;¶								newCommands.add(command);¶							} else {¶								last = cur;¶								cur = command;¶								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶								if (rest >= 1*ONE_SECOND) {¶									String range = "";¶									if (rest < 2*ONE_SECOND) {¶										range = "1s-2s";¶									} else if (rest < 5*ONE_SECOND) {¶										range = "2s-5s";¶									} else if (rest < 10*ONE_SECOND) {¶										range = "5s-10s";¶									} else if (rest < 20*ONE_SECOND) {¶										range = "10s-20s";¶									} else if (rest < 30*ONE_SECOND) {¶										range = "20s-30s";¶									} else if (rest < ONE_MIN) {¶										range = "30s-1m";¶									} else if (rest < TWO_MIN) {¶										range = "1m-2m";¶									} else if (rest < FIVE_MIN) {¶										range = "2m-5m";¶									} else if (rest < TEN_MIN) {¶										range = "5m-10m";¶									} else if (rest < 3*TEN_MIN) {¶										range = "10m-30m";¶									} else if (rest < 6*TEN_MIN) {¶										range = "30m-60m";¶									} else {¶										range = ">1h";¶									}¶									PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶									rCommnad.setStartTimestamp(last.getStartTimestamp());¶									rCommnad.setTimestamp(last.getTimestamp()+1);¶									newCommands.add(rCommnad);¶								} ¶								newCommands.add(command);¶							}¶						}¶						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶						for (EHICommand c : newCommands) {¶							logContent += c.persist();¶						}¶						logContent += XML_FILE_ENDING;¶						try {¶							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶							if (newLog.exists()) {¶								newLog.delete();¶							}¶							newLog.getParentFile().mkdirs();¶							newLog.createNewFile();¶							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶							System.out.println("Writing to file " + newLog.getPath());¶							writer.write(logContent);¶							writer.close();¶							System.out.println("Finished writing to file " + newLog.getPath());¶						} catch (IOException e) {¶							// TODO Auto-generated catch block¶							e.printStackTrace();¶						}¶					}¶					synchronized (this) {¶						threadCount--;¶					}¶					joiner.finish();¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		joiner.join();¶		System.exit(0);¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2428" _type="Replace" date="Mon Feb 01 21:26:52 EST 2021" docASTNodeCount="3410" docActiveCodeLength="20722" docExpressionCount="2332" docLength="21810" endLine="57" insertionLength="1" int_docASTNodeCount="3411" int_docActiveCodeLength="20721" int_docExpressionCount="2332" int_docLength="21809" length="15" offset="2754" startLine="57" starttimestamp="1612231299681" timestamp="1512899">
    <deletedText><![CDATA[AJoiner joiner;]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2430" _type="Insert" date="Mon Feb 01 21:26:52 EST 2021" docASTNodeCount="3410" docActiveCodeLength="20726" docExpressionCount="2332" docLength="21814" length="4" offset="2755" repeat="4" starttimestamp="1612231299681" timestamp="1512948" timestamp2="1513295">
    <text><![CDATA[ound]]></text>
  </DocumentChange>
  <DocumentChange __id="2437" _type="Replace" date="Mon Feb 01 21:26:53 EST 2021" docASTNodeCount="3410" docActiveCodeLength="20735" docExpressionCount="2332" docLength="21823" endLine="57" insertionLength="14" int_docASTNodeCount="3411" int_docActiveCodeLength="20721" int_docExpressionCount="2332" int_docLength="21809" length="5" offset="2754" startLine="57" starttimestamp="1612231299681" timestamp="1513988">
    <deletedText><![CDATA[cound]]></deletedText>
    <insertedText><![CDATA[CountDownLatch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2438" _type="Delete" date="Mon Feb 01 21:26:53 EST 2021" docASTNodeCount="3410" docActiveCodeLength="20733" docExpressionCount="2332" docLength="21821" endLine="14" length="2" offset="354" startLine="13" starttimestamp="1612231299681" timestamp="1513999">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="2439" _type="Insert" date="Mon Feb 01 21:26:53 EST 2021" docASTNodeCount="3418" docActiveCodeLength="20782" docExpressionCount="2339" docLength="21870" length="49" offset="354" repeat="3" starttimestamp="1612231299681" timestamp="1514016" timestamp2="1514032">
    <text><![CDATA[
import java.util.concurrent.CountDownLatch;

]]></text>
  </DocumentChange>
  <DocumentChange __id="2443" _type="Insert" date="Mon Feb 01 21:26:53 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20789" docExpressionCount="2341" docLength="21877" length="7" offset="2815" repeat="7" starttimestamp="1612231299681" timestamp="1514217" timestamp2="1515298">
    <text><![CDATA[ latch;]]></text>
  </DocumentChange>
  <DocumentChange __id="2459" _type="Replace" date="Mon Feb 01 21:26:59 EST 2021" docASTNodeCount="3417" docActiveCodeLength="20748" docExpressionCount="2335" docLength="21836" endLine="80" insertionLength="1" int_docASTNodeCount="3415" int_docActiveCodeLength="20747" int_docExpressionCount="2334" int_docLength="21835" length="42" offset="3368" startLine="79" starttimestamp="1612231299681" timestamp="1519692">
    <deletedText><![CDATA[		joiner = new AJoiner(students.length);
]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2462" _type="Insert" date="Mon Feb 01 21:26:59 EST 2021" docASTNodeCount="3417" docActiveCodeLength="20749" docExpressionCount="2335" docLength="21837" length="1" offset="3369" starttimestamp="1612231299681" timestamp="1519905">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2464" _type="Delete" date="Mon Feb 01 21:27:00 EST 2021" docASTNodeCount="3415" docActiveCodeLength="20747" docExpressionCount="2334" docLength="21835" endLine="79" length="2" offset="3368" repeat="2" startLine="79" starttimestamp="1612231299681" timestamp="1521239" timestamp2="1521369">
    <text><![CDATA[la]]></text>
  </DocumentChange>
  <DocumentChange __id="2468" _type="Replace" date="Mon Feb 01 21:27:01 EST 2021" docASTNodeCount="3415" docActiveCodeLength="20749" docExpressionCount="2334" docLength="21837" endLine="79" insertionLength="4" int_docASTNodeCount="3415" int_docActiveCodeLength="20745" int_docExpressionCount="2334" int_docLength="21833" length="2" offset="3368" startLine="79" starttimestamp="1612231299681" timestamp="1521792">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2471" _type="Insert" date="Mon Feb 01 21:27:02 EST 2021" docASTNodeCount="3417" docActiveCodeLength="20752" docExpressionCount="2335" docLength="21840" length="3" offset="3368" repeat="2" starttimestamp="1612231299681" timestamp="1522373" timestamp2="1522977">
    <text><![CDATA[		a]]></text>
  </DocumentChange>
  <DocumentChange __id="2476" _type="Delete" date="Mon Feb 01 21:27:03 EST 2021" docASTNodeCount="3415" docActiveCodeLength="20751" docExpressionCount="2334" docLength="21839" endLine="79" length="1" offset="3370" startLine="79" starttimestamp="1612231299681" timestamp="1523426">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="2477" _type="Insert" date="Mon Feb 01 21:27:03 EST 2021" docASTNodeCount="3417" docActiveCodeLength="20753" docExpressionCount="2335" docLength="21841" length="2" offset="3370" repeat="2" starttimestamp="1612231299681" timestamp="1523652" timestamp2="1523735">
    <text><![CDATA[la]]></text>
  </DocumentChange>
  <DocumentChange __id="2480" _type="Replace" date="Mon Feb 01 21:27:03 EST 2021" docASTNodeCount="3417" docActiveCodeLength="20778" docExpressionCount="2335" docLength="21866" endLine="79" insertionLength="27" int_docASTNodeCount="3415" int_docActiveCodeLength="20751" int_docExpressionCount="2334" int_docLength="21839" length="2" offset="3370" startLine="79" starttimestamp="1612231299681" timestamp="1523923">
    <deletedText><![CDATA[la]]></deletedText>
    <insertedText><![CDATA[lastPredictionWasDifficulty]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2482" _type="Replace" date="Mon Feb 01 21:27:04 EST 2021" docASTNodeCount="3417" docActiveCodeLength="20753" docExpressionCount="2335" docLength="21841" endLine="79" insertionLength="2" int_docASTNodeCount="3415" int_docActiveCodeLength="20751" int_docExpressionCount="2334" int_docLength="21839" length="27" offset="3370" startLine="79" starttimestamp="1612231299681" timestamp="1524605">
    <deletedText><![CDATA[lastPredictionWasDifficulty]]></deletedText>
    <insertedText><![CDATA[la]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2484" _type="Replace" date="Mon Feb 01 21:27:04 EST 2021" docASTNodeCount="3417" docActiveCodeLength="20752" docExpressionCount="2335" docLength="21840" endLine="79" insertionLength="1" int_docASTNodeCount="3415" int_docActiveCodeLength="20751" int_docExpressionCount="2334" int_docLength="21839" length="2" offset="3370" startLine="79" starttimestamp="1612231299681" timestamp="1524991">
    <deletedText><![CDATA[la]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2486" _type="Insert" date="Mon Feb 01 21:27:04 EST 2021" docASTNodeCount="3421" docActiveCodeLength="20767" docExpressionCount="2338" docLength="21855" length="15" offset="3371" repeat="15" starttimestamp="1612231299681" timestamp="1525033" timestamp2="1527891">
    <text><![CDATA[atch = new coun]]></text>
  </DocumentChange>
  <DocumentChange __id="2515" _type="Replace" date="Mon Feb 01 21:27:08 EST 2021" docASTNodeCount="3421" docActiveCodeLength="20779" docExpressionCount="2338" docLength="21867" endLine="79" insertionLength="14" int_docASTNodeCount="3421" int_docActiveCodeLength="20765" int_docExpressionCount="2338" int_docLength="21853" length="2" offset="3382" startLine="79" starttimestamp="1612231299681" timestamp="1528864">
    <deletedText><![CDATA[co]]></deletedText>
    <insertedText><![CDATA[CountDownLatch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2516" _type="Replace" date="Mon Feb 01 21:27:08 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20784" docExpressionCount="2339" docLength="21872" endLine="79" insertionLength="7" int_docASTNodeCount="3421" int_docActiveCodeLength="20777" int_docExpressionCount="2338" int_docLength="21865" length="2" offset="3396" startLine="79" starttimestamp="1612231299681" timestamp="1528873">
    <deletedText><![CDATA[un]]></deletedText>
    <insertedText><![CDATA[(count)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2519" _type="Insert" date="Mon Feb 01 21:27:11 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20785" docExpressionCount="2339" docLength="21873" length="1" offset="3403" starttimestamp="1612231299681" timestamp="1531616">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="2521" _type="MoveCaretCommand" caretOffset="3398" date="Mon Feb 01 21:27:13 EST 2021" docOffset="3398" starttimestamp="1612231299681" timestamp="1533779" />
  <Command __id="2522" _type="SelectTextCommand" caretOffset="3402" date="Mon Feb 01 21:27:13 EST 2021" end="3402" start="3397" starttimestamp="1612231299681" timestamp="1533937" />
  <DocumentChange __id="2523" _type="Replace" date="Mon Feb 01 21:27:34 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20781" docExpressionCount="2339" docLength="21869" endLine="79" insertionLength="1" int_docASTNodeCount="3421" int_docActiveCodeLength="20780" int_docExpressionCount="2338" int_docLength="21868" length="5" offset="3397" startLine="79" starttimestamp="1612231299681" timestamp="1555228">
    <deletedText><![CDATA[count]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <Command __id="2524" _type="InsertStringCommand" date="Mon Feb 01 21:27:34 EST 2021" starttimestamp="1612231299681" timestamp="1555238" timestamp2="1555238">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2525" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:27:34 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1555273" />
  <DocumentChange __id="2526" _type="Insert" date="Mon Feb 01 21:27:35 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20784" docExpressionCount="2339" docLength="21872" length="3" offset="3398" repeat="3" starttimestamp="1612231299681" timestamp="1555491" timestamp2="1555847">
    <text><![CDATA[tud]]></text>
  </DocumentChange>
  <Command __id="2529" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:27:35 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1556275" />
  <DocumentChange __id="2530" _type="Replace" date="Mon Feb 01 21:27:35 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20788" docExpressionCount="2339" docLength="21876" endLine="79" insertionLength="8" int_docASTNodeCount="3421" int_docActiveCodeLength="20780" int_docExpressionCount="2338" int_docLength="21868" length="4" offset="3397" startLine="79" starttimestamp="1612231299681" timestamp="1556280">
    <deletedText><![CDATA[stud]]></deletedText>
    <insertedText><![CDATA[students]]></insertedText>
  </DocumentChange>
  <Command __id="2531" _type="InsertStringCommand" date="Mon Feb 01 21:27:35 EST 2021" starttimestamp="1612231299681" timestamp="1556287" timestamp2="1556287">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2532" _type="Insert" date="Mon Feb 01 21:27:36 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20792" docExpressionCount="2341" docLength="21880" length="4" offset="3405" repeat="4" starttimestamp="1612231299681" timestamp="1556500" timestamp2="1557771">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <Command __id="2533" _type="InsertStringCommand" date="Mon Feb 01 21:27:36 EST 2021" starttimestamp="1612231299681" timestamp="1556504" timestamp2="1556504">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2534" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:27:36 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1556548" />
  <DocumentChange __id="2538" _type="Delete" date="Mon Feb 01 21:27:38 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20789" docExpressionCount="2340" docLength="21877" endLine="79" length="3" offset="3406" repeat="3" startLine="79" starttimestamp="1612231299681" timestamp="1558333" timestamp2="1558576">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <DocumentChange __id="2541" _type="Insert" date="Mon Feb 01 21:27:38 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20791" docExpressionCount="2341" docLength="21879" length="2" offset="3406" repeat="2" starttimestamp="1612231299681" timestamp="1558762" timestamp2="1558868">
    <text><![CDATA[le]]></text>
  </DocumentChange>
  <Command __id="2543" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:27:38 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1558985" />
  <Command __id="2545" _type="InsertStringCommand" date="Mon Feb 01 21:27:38 EST 2021" starttimestamp="1612231299681" timestamp="1558999" timestamp2="1558999">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2544" _type="Replace" date="Mon Feb 01 21:27:38 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20795" docExpressionCount="2341" docLength="21883" endLine="79" insertionLength="6" int_docASTNodeCount="3424" int_docActiveCodeLength="20789" int_docExpressionCount="2340" int_docLength="21877" length="2" offset="3406" startLine="79" starttimestamp="1612231299681" timestamp="1558990">
    <deletedText><![CDATA[le]]></deletedText>
    <insertedText><![CDATA[length]]></insertedText>
  </DocumentChange>
  <Command __id="2546" _type="SelectTextCommand" caretOffset="3609" date="Mon Feb 01 21:27:41 EST 2021" end="3609" start="3593" starttimestamp="1612231299681" timestamp="1562079" />
  <DocumentChange __id="2547" _type="Replace" date="Mon Feb 01 21:27:48 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20780" docExpressionCount="2339" docLength="21868" endLine="84" insertionLength="1" int_docASTNodeCount="3420" int_docActiveCodeLength="20779" int_docExpressionCount="2338" int_docLength="21867" length="16" offset="3593" startLine="84" starttimestamp="1612231299681" timestamp="1568569">
    <deletedText><![CDATA[joiner.finish();]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <Command __id="2548" _type="InsertStringCommand" date="Mon Feb 01 21:27:48 EST 2021" starttimestamp="1612231299681" timestamp="1568576" timestamp2="1568576">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2549" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:27:48 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1568614" />
  <DocumentChange __id="2550" _type="Insert" date="Mon Feb 01 21:27:48 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20782" docExpressionCount="2339" docLength="21870" length="2" offset="3594" repeat="2" starttimestamp="1612231299681" timestamp="1568779" timestamp2="1568790">
    <text><![CDATA[at]]></text>
  </DocumentChange>
  <Command __id="2552" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:27:48 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1568886" />
  <DocumentChange __id="2553" _type="Replace" date="Mon Feb 01 21:27:48 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20784" docExpressionCount="2339" docLength="21872" endLine="84" insertionLength="5" int_docASTNodeCount="3420" int_docActiveCodeLength="20779" int_docExpressionCount="2338" int_docLength="21867" length="3" offset="3593" startLine="84" starttimestamp="1612231299681" timestamp="1568891">
    <deletedText><![CDATA[lat]]></deletedText>
    <insertedText><![CDATA[latch]]></insertedText>
  </DocumentChange>
  <Command __id="2554" _type="InsertStringCommand" date="Mon Feb 01 21:27:48 EST 2021" starttimestamp="1612231299681" timestamp="1568899" timestamp2="1568899">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2555" _type="Insert" date="Mon Feb 01 21:27:48 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20788" docExpressionCount="2341" docLength="21876" length="4" offset="3598" repeat="4" starttimestamp="1612231299681" timestamp="1569146" timestamp2="1569854">
    <text><![CDATA[.cou]]></text>
  </DocumentChange>
  <Command __id="2556" _type="InsertStringCommand" date="Mon Feb 01 21:27:48 EST 2021" starttimestamp="1612231299681" timestamp="1569150" timestamp2="1569150">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2557" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:27:48 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1569194" />
  <Command __id="2561" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:27:49 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1570054" />
  <Command __id="2563" _type="InsertStringCommand" date="Mon Feb 01 21:27:49 EST 2021" starttimestamp="1612231299681" timestamp="1570066" timestamp2="1570066">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2564" _type="InsertStringCommand" date="Mon Feb 01 21:27:49 EST 2021" starttimestamp="1612231299681" timestamp="1570286" timestamp2="1570286">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2565" _type="SelectTextCommand" caretOffset="4104" date="Mon Feb 01 21:27:56 EST 2021" end="4104" start="4088" starttimestamp="1612231299681" timestamp="1576598" />
  <Command __id="2567" _type="InsertStringCommand" date="Mon Feb 01 21:27:57 EST 2021" starttimestamp="1612231299681" timestamp="1577508" timestamp2="1577508">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2568" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:27:57 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1577548" />
  <Command __id="2571" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:27:57 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1578084" />
  <Command __id="2573" _type="InsertStringCommand" date="Mon Feb 01 21:27:57 EST 2021" starttimestamp="1612231299681" timestamp="1578192" timestamp2="1578192">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2575" _type="UndoCommand" date="Mon Feb 01 21:27:58 EST 2021" starttimestamp="1612231299681" timestamp="1578679" />
  <Command __id="2577" _type="InsertStringCommand" date="Mon Feb 01 21:27:58 EST 2021" starttimestamp="1612231299681" timestamp="1578913" timestamp2="1578913">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2579" _type="InsertStringCommand" date="Mon Feb 01 21:27:58 EST 2021" starttimestamp="1612231299681" timestamp="1579006" timestamp2="1579006">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2580" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:27:58 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1579049" />
  <Command __id="2594" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:28:01 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1581452" />
  <Command __id="2596" _type="InsertStringCommand" date="Mon Feb 01 21:28:01 EST 2021" starttimestamp="1612231299681" timestamp="1581466" timestamp2="1581466">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2598" _type="InsertStringCommand" date="Mon Feb 01 21:28:01 EST 2021" starttimestamp="1612231299681" timestamp="1581675" timestamp2="1581675">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2599" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:28:01 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1581719" />
  <Command __id="2603" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:28:02 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1582764" />
  <Command __id="2605" _type="InsertStringCommand" date="Mon Feb 01 21:28:02 EST 2021" starttimestamp="1612231299681" timestamp="1582779" timestamp2="1582779">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2606" _type="MoveCaretCommand" caretOffset="4129" date="Mon Feb 01 21:28:22 EST 2021" docOffset="4129" starttimestamp="1612231299681" timestamp="1602326" />
  <Command __id="2608" _type="InsertStringCommand" date="Mon Feb 01 21:28:22 EST 2021" starttimestamp="1612231299681" timestamp="1603155" timestamp2="1603155">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2610" _type="InsertStringCommand" date="Mon Feb 01 21:28:23 EST 2021" starttimestamp="1612231299681" timestamp="1603379" timestamp2="1603379">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2611" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:28:23 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1603423" />
  <DocumentChange __id="2562" _type="Replace" date="Mon Feb 01 21:27:49 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20797" docExpressionCount="2341" docLength="21885" endLine="84" insertionLength="12" int_docASTNodeCount="3422" int_docActiveCodeLength="20785" int_docExpressionCount="2339" int_docLength="21873" length="3" offset="3599" startLine="84" starttimestamp="1612231299681" timestamp="1570060">
    <deletedText><![CDATA[cou]]></deletedText>
    <insertedText><![CDATA[countDown();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2566" _type="Replace" date="Mon Feb 01 21:27:57 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20782" docExpressionCount="2339" docLength="21870" endLine="99" insertionLength="1" int_docASTNodeCount="3420" int_docActiveCodeLength="20781" int_docExpressionCount="2338" int_docLength="21869" length="16" offset="4088" startLine="99" starttimestamp="1612231299681" timestamp="1577502">
    <deletedText><![CDATA[joiner.finish();]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2569" _type="Insert" date="Mon Feb 01 21:27:57 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20784" docExpressionCount="2339" docLength="21872" length="2" offset="4089" repeat="2" starttimestamp="1612231299681" timestamp="1577737" timestamp2="1577770">
    <text><![CDATA[ou]]></text>
  </DocumentChange>
  <DocumentChange __id="2572" _type="Replace" date="Mon Feb 01 21:27:57 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20811" docExpressionCount="2341" docLength="21899" endLine="99" insertionLength="30" int_docASTNodeCount="3420" int_docActiveCodeLength="20781" int_docExpressionCount="2338" int_docLength="21869" length="3" offset="4088" startLine="99" starttimestamp="1612231299681" timestamp="1578090">
    <deletedText><![CDATA[cou]]></deletedText>
    <insertedText><![CDATA[countConsecutiveCommands(list)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2574" _type="Replace" date="Mon Feb 01 21:27:58 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20784" docExpressionCount="2339" docLength="21872" endLine="99" insertionLength="3" int_docASTNodeCount="3420" int_docActiveCodeLength="20781" int_docExpressionCount="2338" int_docLength="21869" length="30" offset="4088" startLine="99" starttimestamp="1612231299681" timestamp="1578631">
    <deletedText><![CDATA[countConsecutiveCommands(list)]]></deletedText>
    <insertedText><![CDATA[cou]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2576" _type="Replace" date="Mon Feb 01 21:27:58 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20782" docExpressionCount="2339" docLength="21870" endLine="99" insertionLength="1" int_docASTNodeCount="3420" int_docActiveCodeLength="20781" int_docExpressionCount="2338" int_docLength="21869" length="3" offset="4088" startLine="99" starttimestamp="1612231299681" timestamp="1578909">
    <deletedText><![CDATA[cou]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2578" _type="Insert" date="Mon Feb 01 21:27:58 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20784" docExpressionCount="2339" docLength="21872" length="2" offset="4089" repeat="2" starttimestamp="1612231299681" timestamp="1579001" timestamp2="1579226">
    <text><![CDATA[ou]]></text>
  </DocumentChange>
  <DocumentChange __id="2582" _type="Delete" date="Mon Feb 01 21:27:59 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20782" docExpressionCount="2339" docLength="21870" endLine="99" length="2" offset="4089" repeat="2" startLine="99" starttimestamp="1612231299681" timestamp="1579330" timestamp2="1579451">
    <text><![CDATA[ou]]></text>
  </DocumentChange>
  <DocumentChange __id="2584" _type="Insert" date="Mon Feb 01 21:27:59 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20785" docExpressionCount="2339" docLength="21873" length="3" offset="4089" repeat="3" starttimestamp="1612231299681" timestamp="1579657" timestamp2="1579818">
    <text><![CDATA[lat]]></text>
  </DocumentChange>
  <DocumentChange __id="2587" _type="Delete" date="Mon Feb 01 21:27:59 EST 2021" docASTNodeCount="3420" docActiveCodeLength="20781" docExpressionCount="2338" docLength="21869" endLine="99" length="4" offset="4088" repeat="4" startLine="99" starttimestamp="1612231299681" timestamp="1580046" timestamp2="1580652">
    <text><![CDATA[clat]]></text>
  </DocumentChange>
  <DocumentChange __id="2591" _type="Insert" date="Mon Feb 01 21:28:00 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20784" docExpressionCount="2339" docLength="21872" length="3" offset="4088" repeat="3" starttimestamp="1612231299681" timestamp="1580858" timestamp2="1580990">
    <text><![CDATA[lat]]></text>
  </DocumentChange>
  <DocumentChange __id="2595" _type="Replace" date="Mon Feb 01 21:28:01 EST 2021" docASTNodeCount="3422" docActiveCodeLength="20786" docExpressionCount="2339" docLength="21874" endLine="99" insertionLength="5" int_docASTNodeCount="3420" int_docActiveCodeLength="20781" int_docExpressionCount="2338" int_docLength="21869" length="3" offset="4088" startLine="99" starttimestamp="1612231299681" timestamp="1581457">
    <deletedText><![CDATA[lat]]></deletedText>
    <insertedText><![CDATA[latch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2597" _type="Insert" date="Mon Feb 01 21:28:01 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20790" docExpressionCount="2341" docLength="21878" length="4" offset="4093" repeat="4" starttimestamp="1612231299681" timestamp="1581671" timestamp2="1582349">
    <text><![CDATA[.cou]]></text>
  </DocumentChange>
  <DocumentChange __id="2604" _type="Replace" date="Mon Feb 01 21:28:02 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20799" docExpressionCount="2341" docLength="21887" endLine="99" insertionLength="12" int_docASTNodeCount="3422" int_docActiveCodeLength="20787" int_docExpressionCount="2339" int_docLength="21875" length="3" offset="4094" startLine="99" starttimestamp="1612231299681" timestamp="1582769">
    <deletedText><![CDATA[cou]]></deletedText>
    <insertedText><![CDATA[countDown();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2607" _type="Insert" date="Mon Feb 01 21:28:22 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20809" docExpressionCount="2341" docLength="21897" length="10" offset="4129" repeat="4" starttimestamp="1612231299681" timestamp="1603144" timestamp2="1603807">
    <text><![CDATA[
					try]]></text>
  </DocumentChange>
  <Command __id="2614" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:28:24 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1604981" />
  <Command __id="2615" _type="InsertStringCommand" date="Mon Feb 01 21:28:24 EST 2021" starttimestamp="1612231299681" timestamp="1604986" timestamp2="1604986">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2616" _type="Insert" date="Mon Feb 01 21:28:26 EST 2021" docASTNodeCount="3426" docActiveCodeLength="20811" docExpressionCount="2342" docLength="21899" length="2" offset="4139" repeat="2" starttimestamp="1612231299681" timestamp="1606797" timestamp2="1606954">
    <text><![CDATA[ca]]></text>
  </DocumentChange>
  <DocumentChange __id="2620" _type="Delete" date="Mon Feb 01 21:28:27 EST 2021" docASTNodeCount="3426" docActiveCodeLength="20808" docExpressionCount="2342" docLength="21896" endLine="102" length="3" offset="4138" repeat="3" startLine="102" starttimestamp="1612231299681" timestamp="1607712" timestamp2="1608004">
    <text><![CDATA[yca]]></text>
  </DocumentChange>
  <DocumentChange __id="2623" _type="Insert" date="Mon Feb 01 21:28:28 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20809" docExpressionCount="2341" docLength="21897" length="1" offset="4138" starttimestamp="1612231299681" timestamp="1608548">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="2624" _type="Delete" date="Mon Feb 01 21:28:31 EST 2021" docASTNodeCount="3426" docActiveCodeLength="20808" docExpressionCount="2342" docLength="21896" endLine="102" length="1" offset="4137" startLine="102" starttimestamp="1612231299681" timestamp="1611644">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2617" _type="InsertStringCommand" date="Mon Feb 01 21:28:26 EST 2021" starttimestamp="1612231299681" timestamp="1606803" timestamp2="1606803">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2618" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:28:26 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1606844" />
  <DocumentChange __id="2625" _type="Insert" date="Mon Feb 01 21:28:32 EST 2021" docASTNodeCount="3424" docActiveCodeLength="20809" docExpressionCount="2341" docLength="21897" length="1" offset="4137" starttimestamp="1612231299681" timestamp="1612749">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="2626" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:28:34 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1614474" />
  <Command __id="2628" _type="InsertStringCommand" date="Mon Feb 01 21:28:34 EST 2021" starttimestamp="1612231299681" timestamp="1614498" timestamp2="1614498">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2629" _type="MoveCaretCommand" caretOffset="4221" date="Mon Feb 01 21:28:36 EST 2021" docOffset="4221" starttimestamp="1612231299681" timestamp="1616444" />
  <Command __id="2631" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:28:36 EST 2021" starttimestamp="1612231299681" timestamp="1616978" />
  <Command __id="2633" _type="InsertStringCommand" date="Mon Feb 01 21:28:36 EST 2021" starttimestamp="1612231299681" timestamp="1617183" timestamp2="1617183">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2635" _type="InsertStringCommand" date="Mon Feb 01 21:28:36 EST 2021" starttimestamp="1612231299681" timestamp="1617250" timestamp2="1617250">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2636" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:28:36 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1617293" />
  <Command __id="2643" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:28:39 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1619983" />
  <Command __id="2645" _type="InsertStringCommand" date="Mon Feb 01 21:28:39 EST 2021" starttimestamp="1612231299681" timestamp="1620005" timestamp2="1620005">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2646" _type="SelectTextCommand" caretOffset="7017" date="Mon Feb 01 21:28:49 EST 2021" end="7017" start="4253" starttimestamp="1612231299681" timestamp="1629497" />
  <Command __id="2648" _type="CutCommand" date="Mon Feb 01 21:28:49 EST 2021" starttimestamp="1612231299681" timestamp="1629615" />
  <Command __id="2649" _type="MoveCaretCommand" caretOffset="4141" date="Mon Feb 01 21:28:53 EST 2021" docOffset="4141" starttimestamp="1612231299681" timestamp="1633823" />
  <Command __id="2650" _type="MoveCaretCommand" caretOffset="4149" date="Mon Feb 01 21:28:53 EST 2021" docOffset="4149" starttimestamp="1612231299681" timestamp="1634230" />
  <Command __id="2652" _type="PasteCommand" date="Mon Feb 01 21:28:54 EST 2021" starttimestamp="1612231299681" timestamp="1634434" />
  <Command __id="2653" _type="SelectTextCommand" caretOffset="6989" date="Mon Feb 01 21:28:57 EST 2021" end="6989" start="6912" starttimestamp="1612231299681" timestamp="1637839" />
  <Command __id="2655" _type="CutCommand" date="Mon Feb 01 21:28:57 EST 2021" starttimestamp="1612231299681" timestamp="1638234" />
  <Command __id="2656" _type="MoveCaretCommand" caretOffset="7001" date="Mon Feb 01 21:28:58 EST 2021" docOffset="7001" starttimestamp="1612231299681" timestamp="1638962" />
  <Command __id="2658" _type="PasteCommand" date="Mon Feb 01 21:28:58 EST 2021" starttimestamp="1612231299681" timestamp="1639105" />
  <Command __id="2659" _type="MoveCaretCommand" caretOffset="6975" date="Mon Feb 01 21:28:59 EST 2021" docOffset="6975" starttimestamp="1612231299681" timestamp="1639812" />
  <Command __id="2661" _type="InsertStringCommand" date="Mon Feb 01 21:29:00 EST 2021" starttimestamp="1612231299681" timestamp="1640347" timestamp2="1640347">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2663" _type="InsertStringCommand" date="Mon Feb 01 21:29:00 EST 2021" starttimestamp="1612231299681" timestamp="1640480" timestamp2="1640480">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2664" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:29:00 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1640522" />
  <Command __id="2665" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:29:00 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1640683" />
  <Command __id="2667" _type="InsertStringCommand" date="Mon Feb 01 21:29:00 EST 2021" starttimestamp="1612231299681" timestamp="1640698" timestamp2="1640698">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2669" _type="InsertStringCommand" date="Mon Feb 01 21:29:00 EST 2021" starttimestamp="1612231299681" timestamp="1640749" timestamp2="1640749">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2670" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:29:00 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1640790" />
  <Command __id="2672" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:29:00 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1641017" />
  <Command __id="2674" _type="InsertStringCommand" date="Mon Feb 01 21:29:00 EST 2021" starttimestamp="1612231299681" timestamp="1641031" timestamp2="1641031">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2675" _type="SelectTextCommand" caretOffset="7106" date="Mon Feb 01 21:29:04 EST 2021" end="7106" start="7090" starttimestamp="1612231299681" timestamp="1645200" />
  <Command __id="2677" _type="InsertStringCommand" date="Mon Feb 01 21:29:05 EST 2021" starttimestamp="1612231299681" timestamp="1645761" timestamp2="1645761">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2679" _type="InsertStringCommand" date="Mon Feb 01 21:29:05 EST 2021" starttimestamp="1612231299681" timestamp="1645767" timestamp2="1645767">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2681" _type="InsertStringCommand" date="Mon Feb 01 21:29:05 EST 2021" starttimestamp="1612231299681" timestamp="1645807" timestamp2="1645807">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2682" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:29:05 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1645843" />
  <Command __id="2683" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:29:05 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1645873" />
  <Command __id="2685" _type="InsertStringCommand" date="Mon Feb 01 21:29:05 EST 2021" starttimestamp="1612231299681" timestamp="1645922" timestamp2="1645922">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2686" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:29:05 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1646015" />
  <Command __id="2687" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:29:05 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1646049" />
  <Command __id="2689" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:29:06 EST 2021" starttimestamp="1612231299681" timestamp="1646381" />
  <Command __id="2691" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:29:06 EST 2021" starttimestamp="1612231299681" timestamp="1646523" />
  <Command __id="2693" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:29:06 EST 2021" starttimestamp="1612231299681" timestamp="1646643" />
  <Command __id="2695" _type="InsertStringCommand" date="Mon Feb 01 21:29:06 EST 2021" starttimestamp="1612231299681" timestamp="1646763" timestamp2="1646763">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2697" _type="InsertStringCommand" date="Mon Feb 01 21:29:06 EST 2021" starttimestamp="1612231299681" timestamp="1646841" timestamp2="1646841">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2698" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:29:06 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1646935" />
  <Command __id="2699" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:29:06 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1647075" />
  <Command __id="2701" _type="InsertStringCommand" date="Mon Feb 01 21:29:06 EST 2021" starttimestamp="1612231299681" timestamp="1647089" timestamp2="1647089">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2703" _type="InsertStringCommand" date="Mon Feb 01 21:29:07 EST 2021" starttimestamp="1612231299681" timestamp="1647421" timestamp2="1647421">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2704" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:29:07 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1647465" />
  <DocumentChange __id="2627" _type="Replace" date="Mon Feb 01 21:28:34 EST 2021" docASTNodeCount="3434" docActiveCodeLength="20866" docExpressionCount="2344" docLength="21979" endLine="102" insertionLength="84" int_docASTNodeCount="3426" int_docActiveCodeLength="20807" int_docExpressionCount="2342" int_docLength="21895" length="2" offset="4136" startLine="102" starttimestamp="1612231299681" timestamp="1614483">
    <deletedText><![CDATA[tr]]></deletedText>
    <insertedText><![CDATA[try {
						
					} catch (Exception e) {
						// TODO: handle exception
					}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2630" _type="Delete" date="Mon Feb 01 21:28:36 EST 2021" docASTNodeCount="3432" docActiveCodeLength="20865" docExpressionCount="2343" docLength="21978" endLine="106" length="1" offset="4220" startLine="106" starttimestamp="1612231299681" timestamp="1616972">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <DocumentChange __id="2632" _type="Insert" date="Mon Feb 01 21:28:36 EST 2021" docASTNodeCount="3430" docActiveCodeLength="20873" docExpressionCount="2343" docLength="21986" length="8" offset="4220" repeat="8" starttimestamp="1612231299681" timestamp="1617176" timestamp2="1618862">
    <text><![CDATA[ finally]]></text>
  </DocumentChange>
  <DocumentChange __id="2644" _type="Replace" date="Mon Feb 01 21:28:39 EST 2021" docASTNodeCount="3433" docActiveCodeLength="20891" docExpressionCount="2343" docLength="22004" endLine="106" insertionLength="25" int_docASTNodeCount="3432" int_docActiveCodeLength="20866" int_docExpressionCount="2343" int_docLength="21979" length="7" offset="4221" startLine="106" starttimestamp="1612231299681" timestamp="1619992">
    <deletedText><![CDATA[finally]]></deletedText>
    <insertedText><![CDATA[finally {
						
					}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2647" _type="Delete" date="Mon Feb 01 21:28:49 EST 2021" docASTNodeCount="3022" docActiveCodeLength="18161" docExpressionCount="2057" docLength="19240" endLine="185" length="2764" offset="4253" startLine="109" starttimestamp="1612231299681" timestamp="1629592">
    <text><![CDATA[for (File file : logs) {
						List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
						if (commands.size() < 2) {
							continue;
						}
						List<EHICommand> newCommands = new ArrayList<>();
						EHICommand last = null;
						EHICommand cur = null;
						for (EHICommand command : commands) {
							if (cur == null) {
								cur = command;
								newCommands.add(command);
							} else {
								last = cur;
								cur = command;
								long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
								if (rest >= 1*ONE_SECOND) {
									String range = "";
									if (rest < 2*ONE_SECOND) {
										range = "1s-2s";
									} else if (rest < 5*ONE_SECOND) {
										range = "2s-5s";
									} else if (rest < 10*ONE_SECOND) {
										range = "5s-10s";
									} else if (rest < 20*ONE_SECOND) {
										range = "10s-20s";
									} else if (rest < 30*ONE_SECOND) {
										range = "20s-30s";
									} else if (rest < ONE_MIN) {
										range = "30s-1m";
									} else if (rest < TWO_MIN) {
										range = "1m-2m";
									} else if (rest < FIVE_MIN) {
										range = "2m-5m";
									} else if (rest < TEN_MIN) {
										range = "5m-10m";
									} else if (rest < 3*TEN_MIN) {
										range = "10m-30m";
									} else if (rest < 6*TEN_MIN) {
										range = "30m-60m";
									} else {
										range = ">1h";
									}
									PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
									rCommnad.setStartTimestamp(last.getStartTimestamp());
									rCommnad.setTimestamp(last.getTimestamp()+1);
									newCommands.add(rCommnad);
								} 
								newCommands.add(command);
							}
						}
						String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
						for (EHICommand c : newCommands) {
							logContent += c.persist();
						}
						logContent += XML_FILE_ENDING;
						try {
							File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
							if (newLog.exists()) {
								newLog.delete();
							}
							newLog.getParentFile().mkdirs();
							newLog.createNewFile();
							BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
							System.out.println("Writing to file " + newLog.getPath());
							writer.write(logContent);
							writer.close();
							System.out.println("Finished writing to file " + newLog.getPath());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					synchronized (this) {
						threadCount--;
					}
					joiner.finish();]]></text>
  </DocumentChange>
  <DocumentChange __id="2651" _type="Replace" date="Mon Feb 01 21:28:54 EST 2021" docASTNodeCount="3433" docActiveCodeLength="20967" docExpressionCount="2343" docLength="22080" endLine="103" insertionLength="2846" int_docASTNodeCount="3022" int_docActiveCodeLength="18155" int_docExpressionCount="2057" int_docLength="19234" length="6" offset="4143" startLine="103" starttimestamp="1612231299681" timestamp="1634401">
    <deletedText><![CDATA[						]]></deletedText>
    <insertedText><![CDATA[						for (File file : logs) {
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
									if (rest >= 1*ONE_SECOND) {
										String range = "";
										if (rest < 2*ONE_SECOND) {
											range = "1s-2s";
										} else if (rest < 5*ONE_SECOND) {
											range = "2s-5s";
										} else if (rest < 10*ONE_SECOND) {
											range = "5s-10s";
										} else if (rest < 20*ONE_SECOND) {
											range = "10s-20s";
										} else if (rest < 30*ONE_SECOND) {
											range = "20s-30s";
										} else if (rest < ONE_MIN) {
											range = "30s-1m";
										} else if (rest < TWO_MIN) {
											range = "1m-2m";
										} else if (rest < FIVE_MIN) {
											range = "2m-5m";
										} else if (rest < TEN_MIN) {
											range = "5m-10m";
										} else if (rest < 3*TEN_MIN) {
											range = "10m-30m";
										} else if (rest < 6*TEN_MIN) {
											range = "30m-60m";
										} else {
											range = ">1h";
										}
										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
										rCommnad.setStartTimestamp(last.getStartTimestamp());
										rCommnad.setTimestamp(last.getTimestamp()+1);
										newCommands.add(rCommnad);
									} 
									newCommands.add(command);
								}
							}
							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						synchronized (this) {
							threadCount--;
						}
						joiner.finish();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2654" _type="Delete" date="Mon Feb 01 21:28:57 EST 2021" docASTNodeCount="3423" docActiveCodeLength="20890" docExpressionCount="2337" docLength="22003" endLine="179" length="77" offset="6912" startLine="176" starttimestamp="1612231299681" timestamp="1638226">
    <text><![CDATA[synchronized (this) {
							threadCount--;
						}
						joiner.finish();]]></text>
  </DocumentChange>
  <DocumentChange __id="2657" _type="Replace" date="Mon Feb 01 21:28:58 EST 2021" docASTNodeCount="3433" docActiveCodeLength="20967" docExpressionCount="2343" docLength="22080" endLine="180" insertionLength="83" int_docASTNodeCount="3423" int_docActiveCodeLength="20884" int_docExpressionCount="2337" int_docLength="21997" length="6" offset="6995" startLine="180" starttimestamp="1612231299681" timestamp="1639091">
    <deletedText><![CDATA[						]]></deletedText>
    <insertedText><![CDATA[						synchronized (this) {
							threadCount--;
						}
						joiner.finish();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2660" _type="Insert" date="Mon Feb 01 21:29:00 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20976" docExpressionCount="2004" docLength="22089" length="9" offset="6975" repeat="2" starttimestamp="1612231299681" timestamp="1640334" timestamp2="1640474">
    <text><![CDATA[
						e]]></text>
  </DocumentChange>
  <DocumentChange __id="2666" _type="Replace" date="Mon Feb 01 21:29:00 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20977" docExpressionCount="2004" docLength="22090" endLine="179" insertionLength="2" int_docASTNodeCount="3433" int_docActiveCodeLength="20975" int_docExpressionCount="2343" int_docLength="22088" length="1" offset="6983" startLine="179" starttimestamp="1612231299681" timestamp="1640688">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA[e.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2668" _type="Insert" date="Mon Feb 01 21:29:00 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20979" docExpressionCount="2004" docLength="22092" length="2" offset="6985" repeat="2" starttimestamp="1612231299681" timestamp="1640743" timestamp2="1640887">
    <text><![CDATA[pr]]></text>
  </DocumentChange>
  <DocumentChange __id="2673" _type="Replace" date="Mon Feb 01 21:29:00 EST 2021" docASTNodeCount="3437" docActiveCodeLength="20995" docExpressionCount="2346" docLength="22108" endLine="179" insertionLength="18" int_docASTNodeCount="2926" int_docActiveCodeLength="20977" int_docExpressionCount="2004" int_docLength="22090" length="2" offset="6985" startLine="179" starttimestamp="1612231299681" timestamp="1641022">
    <deletedText><![CDATA[pr]]></deletedText>
    <insertedText><![CDATA[printStackTrace();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2676" _type="Replace" date="Mon Feb 01 21:29:05 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20980" docExpressionCount="2004" docLength="22093" endLine="184" insertionLength="1" int_docASTNodeCount="3433" int_docActiveCodeLength="20979" int_docExpressionCount="2343" int_docLength="22092" length="16" offset="7090" startLine="184" starttimestamp="1612231299681" timestamp="1645753">
    <deletedText><![CDATA[joiner.finish();]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2678" _type="Insert" date="Mon Feb 01 21:29:05 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20983" docExpressionCount="2004" docLength="22096" length="3" offset="7091" repeat="3" starttimestamp="1612231299681" timestamp="1645764" timestamp2="1645918">
    <text><![CDATA[kat]]></text>
  </DocumentChange>
  <DocumentChange __id="2688" _type="Delete" date="Mon Feb 01 21:29:06 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20980" docExpressionCount="2004" docLength="22093" endLine="184" length="3" offset="7091" repeat="3" startLine="184" starttimestamp="1612231299681" timestamp="1646377" timestamp2="1646640">
    <text><![CDATA[kat]]></text>
  </DocumentChange>
  <DocumentChange __id="2694" _type="Insert" date="Mon Feb 01 21:29:06 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20982" docExpressionCount="2004" docLength="22095" length="2" offset="7091" repeat="2" starttimestamp="1612231299681" timestamp="1646757" timestamp2="1646837">
    <text><![CDATA[at]]></text>
  </DocumentChange>
  <DocumentChange __id="2700" _type="Replace" date="Mon Feb 01 21:29:06 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20984" docExpressionCount="2004" docLength="22097" endLine="184" insertionLength="5" int_docASTNodeCount="3433" int_docActiveCodeLength="20979" int_docExpressionCount="2343" int_docLength="22092" length="3" offset="7090" startLine="184" starttimestamp="1612231299681" timestamp="1647080">
    <deletedText><![CDATA[lat]]></deletedText>
    <insertedText><![CDATA[latch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2702" _type="Insert" date="Mon Feb 01 21:29:07 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20985" docExpressionCount="2004" docLength="22098" length="1" offset="7095" starttimestamp="1612231299681" timestamp="1647416">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="2706" _type="Insert" date="Mon Feb 01 21:29:11 EST 2021" docASTNodeCount="3437" docActiveCodeLength="20993" docExpressionCount="2346" docLength="22106" length="8" offset="7096" starttimestamp="1612231299681" timestamp="1651671">
    <text><![CDATA[await();]]></text>
  </DocumentChange>
  <Command __id="2705" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:29:11 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1651662" />
  <Command __id="2707" _type="InsertStringCommand" date="Mon Feb 01 21:29:11 EST 2021" starttimestamp="1612231299681" timestamp="1651678" timestamp2="1651678">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2709" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:29:12 EST 2021" starttimestamp="1612231299681" timestamp="1652721" />
  <Command __id="2711" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:29:12 EST 2021" starttimestamp="1612231299681" timestamp="1652845" />
  <Command __id="2713" _type="InsertStringCommand" date="Mon Feb 01 21:29:13 EST 2021" starttimestamp="1612231299681" timestamp="1653555" timestamp2="1653555">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2715" _type="InsertStringCommand" date="Mon Feb 01 21:29:13 EST 2021" starttimestamp="1612231299681" timestamp="1653586" timestamp2="1653586">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2716" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:29:13 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1653628" />
  <Command __id="2718" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:29:13 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1653854" />
  <Command __id="2720" _type="InsertStringCommand" date="Mon Feb 01 21:29:13 EST 2021" starttimestamp="1612231299681" timestamp="1653868" timestamp2="1653868">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2721" _type="MoveCaretCommand" caretOffset="7123" date="Mon Feb 01 21:29:16 EST 2021" docOffset="7123" starttimestamp="1612231299681" timestamp="1657227" />
  <Command __id="2723" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 21:29:17 EST 2021" starttimestamp="1612231299681" timestamp="1657907" />
  <DocumentChange __id="2708" _type="Delete" date="Mon Feb 01 21:29:12 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20985" docExpressionCount="2004" docLength="22098" endLine="184" length="8" offset="7096" repeat="2" startLine="184" starttimestamp="1612231299681" timestamp="1652717" timestamp2="1652841">
    <text><![CDATA[await();]]></text>
  </DocumentChange>
  <DocumentChange __id="2712" _type="Insert" date="Mon Feb 01 21:29:13 EST 2021" docASTNodeCount="2926" docActiveCodeLength="20988" docExpressionCount="2004" docLength="22101" length="3" offset="7096" repeat="3" starttimestamp="1612231299681" timestamp="1653549" timestamp2="1653729">
    <text><![CDATA[cou]]></text>
  </DocumentChange>
  <DocumentChange __id="2719" _type="Replace" date="Mon Feb 01 21:29:13 EST 2021" docASTNodeCount="3437" docActiveCodeLength="20997" docExpressionCount="2346" docLength="22110" endLine="184" insertionLength="12" int_docASTNodeCount="2926" int_docActiveCodeLength="20985" int_docExpressionCount="2004" int_docLength="22098" length="3" offset="7096" startLine="184" starttimestamp="1612231299681" timestamp="1653859">
    <deletedText><![CDATA[cou]]></deletedText>
    <insertedText><![CDATA[countDown();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2722" _type="Delete" date="Mon Feb 01 21:29:17 EST 2021" docASTNodeCount="3437" docActiveCodeLength="20990" docExpressionCount="2346" docLength="22103" endLine="187" length="7" offset="7118" startLine="186" starttimestamp="1612231299681" timestamp="1657904">
    <text><![CDATA[					
]]></text>
  </DocumentChange>
  <Command __id="2724" _type="SelectTextCommand" caretOffset="7718" date="Mon Feb 01 21:29:42 EST 2021" end="7718" start="7704" starttimestamp="1612231299681" timestamp="1683128" />
  <DocumentChange __id="2725" _type="Replace" date="Mon Feb 01 21:29:45 EST 2021" docASTNodeCount="3437" docActiveCodeLength="20977" docExpressionCount="2344" docLength="22090" endLine="215" insertionLength="1" int_docASTNodeCount="3433" int_docActiveCodeLength="20976" int_docExpressionCount="2343" int_docLength="22089" length="14" offset="7704" startLine="215" starttimestamp="1612231299681" timestamp="1685898">
    <deletedText><![CDATA[joiner.join();]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <Command __id="2726" _type="InsertStringCommand" date="Mon Feb 01 21:29:45 EST 2021" starttimestamp="1612231299681" timestamp="1685905" timestamp2="1685905">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2727" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:29:45 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1685944" />
  <DocumentChange __id="2728" _type="Delete" date="Mon Feb 01 21:29:45 EST 2021" docASTNodeCount="3433" docActiveCodeLength="20976" docExpressionCount="2343" docLength="22089" endLine="215" length="1" offset="7704" startLine="215" starttimestamp="1612231299681" timestamp="1686273">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="2729" _type="Insert" date="Mon Feb 01 21:29:46 EST 2021" docASTNodeCount="3437" docActiveCodeLength="20979" docExpressionCount="2344" docLength="22092" length="3" offset="7704" repeat="3" starttimestamp="1612231299681" timestamp="1686437" timestamp2="1686591">
    <text><![CDATA[lat]]></text>
  </DocumentChange>
  <Command __id="2732" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:29:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1686682" />
  <DocumentChange __id="2733" _type="Replace" date="Mon Feb 01 21:29:46 EST 2021" docASTNodeCount="3437" docActiveCodeLength="20981" docExpressionCount="2344" docLength="22094" endLine="215" insertionLength="5" int_docASTNodeCount="3433" int_docActiveCodeLength="20976" int_docExpressionCount="2343" int_docLength="22089" length="3" offset="7704" startLine="215" starttimestamp="1612231299681" timestamp="1686686">
    <deletedText><![CDATA[lat]]></deletedText>
    <insertedText><![CDATA[latch]]></insertedText>
  </DocumentChange>
  <Command __id="2734" _type="InsertStringCommand" date="Mon Feb 01 21:29:46 EST 2021" starttimestamp="1612231299681" timestamp="1686693" timestamp2="1686693">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2736" _type="InsertStringCommand" date="Mon Feb 01 21:29:46 EST 2021" starttimestamp="1612231299681" timestamp="1686955" timestamp2="1686955">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2737" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:29:46 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1687000" />
  <Command __id="2738" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:29:47 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1688118" />
  <Command __id="2740" _type="InsertStringCommand" date="Mon Feb 01 21:29:47 EST 2021" starttimestamp="1612231299681" timestamp="1688129" timestamp2="1688129">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2741" _type="ShellCommand" date="Mon Feb 01 21:29:52 EST 2021" starttimestamp="1612231299681" timestamp="1693115" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2742" _type="ShellCommand" date="Mon Feb 01 21:29:52 EST 2021" starttimestamp="1612231299681" timestamp="1693239" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2753" _type="MoveCaretCommand" caretOffset="7781" date="Mon Feb 01 21:29:54 EST 2021" docOffset="7781" starttimestamp="1612231299681" timestamp="1694682" />
  <DocumentChange __id="2735" _type="Insert" date="Mon Feb 01 21:29:46 EST 2021" docASTNodeCount="3437" docActiveCodeLength="20990" docExpressionCount="2346" docLength="22103" length="9" offset="7709" repeat="2" starttimestamp="1612231299681" timestamp="1686951" timestamp2="1688123">
    <text><![CDATA[.await();]]></text>
  </DocumentChange>
  <DocumentChange __id="2743" _type="Delete" date="Mon Feb 01 21:29:52 EST 2021" docASTNodeCount="3433" docActiveCodeLength="20976" docExpressionCount="2343" docLength="22089" endLine="215" length="14" offset="7704" startLine="215" starttimestamp="1612231299681" timestamp="1693267">
    <text><![CDATA[latch.await();]]></text>
  </DocumentChange>
  <DocumentChange __id="2744" _type="Insert" date="Mon Feb 01 21:29:52 EST 2021" docASTNodeCount="3449" docActiveCodeLength="21073" docExpressionCount="2351" docLength="22220" length="131" offset="7704" repeat="9" starttimestamp="1612231299681" timestamp="1693271" timestamp2="1693303">
    <text><![CDATA[try {
			latch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></text>
  </DocumentChange>
  <Command __id="2754" _type="MoveCaretCommand" caretOffset="7835" date="Mon Feb 01 21:29:56 EST 2021" docOffset="7835" starttimestamp="1612231299681" timestamp="1696898" />
  <Command __id="2755" _type="SelectTextCommand" caretOffset="7834" date="Mon Feb 01 21:29:56 EST 2021" end="7834" start="7766" starttimestamp="1612231299681" timestamp="1697043" />
  <Command __id="2756" _type="MoveCaretCommand" caretOffset="7835" date="Mon Feb 01 21:29:57 EST 2021" docOffset="7835" starttimestamp="1612231299681" timestamp="1697634" />
  <Command __id="2758" _type="InsertStringCommand" date="Mon Feb 01 21:29:57 EST 2021" starttimestamp="1612231299681" timestamp="1697913" timestamp2="1697913">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2760" _type="InsertStringCommand" date="Mon Feb 01 21:29:58 EST 2021" starttimestamp="1612231299681" timestamp="1698843" timestamp2="1698843">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2761" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:29:58 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="1698886" />
  <Command __id="2768" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:30:00 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="1701122" />
  <Command __id="2769" _type="InsertStringCommand" date="Mon Feb 01 21:30:00 EST 2021" starttimestamp="1612231299681" timestamp="1701125" timestamp2="1701125">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2771" _type="InsertStringCommand" date="Mon Feb 01 21:30:01 EST 2021" starttimestamp="1612231299681" timestamp="1701882" timestamp2="1701882">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2773" _type="InsertStringCommand" date="Mon Feb 01 21:30:01 EST 2021" starttimestamp="1612231299681" timestamp="1702109" timestamp2="1702109">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="2775" _type="InsertStringCommand" date="Mon Feb 01 21:30:01 EST 2021" starttimestamp="1612231299681" timestamp="1702237" timestamp2="1702237">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2776" _type="MoveCaretCommand" caretOffset="7863" date="Mon Feb 01 21:30:03 EST 2021" docOffset="7863" starttimestamp="1612231299681" timestamp="1703762" />
  <Command __id="2777" _type="SelectTextCommand" caretOffset="7865" date="Mon Feb 01 21:30:03 EST 2021" end="7865" start="7859" starttimestamp="1612231299681" timestamp="1703916" />
  <Command __id="2778" _type="SelectTextCommand" caretOffset="7876" date="Mon Feb 01 21:30:03 EST 2021" end="7876" start="7857" starttimestamp="1612231299681" timestamp="1704045" />
  <Command __id="2780" _type="CutCommand" date="Mon Feb 01 21:30:03 EST 2021" starttimestamp="1612231299681" timestamp="1704225" />
  <Command __id="2781" _type="MoveCaretCommand" caretOffset="7850" date="Mon Feb 01 21:30:04 EST 2021" docOffset="7850" starttimestamp="1612231299681" timestamp="1704546" />
  <Command __id="2783" _type="PasteCommand" date="Mon Feb 01 21:30:04 EST 2021" starttimestamp="1612231299681" timestamp="1704701" />
  <Command __id="2785" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 21:30:04 EST 2021" starttimestamp="1612231299681" timestamp="1704998" />
  <Command __id="2786" _type="MoveCaretCommand" caretOffset="7820" date="Mon Feb 01 21:30:06 EST 2021" docOffset="7820" starttimestamp="1612231299681" timestamp="1706513" />
  <Command __id="2787" _type="MoveCaretCommand" caretOffset="7725" date="Mon Feb 01 21:30:06 EST 2021" docOffset="7725" starttimestamp="1612231299681" timestamp="1707072" />
  <Command __id="2788" _type="MoveCaretCommand" caretOffset="7727" date="Mon Feb 01 21:30:07 EST 2021" docOffset="7727" starttimestamp="1612231299681" timestamp="1707752" />
  <Command __id="2789" _type="MoveCaretCommand" caretOffset="7726" date="Mon Feb 01 21:30:08 EST 2021" docOffset="7726" starttimestamp="1612231299681" timestamp="1708384" />
  <Command __id="2790" _type="MoveCaretCommand" caretOffset="7726" date="Mon Feb 01 21:30:14 EST 2021" docOffset="7726" starttimestamp="1612231299681" timestamp="1714700" />
  <DocumentChange __id="2757" _type="Insert" date="Mon Feb 01 21:29:57 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21093" docExpressionCount="2351" docLength="22240" length="20" offset="7835" repeat="11" starttimestamp="1612231299681" timestamp="1697908" timestamp2="1702231">
    <text><![CDATA[ finally {
			
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="2779" _type="Delete" date="Mon Feb 01 21:30:03 EST 2021" docASTNodeCount="3445" docActiveCodeLength="21074" docExpressionCount="2347" docLength="22221" endLine="224" length="19" offset="7857" startLine="223" starttimestamp="1612231299681" timestamp="1704213">
    <text><![CDATA[		System.exit(0);
]]></text>
  </DocumentChange>
  <DocumentChange __id="2782" _type="Replace" date="Mon Feb 01 21:30:04 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21091" docExpressionCount="2351" docLength="22238" endLine="221" insertionLength="20" int_docASTNodeCount="3445" int_docActiveCodeLength="21071" int_docExpressionCount="2347" int_docLength="22218" length="3" offset="7847" startLine="221" starttimestamp="1612231299681" timestamp="1704691">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			System.exit(0);
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2784" _type="Delete" date="Mon Feb 01 21:30:04 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21089" docExpressionCount="2351" docLength="22236" endLine="223" length="2" offset="7867" startLine="222" starttimestamp="1612231299681" timestamp="1704991">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="2791" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 21:30:16 EST 2021" starttimestamp="1612231299681" timestamp="1716325" />
  <Command __id="2792" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:30:16 EST 2021" starttimestamp="1612231299681" timestamp="1716414" />
  <Command __id="2793" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:30:16 EST 2021" starttimestamp="1612231299681" timestamp="1716530" />
  <Command __id="2794" _type="MoveCaretCommand" caretOffset="7726" date="Mon Feb 01 21:30:16 EST 2021" docOffset="7726" starttimestamp="1612231299681" timestamp="1717143" />
  <Command __id="2795" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:30:19 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34266" docExpressionCount="4003" docLength="35221" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1720109">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2796" _type="MoveCaretCommand" caretOffset="5970" date="Mon Feb 01 21:30:19 EST 2021" docOffset="21058" starttimestamp="1612231299681" timestamp="1720246" />
  <Command __id="2797" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:30:21 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="983" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1721901">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶//	private static AExperimentalReplayer replayer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶		replayer = new AReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶		replayer.analyzeFolder(classFolderPath);¶//		replayer.createRestCommandLogs(classFolderPath);¶//		replayer = new AExperimentalReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		replayer.createRestCommandLogs(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="2798" _type="MoveCaretCommand" caretOffset="592" date="Mon Feb 01 21:30:21 EST 2021" docOffset="619" starttimestamp="1612231299681" timestamp="1722016" />
  <Command __id="2799" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:30:23 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21089" docExpressionCount="2351" docLength="22236" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1724286">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶"), Diff(INSERT,"import java.util.concurrent.CountDownLatch;¶¶"), Diff(EQUAL,"import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private "), Diff(DELETE,"AJoiner joiner"), Diff(INSERT,"CountDownLatch latch"), Diff(EQUAL,";¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		"), Diff(DELETE,"joiner"), Diff(INSERT,"latch"), Diff(EQUAL," = new "), Diff(DELETE,"AJoiner"), Diff(INSERT,"CountDownLatch"), Diff(EQUAL,"(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				"), Diff(DELETE,"joiner.finish"), Diff(INSERT,"latch.countDown"), Diff(EQUAL,"();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						"), Diff(DELETE,"joiner.finish"), Diff(INSERT,"latch.countDown"), Diff(EQUAL,"();¶						return;¶					}¶					"), Diff(INSERT,"try {¶						"), Diff(EQUAL,"for (File file : logs) {¶						"), Diff(INSERT,"	"), Diff(EQUAL,"List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶						"), Diff(INSERT,"	"), Diff(EQUAL,"if (commands.size() < 2) {¶							"), Diff(INSERT,"	"), Diff(EQUAL,"continue;¶						"), Diff(INSERT,"	"), Diff(EQUAL,"}¶						"), Diff(INSERT,"	"), Diff(EQUAL,"List<EHICommand> newCommands = new ArrayList<>();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"EHICommand last = null;¶						"), Diff(INSERT,"	"), Diff(EQUAL,"EHICommand cur = null;¶						"), Diff(INSERT,"	"), Diff(EQUAL,"for (EHICommand command : commands) {¶							"), Diff(INSERT,"	"), Diff(EQUAL,"if (cur == null) {¶								"), Diff(INSERT,"	"), Diff(EQUAL,"cur = command;¶								"), Diff(INSERT,"	"), Diff(EQUAL,"newCommands.add(command);¶							"), Diff(INSERT,"	"), Diff(EQUAL,"} else {¶								"), Diff(INSERT,"	"), Diff(EQUAL,"last = cur;¶								"), Diff(INSERT,"	"), Diff(EQUAL,"cur = command;¶								"), Diff(INSERT,"	"), Diff(EQUAL,"long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶								"), Diff(INSERT,"	"), Diff(EQUAL,"if (rest >= 1*ONE_SECOND) {¶									"), Diff(INSERT,"	"), Diff(EQUAL,"String range = "";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"if (rest < 2*ONE_SECOND) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "1s-2s";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 5*ONE_SECOND) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "2s-5s";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 10*ONE_SECOND) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "5s-10s";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 20*ONE_SECOND) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "10s-20s";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 30*ONE_SECOND) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "20s-30s";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < ONE_MIN) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "30s-1m";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < TWO_MIN) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "1m-2m";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < FIVE_MIN) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "2m-5m";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < TEN_MIN) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "5m-10m";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 3*TEN_MIN) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "10m-30m";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else if (rest < 6*TEN_MIN) {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = "30m-60m";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"} else {¶										"), Diff(INSERT,"	"), Diff(EQUAL,"range = ">1h";¶									"), Diff(INSERT,"	"), Diff(EQUAL,"}¶									"), Diff(INSERT,"	"), Diff(EQUAL,"PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶									"), Diff(INSERT,"	"), Diff(EQUAL,"rCommnad.setStartTimestamp(last.getStartTimestamp());¶									"), Diff(INSERT,"	"), Diff(EQUAL,"rCommnad.setTimestamp(last.getTimestamp()+1);¶									"), Diff(INSERT,"	"), Diff(EQUAL,"newCommands.add(rCommnad);¶								"), Diff(INSERT,"	"), Diff(EQUAL,"} ¶								"), Diff(INSERT,"	"), Diff(EQUAL,"newCommands.add(command);¶							"), Diff(INSERT,"	"), Diff(EQUAL,"}¶						"), Diff(INSERT,"	"), Diff(EQUAL,"}¶						"), Diff(INSERT,"	"), Diff(EQUAL,"String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶						"), Diff(INSERT,"	"), Diff(EQUAL,"for (EHICommand c : newCommands) {¶							"), Diff(INSERT,"	"), Diff(EQUAL,"logContent += c.persist();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"}¶						"), Diff(INSERT,"	"), Diff(EQUAL,"logContent += XML_FILE_ENDING;¶						"), Diff(INSERT,"	"), Diff(EQUAL,"try {¶							"), Diff(INSERT,"	"), Diff(EQUAL,"File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶							"), Diff(INSERT,"	"), Diff(EQUAL,"if (newLog.exists()) {¶								"), Diff(INSERT,"	"), Diff(EQUAL,"newLog.delete();¶							"), Diff(INSERT,"	"), Diff(EQUAL,"}¶							"), Diff(INSERT,"	"), Diff(EQUAL,"newLog.getParentFile().mkdirs();¶							"), Diff(INSERT,"	"), Diff(EQUAL,"newLog.createNewFile();¶							"), Diff(INSERT,"	"), Diff(EQUAL,"BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶							"), Diff(INSERT,"	"), Diff(EQUAL,"System.out.println("Writing to file " + newLog.getPath());¶							"), Diff(INSERT,"	"), Diff(EQUAL,"writer.write(logContent);¶							"), Diff(INSERT,"	"), Diff(EQUAL,"writer.close();¶							"), Diff(INSERT,"	"), Diff(EQUAL,"System.out.println("Finished writing to file " + newLog.getPath());¶						"), Diff(INSERT,"	"), Diff(EQUAL,"} catch (IOException e) {¶							"), Diff(INSERT,"	"), Diff(EQUAL,"// TODO Auto-generated catch block¶							"), Diff(INSERT,"	"), Diff(EQUAL,"e.printStackTrace();¶						"), Diff(INSERT,"	"), Diff(EQUAL,"}¶					"), Diff(INSERT,"	"), Diff(EQUAL,"}¶					"), Diff(INSERT,"	¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						"), Diff(EQUAL,"synchronized (this) {¶						"), Diff(INSERT,"	"), Diff(EQUAL,"threadCount--;¶					"), Diff(INSERT,"	"), Diff(EQUAL,"}¶					"), Diff(DELETE,"joiner.finish();"), Diff(INSERT,"	latch.countDown();¶					}"), Diff(EQUAL,"¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		"), Diff(DELETE,"joiner.join();¶"), Diff(INSERT,"try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶	"), Diff(EQUAL,"		System.exit(0);¶	"), Diff(INSERT,"	}¶	"), Diff(EQUAL,"}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private CountDownLatch latch;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createRestCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						for (File file : logs) {
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
									if (rest >= 1*ONE_SECOND) {
										String range = "";
										if (rest < 2*ONE_SECOND) {
											range = "1s-2s";
										} else if (rest < 5*ONE_SECOND) {
											range = "2s-5s";
										} else if (rest < 10*ONE_SECOND) {
											range = "5s-10s";
										} else if (rest < 20*ONE_SECOND) {
											range = "10s-20s";
										} else if (rest < 30*ONE_SECOND) {
											range = "20s-30s";
										} else if (rest < ONE_MIN) {
											range = "30s-1m";
										} else if (rest < TWO_MIN) {
											range = "1m-2m";
										} else if (rest < FIVE_MIN) {
											range = "2m-5m";
										} else if (rest < TEN_MIN) {
											range = "5m-10m";
										} else if (rest < 3*TEN_MIN) {
											range = "10m-30m";
										} else if (rest < 6*TEN_MIN) {
											range = "30m-60m";
										} else {
											range = ">1h";
										}
										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
										rCommnad.setStartTimestamp(last.getStartTimestamp());
										rCommnad.setTimestamp(last.getTimestamp()+1);
										newCommands.add(rCommnad);
									} 
									newCommands.add(command);
								}
							}
							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						// TODO: handle exception
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
//			if (j == students.length-1) {
//				try {
//					thread.join();
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} 
//				System.exit(0);
//			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",
//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",
//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",
//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <Command __id="2800" _type="MoveCaretCommand" caretOffset="7726" date="Mon Feb 01 21:30:24 EST 2021" docOffset="7726" starttimestamp="1612231299681" timestamp="1724408" />
  <Command __id="2801" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:30:32 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="983" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="1733228">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶//	private static AExperimentalReplayer replayer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶		replayer = new AReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶		replayer.analyzeFolder(classFolderPath);¶//		replayer.createRestCommandLogs(classFolderPath);¶//		replayer = new AExperimentalReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		replayer.createRestCommandLogs(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="2802" _type="MoveCaretCommand" caretOffset="592" date="Mon Feb 01 21:30:33 EST 2021" docOffset="619" starttimestamp="1612231299681" timestamp="1733344" />
  <Command __id="2804" _type="MoveCaretCommand" caretOffset="5970" date="Mon Feb 01 21:30:34 EST 2021" docOffset="21058" starttimestamp="1612231299681" timestamp="1734963" />
  <Command __id="2805" _type="MoveCaretCommand" caretOffset="5906" date="Mon Feb 01 21:30:36 EST 2021" docOffset="20994" starttimestamp="1612231299681" timestamp="1736817" />
  <Command __id="2806" _type="ShellCommand" date="Mon Feb 01 21:30:49 EST 2021" starttimestamp="1612231299681" timestamp="1749751" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2807" _type="ShellCommand" date="Mon Feb 01 21:31:39 EST 2021" starttimestamp="1612231299681" timestamp="1799570" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2808" _type="MoveCaretCommand" caretOffset="5118" date="Mon Feb 01 21:31:39 EST 2021" docOffset="20206" starttimestamp="1612231299681" timestamp="1799626" />
  <Command __id="2809" _type="ShellCommand" date="Mon Feb 01 21:31:40 EST 2021" starttimestamp="1612231299681" timestamp="1801241" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="4667" _type="Insert" date="Mon Feb 01 21:44:46 EST 2021" docASTNodeCount="470" docActiveCodeLength="2754" docExpressionCount="295" docLength="2826" length="2" offset="2612" repeat="2" starttimestamp="1612231299681" timestamp="2586613" timestamp2="2586622">
    <text><![CDATA[rl]]></text>
  </DocumentChange>
  <DocumentChange __id="4672" _type="Delete" date="Mon Feb 01 21:44:48 EST 2021" docASTNodeCount="442" docActiveCodeLength="2587" docExpressionCount="273" docLength="2659" endLine="111" length="167" offset="2650" startLine="107" starttimestamp="1612231299681" timestamp="2589230">
    <text><![CDATA[		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			type = textNode.getTextContent();
		}
]]></text>
  </DocumentChange>
  <Command __id="4674" _type="MoveCaretCommand" caretOffset="2104" date="Mon Feb 01 21:44:56 EST 2021" docOffset="2342" starttimestamp="1612231299681" timestamp="2596488" />
  <Command __id="4675" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 21:44:56 EST 2021" starttimestamp="1612231299681" timestamp="2597306" />
  <Command __id="4676" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597395" />
  <Command __id="4677" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597401" />
  <Command __id="4678" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597401" />
  <Command __id="4679" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597408" />
  <Command __id="4680" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597408" />
  <Command __id="4681" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597539" />
  <Command __id="4682" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597541" />
  <Command __id="4683" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597602" />
  <Command __id="4684" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597602" />
  <Command __id="4685" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597667" />
  <Command __id="4686" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597667" />
  <Command __id="4687" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597740" />
  <Command __id="4688" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597740" />
  <Command __id="4689" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597809" />
  <Command __id="4690" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597809" />
  <Command __id="4691" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597871" />
  <Command __id="4692" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597871" />
  <Command __id="4693" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597940" />
  <Command __id="4694" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2597940" />
  <Command __id="4695" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2598000" />
  <Command __id="4696" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2598000" />
  <Command __id="4697" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:44:57 EST 2021" starttimestamp="1612231299681" timestamp="2598069" />
  <Command __id="4698" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:45:01 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34266" docExpressionCount="4003" docLength="35221" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="2601899">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="4699" _type="MoveCaretCommand" caretOffset="5118" date="Mon Feb 01 21:45:01 EST 2021" docOffset="20206" starttimestamp="1612231299681" timestamp="2602028" />
  <Command __id="4700" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:45:05 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21089" docExpressionCount="2351" docLength="22236" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="2605497">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						for (File file : logs) {¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶									if (rest >= 1*ONE_SECOND) {¶										String range = "";¶										if (rest < 2*ONE_SECOND) {¶											range = "1s-2s";¶										} else if (rest < 5*ONE_SECOND) {¶											range = "2s-5s";¶										} else if (rest < 10*ONE_SECOND) {¶											range = "5s-10s";¶										} else if (rest < 20*ONE_SECOND) {¶											range = "10s-20s";¶										} else if (rest < 30*ONE_SECOND) {¶											range = "20s-30s";¶										} else if (rest < ONE_MIN) {¶											range = "30s-1m";¶										} else if (rest < TWO_MIN) {¶											range = "1m-2m";¶										} else if (rest < FIVE_MIN) {¶											range = "2m-5m";¶										} else if (rest < TEN_MIN) {¶											range = "5m-10m";¶										} else if (rest < 3*TEN_MIN) {¶											range = "10m-30m";¶										} else if (rest < 6*TEN_MIN) {¶											range = "30m-60m";¶										} else {¶											range = ">1h";¶										}¶										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶										rCommnad.setStartTimestamp(last.getStartTimestamp());¶										rCommnad.setTimestamp(last.getTimestamp()+1);¶										newCommands.add(rCommnad);¶									} ¶									newCommands.add(command);¶								}¶							}¶							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								// TODO Auto-generated catch block¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4701" _type="MoveCaretCommand" caretOffset="7726" date="Mon Feb 01 21:45:05 EST 2021" docOffset="7726" starttimestamp="1612231299681" timestamp="2605639" />
  <Command __id="4702" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:45:06 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34266" docExpressionCount="4003" docLength="35221" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="2606783">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="4703" _type="MoveCaretCommand" caretOffset="5118" date="Mon Feb 01 21:45:06 EST 2021" docOffset="20206" starttimestamp="1612231299681" timestamp="2606921" />
  <Command __id="4704" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.folding.collapse_all" date="Mon Feb 01 21:45:07 EST 2021" starttimestamp="1612231299681" timestamp="2607803" />
  <Command __id="4706" _type="MoveCaretCommand" caretOffset="7726" date="Mon Feb 01 21:45:08 EST 2021" docOffset="7726" starttimestamp="1612231299681" timestamp="2609253" />
  <Command __id="4705" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:45:08 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21089" docExpressionCount="2351" docLength="22236" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="2609138">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						for (File file : logs) {¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶									if (rest >= 1*ONE_SECOND) {¶										String range = "";¶										if (rest < 2*ONE_SECOND) {¶											range = "1s-2s";¶										} else if (rest < 5*ONE_SECOND) {¶											range = "2s-5s";¶										} else if (rest < 10*ONE_SECOND) {¶											range = "5s-10s";¶										} else if (rest < 20*ONE_SECOND) {¶											range = "10s-20s";¶										} else if (rest < 30*ONE_SECOND) {¶											range = "20s-30s";¶										} else if (rest < ONE_MIN) {¶											range = "30s-1m";¶										} else if (rest < TWO_MIN) {¶											range = "1m-2m";¶										} else if (rest < FIVE_MIN) {¶											range = "2m-5m";¶										} else if (rest < TEN_MIN) {¶											range = "5m-10m";¶										} else if (rest < 3*TEN_MIN) {¶											range = "10m-30m";¶										} else if (rest < 6*TEN_MIN) {¶											range = "30m-60m";¶										} else {¶											range = ">1h";¶										}¶										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶										rCommnad.setStartTimestamp(last.getStartTimestamp());¶										rCommnad.setTimestamp(last.getTimestamp()+1);¶										newCommands.add(rCommnad);¶									} ¶									newCommands.add(command);¶								}¶							}¶							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								// TODO Auto-generated catch block¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4707" _type="MoveCaretCommand" caretOffset="2865" date="Mon Feb 01 21:45:14 EST 2021" docOffset="2865" starttimestamp="1612231299681" timestamp="2614673" />
  <DocumentChange __id="4708" _type="Insert" date="Mon Feb 01 21:45:17 EST 2021" docASTNodeCount="3453" docActiveCodeLength="21113" docExpressionCount="2351" docLength="22260" length="24" offset="2865" repeat="22" starttimestamp="1612231299681" timestamp="2618260" timestamp2="2620753">
    <text><![CDATA[
	private static final ]]></text>
  </DocumentChange>
  <Command __id="4709" _type="InsertStringCommand" date="Mon Feb 01 21:45:17 EST 2021" starttimestamp="1612231299681" timestamp="2618271" timestamp2="2618271">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4711" _type="InsertStringCommand" date="Mon Feb 01 21:45:18 EST 2021" starttimestamp="1612231299681" timestamp="2618631" timestamp2="2618631">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="4712" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:18 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2618674" />
  <Command __id="4720" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:18 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2619280" />
  <Command __id="4722" _type="InsertStringCommand" date="Mon Feb 01 21:45:19 EST 2021" starttimestamp="1612231299681" timestamp="2619432" timestamp2="2619432">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4723" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:19 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2619472" />
  <Command __id="4730" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:19 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2619917" />
  <Command __id="4732" _type="InsertStringCommand" date="Mon Feb 01 21:45:20 EST 2021" starttimestamp="1612231299681" timestamp="2620356" timestamp2="2620356">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4733" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:20 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2620398" />
  <Command __id="4739" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:20 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2620761" />
  <DocumentChange __id="4740" _type="Delete" date="Mon Feb 01 21:45:20 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21092" docExpressionCount="2351" docLength="22239" endLine="61" length="21" offset="2868" repeat="3" startLine="61" starttimestamp="1612231299681" timestamp="2621033" timestamp2="2621273">
    <text><![CDATA[private static final ]]></text>
  </DocumentChange>
  <Command __id="4741" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:45:20 EST 2021" starttimestamp="1612231299681" timestamp="2621037" />
  <Command __id="4743" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:45:20 EST 2021" starttimestamp="1612231299681" timestamp="2621154" />
  <Command __id="4745" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:45:20 EST 2021" starttimestamp="1612231299681" timestamp="2621278" />
  <DocumentChange __id="4746" _type="Insert" date="Mon Feb 01 21:45:21 EST 2021" docASTNodeCount="3451" docActiveCodeLength="21100" docExpressionCount="2351" docLength="22247" length="8" offset="2868" repeat="8" starttimestamp="1612231299681" timestamp="2621928" timestamp2="2622542">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <Command __id="4747" _type="InsertStringCommand" date="Mon Feb 01 21:45:21 EST 2021" starttimestamp="1612231299681" timestamp="2621933" timestamp2="2621933">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="4748" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:21 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2621976" />
  <Command __id="4756" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:22 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2622550" />
  <DocumentChange __id="4757" _type="Insert" date="Mon Feb 01 21:45:32 EST 2021" docASTNodeCount="3451" docActiveCodeLength="21104" docExpressionCount="2351" docLength="22251" length="4" offset="2876" repeat="4" starttimestamp="1612231299681" timestamp="2632586" timestamp2="2632842">
    <text><![CDATA[list]]></text>
  </DocumentChange>
  <Command __id="4758" _type="InsertStringCommand" date="Mon Feb 01 21:45:32 EST 2021" starttimestamp="1612231299681" timestamp="2632591" timestamp2="2632591">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4759" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:32 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2632633" />
  <Command __id="4763" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:32 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2632955" />
  <DocumentChange __id="4764" _type="Replace" date="Mon Feb 01 21:45:32 EST 2021" docASTNodeCount="3451" docActiveCodeLength="21107" docExpressionCount="2351" docLength="22254" endLine="61" insertionLength="7" int_docASTNodeCount="3451" int_docActiveCodeLength="21100" int_docExpressionCount="2351" int_docLength="22247" length="4" offset="2876" startLine="61" starttimestamp="1612231299681" timestamp="2632960">
    <deletedText><![CDATA[list]]></deletedText>
    <insertedText><![CDATA[List<E>]]></insertedText>
  </DocumentChange>
  <Command __id="4765" _type="InsertStringCommand" date="Mon Feb 01 21:45:32 EST 2021" starttimestamp="1612231299681" timestamp="2632994" timestamp2="2632994">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="4766" _type="Replace" date="Mon Feb 01 21:45:33 EST 2021" docASTNodeCount="3451" docActiveCodeLength="21107" docExpressionCount="2351" docLength="22254" endLine="61" insertionLength="1" int_docASTNodeCount="3451" int_docActiveCodeLength="21106" int_docExpressionCount="2351" int_docLength="22253" length="1" offset="2881" startLine="61" starttimestamp="1612231299681" timestamp="2634107">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <Command __id="4767" _type="InsertStringCommand" date="Mon Feb 01 21:45:33 EST 2021" starttimestamp="1612231299681" timestamp="2634114" timestamp2="2634114">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="4768" _type="Insert" date="Mon Feb 01 21:45:33 EST 2021" docASTNodeCount="3451" docActiveCodeLength="21110" docExpressionCount="2351" docLength="22257" length="3" offset="2882" repeat="3" starttimestamp="1612231299681" timestamp="2634172" timestamp2="2634378">
    <text><![CDATA[hic]]></text>
  </DocumentChange>
  <Command __id="4769" _type="InsertStringCommand" date="Mon Feb 01 21:45:33 EST 2021" starttimestamp="1612231299681" timestamp="2634174" timestamp2="2634174">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="4770" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:33 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2634214" />
  <Command __id="4773" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:34 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2634401" />
  <DocumentChange __id="4774" _type="Replace" date="Mon Feb 01 21:45:34 EST 2021" docASTNodeCount="3451" docActiveCodeLength="21116" docExpressionCount="2351" docLength="22263" endLine="61" insertionLength="10" int_docASTNodeCount="3451" int_docActiveCodeLength="21106" int_docExpressionCount="2351" int_docLength="22253" length="4" offset="2881" startLine="61" starttimestamp="1612231299681" timestamp="2634408">
    <deletedText><![CDATA[ehic]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <Command __id="4775" _type="InsertStringCommand" date="Mon Feb 01 21:45:34 EST 2021" starttimestamp="1612231299681" timestamp="2634416" timestamp2="2634416">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4776" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:45:34 EST 2021" starttimestamp="1612231299681" timestamp="2634951" />
  <DocumentChange __id="4777" _type="Insert" date="Mon Feb 01 21:45:34 EST 2021" docASTNodeCount="3459" docActiveCodeLength="21131" docExpressionCount="2354" docLength="22278" length="15" offset="2892" repeat="15" starttimestamp="1612231299681" timestamp="2635212" timestamp2="2640176">
    <text><![CDATA[ webCommands = ]]></text>
  </DocumentChange>
  <Command __id="4778" _type="InsertStringCommand" date="Mon Feb 01 21:45:34 EST 2021" starttimestamp="1612231299681" timestamp="2635219" timestamp2="2635219">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4780" _type="InsertStringCommand" date="Mon Feb 01 21:45:36 EST 2021" starttimestamp="1612231299681" timestamp="2636998" timestamp2="2636998">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4782" _type="InsertStringCommand" date="Mon Feb 01 21:45:36 EST 2021" starttimestamp="1612231299681" timestamp="2637051" timestamp2="2637051">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4783" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:36 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2637094" />
  <Command __id="4785" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:36 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2637298" />
  <Command __id="4787" _type="InsertStringCommand" date="Mon Feb 01 21:45:38 EST 2021" starttimestamp="1612231299681" timestamp="2638359" timestamp2="2638359">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="4789" _type="InsertStringCommand" date="Mon Feb 01 21:45:38 EST 2021" starttimestamp="1612231299681" timestamp="2638486" timestamp2="2638486">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4790" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:38 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2638577" />
  <Command __id="4791" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:38 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2638615" />
  <Command __id="4793" _type="InsertStringCommand" date="Mon Feb 01 21:45:38 EST 2021" starttimestamp="1612231299681" timestamp="2638675" timestamp2="2638675">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4794" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:38 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2638766" />
  <Command __id="4795" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:38 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2638796" />
  <Command __id="4797" _type="InsertStringCommand" date="Mon Feb 01 21:45:38 EST 2021" starttimestamp="1612231299681" timestamp="2638807" timestamp2="2638807">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4799" _type="InsertStringCommand" date="Mon Feb 01 21:45:38 EST 2021" starttimestamp="1612231299681" timestamp="2638901" timestamp2="2638901">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4800" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:38 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2638994" />
  <Command __id="4801" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:38 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2639022" />
  <Command __id="4803" _type="InsertStringCommand" date="Mon Feb 01 21:45:38 EST 2021" starttimestamp="1612231299681" timestamp="2639032" timestamp2="2639032">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4805" _type="InsertStringCommand" date="Mon Feb 01 21:45:38 EST 2021" starttimestamp="1612231299681" timestamp="2639049" timestamp2="2639049">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4807" _type="InsertStringCommand" date="Mon Feb 01 21:45:38 EST 2021" starttimestamp="1612231299681" timestamp="2639109" timestamp2="2639109">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4808" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:38 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2639152" />
  <Command __id="4809" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:38 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2639179" />
  <Command __id="4811" _type="InsertStringCommand" date="Mon Feb 01 21:45:39 EST 2021" starttimestamp="1612231299681" timestamp="2639407" timestamp2="2639407">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4813" _type="InsertStringCommand" date="Mon Feb 01 21:45:39 EST 2021" starttimestamp="1612231299681" timestamp="2640068" timestamp2="2640068">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="4815" _type="InsertStringCommand" date="Mon Feb 01 21:45:39 EST 2021" starttimestamp="1612231299681" timestamp="2640183" timestamp2="2640183">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="4816" _type="Delete" date="Mon Feb 01 21:45:40 EST 2021" docASTNodeCount="3459" docActiveCodeLength="21128" docExpressionCount="2354" docLength="22275" endLine="61" length="3" offset="2904" repeat="3" startLine="61" starttimestamp="1612231299681" timestamp="2640631" timestamp2="2640843">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <Command __id="4817" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:45:40 EST 2021" starttimestamp="1612231299681" timestamp="2640634" />
  <Command __id="4819" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:45:40 EST 2021" starttimestamp="1612231299681" timestamp="2640765" />
  <Command __id="4821" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:45:40 EST 2021" starttimestamp="1612231299681" timestamp="2640845" />
  <Command __id="4823" _type="InsertStringCommand" date="Mon Feb 01 21:45:40 EST 2021" starttimestamp="1612231299681" timestamp="2641159" timestamp2="2641159">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="4822" _type="Insert" date="Mon Feb 01 21:45:40 EST 2021" docASTNodeCount="3459" docActiveCodeLength="21129" docExpressionCount="2354" docLength="22276" length="1" offset="2904" starttimestamp="1612231299681" timestamp="2641155">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="4826" _type="Insert" date="Mon Feb 01 21:45:44 EST 2021" docASTNodeCount="3461" docActiveCodeLength="21135" docExpressionCount="2355" docLength="22282" length="6" offset="3037" repeat="3" starttimestamp="1612231299681" timestamp="2644681" timestamp2="2645194">
    <text><![CDATA[
		ew]]></text>
  </DocumentChange>
  <DocumentChange __id="4833" _type="Delete" date="Mon Feb 01 21:45:45 EST 2021" docASTNodeCount="3459" docActiveCodeLength="21133" docExpressionCount="2354" docLength="22280" endLine="67" length="2" offset="3041" repeat="2" startLine="67" starttimestamp="1612231299681" timestamp="2645825" timestamp2="2645944">
    <text><![CDATA[ew]]></text>
  </DocumentChange>
  <DocumentChange __id="4835" _type="Insert" date="Mon Feb 01 21:45:45 EST 2021" docASTNodeCount="3461" docActiveCodeLength="21138" docExpressionCount="2355" docLength="22285" length="5" offset="3041" repeat="5" starttimestamp="1612231299681" timestamp="2646168" timestamp2="2646751">
    <text><![CDATA[webco]]></text>
  </DocumentChange>
  <DocumentChange __id="4841" _type="Replace" date="Mon Feb 01 21:45:46 EST 2021" docASTNodeCount="3461" docActiveCodeLength="21144" docExpressionCount="2355" docLength="22291" endLine="67" insertionLength="11" int_docASTNodeCount="3459" int_docActiveCodeLength="21133" int_docExpressionCount="2354" int_docLength="22280" length="5" offset="3041" startLine="67" starttimestamp="1612231299681" timestamp="2647011">
    <deletedText><![CDATA[webco]]></deletedText>
    <insertedText><![CDATA[webCommands]]></insertedText>
  </DocumentChange>
  <Command __id="4824" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:43 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2643924" />
  <Command __id="4825" _type="MoveCaretCommand" caretOffset="3037" date="Mon Feb 01 21:45:43 EST 2021" docOffset="3037" starttimestamp="1612231299681" timestamp="2644014" />
  <Command __id="4827" _type="InsertStringCommand" date="Mon Feb 01 21:45:44 EST 2021" starttimestamp="1612231299681" timestamp="2644689" timestamp2="2644689">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4829" _type="InsertStringCommand" date="Mon Feb 01 21:45:44 EST 2021" starttimestamp="1612231299681" timestamp="2645191" timestamp2="2645191">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4831" _type="InsertStringCommand" date="Mon Feb 01 21:45:44 EST 2021" starttimestamp="1612231299681" timestamp="2645198" timestamp2="2645198">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="4832" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:45:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2645241" />
  <Command __id="4840" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:45:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2647006" />
  <Command __id="4842" _type="InsertStringCommand" date="Mon Feb 01 21:45:46 EST 2021" starttimestamp="1612231299681" timestamp="2647017" timestamp2="2647017">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4844" _type="UndoCommand" date="Mon Feb 01 21:45:49 EST 2021" starttimestamp="1612231299681" timestamp="2649499" />
  <Command __id="4846" _type="UndoCommand" date="Mon Feb 01 21:45:49 EST 2021" starttimestamp="1612231299681" timestamp="2649650" />
  <Command __id="4848" _type="UndoCommand" date="Mon Feb 01 21:45:49 EST 2021" starttimestamp="1612231299681" timestamp="2649872" />
  <Command __id="4850" _type="UndoCommand" date="Mon Feb 01 21:45:49 EST 2021" starttimestamp="1612231299681" timestamp="2650193" />
  <Command __id="4852" _type="UndoCommand" date="Mon Feb 01 21:45:50 EST 2021" starttimestamp="1612231299681" timestamp="2650392" />
  <Command __id="4854" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 21:45:50 EST 2021" starttimestamp="1612231299681" timestamp="2651070" />
  <Command __id="4855" _type="MoveCaretCommand" caretOffset="4129" date="Mon Feb 01 21:46:03 EST 2021" docOffset="4129" starttimestamp="1612231299681" timestamp="2663374" />
  <Command __id="4856" _type="MoveCaretCommand" caretOffset="4204" date="Mon Feb 01 21:46:03 EST 2021" docOffset="4204" starttimestamp="1612231299681" timestamp="2663793" />
  <Command __id="4857" _type="MoveCaretCommand" caretOffset="4173" date="Mon Feb 01 21:46:03 EST 2021" docOffset="4173" starttimestamp="1612231299681" timestamp="2664207" />
  <Command __id="4858" _type="ShellCommand" date="Mon Feb 01 21:46:20 EST 2021" starttimestamp="1612231299681" timestamp="2680512" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4859" _type="ShellCommand" date="Mon Feb 01 21:46:20 EST 2021" starttimestamp="1612231299681" timestamp="2681277" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4860" _type="ShellCommand" date="Mon Feb 01 21:46:23 EST 2021" starttimestamp="1612231299681" timestamp="2683840" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4861" _type="ShellCommand" date="Mon Feb 01 21:46:35 EST 2021" starttimestamp="1612231299681" timestamp="2696115" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4862" _type="ShellCommand" date="Mon Feb 01 21:46:37 EST 2021" starttimestamp="1612231299681" timestamp="2697715" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4863" _type="ShellCommand" date="Mon Feb 01 21:46:45 EST 2021" starttimestamp="1612231299681" timestamp="2705366" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4864" _type="MoveCaretCommand" caretOffset="4589" date="Mon Feb 01 21:46:45 EST 2021" docOffset="4589" starttimestamp="1612231299681" timestamp="2705425" />
  <Command __id="4865" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:46:45 EST 2021" starttimestamp="1612231299681" timestamp="2705991" />
  <Command __id="4866" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:46:45 EST 2021" starttimestamp="1612231299681" timestamp="2705998" />
  <Command __id="4867" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:46:45 EST 2021" starttimestamp="1612231299681" timestamp="2705998" />
  <Command __id="4868" _type="EclipseCommand" commandID="" date="Mon Feb 01 21:46:45 EST 2021" starttimestamp="1612231299681" timestamp="2706005" />
  <Command __id="4869" _type="ShellCommand" date="Mon Feb 01 21:46:47 EST 2021" starttimestamp="1612231299681" timestamp="2707538" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4870" _type="ShellCommand" date="Mon Feb 01 21:47:03 EST 2021" starttimestamp="1612231299681" timestamp="2724066" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4871" _type="MoveCaretCommand" caretOffset="4315" date="Mon Feb 01 21:47:03 EST 2021" docOffset="4315" starttimestamp="1612231299681" timestamp="2724155" />
  <Command __id="4872" _type="MoveCaretCommand" caretOffset="4141" date="Mon Feb 01 21:47:25 EST 2021" docOffset="4141" starttimestamp="1612231299681" timestamp="2745456" />
  <Command __id="4873" _type="MoveCaretCommand" caretOffset="7874" date="Mon Feb 01 21:47:40 EST 2021" docOffset="7874" starttimestamp="1612231299681" timestamp="2760780" />
  <DocumentChange __id="4843" _type="Replace" date="Mon Feb 01 21:45:49 EST 2021" docASTNodeCount="3461" docActiveCodeLength="21138" docExpressionCount="2355" docLength="22285" endLine="67" insertionLength="5" int_docASTNodeCount="3459" int_docActiveCodeLength="21133" int_docExpressionCount="2354" int_docLength="22280" length="11" offset="3041" startLine="67" starttimestamp="1612231299681" timestamp="2649458">
    <deletedText><![CDATA[webCommands]]></deletedText>
    <insertedText><![CDATA[webco]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4845" _type="Delete" date="Mon Feb 01 21:45:49 EST 2021" docASTNodeCount="3459" docActiveCodeLength="21133" docExpressionCount="2354" docLength="22280" endLine="67" length="5" offset="3041" startLine="67" starttimestamp="1612231299681" timestamp="2649643">
    <text><![CDATA[webco]]></text>
  </DocumentChange>
  <DocumentChange __id="4847" _type="Insert" date="Mon Feb 01 21:45:49 EST 2021" docASTNodeCount="3461" docActiveCodeLength="21135" docExpressionCount="2355" docLength="22282" length="2" offset="3041" starttimestamp="1612231299681" timestamp="2649867">
    <text><![CDATA[ew]]></text>
  </DocumentChange>
  <DocumentChange __id="4849" _type="Delete" date="Mon Feb 01 21:45:49 EST 2021" docASTNodeCount="3459" docActiveCodeLength="21129" docExpressionCount="2354" docLength="22276" endLine="67" length="6" offset="3037" startLine="66" starttimestamp="1612231299681" timestamp="2650183">
    <text><![CDATA[
		ew]]></text>
  </DocumentChange>
  <DocumentChange __id="4851" _type="Delete" date="Mon Feb 01 21:45:50 EST 2021" docASTNodeCount="3459" docActiveCodeLength="21128" docExpressionCount="2354" docLength="22275" endLine="61" length="1" offset="2904" startLine="61" starttimestamp="1612231299681" timestamp="2650383">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="4853" _type="Delete" date="Mon Feb 01 21:45:50 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21089" docExpressionCount="2351" docLength="22236" endLine="62" length="39" offset="2867" startLine="61" starttimestamp="1612231299681" timestamp="2651067">
    <text><![CDATA[	private List<EHICommand> webCommands
]]></text>
  </DocumentChange>
  <Command __id="4874" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.folding.collapse_all" date="Mon Feb 01 21:47:44 EST 2021" starttimestamp="1612231299681" timestamp="2764550" />
  <Command __id="4876" _type="MoveCaretCommand" caretOffset="2286" date="Mon Feb 01 21:47:51 EST 2021" docOffset="23086" starttimestamp="1612231299681" timestamp="2771941" />
  <Command __id="4875" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 21:47:51 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34266" docExpressionCount="4003" docLength="35221" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="2771772">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="4877" _type="MoveCaretCommand" caretOffset="3422" date="Mon Feb 01 21:47:55 EST 2021" docOffset="34352" starttimestamp="1612231299681" timestamp="2775690" />
  <DocumentChange __id="4878" _type="Insert" date="Mon Feb 01 21:47:57 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34279" docExpressionCount="4003" docLength="35234" length="13" offset="34352" repeat="9" starttimestamp="1612231299681" timestamp="2778080" timestamp2="2779846">
    <text><![CDATA[
	public 
	]]></text>
  </DocumentChange>
  <Command __id="4879" _type="InsertStringCommand" date="Mon Feb 01 21:47:57 EST 2021" starttimestamp="1612231299681" timestamp="2778091" timestamp2="2778091">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4881" _type="InsertStringCommand" date="Mon Feb 01 21:47:57 EST 2021" starttimestamp="1612231299681" timestamp="2778229" timestamp2="2778229">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4882" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 21:47:58 EST 2021" starttimestamp="1612231299681" timestamp="2778457" />
  <Command __id="4884" _type="InsertStringCommand" date="Mon Feb 01 21:47:59 EST 2021" starttimestamp="1612231299681" timestamp="2779432" timestamp2="2779432">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="4885" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:47:59 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2779472" />
  <Command __id="4892" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:47:59 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2779858" />
  <DocumentChange __id="4893" _type="Delete" date="Mon Feb 01 21:48:00 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34272" docExpressionCount="4003" docLength="35227" endLine="988" length="7" offset="34355" startLine="988" starttimestamp="1612231299681" timestamp="2780445">
    <text><![CDATA[public ]]></text>
  </DocumentChange>
  <Command __id="4894" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:48:00 EST 2021" starttimestamp="1612231299681" timestamp="2780449" />
  <DocumentChange __id="4895" _type="Insert" date="Mon Feb 01 21:48:00 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34276" docExpressionCount="4003" docLength="35231" length="4" offset="34355" repeat="4" starttimestamp="1612231299681" timestamp="2780643" timestamp2="2780948">
    <text><![CDATA[prov]]></text>
  </DocumentChange>
  <Command __id="4896" _type="InsertStringCommand" date="Mon Feb 01 21:48:00 EST 2021" starttimestamp="1612231299681" timestamp="2780649" timestamp2="2780649">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="4897" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:00 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2780689" />
  <DocumentChange __id="4901" _type="Delete" date="Mon Feb 01 21:48:00 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34275" docExpressionCount="4003" docLength="35230" endLine="988" length="1" offset="34358" startLine="988" starttimestamp="1612231299681" timestamp="2781282">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <DocumentChange __id="4902" _type="Insert" date="Mon Feb 01 21:48:01 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34282" docExpressionCount="4003" docLength="35237" length="7" offset="34358" repeat="7" starttimestamp="1612231299681" timestamp="2781359" timestamp2="2782548">
    <text><![CDATA[tected ]]></text>
  </DocumentChange>
  <Command __id="4909" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:02 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2782563" />
  <DocumentChange __id="4910" _type="Delete" date="Mon Feb 01 21:48:03 EST 2021" docASTNodeCount="5945" docActiveCodeLength="34275" docExpressionCount="4003" docLength="35230" endLine="988" length="7" offset="34358" startLine="988" starttimestamp="1612231299681" timestamp="2784288">
    <text><![CDATA[tected ]]></text>
  </DocumentChange>
  <Command __id="4911" _type="UndoCommand" date="Mon Feb 01 21:48:03 EST 2021" starttimestamp="1612231299681" timestamp="2784310" />
  <DocumentChange __id="4912" _type="Insert" date="Mon Feb 01 21:48:04 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34282" docExpressionCount="4003" docLength="35237" length="7" offset="34358" repeat="7" starttimestamp="1612231299681" timestamp="2785237" timestamp2="2785939">
    <text><![CDATA[tected ]]></text>
  </DocumentChange>
  <Command __id="4913" _type="InsertStringCommand" date="Mon Feb 01 21:48:04 EST 2021" starttimestamp="1612231299681" timestamp="2785243" timestamp2="2785243">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4914" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:04 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2785283" />
  <Command __id="4921" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:05 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2785949" />
  <DocumentChange __id="4922" _type="Insert" date="Mon Feb 01 21:48:16 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34286" docExpressionCount="4003" docLength="35241" length="4" offset="34365" repeat="4" starttimestamp="1612231299681" timestamp="2796878" timestamp2="2797328">
    <text><![CDATA[list]]></text>
  </DocumentChange>
  <Command __id="4923" _type="InsertStringCommand" date="Mon Feb 01 21:48:16 EST 2021" starttimestamp="1612231299681" timestamp="2796883" timestamp2="2796883">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4924" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:16 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2796923" />
  <Command __id="4928" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:17 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2797744" />
  <DocumentChange __id="4929" _type="Replace" date="Mon Feb 01 21:48:17 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34289" docExpressionCount="4003" docLength="35244" endLine="988" insertionLength="7" int_docASTNodeCount="5946" int_docActiveCodeLength="34282" int_docExpressionCount="4003" int_docLength="35237" length="4" offset="34365" startLine="988" starttimestamp="1612231299681" timestamp="2797753">
    <deletedText><![CDATA[list]]></deletedText>
    <insertedText><![CDATA[List<E>]]></insertedText>
  </DocumentChange>
  <Command __id="4930" _type="InsertStringCommand" date="Mon Feb 01 21:48:17 EST 2021" starttimestamp="1612231299681" timestamp="2797789" timestamp2="2797789">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="4931" _type="Replace" date="Mon Feb 01 21:48:29 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34289" docExpressionCount="4003" docLength="35244" endLine="988" insertionLength="1" int_docASTNodeCount="5946" int_docActiveCodeLength="34288" int_docExpressionCount="4003" int_docLength="35243" length="1" offset="34370" startLine="988" starttimestamp="1612231299681" timestamp="2809473">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <Command __id="4932" _type="InsertStringCommand" date="Mon Feb 01 21:48:29 EST 2021" starttimestamp="1612231299681" timestamp="2809481" timestamp2="2809481">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="4933" _type="Insert" date="Mon Feb 01 21:48:29 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34291" docExpressionCount="4003" docLength="35246" length="2" offset="34371" repeat="2" starttimestamp="1612231299681" timestamp="2809549" timestamp2="2809758">
    <text><![CDATA[is]]></text>
  </DocumentChange>
  <Command __id="4934" _type="InsertStringCommand" date="Mon Feb 01 21:48:29 EST 2021" starttimestamp="1612231299681" timestamp="2809551" timestamp2="2809551">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4935" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:29 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2809591" />
  <DocumentChange __id="4937" _type="Delete" date="Mon Feb 01 21:48:29 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34288" docExpressionCount="4003" docLength="35243" endLine="988" length="3" offset="34370" startLine="988" starttimestamp="1612231299681" timestamp="2810212">
    <text><![CDATA[lis]]></text>
  </DocumentChange>
  <Command __id="4938" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:48:29 EST 2021" starttimestamp="1612231299681" timestamp="2810220" />
  <DocumentChange __id="4939" _type="Insert" date="Mon Feb 01 21:48:34 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34292" docExpressionCount="4003" docLength="35247" length="4" offset="34370" repeat="4" starttimestamp="1612231299681" timestamp="2814982" timestamp2="2815134">
    <text><![CDATA[wehi]]></text>
  </DocumentChange>
  <Command __id="4941" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:34 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2815029" />
  <Command __id="4943" _type="InsertStringCommand" date="Mon Feb 01 21:48:34 EST 2021" starttimestamp="1612231299681" timestamp="2815082" timestamp2="2815082">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="4945" _type="InsertStringCommand" date="Mon Feb 01 21:48:34 EST 2021" starttimestamp="1612231299681" timestamp="2815137" timestamp2="2815137">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4946" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:34 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2815175" />
  <DocumentChange __id="4947" _type="Delete" date="Mon Feb 01 21:48:35 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34288" docExpressionCount="4003" docLength="35243" endLine="988" length="4" offset="34370" repeat="4" startLine="988" starttimestamp="1612231299681" timestamp="2815572" timestamp2="2815963">
    <text><![CDATA[wehi]]></text>
  </DocumentChange>
  <DocumentChange __id="4951" _type="Insert" date="Mon Feb 01 21:48:36 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34291" docExpressionCount="4003" docLength="35246" length="3" offset="34370" repeat="3" starttimestamp="1612231299681" timestamp="2816702" timestamp2="2816796">
    <text><![CDATA[ehi]]></text>
  </DocumentChange>
  <Command __id="4953" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:36 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2816766" />
  <Command __id="4955" _type="InsertStringCommand" date="Mon Feb 01 21:48:36 EST 2021" starttimestamp="1612231299681" timestamp="2816798" timestamp2="2816798">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4956" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:36 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2816888" />
  <Command __id="4957" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:36 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2817026" />
  <DocumentChange __id="4958" _type="Replace" date="Mon Feb 01 21:48:36 EST 2021" docASTNodeCount="5946" docActiveCodeLength="34298" docExpressionCount="4003" docLength="35253" endLine="988" insertionLength="10" int_docASTNodeCount="5946" int_docActiveCodeLength="34288" int_docExpressionCount="4003" int_docLength="35243" length="3" offset="34370" startLine="988" starttimestamp="1612231299681" timestamp="2817038">
    <deletedText><![CDATA[ehi]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <Command __id="4959" _type="InsertStringCommand" date="Mon Feb 01 21:48:36 EST 2021" starttimestamp="1612231299681" timestamp="2817048" timestamp2="2817048">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4960" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:48:37 EST 2021" starttimestamp="1612231299681" timestamp="2817478" />
  <DocumentChange __id="4961" _type="Insert" date="Mon Feb 01 21:48:37 EST 2021" docASTNodeCount="5947" docActiveCodeLength="34307" docExpressionCount="4003" docLength="35262" length="9" offset="34381" repeat="2" starttimestamp="1612231299681" timestamp="2817983" timestamp2="2818113">
    <text><![CDATA[{
		
	}]]></text>
  </DocumentChange>
  <Command __id="4962" _type="InsertStringCommand" date="Mon Feb 01 21:48:37 EST 2021" starttimestamp="1612231299681" timestamp="2817994" timestamp2="2817994">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="4964" _type="InsertStringCommand" date="Mon Feb 01 21:48:37 EST 2021" starttimestamp="1612231299681" timestamp="2818120" timestamp2="2818120">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4965" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 21:48:38 EST 2021" starttimestamp="1612231299681" timestamp="2818906" />
  <Command __id="4966" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 01 21:48:39 EST 2021" starttimestamp="1612231299681" timestamp="2819465" />
  <Command __id="4967" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 01 21:48:39 EST 2021" starttimestamp="1612231299681" timestamp="2819605" />
  <Command __id="4968" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 01 21:48:39 EST 2021" starttimestamp="1612231299681" timestamp="2819724" />
  <Command __id="4969" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 01 21:48:39 EST 2021" starttimestamp="1612231299681" timestamp="2820021" />
  <Command __id="4970" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 01 21:48:39 EST 2021" starttimestamp="1612231299681" timestamp="2820219" />
  <Command __id="4971" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 01 21:48:40 EST 2021" starttimestamp="1612231299681" timestamp="2820393" />
  <Command __id="4972" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:48:40 EST 2021" starttimestamp="1612231299681" timestamp="2820822" />
  <DocumentChange __id="4973" _type="Insert" date="Mon Feb 01 21:48:40 EST 2021" docASTNodeCount="5956" docActiveCodeLength="34311" docExpressionCount="4006" docLength="35266" length="4" offset="34381" repeat="4" starttimestamp="1612231299681" timestamp="2821092" timestamp2="2821496">
    <text><![CDATA[ get]]></text>
  </DocumentChange>
  <Command __id="4974" _type="InsertStringCommand" date="Mon Feb 01 21:48:40 EST 2021" starttimestamp="1612231299681" timestamp="2821100" timestamp2="2821100">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4976" _type="InsertStringCommand" date="Mon Feb 01 21:48:40 EST 2021" starttimestamp="1612231299681" timestamp="2821284" timestamp2="2821284">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="4977" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:41 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2821320" />
  <Command __id="4980" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:41 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2821510" />
  <DocumentChange __id="4981" _type="Delete" date="Mon Feb 01 21:48:41 EST 2021" docASTNodeCount="5947" docActiveCodeLength="34308" docExpressionCount="4003" docLength="35263" endLine="988" length="3" offset="34382" repeat="3" startLine="988" starttimestamp="1612231299681" timestamp="2821720" timestamp2="2821966">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <Command __id="4982" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:48:41 EST 2021" starttimestamp="1612231299681" timestamp="2821723" />
  <Command __id="4984" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:48:41 EST 2021" starttimestamp="1612231299681" timestamp="2821856" />
  <Command __id="4986" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:48:41 EST 2021" starttimestamp="1612231299681" timestamp="2821969" />
  <DocumentChange __id="4987" _type="Insert" date="Mon Feb 01 21:48:41 EST 2021" docASTNodeCount="5956" docActiveCodeLength="34316" docExpressionCount="4006" docLength="35271" length="8" offset="34382" repeat="8" starttimestamp="1612231299681" timestamp="2822024" timestamp2="2823505">
    <text><![CDATA[readWebv]]></text>
  </DocumentChange>
  <Command __id="4988" _type="InsertStringCommand" date="Mon Feb 01 21:48:41 EST 2021" starttimestamp="1612231299681" timestamp="2822033" timestamp2="2822033">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4989" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:41 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2822070" />
  <Command __id="4992" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:41 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2822216" />
  <Command __id="4994" _type="InsertStringCommand" date="Mon Feb 01 21:48:41 EST 2021" starttimestamp="1612231299681" timestamp="2822266" timestamp2="2822266">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4995" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:41 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2822302" />
  <Command __id="4996" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:42 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2822349" />
  <Command __id="4998" _type="InsertStringCommand" date="Mon Feb 01 21:48:42 EST 2021" starttimestamp="1612231299681" timestamp="2823095" timestamp2="2823095">
    <data><![CDATA[W]]></data>
  </Command>
  <Command __id="5000" _type="InsertStringCommand" date="Mon Feb 01 21:48:42 EST 2021" starttimestamp="1612231299681" timestamp="2823294" timestamp2="2823294">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5001" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:43 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2823379" />
  <Command __id="5002" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:43 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2823426" />
  <Command __id="5004" _type="InsertStringCommand" date="Mon Feb 01 21:48:43 EST 2021" starttimestamp="1612231299681" timestamp="2823485" timestamp2="2823485">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5006" _type="InsertStringCommand" date="Mon Feb 01 21:48:43 EST 2021" starttimestamp="1612231299681" timestamp="2823514" timestamp2="2823514">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="5007" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:43 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2823601" />
  <Command __id="5008" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:43 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2823635" />
  <DocumentChange __id="5009" _type="Delete" date="Mon Feb 01 21:48:43 EST 2021" docASTNodeCount="5956" docActiveCodeLength="34315" docExpressionCount="4006" docLength="35270" endLine="988" length="1" offset="34389" startLine="988" starttimestamp="1612231299681" timestamp="2824107">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <Command __id="5010" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:48:43 EST 2021" starttimestamp="1612231299681" timestamp="2824110" />
  <Command __id="5012" _type="InsertStringCommand" date="Mon Feb 01 21:48:43 EST 2021" starttimestamp="1612231299681" timestamp="2824281" timestamp2="2824281">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="5014" _type="InsertStringCommand" date="Mon Feb 01 21:48:44 EST 2021" starttimestamp="1612231299681" timestamp="2824562" timestamp2="2824562">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5015" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2824650" />
  <Command __id="5016" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:44 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2824684" />
  <Command __id="5018" _type="InsertStringCommand" date="Mon Feb 01 21:48:44 EST 2021" starttimestamp="1612231299681" timestamp="2824750" timestamp2="2824750">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5019" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2824828" />
  <Command __id="5020" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:44 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2824863" />
  <Command __id="5022" _type="InsertStringCommand" date="Mon Feb 01 21:48:44 EST 2021" starttimestamp="1612231299681" timestamp="2824878" timestamp2="2824878">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5024" _type="InsertStringCommand" date="Mon Feb 01 21:48:44 EST 2021" starttimestamp="1612231299681" timestamp="2824894" timestamp2="2824894">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5025" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2824980" />
  <Command __id="5026" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:44 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2825014" />
  <Command __id="5028" _type="InsertStringCommand" date="Mon Feb 01 21:48:44 EST 2021" starttimestamp="1612231299681" timestamp="2825036" timestamp2="2825036">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5030" _type="InsertStringCommand" date="Mon Feb 01 21:48:44 EST 2021" starttimestamp="1612231299681" timestamp="2825127" timestamp2="2825127">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5032" _type="InsertStringCommand" date="Mon Feb 01 21:48:44 EST 2021" starttimestamp="1612231299681" timestamp="2825212" timestamp2="2825212">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5033" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2825298" />
  <Command __id="5034" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:45 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2825343" />
  <Command __id="5035" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 21:48:45 EST 2021" starttimestamp="1612231299681" timestamp="2825602" />
  <DocumentChange __id="5011" _type="Insert" date="Mon Feb 01 21:48:43 EST 2021" docASTNodeCount="5956" docActiveCodeLength="34323" docExpressionCount="4006" docLength="35278" length="8" offset="34389" repeat="8" starttimestamp="1612231299681" timestamp="2824270" timestamp2="2825204">
    <text><![CDATA[Commands]]></text>
  </DocumentChange>
  <DocumentChange __id="5039" _type="Insert" date="Mon Feb 01 21:48:48 EST 2021" docASTNodeCount="5954" docActiveCodeLength="34325" docExpressionCount="4006" docLength="35280" length="2" offset="34397" starttimestamp="1612231299681" timestamp="2828819">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="5041" _type="Insert" date="Mon Feb 01 21:48:51 EST 2021" docASTNodeCount="5954" docActiveCodeLength="34329" docExpressionCount="4006" docLength="35284" length="4" offset="34398" repeat="4" starttimestamp="1612231299681" timestamp="2831635" timestamp2="2832038">
    <text><![CDATA[File]]></text>
  </DocumentChange>
  <DocumentChange __id="5049" _type="Replace" date="Mon Feb 01 21:48:51 EST 2021" docASTNodeCount="5954" docActiveCodeLength="34330" docExpressionCount="4006" docLength="35285" endLine="988" insertionLength="5" int_docASTNodeCount="5954" int_docActiveCodeLength="34325" int_docExpressionCount="4006" int_docLength="35280" length="4" offset="34398" startLine="988" starttimestamp="1612231299681" timestamp="2832057">
    <deletedText><![CDATA[File]]></deletedText>
    <insertedText><![CDATA[File ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5051" _type="Insert" date="Mon Feb 01 21:48:54 EST 2021" docASTNodeCount="5958" docActiveCodeLength="34332" docExpressionCount="4008" docLength="35287" length="2" offset="34403" repeat="2" starttimestamp="1612231299681" timestamp="2834330" timestamp2="2834458">
    <text><![CDATA[fi]]></text>
  </DocumentChange>
  <DocumentChange __id="5055" _type="Delete" date="Mon Feb 01 21:48:54 EST 2021" docASTNodeCount="5954" docActiveCodeLength="34330" docExpressionCount="4006" docLength="35285" endLine="988" length="2" offset="34403" repeat="2" startLine="988" starttimestamp="1612231299681" timestamp="2834969" timestamp2="2835126">
    <text><![CDATA[fi]]></text>
  </DocumentChange>
  <Command __id="5036" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 21:48:47 EST 2021" starttimestamp="1612231299681" timestamp="2827600" />
  <Command __id="5037" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 21:48:47 EST 2021" starttimestamp="1612231299681" timestamp="2827810" />
  <Command __id="5038" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:48:47 EST 2021" starttimestamp="1612231299681" timestamp="2828196" />
  <Command __id="5040" _type="InsertStringCommand" date="Mon Feb 01 21:48:48 EST 2021" starttimestamp="1612231299681" timestamp="2828825" timestamp2="2828825">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5042" _type="InsertStringCommand" date="Mon Feb 01 21:48:51 EST 2021" starttimestamp="1612231299681" timestamp="2831641" timestamp2="2831641">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="5044" _type="InsertStringCommand" date="Mon Feb 01 21:48:51 EST 2021" starttimestamp="1612231299681" timestamp="2831754" timestamp2="2831754">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5045" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:51 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2831844" />
  <Command __id="5048" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:51 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2832047" />
  <Command __id="5050" _type="InsertStringCommand" date="Mon Feb 01 21:48:51 EST 2021" starttimestamp="1612231299681" timestamp="2832067" timestamp2="2832067">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5052" _type="InsertStringCommand" date="Mon Feb 01 21:48:54 EST 2021" starttimestamp="1612231299681" timestamp="2834332" timestamp2="2834332">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5053" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:54 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2834372" />
  <Command __id="5059" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:56 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2836873" />
  <Command __id="5061" _type="InsertStringCommand" date="Mon Feb 01 21:48:56 EST 2021" starttimestamp="1612231299681" timestamp="2837035" timestamp2="2837035">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5062" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:56 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2837076" />
  <Command __id="5063" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:56 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2837100" />
  <Command __id="5065" _type="InsertStringCommand" date="Mon Feb 01 21:48:57 EST 2021" starttimestamp="1612231299681" timestamp="2837347" timestamp2="2837347">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5066" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:57 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2837440" />
  <Command __id="5067" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:57 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2837474" />
  <Command __id="5069" _type="InsertStringCommand" date="Mon Feb 01 21:48:57 EST 2021" starttimestamp="1612231299681" timestamp="2837673" timestamp2="2837673">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5071" _type="InsertStringCommand" date="Mon Feb 01 21:48:57 EST 2021" starttimestamp="1612231299681" timestamp="2837738" timestamp2="2837738">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5072" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:57 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2837778" />
  <Command __id="5073" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:57 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2837802" />
  <Command __id="5075" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:48:57 EST 2021" starttimestamp="1612231299681" timestamp="2838214" />
  <Command __id="5077" _type="InsertStringCommand" date="Mon Feb 01 21:48:58 EST 2021" starttimestamp="1612231299681" timestamp="2838435" timestamp2="2838435">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="5057" _type="Insert" date="Mon Feb 01 21:48:56 EST 2021" docASTNodeCount="5958" docActiveCodeLength="34336" docExpressionCount="4008" docLength="35291" length="6" offset="34403" repeat="6" starttimestamp="1612231299681" timestamp="2836761" timestamp2="2837735">
    <text><![CDATA[folder]]></text>
  </DocumentChange>
  <DocumentChange __id="5074" _type="Delete" date="Mon Feb 01 21:48:57 EST 2021" docASTNodeCount="5954" docActiveCodeLength="34330" docExpressionCount="4006" docLength="35285" endLine="988" length="6" offset="34403" startLine="988" starttimestamp="1612231299681" timestamp="2838211">
    <text><![CDATA[folder]]></text>
  </DocumentChange>
  <DocumentChange __id="5076" _type="Insert" date="Mon Feb 01 21:48:58 EST 2021" docASTNodeCount="5958" docActiveCodeLength="34334" docExpressionCount="4008" docLength="35289" length="4" offset="34403" repeat="4" starttimestamp="1612231299681" timestamp="2838431" timestamp2="2838665">
    <text><![CDATA[file]]></text>
  </DocumentChange>
  <Command __id="5079" _type="InsertStringCommand" date="Mon Feb 01 21:48:58 EST 2021" starttimestamp="1612231299681" timestamp="2838466" timestamp2="2838466">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5080" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:48:58 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2838507" />
  <Command __id="5083" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:48:58 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2838806" />
  <Command __id="5084" _type="InsertStringCommand" date="Mon Feb 01 21:48:58 EST 2021" starttimestamp="1612231299681" timestamp="2838811" timestamp2="2838811">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5085" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 21:48:58 EST 2021" starttimestamp="1612231299681" timestamp="2839276" />
  <Command __id="5087" _type="InsertStringCommand" date="Mon Feb 01 21:49:05 EST 2021" starttimestamp="1612231299681" timestamp="2846311" timestamp2="2846311">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="5089" _type="InsertStringCommand" date="Mon Feb 01 21:49:06 EST 2021" starttimestamp="1612231299681" timestamp="2846504" timestamp2="2846504">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5090" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:06 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2846546" />
  <Command __id="5093" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:07 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2847734" />
  <Command __id="5095" _type="InsertStringCommand" date="Mon Feb 01 21:49:07 EST 2021" starttimestamp="1612231299681" timestamp="2847781" timestamp2="2847781">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5097" _type="InsertStringCommand" date="Mon Feb 01 21:49:07 EST 2021" starttimestamp="1612231299681" timestamp="2848313" timestamp2="2848313">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5098" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:08 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2848397" />
  <Command __id="5102" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:08 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2848657" />
  <Command __id="5104" _type="InsertStringCommand" date="Mon Feb 01 21:49:08 EST 2021" starttimestamp="1612231299681" timestamp="2848683" timestamp2="2848683">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5106" _type="InsertStringCommand" date="Mon Feb 01 21:49:08 EST 2021" starttimestamp="1612231299681" timestamp="2848793" timestamp2="2848793">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5108" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:49:09 EST 2021" starttimestamp="1612231299681" timestamp="2849576" />
  <Command __id="5109" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:49:09 EST 2021" starttimestamp="1612231299681" timestamp="2850010" />
  <Command __id="5111" _type="InsertStringCommand" date="Mon Feb 01 21:49:09 EST 2021" starttimestamp="1612231299681" timestamp="2850209" timestamp2="2850209">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5113" _type="InsertStringCommand" date="Mon Feb 01 21:49:10 EST 2021" starttimestamp="1612231299681" timestamp="2851121" timestamp2="2851121">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5115" _type="InsertStringCommand" date="Mon Feb 01 21:49:10 EST 2021" starttimestamp="1612231299681" timestamp="2851184" timestamp2="2851184">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5116" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:10 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2851275" />
  <Command __id="5118" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:11 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2851387" />
  <Command __id="5120" _type="InsertStringCommand" date="Mon Feb 01 21:49:11 EST 2021" starttimestamp="1612231299681" timestamp="2851725" timestamp2="2851725">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="5122" _type="InsertStringCommand" date="Mon Feb 01 21:49:11 EST 2021" starttimestamp="1612231299681" timestamp="2851855" timestamp2="2851855">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5123" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:11 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2851945" />
  <Command __id="5124" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:11 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2851980" />
  <Command __id="5126" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:49:11 EST 2021" starttimestamp="1612231299681" timestamp="2852159" />
  <Command __id="5128" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:49:11 EST 2021" starttimestamp="1612231299681" timestamp="2852277" />
  <Command __id="5130" _type="InsertStringCommand" date="Mon Feb 01 21:49:12 EST 2021" starttimestamp="1612231299681" timestamp="2852539" timestamp2="2852539">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="5132" _type="InsertStringCommand" date="Mon Feb 01 21:49:12 EST 2021" starttimestamp="1612231299681" timestamp="2852690" timestamp2="2852690">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5134" _type="InsertStringCommand" date="Mon Feb 01 21:49:12 EST 2021" starttimestamp="1612231299681" timestamp="2852763" timestamp2="2852763">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5135" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:12 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2852855" />
  <DocumentChange __id="5086" _type="Insert" date="Mon Feb 01 21:49:05 EST 2021" docASTNodeCount="5960" docActiveCodeLength="34338" docExpressionCount="4009" docLength="35293" length="4" offset="34413" repeat="4" starttimestamp="1612231299681" timestamp="2846305" timestamp2="2846686">
    <text><![CDATA[List]]></text>
  </DocumentChange>
  <DocumentChange __id="5094" _type="Replace" date="Mon Feb 01 21:49:07 EST 2021" docASTNodeCount="5960" docActiveCodeLength="34341" docExpressionCount="4009" docLength="35296" endLine="989" insertionLength="7" int_docASTNodeCount="5958" int_docActiveCodeLength="34334" int_docExpressionCount="4008" int_docLength="35289" length="4" offset="34413" startLine="989" starttimestamp="1612231299681" timestamp="2847742">
    <deletedText><![CDATA[List]]></deletedText>
    <insertedText><![CDATA[List<E>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5096" _type="Replace" date="Mon Feb 01 21:49:07 EST 2021" docASTNodeCount="5960" docActiveCodeLength="34341" docExpressionCount="4009" docLength="35296" endLine="989" insertionLength="1" int_docASTNodeCount="5960" int_docActiveCodeLength="34340" int_docExpressionCount="4009" int_docLength="35295" length="1" offset="34418" startLine="989" starttimestamp="1612231299681" timestamp="2848304">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5099" _type="Insert" date="Mon Feb 01 21:49:08 EST 2021" docASTNodeCount="5960" docActiveCodeLength="34344" docExpressionCount="4009" docLength="35299" length="3" offset="34419" repeat="3" starttimestamp="1612231299681" timestamp="2848584" timestamp2="2848616">
    <text><![CDATA[hic]]></text>
  </DocumentChange>
  <DocumentChange __id="5103" _type="Replace" date="Mon Feb 01 21:49:08 EST 2021" docASTNodeCount="5960" docActiveCodeLength="34350" docExpressionCount="4009" docLength="35305" endLine="989" insertionLength="10" int_docASTNodeCount="5960" int_docActiveCodeLength="34340" int_docExpressionCount="4009" int_docLength="35295" length="4" offset="34418" startLine="989" starttimestamp="1612231299681" timestamp="2848673">
    <deletedText><![CDATA[ehic]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5105" _type="Insert" date="Mon Feb 01 21:49:08 EST 2021" docASTNodeCount="5960" docActiveCodeLength="34351" docExpressionCount="4009" docLength="35306" length="1" offset="34428" starttimestamp="1612231299681" timestamp="2848790">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5107" _type="Delete" date="Mon Feb 01 21:49:09 EST 2021" docASTNodeCount="5960" docActiveCodeLength="34350" docExpressionCount="4009" docLength="35305" endLine="989" length="1" offset="34428" startLine="989" starttimestamp="1612231299681" timestamp="2849574">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5110" _type="Insert" date="Mon Feb 01 21:49:09 EST 2021" docASTNodeCount="5966" docActiveCodeLength="34356" docExpressionCount="4011" docLength="35311" length="6" offset="34429" repeat="6" starttimestamp="1612231299681" timestamp="2850200" timestamp2="2851847">
    <text><![CDATA[ retCa]]></text>
  </DocumentChange>
  <DocumentChange __id="5125" _type="Delete" date="Mon Feb 01 21:49:11 EST 2021" docASTNodeCount="5966" docActiveCodeLength="34354" docExpressionCount="4011" docLength="35309" endLine="989" length="2" offset="34433" repeat="2" startLine="989" starttimestamp="1612231299681" timestamp="2852156" timestamp2="2852274">
    <text><![CDATA[Ca]]></text>
  </DocumentChange>
  <DocumentChange __id="5129" _type="Insert" date="Mon Feb 01 21:49:12 EST 2021" docASTNodeCount="5969" docActiveCodeLength="34366" docExpressionCount="4013" docLength="35321" length="12" offset="34433" repeat="12" starttimestamp="1612231299681" timestamp="2852533" timestamp2="2854314">
    <text><![CDATA[Val = new re]]></text>
  </DocumentChange>
  <DocumentChange __id="5156" _type="Delete" date="Mon Feb 01 21:49:14 EST 2021" docASTNodeCount="5966" docActiveCodeLength="34364" docExpressionCount="4011" docLength="35319" endLine="989" length="2" offset="34443" repeat="2" startLine="989" starttimestamp="1612231299681" timestamp="2854747" timestamp2="2855053">
    <text><![CDATA[re]]></text>
  </DocumentChange>
  <DocumentChange __id="5158" _type="Insert" date="Mon Feb 01 21:49:15 EST 2021" docASTNodeCount="5969" docActiveCodeLength="34366" docExpressionCount="4013" docLength="35321" length="2" offset="34443" repeat="2" starttimestamp="1612231299681" timestamp="2855719" timestamp2="2855807">
    <text><![CDATA[li]]></text>
  </DocumentChange>
  <DocumentChange __id="5160" _type="Delete" date="Mon Feb 01 21:49:15 EST 2021" docASTNodeCount="5966" docActiveCodeLength="34364" docExpressionCount="4011" docLength="35319" endLine="989" length="2" offset="34443" repeat="2" startLine="989" starttimestamp="1612231299681" timestamp="2856095" timestamp2="2856211">
    <text><![CDATA[li]]></text>
  </DocumentChange>
  <DocumentChange __id="5162" _type="Insert" date="Mon Feb 01 21:49:16 EST 2021" docASTNodeCount="5969" docActiveCodeLength="34367" docExpressionCount="4013" docLength="35322" length="3" offset="34443" repeat="3" starttimestamp="1612231299681" timestamp="2856353" timestamp2="2856713">
    <text><![CDATA[arr]]></text>
  </DocumentChange>
  <DocumentChange __id="5165" _type="Delete" date="Mon Feb 01 21:49:18 EST 2021" docASTNodeCount="5969" docActiveCodeLength="34366" docExpressionCount="4013" docLength="35321" endLine="989" length="1" offset="34445" startLine="989" starttimestamp="1612231299681" timestamp="2859075">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5166" _type="Insert" date="Mon Feb 01 21:49:19 EST 2021" docASTNodeCount="5969" docActiveCodeLength="34370" docExpressionCount="4013" docLength="35325" length="4" offset="34445" repeat="4" starttimestamp="1612231299681" timestamp="2859543" timestamp2="2859951">
    <text><![CDATA[rali]]></text>
  </DocumentChange>
  <DocumentChange __id="5174" _type="Replace" date="Mon Feb 01 21:49:20 EST 2021" docASTNodeCount="5970" docActiveCodeLength="34375" docExpressionCount="4013" docLength="35330" endLine="989" insertionLength="11" int_docASTNodeCount="5966" int_docActiveCodeLength="34364" int_docExpressionCount="4011" int_docLength="35319" length="6" offset="34443" startLine="989" starttimestamp="1612231299681" timestamp="2861056">
    <deletedText><![CDATA[arrali]]></deletedText>
    <insertedText><![CDATA[ArrayList<>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5175" _type="Insert" date="Mon Feb 01 21:49:20 EST 2021" docASTNodeCount="5972" docActiveCodeLength="34385" docExpressionCount="4014" docLength="35340" length="10" offset="34454" repeat="6" starttimestamp="1612231299681" timestamp="2861069" timestamp2="2863830">
    <text><![CDATA[();
		ret]]></text>
  </DocumentChange>
  <DocumentChange __id="5188" _type="Replace" date="Mon Feb 01 21:49:23 EST 2021" docASTNodeCount="5972" docActiveCodeLength="34388" docExpressionCount="4014" docLength="35343" endLine="990" insertionLength="6" int_docASTNodeCount="5970" int_docActiveCodeLength="34382" int_docExpressionCount="4013" int_docLength="35337" length="3" offset="34461" startLine="990" starttimestamp="1612231299681" timestamp="2863858">
    <deletedText><![CDATA[ret]]></deletedText>
    <insertedText><![CDATA[retVal]]></insertedText>
  </DocumentChange>
  <Command __id="5136" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:12 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2852884" />
  <Command __id="5138" _type="InsertStringCommand" date="Mon Feb 01 21:49:12 EST 2021" starttimestamp="1612231299681" timestamp="2852908" timestamp2="2852908">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5140" _type="InsertStringCommand" date="Mon Feb 01 21:49:12 EST 2021" starttimestamp="1612231299681" timestamp="2853040" timestamp2="2853040">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5142" _type="InsertStringCommand" date="Mon Feb 01 21:49:12 EST 2021" starttimestamp="1612231299681" timestamp="2853106" timestamp2="2853106">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5144" _type="InsertStringCommand" date="Mon Feb 01 21:49:13 EST 2021" starttimestamp="1612231299681" timestamp="2853528" timestamp2="2853528">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5146" _type="InsertStringCommand" date="Mon Feb 01 21:49:13 EST 2021" starttimestamp="1612231299681" timestamp="2853579" timestamp2="2853579">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5147" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:13 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2853619" />
  <Command __id="5150" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:13 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2853840" />
  <Command __id="5152" _type="InsertStringCommand" date="Mon Feb 01 21:49:13 EST 2021" starttimestamp="1612231299681" timestamp="2854276" timestamp2="2854276">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5154" _type="InsertStringCommand" date="Mon Feb 01 21:49:14 EST 2021" starttimestamp="1612231299681" timestamp="2854322" timestamp2="2854322">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5155" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:14 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2854361" />
  <Command __id="5169" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:19 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2859779" />
  <Command __id="5171" _type="InsertStringCommand" date="Mon Feb 01 21:49:19 EST 2021" starttimestamp="1612231299681" timestamp="2859957" timestamp2="2859957">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5172" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:19 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2860048" />
  <Command __id="5173" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:20 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2861045" />
  <Command __id="5176" _type="InsertStringCommand" date="Mon Feb 01 21:49:20 EST 2021" starttimestamp="1612231299681" timestamp="2861076" timestamp2="2861076">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5178" _type="InsertStringCommand" date="Mon Feb 01 21:49:21 EST 2021" starttimestamp="1612231299681" timestamp="2861571" timestamp2="2861571">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5180" _type="InsertStringCommand" date="Mon Feb 01 21:49:21 EST 2021" starttimestamp="1612231299681" timestamp="2861781" timestamp2="2861781">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5182" _type="InsertStringCommand" date="Mon Feb 01 21:49:23 EST 2021" starttimestamp="1612231299681" timestamp="2863529" timestamp2="2863529">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5184" _type="InsertStringCommand" date="Mon Feb 01 21:49:23 EST 2021" starttimestamp="1612231299681" timestamp="2863582" timestamp2="2863582">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5185" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:23 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2863633" />
  <Command __id="5187" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:23 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2863844" />
  <Command __id="5189" _type="InsertStringCommand" date="Mon Feb 01 21:49:23 EST 2021" starttimestamp="1612231299681" timestamp="2863869" timestamp2="2863869">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5191" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:49:24 EST 2021" starttimestamp="1612231299681" timestamp="2865094" />
  <Command __id="5193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:49:25 EST 2021" starttimestamp="1612231299681" timestamp="2865481" />
  <Command __id="5195" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:49:25 EST 2021" starttimestamp="1612231299681" timestamp="2865640" />
  <Command __id="5197" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:49:25 EST 2021" starttimestamp="1612231299681" timestamp="2865775" />
  <Command __id="5198" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 21:49:54 EST 2021" starttimestamp="1612231299681" timestamp="2895133" />
  <Command __id="5199" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 21:49:55 EST 2021" starttimestamp="1612231299681" timestamp="2895380" />
  <Command __id="5200" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 21:49:55 EST 2021" starttimestamp="1612231299681" timestamp="2895716" />
  <Command __id="5201" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 21:49:55 EST 2021" starttimestamp="1612231299681" timestamp="2896015" />
  <Command __id="5203" _type="InsertStringCommand" date="Mon Feb 01 21:49:55 EST 2021" starttimestamp="1612231299681" timestamp="2896181" timestamp2="2896181">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5205" _type="InsertStringCommand" date="Mon Feb 01 21:49:56 EST 2021" starttimestamp="1612231299681" timestamp="2896798" timestamp2="2896798">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5206" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:56 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2896839" />
  <Command __id="5208" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:56 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2897051" />
  <Command __id="5210" _type="InsertStringCommand" date="Mon Feb 01 21:49:56 EST 2021" starttimestamp="1612231299681" timestamp="2897152" timestamp2="2897152">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5212" _type="InsertStringCommand" date="Mon Feb 01 21:49:57 EST 2021" starttimestamp="1612231299681" timestamp="2897503" timestamp2="2897503">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5214" _type="InsertStringCommand" date="Mon Feb 01 21:49:57 EST 2021" starttimestamp="1612231299681" timestamp="2897526" timestamp2="2897526">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5215" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:57 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2897567" />
  <Command __id="5218" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:57 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2897854" />
  <Command __id="5219" _type="InsertStringCommand" date="Mon Feb 01 21:49:57 EST 2021" starttimestamp="1612231299681" timestamp="2897859" timestamp2="2897859">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5221" _type="InsertStringCommand" date="Mon Feb 01 21:49:57 EST 2021" starttimestamp="1612231299681" timestamp="2898053" timestamp2="2898053">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5222" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:57 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2898093" />
  <Command __id="5225" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:49:58 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2898533" />
  <Command __id="5227" _type="InsertStringCommand" date="Mon Feb 01 21:49:58 EST 2021" starttimestamp="1612231299681" timestamp="2898550" timestamp2="2898550">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5228" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 21:49:59 EST 2021" starttimestamp="1612231299681" timestamp="2899867" />
  <Command __id="5230" _type="InsertStringCommand" date="Mon Feb 01 21:49:59 EST 2021" starttimestamp="1612231299681" timestamp="2900073" timestamp2="2900073">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5232" _type="InsertStringCommand" date="Mon Feb 01 21:49:59 EST 2021" starttimestamp="1612231299681" timestamp="2900091" timestamp2="2900091">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5233" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:49:59 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2900131" />
  <Command __id="5235" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:00 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2900351" />
  <Command __id="5237" _type="InsertStringCommand" date="Mon Feb 01 21:50:00 EST 2021" starttimestamp="1612231299681" timestamp="2900370" timestamp2="2900370">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5239" _type="InsertStringCommand" date="Mon Feb 01 21:50:00 EST 2021" starttimestamp="1612231299681" timestamp="2900467" timestamp2="2900467">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5241" _type="InsertStringCommand" date="Mon Feb 01 21:50:00 EST 2021" starttimestamp="1612231299681" timestamp="2900982" timestamp2="2900982">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5242" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:00 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2901023" />
  <Command __id="5247" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:01 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2902280" />
  <Command __id="5249" _type="InsertStringCommand" date="Mon Feb 01 21:50:01 EST 2021" starttimestamp="1612231299681" timestamp="2902297" timestamp2="2902297">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5251" _type="UndoCommand" date="Mon Feb 01 21:50:02 EST 2021" starttimestamp="1612231299681" timestamp="2903029" />
  <Command __id="5253" _type="InsertStringCommand" date="Mon Feb 01 21:50:03 EST 2021" starttimestamp="1612231299681" timestamp="2903515" timestamp2="2903515">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5254" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:03 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2903552" />
  <Command __id="5259" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:03 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2904295" />
  <Command __id="5261" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:50:04 EST 2021" starttimestamp="1612231299681" timestamp="2904777" />
  <Command __id="5263" _type="InsertStringCommand" date="Mon Feb 01 21:50:04 EST 2021" starttimestamp="1612231299681" timestamp="2904947" timestamp2="2904947">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5264" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 21:50:04 EST 2021" starttimestamp="1612231299681" timestamp="2905239" />
  <Command __id="5265" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:50:05 EST 2021" starttimestamp="1612231299681" timestamp="2905565" />
  <Command __id="5266" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:50:05 EST 2021" starttimestamp="1612231299681" timestamp="2905732" />
  <Command __id="5267" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:50:05 EST 2021" starttimestamp="1612231299681" timestamp="2905870" />
  <Command __id="5268" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:50:06 EST 2021" starttimestamp="1612231299681" timestamp="2906353" />
  <Command __id="5269" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:50:06 EST 2021" starttimestamp="1612231299681" timestamp="2906513" />
  <Command __id="5270" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:50:06 EST 2021" starttimestamp="1612231299681" timestamp="2906663" />
  <Command __id="5271" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:50:06 EST 2021" starttimestamp="1612231299681" timestamp="2906787" />
  <Command __id="5273" _type="InsertStringCommand" date="Mon Feb 01 21:50:06 EST 2021" starttimestamp="1612231299681" timestamp="2907080" timestamp2="2907080">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="5274" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 21:50:07 EST 2021" starttimestamp="1612231299681" timestamp="2907342" />
  <Command __id="5275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 21:50:07 EST 2021" starttimestamp="1612231299681" timestamp="2907524" />
  <DocumentChange __id="5190" _type="Delete" date="Mon Feb 01 21:49:24 EST 2021" docASTNodeCount="5970" docActiveCodeLength="34382" docExpressionCount="4013" docLength="35337" endLine="990" length="6" offset="34461" repeat="4" startLine="990" starttimestamp="1612231299681" timestamp="2865090" timestamp2="2865772">
    <text><![CDATA[retVal]]></text>
  </DocumentChange>
  <DocumentChange __id="5202" _type="Insert" date="Mon Feb 01 21:49:55 EST 2021" docASTNodeCount="5970" docActiveCodeLength="34388" docExpressionCount="4013" docLength="35343" length="6" offset="34409" repeat="3" starttimestamp="1612231299681" timestamp="2896166" timestamp2="2897038">
    <text><![CDATA[
		if]]></text>
  </DocumentChange>
  <DocumentChange __id="5209" _type="Replace" date="Mon Feb 01 21:49:56 EST 2021" docASTNodeCount="5973" docActiveCodeLength="34425" docExpressionCount="4014" docLength="35380" endLine="989" insertionLength="39" int_docASTNodeCount="5970" int_docActiveCodeLength="34386" int_docExpressionCount="4013" int_docLength="35341" length="2" offset="34413" startLine="989" starttimestamp="1612231299681" timestamp="2897082">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
			
		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5211" _type="Replace" date="Mon Feb 01 21:49:57 EST 2021" docASTNodeCount="5973" docActiveCodeLength="34404" docExpressionCount="4014" docLength="35359" endLine="989" insertionLength="1" int_docASTNodeCount="5973" int_docActiveCodeLength="34403" int_docExpressionCount="4014" int_docLength="35358" length="22" offset="34417" startLine="989" starttimestamp="1612231299681" timestamp="2897493">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[f]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5213" _type="Insert" date="Mon Feb 01 21:49:57 EST 2021" docASTNodeCount="5975" docActiveCodeLength="34410" docExpressionCount="4016" docLength="35365" length="6" offset="34418" repeat="6" starttimestamp="1612231299681" timestamp="2897523" timestamp2="2898480">
    <text><![CDATA[ile.ex]]></text>
  </DocumentChange>
  <DocumentChange __id="5226" _type="Replace" date="Mon Feb 01 21:49:58 EST 2021" docASTNodeCount="5975" docActiveCodeLength="34416" docExpressionCount="4016" docLength="35371" endLine="989" insertionLength="8" int_docASTNodeCount="5975" int_docActiveCodeLength="34408" int_docExpressionCount="4015" int_docLength="35363" length="2" offset="34422" startLine="989" starttimestamp="1612231299681" timestamp="2898540">
    <deletedText><![CDATA[ex]]></deletedText>
    <insertedText><![CDATA[exists()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5229" _type="Insert" date="Mon Feb 01 21:49:59 EST 2021" docASTNodeCount="5977" docActiveCodeLength="34419" docExpressionCount="4017" docLength="35374" length="3" offset="34438" repeat="3" starttimestamp="1612231299681" timestamp="2900066" timestamp2="2900315">
    <text><![CDATA[ret]]></text>
  </DocumentChange>
  <DocumentChange __id="5236" _type="Replace" date="Mon Feb 01 21:50:00 EST 2021" docASTNodeCount="5976" docActiveCodeLength="34422" docExpressionCount="4016" docLength="35377" endLine="990" insertionLength="6" int_docASTNodeCount="5975" int_docActiveCodeLength="34416" int_docExpressionCount="4016" int_docLength="35371" length="3" offset="34438" startLine="990" starttimestamp="1612231299681" timestamp="2900360">
    <deletedText><![CDATA[ret]]></deletedText>
    <insertedText><![CDATA[return]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5238" _type="Insert" date="Mon Feb 01 21:50:00 EST 2021" docASTNodeCount="5977" docActiveCodeLength="34424" docExpressionCount="4017" docLength="35379" length="2" offset="34444" repeat="2" starttimestamp="1612231299681" timestamp="2900459" timestamp2="2900976">
    <text><![CDATA[ u]]></text>
  </DocumentChange>
  <DocumentChange __id="5243" _type="Delete" date="Mon Feb 01 21:50:01 EST 2021" docASTNodeCount="5976" docActiveCodeLength="34423" docExpressionCount="4016" docLength="35378" endLine="990" length="1" offset="34445" startLine="990" starttimestamp="1612231299681" timestamp="2901406">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="5244" _type="Insert" date="Mon Feb 01 21:50:01 EST 2021" docASTNodeCount="5977" docActiveCodeLength="34426" docExpressionCount="4017" docLength="35381" length="3" offset="34445" repeat="3" starttimestamp="1612231299681" timestamp="2901695" timestamp2="2902001">
    <text><![CDATA[nul]]></text>
  </DocumentChange>
  <DocumentChange __id="5248" _type="Replace" date="Mon Feb 01 21:50:01 EST 2021" docASTNodeCount="5977" docActiveCodeLength="34435" docExpressionCount="4017" docLength="35390" endLine="990" insertionLength="12" int_docASTNodeCount="5976" int_docActiveCodeLength="34423" int_docExpressionCount="4016" int_docLength="35378" length="3" offset="34445" startLine="990" starttimestamp="1612231299681" timestamp="2902289">
    <deletedText><![CDATA[nul]]></deletedText>
    <insertedText><![CDATA[numLostFocus]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5250" _type="Replace" date="Mon Feb 01 21:50:02 EST 2021" docASTNodeCount="5977" docActiveCodeLength="34426" docExpressionCount="4017" docLength="35381" endLine="990" insertionLength="3" int_docASTNodeCount="5976" int_docActiveCodeLength="34423" int_docExpressionCount="4016" int_docLength="35378" length="12" offset="34445" startLine="990" starttimestamp="1612231299681" timestamp="2902992">
    <deletedText><![CDATA[numLostFocus]]></deletedText>
    <insertedText><![CDATA[nul]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5252" _type="Replace" date="Mon Feb 01 21:50:03 EST 2021" docASTNodeCount="5977" docActiveCodeLength="34424" docExpressionCount="4017" docLength="35379" endLine="990" insertionLength="1" int_docASTNodeCount="5976" int_docActiveCodeLength="34423" int_docExpressionCount="4016" int_docLength="35378" length="3" offset="34445" startLine="990" starttimestamp="1612231299681" timestamp="2903509">
    <deletedText><![CDATA[nul]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5255" _type="Insert" date="Mon Feb 01 21:50:03 EST 2021" docASTNodeCount="5977" docActiveCodeLength="34428" docExpressionCount="4017" docLength="35383" length="4" offset="34446" repeat="4" starttimestamp="1612231299681" timestamp="2903704" timestamp2="2904284">
    <text><![CDATA[ull.]]></text>
  </DocumentChange>
  <DocumentChange __id="5260" _type="Delete" date="Mon Feb 01 21:50:04 EST 2021" docASTNodeCount="5977" docActiveCodeLength="34427" docExpressionCount="4017" docLength="35382" endLine="990" length="1" offset="34449" startLine="990" starttimestamp="1612231299681" timestamp="2904774">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="5262" _type="Insert" date="Mon Feb 01 21:50:04 EST 2021" docASTNodeCount="5977" docActiveCodeLength="34428" docExpressionCount="4017" docLength="35383" length="1" offset="34449" starttimestamp="1612231299681" timestamp="2904941">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="5272" _type="Insert" date="Mon Feb 01 21:50:06 EST 2021" docASTNodeCount="5978" docActiveCodeLength="34429" docExpressionCount="4018" docLength="35384" length="1" offset="34417" starttimestamp="1612231299681" timestamp="2907073">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="5278" _type="Insert" date="Mon Feb 01 21:50:08 EST 2021" docASTNodeCount="5978" docActiveCodeLength="34433" docExpressionCount="4018" docLength="35388" length="4" offset="34504" starttimestamp="1612231299681" timestamp="2909110">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="5280" _type="Insert" date="Mon Feb 01 21:50:12 EST 2021" docASTNodeCount="5980" docActiveCodeLength="34439" docExpressionCount="4019" docLength="35394" length="6" offset="34508" repeat="6" starttimestamp="1612231299681" timestamp="2913086" timestamp2="2913722">
    <text><![CDATA[filere]]></text>
  </DocumentChange>
  <DocumentChange __id="5288" _type="Delete" date="Mon Feb 01 21:50:15 EST 2021" docASTNodeCount="5978" docActiveCodeLength="34433" docExpressionCount="4018" docLength="35388" endLine="993" length="6" offset="34508" startLine="993" starttimestamp="1612231299681" timestamp="2915732">
    <text><![CDATA[filere]]></text>
  </DocumentChange>
  <DocumentChange __id="5290" _type="Insert" date="Mon Feb 01 21:50:15 EST 2021" docASTNodeCount="5980" docActiveCodeLength="34442" docExpressionCount="4019" docLength="35397" length="9" offset="34508" repeat="9" starttimestamp="1612231299681" timestamp="2915931" timestamp2="2917629">
    <text><![CDATA[bufferrea]]></text>
  </DocumentChange>
  <DocumentChange __id="5303" _type="Replace" date="Mon Feb 01 21:50:18 EST 2021" docASTNodeCount="5980" docActiveCodeLength="34447" docExpressionCount="4019" docLength="35402" endLine="993" insertionLength="14" int_docASTNodeCount="5978" int_docActiveCodeLength="34433" int_docExpressionCount="4018" int_docLength="35388" length="9" offset="34508" startLine="993" starttimestamp="1612231299681" timestamp="2918331">
    <deletedText><![CDATA[bufferrea]]></deletedText>
    <insertedText><![CDATA[BufferedReader]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5305" _type="Insert" date="Mon Feb 01 21:50:19 EST 2021" docASTNodeCount="5980" docActiveCodeLength="34448" docExpressionCount="4019" docLength="35403" length="1" offset="34522" starttimestamp="1612231299681" timestamp="2919496">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="5276" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 21:50:08 EST 2021" starttimestamp="1612231299681" timestamp="2908537" />
  <Command __id="5277" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 21:50:08 EST 2021" starttimestamp="1612231299681" timestamp="2908901" />
  <Command __id="5279" _type="InsertStringCommand" date="Mon Feb 01 21:50:08 EST 2021" starttimestamp="1612231299681" timestamp="2909122" timestamp2="2909122">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5281" _type="InsertStringCommand" date="Mon Feb 01 21:50:12 EST 2021" starttimestamp="1612231299681" timestamp="2913091" timestamp2="2913091">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5282" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:12 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2913132" />
  <Command __id="5289" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:50:15 EST 2021" starttimestamp="1612231299681" timestamp="2915735" />
  <Command __id="5293" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:16 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2916432" />
  <Command __id="5295" _type="InsertStringCommand" date="Mon Feb 01 21:50:16 EST 2021" starttimestamp="1612231299681" timestamp="2916539" timestamp2="2916539">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5296" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:16 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2916576" />
  <Command __id="5302" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:18 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2918322" />
  <Command __id="5304" _type="InsertStringCommand" date="Mon Feb 01 21:50:18 EST 2021" starttimestamp="1612231299681" timestamp="2918342" timestamp2="2918342">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5306" _type="InsertStringCommand" date="Mon Feb 01 21:50:19 EST 2021" starttimestamp="1612231299681" timestamp="2919502" timestamp2="2919502">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5308" _type="InsertStringCommand" date="Mon Feb 01 21:50:22 EST 2021" starttimestamp="1612231299681" timestamp="2922347" timestamp2="2922347">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5309" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:22 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2922389" />
  <Command __id="5311" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:23 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2923603" />
  <Command __id="5313" _type="InsertStringCommand" date="Mon Feb 01 21:50:23 EST 2021" starttimestamp="1612231299681" timestamp="2923838" timestamp2="2923838">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5315" _type="InsertStringCommand" date="Mon Feb 01 21:50:23 EST 2021" starttimestamp="1612231299681" timestamp="2923952" timestamp2="2923952">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5317" _type="InsertStringCommand" date="Mon Feb 01 21:50:23 EST 2021" starttimestamp="1612231299681" timestamp="2924042" timestamp2="2924042">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5319" _type="InsertStringCommand" date="Mon Feb 01 21:50:23 EST 2021" starttimestamp="1612231299681" timestamp="2924285" timestamp2="2924285">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5320" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:24 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2924326" />
  <Command __id="5324" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:24 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2924596" />
  <Command __id="5326" _type="InsertStringCommand" date="Mon Feb 01 21:50:24 EST 2021" starttimestamp="1612231299681" timestamp="2924866" timestamp2="2924866">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5327" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:24 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2924906" />
  <Command __id="5330" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:26 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2926961" />
  <Command __id="5333" _type="InsertStringCommand" date="Mon Feb 01 21:50:26 EST 2021" starttimestamp="1612231299681" timestamp="2927093" timestamp2="2927093">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5334" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:50:28 EST 2021" starttimestamp="1612231299681" timestamp="2928325" />
  <Command __id="5335" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 21:50:28 EST 2021" starttimestamp="1612231299681" timestamp="2928578" />
  <Command __id="5336" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:50:28 EST 2021" starttimestamp="1612231299681" timestamp="2928855" />
  <Command __id="5338" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:50:29 EST 2021" starttimestamp="1612231299681" timestamp="2929424" />
  <Command __id="5340" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:50:29 EST 2021" starttimestamp="1612231299681" timestamp="2929547" />
  <Command __id="5342" _type="InsertStringCommand" date="Mon Feb 01 21:50:29 EST 2021" starttimestamp="1612231299681" timestamp="2929761" timestamp2="2929761">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5343" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:29 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2929798" />
  <Command __id="5355" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:31 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2932099" />
  <Command __id="5357" _type="InsertStringCommand" date="Mon Feb 01 21:50:31 EST 2021" starttimestamp="1612231299681" timestamp="2932120" timestamp2="2932120">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5359" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:50:32 EST 2021" starttimestamp="1612231299681" timestamp="2932792" />
  <Command __id="5361" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:50:32 EST 2021" starttimestamp="1612231299681" timestamp="2933112" />
  <Command __id="5363" _type="UndoCommand" date="Mon Feb 01 21:50:33 EST 2021" starttimestamp="1612231299681" timestamp="2933884" />
  <Command __id="5365" _type="UndoCommand" date="Mon Feb 01 21:50:33 EST 2021" starttimestamp="1612231299681" timestamp="2934069" />
  <Command __id="5367" _type="UndoCommand" date="Mon Feb 01 21:50:34 EST 2021" starttimestamp="1612231299681" timestamp="2934488" />
  <Command __id="5369" _type="InsertStringCommand" date="Mon Feb 01 21:50:34 EST 2021" starttimestamp="1612231299681" timestamp="2935022" timestamp2="2935022">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5371" _type="InsertStringCommand" date="Mon Feb 01 21:50:34 EST 2021" starttimestamp="1612231299681" timestamp="2935037" timestamp2="2935037">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5373" _type="InsertStringCommand" date="Mon Feb 01 21:50:34 EST 2021" starttimestamp="1612231299681" timestamp="2935082" timestamp2="2935082">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="5374" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:34 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2935122" />
  <Command __id="5376" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:35 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2935327" />
  <Command __id="5378" _type="InsertStringCommand" date="Mon Feb 01 21:50:35 EST 2021" starttimestamp="1612231299681" timestamp="2935407" timestamp2="2935407">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5379" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:35 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2935443" />
  <Command __id="5385" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:36 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2936794" />
  <Command __id="5388" _type="InsertStringCommand" date="Mon Feb 01 21:50:36 EST 2021" starttimestamp="1612231299681" timestamp="2936951" timestamp2="2936951">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5389" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 01 21:50:37 EST 2021" starttimestamp="1612231299681" timestamp="2937856" />
  <DocumentChange __id="5307" _type="Insert" date="Mon Feb 01 21:50:22 EST 2021" docASTNodeCount="5986" docActiveCodeLength="34460" docExpressionCount="4022" docLength="35415" length="12" offset="34523" repeat="12" starttimestamp="1612231299681" timestamp="2922342" timestamp2="2925834">
    <text><![CDATA[br = new buf]]></text>
  </DocumentChange>
  <DocumentChange __id="5331" _type="Replace" date="Mon Feb 01 21:50:26 EST 2021" docASTNodeCount="5986" docActiveCodeLength="34473" docExpressionCount="4022" docLength="35428" endLine="993" insertionLength="14" int_docASTNodeCount="5986" int_docActiveCodeLength="34459" int_docExpressionCount="4022" int_docLength="35414" length="1" offset="34532" startLine="993" starttimestamp="1612231299681" timestamp="2926979">
    <deletedText><![CDATA[b]]></deletedText>
    <insertedText><![CDATA[BufferedReader]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5332" _type="Replace" date="Mon Feb 01 21:50:26 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34475" docExpressionCount="4023" docLength="35430" endLine="993" insertionLength="4" int_docASTNodeCount="5986" int_docActiveCodeLength="34471" int_docExpressionCount="4022" int_docLength="35426" length="2" offset="34546" startLine="993" starttimestamp="1612231299681" timestamp="2926993">
    <deletedText><![CDATA[uf]]></deletedText>
    <insertedText><![CDATA[(in)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5337" _type="Delete" date="Mon Feb 01 21:50:29 EST 2021" docASTNodeCount="5986" docActiveCodeLength="34473" docExpressionCount="4022" docLength="35428" endLine="993" length="2" offset="34547" repeat="2" startLine="993" starttimestamp="1612231299681" timestamp="2929421" timestamp2="2929542">
    <text><![CDATA[in]]></text>
  </DocumentChange>
  <DocumentChange __id="5341" _type="Insert" date="Mon Feb 01 21:50:29 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34477" docExpressionCount="4023" docLength="35432" length="4" offset="34547" repeat="4" starttimestamp="1612231299681" timestamp="2929751" timestamp2="2930035">
    <text><![CDATA[fuil]]></text>
  </DocumentChange>
  <DocumentChange __id="5347" _type="Delete" date="Mon Feb 01 21:50:30 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34474" docExpressionCount="4023" docLength="35429" endLine="993" length="3" offset="34548" repeat="3" startLine="993" starttimestamp="1612231299681" timestamp="2930375" timestamp2="2930614">
    <text><![CDATA[uil]]></text>
  </DocumentChange>
  <DocumentChange __id="5350" _type="Insert" date="Mon Feb 01 21:50:30 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34479" docExpressionCount="4023" docLength="35434" length="5" offset="34548" repeat="5" starttimestamp="1612231299681" timestamp="2930883" timestamp2="2931389">
    <text><![CDATA[ilere]]></text>
  </DocumentChange>
  <DocumentChange __id="5356" _type="Replace" date="Mon Feb 01 21:50:31 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34483" docExpressionCount="4023" docLength="35438" endLine="993" insertionLength="10" int_docASTNodeCount="5986" int_docActiveCodeLength="34473" int_docExpressionCount="4022" int_docLength="35428" length="6" offset="34547" startLine="993" starttimestamp="1612231299681" timestamp="2932108">
    <deletedText><![CDATA[filere]]></deletedText>
    <insertedText><![CDATA[FileReader]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5358" _type="Delete" date="Mon Feb 01 21:50:32 EST 2021" docASTNodeCount="5986" docActiveCodeLength="34473" docExpressionCount="4022" docLength="35428" endLine="993" length="10" offset="34547" repeat="2" startLine="993" starttimestamp="1612231299681" timestamp="2932787" timestamp2="2933105">
    <text><![CDATA[FileReader]]></text>
  </DocumentChange>
  <DocumentChange __id="5362" _type="Insert" date="Mon Feb 01 21:50:33 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34483" docExpressionCount="4023" docLength="35438" length="10" offset="34547" repeat="2" starttimestamp="1612231299681" timestamp="2933877" timestamp2="2934064">
    <text><![CDATA[FileReader]]></text>
  </DocumentChange>
  <DocumentChange __id="5366" _type="Replace" date="Mon Feb 01 21:50:34 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34479" docExpressionCount="4023" docLength="35434" endLine="993" insertionLength="6" int_docASTNodeCount="5986" int_docActiveCodeLength="34473" int_docExpressionCount="4022" int_docLength="35428" length="10" offset="34547" startLine="993" starttimestamp="1612231299681" timestamp="2934444">
    <deletedText><![CDATA[FileReader]]></deletedText>
    <insertedText><![CDATA[filere]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5368" _type="Replace" date="Mon Feb 01 21:50:34 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34474" docExpressionCount="4023" docLength="35429" endLine="993" insertionLength="1" int_docASTNodeCount="5986" int_docActiveCodeLength="34473" int_docExpressionCount="4022" int_docLength="35428" length="6" offset="34547" startLine="993" starttimestamp="1612231299681" timestamp="2935012">
    <deletedText><![CDATA[filere]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5370" _type="Insert" date="Mon Feb 01 21:50:34 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34483" docExpressionCount="4023" docLength="35438" length="9" offset="34548" repeat="9" starttimestamp="1612231299681" timestamp="2935030" timestamp2="2936166">
    <text><![CDATA[ew filrer]]></text>
  </DocumentChange>
  <DocumentChange __id="5386" _type="Replace" date="Mon Feb 01 21:50:36 EST 2021" docASTNodeCount="5987" docActiveCodeLength="34492" docExpressionCount="4023" docLength="35447" endLine="993" insertionLength="10" int_docASTNodeCount="5987" int_docActiveCodeLength="34482" int_docExpressionCount="4023" int_docLength="35437" length="1" offset="34551" startLine="993" starttimestamp="1612231299681" timestamp="2936803">
    <deletedText><![CDATA[f]]></deletedText>
    <insertedText><![CDATA[FileReader]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5387" _type="Replace" date="Mon Feb 01 21:50:36 EST 2021" docASTNodeCount="5990" docActiveCodeLength="34493" docExpressionCount="4025" docLength="35448" endLine="993" insertionLength="6" int_docASTNodeCount="5987" int_docActiveCodeLength="34487" int_docExpressionCount="4023" int_docLength="35442" length="5" offset="34561" startLine="993" starttimestamp="1612231299681" timestamp="2936827">
    <deletedText><![CDATA[ilrer]]></deletedText>
    <insertedText><![CDATA[(file)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5391" _type="Delete" date="Mon Feb 01 21:50:38 EST 2021" docASTNodeCount="5989" docActiveCodeLength="34489" docExpressionCount="4024" docLength="35444" endLine="993" length="4" offset="34562" startLine="993" starttimestamp="1612231299681" timestamp="2938632">
    <text><![CDATA[file]]></text>
  </DocumentChange>
  <Command __id="5390" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 01 21:50:37 EST 2021" starttimestamp="1612231299681" timestamp="2938004" />
  <Command __id="5392" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 01 21:50:38 EST 2021" starttimestamp="1612231299681" timestamp="2938641" />
  <Command __id="5394" _type="InsertStringCommand" date="Mon Feb 01 21:50:41 EST 2021" starttimestamp="1612231299681" timestamp="2941928" timestamp2="2941928">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5395" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:50:41 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2941959" />
  <Command __id="5399" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:50:42 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2942439" />
  <Command __id="5400" _type="InsertStringCommand" date="Mon Feb 01 21:50:42 EST 2021" starttimestamp="1612231299681" timestamp="2942442" timestamp2="2942442">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5401" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:50:42 EST 2021" starttimestamp="1612231299681" timestamp="2942769" />
  <Command __id="5402" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:50:42 EST 2021" starttimestamp="1612231299681" timestamp="2943247" />
  <Command __id="5404" _type="InsertStringCommand" date="Mon Feb 01 21:50:43 EST 2021" starttimestamp="1612231299681" timestamp="2943532" timestamp2="2943532">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5406" _type="InsertStringCommand" date="Mon Feb 01 21:50:43 EST 2021" starttimestamp="1612231299681" timestamp="2943675" timestamp2="2943675">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5407" _type="ShellCommand" date="Mon Feb 01 21:50:49 EST 2021" starttimestamp="1612231299681" timestamp="2949985" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5408" _type="ShellCommand" date="Mon Feb 01 21:50:49 EST 2021" starttimestamp="1612231299681" timestamp="2950085" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="5393" _type="Insert" date="Mon Feb 01 21:50:41 EST 2021" docASTNodeCount="5990" docActiveCodeLength="34493" docExpressionCount="4025" docLength="35448" length="4" offset="34562" repeat="4" starttimestamp="1612231299681" timestamp="2941919" timestamp2="2942248">
    <text><![CDATA[file]]></text>
  </DocumentChange>
  <DocumentChange __id="5403" _type="Insert" date="Mon Feb 01 21:50:43 EST 2021" docASTNodeCount="5990" docActiveCodeLength="34498" docExpressionCount="4025" docLength="35453" length="5" offset="34568" repeat="2" starttimestamp="1612231299681" timestamp="2943522" timestamp2="2943662">
    <text><![CDATA[;
		]]></text>
  </DocumentChange>
  <DocumentChange __id="5409" _type="Delete" date="Mon Feb 01 21:50:49 EST 2021" docASTNodeCount="5978" docActiveCodeLength="34437" docExpressionCount="4018" docLength="35392" endLine="993" length="61" offset="34508" startLine="993" starttimestamp="1612231299681" timestamp="2950113">
    <text><![CDATA[BufferedReader br = new BufferedReader(new FileReader(file));]]></text>
  </DocumentChange>
  <DocumentChange __id="5410" _type="Insert" date="Mon Feb 01 21:50:49 EST 2021" docASTNodeCount="6002" docActiveCodeLength="34582" docExpressionCount="4030" docLength="35571" length="179" offset="34508" repeat="9" starttimestamp="1612231299681" timestamp="2950120" timestamp2="2950176">
    <text><![CDATA[try {
			BufferedReader br = new BufferedReader(new FileReader(file));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="5419" _type="Insert" date="Mon Feb 01 21:50:49 EST 2021" docASTNodeCount="6008" docActiveCodeLength="34621" docExpressionCount="4035" docLength="35610" length="39" offset="136" repeat="2" starttimestamp="1612231299681" timestamp="2950182" timestamp2="2950187">
    <text><![CDATA[
import java.io.FileNotFoundException;]]></text>
  </DocumentChange>
  <Command __id="5421" _type="MoveCaretCommand" caretOffset="3649" date="Mon Feb 01 21:50:53 EST 2021" docOffset="34618" starttimestamp="1612231299681" timestamp="2953383" />
  <DocumentChange __id="5422" _type="Insert" date="Mon Feb 01 21:50:54 EST 2021" docASTNodeCount="6008" docActiveCodeLength="34626" docExpressionCount="4035" docLength="35615" length="5" offset="34618" starttimestamp="1612231299681" timestamp="2954717">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="5423" _type="InsertStringCommand" date="Mon Feb 01 21:50:54 EST 2021" starttimestamp="1612231299681" timestamp="2954730" timestamp2="2954730">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5424" _type="Insert" date="Mon Feb 01 21:51:00 EST 2021" docASTNodeCount="6008" docActiveCodeLength="34628" docExpressionCount="4035" docLength="35617" length="2" offset="34623" repeat="2" starttimestamp="1612231299681" timestamp="2960896" timestamp2="2961111">
    <text><![CDATA[if]]></text>
  </DocumentChange>
  <Command __id="5425" _type="InsertStringCommand" date="Mon Feb 01 21:51:00 EST 2021" starttimestamp="1612231299681" timestamp="2960903" timestamp2="2960903">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5426" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:00 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2960944" />
  <DocumentChange __id="5428" _type="Delete" date="Mon Feb 01 21:51:01 EST 2021" docASTNodeCount="6008" docActiveCodeLength="34626" docExpressionCount="4035" docLength="35615" endLine="996" length="2" offset="34623" repeat="2" startLine="996" starttimestamp="1612231299681" timestamp="2961715" timestamp2="2961832">
    <text><![CDATA[if]]></text>
  </DocumentChange>
  <DocumentChange __id="5430" _type="Insert" date="Mon Feb 01 21:51:01 EST 2021" docASTNodeCount="6008" docActiveCodeLength="34631" docExpressionCount="4035" docLength="35620" length="5" offset="34623" repeat="5" starttimestamp="1612231299681" timestamp="2962312" timestamp2="2962570">
    <text><![CDATA[while]]></text>
  </DocumentChange>
  <Command __id="5435" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:03 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2963714" />
  <DocumentChange __id="5436" _type="Replace" date="Mon Feb 01 21:51:03 EST 2021" docASTNodeCount="6024" docActiveCodeLength="34710" docExpressionCount="4045" docLength="35699" endLine="996" insertionLength="84" int_docASTNodeCount="6008" int_docActiveCodeLength="34626" int_docExpressionCount="4035" int_docLength="35615" length="5" offset="34623" startLine="996" starttimestamp="1612231299681" timestamp="2963745">
    <deletedText><![CDATA[while]]></deletedText>
    <insertedText><![CDATA[while (en.hasMoreElements()) {
				type type = (type) en.nextElement();
				
			}]]></insertedText>
  </DocumentChange>
  <Command __id="5437" _type="InsertStringCommand" date="Mon Feb 01 21:51:03 EST 2021" starttimestamp="1612231299681" timestamp="2963758" timestamp2="2963758">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5438" _type="Delete" date="Mon Feb 01 21:51:05 EST 2021" docASTNodeCount="6023" docActiveCodeLength="34708" docExpressionCount="4044" docLength="35697" endLine="996" length="2" offset="34630" startLine="996" starttimestamp="1612231299681" timestamp="2965746">
    <text><![CDATA[en]]></text>
  </DocumentChange>
  <DocumentChange __id="5439" _type="Delete" date="Mon Feb 01 21:51:05 EST 2021" docASTNodeCount="6021" docActiveCodeLength="34706" docExpressionCount="4043" docLength="35695" endLine="997" length="2" offset="34676" startLine="997" starttimestamp="1612231299681" timestamp="2965757">
    <text><![CDATA[en]]></text>
  </DocumentChange>
  <Command __id="5440" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:51:05 EST 2021" starttimestamp="1612231299681" timestamp="2965760" />
  <DocumentChange __id="5441" _type="Delete" date="Mon Feb 01 21:51:05 EST 2021" docASTNodeCount="6020" docActiveCodeLength="34688" docExpressionCount="4042" docLength="35677" endLine="996" length="18" offset="34630" repeat="6" startLine="996" starttimestamp="1612231299681" timestamp="2966033" timestamp2="2967127">
    <text><![CDATA[.hasMoreElements()]]></text>
  </DocumentChange>
  <Command __id="5442" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 01 21:51:05 EST 2021" starttimestamp="1612231299681" timestamp="2966038" />
  <Command __id="5444" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 01 21:51:05 EST 2021" starttimestamp="1612231299681" timestamp="2966198" />
  <Command __id="5446" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 01 21:51:06 EST 2021" starttimestamp="1612231299681" timestamp="2966334" />
  <Command __id="5448" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 01 21:51:06 EST 2021" starttimestamp="1612231299681" timestamp="2966479" />
  <Command __id="5450" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 01 21:51:06 EST 2021" starttimestamp="1612231299681" timestamp="2966962" />
  <Command __id="5452" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 01 21:51:06 EST 2021" starttimestamp="1612231299681" timestamp="2967135" />
  <DocumentChange __id="5453" _type="Insert" date="Mon Feb 01 21:51:07 EST 2021" docASTNodeCount="6020" docActiveCodeLength="34690" docExpressionCount="4042" docLength="35679" length="2" offset="34630" repeat="2" starttimestamp="1612231299681" timestamp="2967358" timestamp2="2967606">
    <text><![CDATA[br]]></text>
  </DocumentChange>
  <Command __id="5454" _type="InsertStringCommand" date="Mon Feb 01 21:51:07 EST 2021" starttimestamp="1612231299681" timestamp="2967369" timestamp2="2967369">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5455" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:07 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2967405" />
  <Command __id="5457" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:07 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2967685" />
  <DocumentChange __id="5458" _type="Replace" date="Mon Feb 01 21:51:07 EST 2021" docASTNodeCount="6022" docActiveCodeLength="34691" docExpressionCount="4043" docLength="35680" endLine="996" insertionLength="3" int_docASTNodeCount="6020" int_docActiveCodeLength="34688" int_docExpressionCount="4042" int_docLength="35677" length="2" offset="34630" startLine="996" starttimestamp="1612231299681" timestamp="2967693">
    <deletedText><![CDATA[br]]></deletedText>
    <insertedText><![CDATA[br.]]></insertedText>
  </DocumentChange>
  <Command __id="5459" _type="InsertStringCommand" date="Mon Feb 01 21:51:07 EST 2021" starttimestamp="1612231299681" timestamp="2967701" timestamp2="2967701">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5460" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:07 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2967752" />
  <DocumentChange __id="5461" _type="Insert" date="Mon Feb 01 21:51:09 EST 2021" docASTNodeCount="6022" docActiveCodeLength="34694" docExpressionCount="4044" docLength="35683" length="3" offset="34633" repeat="3" starttimestamp="1612231299681" timestamp="2970209" timestamp2="2970486">
    <text><![CDATA[nex]]></text>
  </DocumentChange>
  <Command __id="5464" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:10 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2970516" />
  <DocumentChange __id="5465" _type="Delete" date="Mon Feb 01 21:51:10 EST 2021" docASTNodeCount="6022" docActiveCodeLength="34691" docExpressionCount="4043" docLength="35680" endLine="996" length="3" offset="34633" repeat="3" startLine="996" starttimestamp="1612231299681" timestamp="2971179" timestamp2="2971893">
    <text><![CDATA[nex]]></text>
  </DocumentChange>
  <Command __id="5466" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:10 EST 2021" starttimestamp="1612231299681" timestamp="2971181" />
  <Command __id="5468" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:10 EST 2021" starttimestamp="1612231299681" timestamp="2971305" />
  <Command __id="5470" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:11 EST 2021" starttimestamp="1612231299681" timestamp="2971895" />
  <DocumentChange __id="5471" _type="Insert" date="Mon Feb 01 21:51:11 EST 2021" docASTNodeCount="6022" docActiveCodeLength="34692" docExpressionCount="4044" docLength="35681" length="1" offset="34633" starttimestamp="1612231299681" timestamp="2972111">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="5474" _type="Delete" date="Mon Feb 01 21:51:12 EST 2021" docASTNodeCount="6022" docActiveCodeLength="34691" docExpressionCount="4043" docLength="35680" endLine="996" length="1" offset="34633" startLine="996" starttimestamp="1612231299681" timestamp="2972572">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="5475" _type="Insert" date="Mon Feb 01 21:51:12 EST 2021" docASTNodeCount="6022" docActiveCodeLength="34694" docExpressionCount="4044" docLength="35683" length="3" offset="34633" repeat="3" starttimestamp="1612231299681" timestamp="2972645" timestamp2="2972750">
    <text><![CDATA[rea]]></text>
  </DocumentChange>
  <Command __id="5472" _type="InsertStringCommand" date="Mon Feb 01 21:51:11 EST 2021" starttimestamp="1612231299681" timestamp="2972118" timestamp2="2972118">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5473" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:11 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2972158" />
  <DocumentChange __id="5478" _type="Delete" date="Mon Feb 01 21:51:13 EST 2021" docASTNodeCount="6022" docActiveCodeLength="34691" docExpressionCount="4043" docLength="35680" endLine="996" length="3" offset="34633" repeat="3" startLine="996" starttimestamp="1612231299681" timestamp="2973869" timestamp2="2974129">
    <text><![CDATA[rea]]></text>
  </DocumentChange>
  <DocumentChange __id="5481" _type="Insert" date="Mon Feb 01 21:51:14 EST 2021" docASTNodeCount="6022" docActiveCodeLength="34694" docExpressionCount="4044" docLength="35683" length="3" offset="34633" repeat="3" starttimestamp="1612231299681" timestamp="2974598" timestamp2="2975003">
    <text><![CDATA[lin]]></text>
  </DocumentChange>
  <Command __id="5484" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:16 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2976969" />
  <Command __id="5486" _type="InsertStringCommand" date="Mon Feb 01 21:51:16 EST 2021" starttimestamp="1612231299681" timestamp="2976985" timestamp2="2976985">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5487" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:51:18 EST 2021" starttimestamp="1612231299681" timestamp="2978648" />
  <Command __id="5488" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:51:18 EST 2021" starttimestamp="1612231299681" timestamp="2978801" />
  <Command __id="5489" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:51:18 EST 2021" starttimestamp="1612231299681" timestamp="2979064" />
  <Command __id="5490" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:51:18 EST 2021" starttimestamp="1612231299681" timestamp="2979221" />
  <Command __id="5491" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 21:51:19 EST 2021" starttimestamp="1612231299681" timestamp="2979519" />
  <Command __id="5492" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 21:51:19 EST 2021" starttimestamp="1612231299681" timestamp="2979856" />
  <Command __id="5494" _type="InsertStringCommand" date="Mon Feb 01 21:51:19 EST 2021" starttimestamp="1612231299681" timestamp="2980015" timestamp2="2980015">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5496" _type="InsertStringCommand" date="Mon Feb 01 21:51:19 EST 2021" starttimestamp="1612231299681" timestamp="2980195" timestamp2="2980195">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="5498" _type="InsertStringCommand" date="Mon Feb 01 21:51:20 EST 2021" starttimestamp="1612231299681" timestamp="2980438" timestamp2="2980438">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5499" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:20 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2980480" />
  <Command __id="5504" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:20 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2980729" />
  <Command __id="5506" _type="InsertStringCommand" date="Mon Feb 01 21:51:20 EST 2021" starttimestamp="1612231299681" timestamp="2980762" timestamp2="2980762">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5508" _type="InsertStringCommand" date="Mon Feb 01 21:51:20 EST 2021" starttimestamp="1612231299681" timestamp="2981052" timestamp2="2981052">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5509" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:20 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2981093" />
  <Command __id="5512" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:21 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2981321" />
  <Command __id="5514" _type="InsertStringCommand" date="Mon Feb 01 21:51:21 EST 2021" starttimestamp="1612231299681" timestamp="2981452" timestamp2="2981452">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5515" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:21 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2981494" />
  <Command __id="5516" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:21 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2981518" />
  <Command __id="5518" _type="InsertStringCommand" date="Mon Feb 01 21:51:21 EST 2021" starttimestamp="1612231299681" timestamp="2981736" timestamp2="2981736">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="5520" _type="InsertStringCommand" date="Mon Feb 01 21:51:21 EST 2021" starttimestamp="1612231299681" timestamp="2981866" timestamp2="2981866">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5522" _type="InsertStringCommand" date="Mon Feb 01 21:51:21 EST 2021" starttimestamp="1612231299681" timestamp="2981962" timestamp2="2981962">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5524" _type="InsertStringCommand" date="Mon Feb 01 21:51:21 EST 2021" starttimestamp="1612231299681" timestamp="2981992" timestamp2="2981992">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5525" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:21 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2982032" />
  <Command __id="5526" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:21 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2982057" />
  <DocumentChange __id="5485" _type="Replace" date="Mon Feb 01 21:51:16 EST 2021" docASTNodeCount="6022" docActiveCodeLength="34701" docExpressionCount="4044" docLength="35690" endLine="996" insertionLength="10" int_docASTNodeCount="6022" int_docActiveCodeLength="34691" int_docExpressionCount="4043" int_docLength="35680" length="3" offset="34633" startLine="996" starttimestamp="1612231299681" timestamp="2976976">
    <deletedText><![CDATA[lin]]></deletedText>
    <insertedText><![CDATA[readLine()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5493" _type="Insert" date="Mon Feb 01 21:51:19 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34721" docExpressionCount="4046" docLength="35710" length="20" offset="34618" repeat="16" starttimestamp="1612231299681" timestamp="2980004" timestamp2="2981986">
    <text><![CDATA[
			Stirng nextLime]]></text>
  </DocumentChange>
  <DocumentChange __id="5527" _type="Delete" date="Mon Feb 01 21:51:22 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34719" docExpressionCount="4046" docLength="35708" endLine="996" length="2" offset="34636" repeat="2" startLine="996" starttimestamp="1612231299681" timestamp="2982529" timestamp2="2982644">
    <text><![CDATA[me]]></text>
  </DocumentChange>
  <DocumentChange __id="5531" _type="Insert" date="Mon Feb 01 21:51:22 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34724" docExpressionCount="4046" docLength="35713" length="5" offset="34636" repeat="5" starttimestamp="1612231299681" timestamp="2983218" timestamp2="2983639">
    <text><![CDATA[ne = ]]></text>
  </DocumentChange>
  <DocumentChange __id="5543" _type="Delete" date="Mon Feb 01 21:51:24 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34722" docExpressionCount="4046" docLength="35711" endLine="996" length="2" offset="34639" repeat="2" startLine="996" starttimestamp="1612231299681" timestamp="2984852" timestamp2="2985067">
    <text><![CDATA[= ]]></text>
  </DocumentChange>
  <DocumentChange __id="5547" _type="Insert" date="Mon Feb 01 21:51:25 EST 2021" docASTNodeCount="5964" docActiveCodeLength="34727" docExpressionCount="4013" docLength="35716" length="5" offset="34639" repeat="4" starttimestamp="1612231299681" timestamp="2985725" timestamp2="2987710">
    <text><![CDATA[= ""']]></text>
  </DocumentChange>
  <DocumentChange __id="5556" _type="Delete" date="Mon Feb 01 21:51:27 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34721" docExpressionCount="4046" docLength="35710" endLine="996" length="6" offset="34638" repeat="6" startLine="996" starttimestamp="1612231299681" timestamp="2988257" timestamp2="2990182">
    <text><![CDATA[ = ""']]></text>
  </DocumentChange>
  <Command __id="5528" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:22 EST 2021" starttimestamp="1612231299681" timestamp="2982532" />
  <Command __id="5530" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:22 EST 2021" starttimestamp="1612231299681" timestamp="2982647" />
  <Command __id="5532" _type="InsertStringCommand" date="Mon Feb 01 21:51:22 EST 2021" starttimestamp="1612231299681" timestamp="2983224" timestamp2="2983224">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5534" _type="InsertStringCommand" date="Mon Feb 01 21:51:22 EST 2021" starttimestamp="1612231299681" timestamp="2983318" timestamp2="2983318">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5535" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:23 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2983359" />
  <Command __id="5536" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:23 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2983392" />
  <Command __id="5538" _type="InsertStringCommand" date="Mon Feb 01 21:51:23 EST 2021" starttimestamp="1612231299681" timestamp="2983420" timestamp2="2983420">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5540" _type="InsertStringCommand" date="Mon Feb 01 21:51:23 EST 2021" starttimestamp="1612231299681" timestamp="2983560" timestamp2="2983560">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5542" _type="InsertStringCommand" date="Mon Feb 01 21:51:23 EST 2021" starttimestamp="1612231299681" timestamp="2983645" timestamp2="2983645">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5544" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:24 EST 2021" starttimestamp="1612231299681" timestamp="2984855" />
  <Command __id="5546" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:24 EST 2021" starttimestamp="1612231299681" timestamp="2985069" />
  <Command __id="5548" _type="InsertStringCommand" date="Mon Feb 01 21:51:25 EST 2021" starttimestamp="1612231299681" timestamp="2985730" timestamp2="2985730">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5550" _type="InsertStringCommand" date="Mon Feb 01 21:51:25 EST 2021" starttimestamp="1612231299681" timestamp="2985842" timestamp2="2985842">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5552" _type="InsertStringCommand" date="Mon Feb 01 21:51:26 EST 2021" starttimestamp="1612231299681" timestamp="2986785" timestamp2="2986785">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5553" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:51:27 EST 2021" starttimestamp="1612231299681" timestamp="2987467" />
  <Command __id="5555" _type="InsertStringCommand" date="Mon Feb 01 21:51:27 EST 2021" starttimestamp="1612231299681" timestamp="2987718" timestamp2="2987718">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="5557" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:27 EST 2021" starttimestamp="1612231299681" timestamp="2988262" />
  <Command __id="5559" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:29 EST 2021" starttimestamp="1612231299681" timestamp="2989616" />
  <Command __id="5561" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:29 EST 2021" starttimestamp="1612231299681" timestamp="2989777" />
  <Command __id="5563" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:29 EST 2021" starttimestamp="1612231299681" timestamp="2989885" />
  <Command __id="5565" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:29 EST 2021" starttimestamp="1612231299681" timestamp="2990030" />
  <Command __id="5567" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:29 EST 2021" starttimestamp="1612231299681" timestamp="2990185" />
  <Command __id="5569" _type="InsertStringCommand" date="Mon Feb 01 21:51:32 EST 2021" starttimestamp="1612231299681" timestamp="2992662" timestamp2="2992662">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5570" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:51:32 EST 2021" starttimestamp="1612231299681" timestamp="2993175" />
  <Command __id="5571" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:51:32 EST 2021" starttimestamp="1612231299681" timestamp="2993306" />
  <Command __id="5572" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:51:33 EST 2021" starttimestamp="1612231299681" timestamp="2993449" />
  <Command __id="5573" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 21:51:33 EST 2021" starttimestamp="1612231299681" timestamp="2993653" />
  <Command __id="5574" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:51:33 EST 2021" starttimestamp="1612231299681" timestamp="2994142" />
  <Command __id="5575" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:51:33 EST 2021" starttimestamp="1612231299681" timestamp="2994300" />
  <Command __id="5576" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:51:34 EST 2021" starttimestamp="1612231299681" timestamp="2994408" />
  <Command __id="5578" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:51:34 EST 2021" starttimestamp="1612231299681" timestamp="2994880" />
  <Command __id="5579" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:51:34 EST 2021" starttimestamp="1612231299681" timestamp="2995212" />
  <Command __id="5581" _type="InsertStringCommand" date="Mon Feb 01 21:51:35 EST 2021" starttimestamp="1612231299681" timestamp="2995614" timestamp2="2995614">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5582" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:35 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2995707" />
  <DocumentChange __id="5568" _type="Insert" date="Mon Feb 01 21:51:32 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34722" docExpressionCount="4046" docLength="35711" length="1" offset="34638" starttimestamp="1612231299681" timestamp="2992656">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="5577" _type="Delete" date="Mon Feb 01 21:51:34 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34721" docExpressionCount="4046" docLength="35710" endLine="996" length="1" offset="34625" startLine="996" starttimestamp="1612231299681" timestamp="2994878">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="5580" _type="Insert" date="Mon Feb 01 21:51:35 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34722" docExpressionCount="4046" docLength="35711" length="1" offset="34626" starttimestamp="1612231299681" timestamp="2995608">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="5586" _type="Insert" date="Mon Feb 01 21:51:38 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34725" docExpressionCount="4046" docLength="35714" length="3" offset="34651" repeat="3" starttimestamp="1612231299681" timestamp="2998675" timestamp2="2998920">
    <text><![CDATA[nex]]></text>
  </DocumentChange>
  <DocumentChange __id="5592" _type="Replace" date="Mon Feb 01 21:51:38 EST 2021" docASTNodeCount="6027" docActiveCodeLength="34730" docExpressionCount="4046" docLength="35719" endLine="997" insertionLength="8" int_docASTNodeCount="6027" int_docActiveCodeLength="34722" int_docExpressionCount="4046" int_docLength="35711" length="3" offset="34651" startLine="997" starttimestamp="1612231299681" timestamp="2999063">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5594" _type="Insert" date="Mon Feb 01 21:51:38 EST 2021" docASTNodeCount="6029" docActiveCodeLength="34733" docExpressionCount="4048" docLength="35722" length="3" offset="34659" repeat="3" starttimestamp="1612231299681" timestamp="2999191" timestamp2="2999647">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <Command __id="5583" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:36 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2997003" />
  <Command __id="5584" _type="SelectTextCommand" caretOffset="3574" date="Mon Feb 01 21:51:36 EST 2021" end="3574" start="3526" starttimestamp="1612231299681" timestamp="2997079" />
  <Command __id="5585" _type="MoveCaretCommand" caretOffset="3682" date="Mon Feb 01 21:51:37 EST 2021" docOffset="34651" starttimestamp="1612231299681" timestamp="2997892" />
  <Command __id="5587" _type="InsertStringCommand" date="Mon Feb 01 21:51:38 EST 2021" starttimestamp="1612231299681" timestamp="2998685" timestamp2="2998685">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5588" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:38 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="2998722" />
  <Command __id="5591" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:38 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="2999055" />
  <Command __id="5593" _type="InsertStringCommand" date="Mon Feb 01 21:51:38 EST 2021" starttimestamp="1612231299681" timestamp="2999073" timestamp2="2999073">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5595" _type="InsertStringCommand" date="Mon Feb 01 21:51:38 EST 2021" starttimestamp="1612231299681" timestamp="2999198" timestamp2="2999198">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5597" _type="InsertStringCommand" date="Mon Feb 01 21:51:39 EST 2021" starttimestamp="1612231299681" timestamp="2999530" timestamp2="2999530">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5599" _type="InsertStringCommand" date="Mon Feb 01 21:51:39 EST 2021" starttimestamp="1612231299681" timestamp="2999652" timestamp2="2999652">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5600" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 21:51:39 EST 2021" starttimestamp="1612231299681" timestamp="3000189" />
  <Command __id="5601" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:51:40 EST 2021" starttimestamp="1612231299681" timestamp="3000556" />
  <Command __id="5602" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:51:40 EST 2021" starttimestamp="1612231299681" timestamp="3000703" />
  <Command __id="5603" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:51:40 EST 2021" starttimestamp="1612231299681" timestamp="3000837" />
  <Command __id="5605" _type="InsertStringCommand" date="Mon Feb 01 21:51:40 EST 2021" starttimestamp="1612231299681" timestamp="3001184" timestamp2="3001184">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5607" _type="InsertStringCommand" date="Mon Feb 01 21:51:42 EST 2021" starttimestamp="1612231299681" timestamp="3002730" timestamp2="3002730">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5609" _type="InsertStringCommand" date="Mon Feb 01 21:51:42 EST 2021" starttimestamp="1612231299681" timestamp="3002893" timestamp2="3002893">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5611" _type="InsertStringCommand" date="Mon Feb 01 21:51:42 EST 2021" starttimestamp="1612231299681" timestamp="3003051" timestamp2="3003051">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5613" _type="InsertStringCommand" date="Mon Feb 01 21:51:43 EST 2021" starttimestamp="1612231299681" timestamp="3003408" timestamp2="3003408">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5614" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:51:43 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3003449" />
  <Command __id="5618" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:51:44 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3004658" />
  <Command __id="5619" _type="InsertStringCommand" date="Mon Feb 01 21:51:44 EST 2021" starttimestamp="1612231299681" timestamp="3004665" timestamp2="3004665">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5604" _type="Insert" date="Mon Feb 01 21:51:40 EST 2021" docASTNodeCount="6031" docActiveCodeLength="34741" docExpressionCount="4050" docLength="35730" length="8" offset="34675" repeat="8" starttimestamp="1612231299681" timestamp="3001177" timestamp2="3004369">
    <text><![CDATA[ == null]]></text>
  </DocumentChange>
  <Command __id="5620" _type="MoveCaretCommand" caretOffset="3682" date="Mon Feb 01 21:51:56 EST 2021" docOffset="34651" starttimestamp="1612231299681" timestamp="3016375" />
  <Command __id="5622" _type="InsertStringCommand" date="Mon Feb 01 21:51:57 EST 2021" starttimestamp="1612231299681" timestamp="3017869" timestamp2="3017869">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5623" _type="MoveCaretCommand" caretOffset="3707" date="Mon Feb 01 21:51:59 EST 2021" docOffset="34676" starttimestamp="1612231299681" timestamp="3019874" />
  <Command __id="5625" _type="InsertStringCommand" date="Mon Feb 01 21:52:00 EST 2021" starttimestamp="1612231299681" timestamp="3020553" timestamp2="3020553">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="5626" _type="MoveCaretCommand" caretOffset="3736" date="Mon Feb 01 21:52:09 EST 2021" docOffset="34705" starttimestamp="1612231299681" timestamp="3029689" />
  <Command __id="5627" _type="MoveCaretCommand" caretOffset="3709" date="Mon Feb 01 21:52:11 EST 2021" docOffset="34678" starttimestamp="1612231299681" timestamp="3032059" />
  <Command __id="5629" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 01 21:52:12 EST 2021" starttimestamp="1612231299681" timestamp="3032763" />
  <Command __id="5631" _type="InsertStringCommand" date="Mon Feb 01 21:52:12 EST 2021" starttimestamp="1612231299681" timestamp="3032923" timestamp2="3032923">
    <data><![CDATA[!]]></data>
  </Command>
  <DocumentChange __id="5621" _type="Insert" date="Mon Feb 01 21:51:57 EST 2021" docASTNodeCount="6033" docActiveCodeLength="34742" docExpressionCount="4051" docLength="35731" length="1" offset="34651" starttimestamp="1612231299681" timestamp="3017858">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="5624" _type="Insert" date="Mon Feb 01 21:52:00 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34743" docExpressionCount="4051" docLength="35732" length="1" offset="34676" starttimestamp="1612231299681" timestamp="3020541">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="5628" _type="Delete" date="Mon Feb 01 21:52:12 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34742" docExpressionCount="4051" docLength="35731" endLine="997" length="1" offset="34678" startLine="997" starttimestamp="1612231299681" timestamp="3032758">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="5630" _type="Insert" date="Mon Feb 01 21:52:12 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34743" docExpressionCount="4051" docLength="35732" length="1" offset="34678" starttimestamp="1612231299681" timestamp="3032918">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <Command __id="5632" _type="SelectTextCommand" caretOffset="3759" date="Mon Feb 01 21:52:15 EST 2021" end="3759" start="3725" starttimestamp="1612231299681" timestamp="3035549" />
  <DocumentChange __id="5633" _type="Replace" date="Mon Feb 01 21:52:17 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34710" docExpressionCount="4046" docLength="35699" endLine="998" insertionLength="1" int_docASTNodeCount="6023" int_docActiveCodeLength="34709" int_docExpressionCount="4045" int_docLength="35698" length="34" offset="34694" startLine="998" starttimestamp="1612231299681" timestamp="3037835">
    <deletedText><![CDATA[type type = (type) .nextElement();]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5636" _type="Insert" date="Mon Feb 01 21:52:17 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34713" docExpressionCount="4046" docLength="35702" length="3" offset="34695" repeat="3" starttimestamp="1612231299681" timestamp="3038024" timestamp2="3038238">
    <text><![CDATA[exl]]></text>
  </DocumentChange>
  <Command __id="5634" _type="InsertStringCommand" date="Mon Feb 01 21:52:17 EST 2021" starttimestamp="1612231299681" timestamp="3037848" timestamp2="3037848">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5635" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:52:17 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3037877" />
  <Command __id="5640" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:52:18 EST 2021" starttimestamp="1612231299681" timestamp="3039245" />
  <Command __id="5641" _type="ShellCommand" date="Mon Feb 01 21:52:23 EST 2021" starttimestamp="1612231299681" timestamp="3043613" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5642" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:52:23 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3043687" />
  <DocumentChange __id="5639" _type="Delete" date="Mon Feb 01 21:52:18 EST 2021" docASTNodeCount="6023" docActiveCodeLength="34709" docExpressionCount="4045" docLength="35698" endLine="998" length="4" offset="34694" startLine="998" starttimestamp="1612231299681" timestamp="3039241">
    <text><![CDATA[nexl]]></text>
  </DocumentChange>
  <Command __id="5643" _type="ShellCommand" date="Mon Feb 01 21:52:50 EST 2021" starttimestamp="1612231299681" timestamp="3071027" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5645" _type="InsertStringCommand" date="Mon Feb 01 21:52:59 EST 2021" starttimestamp="1612231299681" timestamp="3079779" timestamp2="3079779">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5646" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:52:59 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3079821" />
  <DocumentChange __id="5644" _type="Insert" date="Mon Feb 01 21:52:59 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34713" docExpressionCount="4046" docLength="35702" length="4" offset="34694" repeat="4" starttimestamp="1612231299681" timestamp="3079775" timestamp2="3080035">
    <text><![CDATA[date]]></text>
  </DocumentChange>
  <DocumentChange __id="5651" _type="Replace" date="Mon Feb 01 21:53:02 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34713" docExpressionCount="4046" docLength="35702" endLine="998" insertionLength="4" int_docASTNodeCount="6023" int_docActiveCodeLength="34709" int_docExpressionCount="4045" int_docLength="35698" length="4" offset="34694" startLine="998" starttimestamp="1612231299681" timestamp="3082382">
    <deletedText><![CDATA[date]]></deletedText>
    <insertedText><![CDATA[Date]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5653" _type="Insert" date="Mon Feb 01 21:53:06 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34718" docExpressionCount="4046" docLength="35707" length="5" offset="34698" repeat="5" starttimestamp="1612231299681" timestamp="3086403" timestamp2="3086857">
    <text><![CDATA[forma]]></text>
  </DocumentChange>
  <Command __id="5650" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:53:02 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3082375" />
  <Command __id="5652" _type="InsertStringCommand" date="Mon Feb 01 21:53:02 EST 2021" starttimestamp="1612231299681" timestamp="3082392" timestamp2="3082392">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5654" _type="InsertStringCommand" date="Mon Feb 01 21:53:06 EST 2021" starttimestamp="1612231299681" timestamp="3086408" timestamp2="3086408">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5655" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:53:06 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3086450" />
  <Command __id="5662" _type="ShellCommand" date="Mon Feb 01 21:53:14 EST 2021" starttimestamp="1612231299681" timestamp="3094914" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5663" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:53:14 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3095014" />
  <DocumentChange __id="5660" _type="Insert" date="Mon Feb 01 21:53:09 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34720" docExpressionCount="4046" docLength="35709" length="2" offset="34703" repeat="2" starttimestamp="1612231299681" timestamp="3089844" timestamp2="3089926">
    <text><![CDATA[er]]></text>
  </DocumentChange>
  <DocumentChange __id="5667" _type="Delete" date="Mon Feb 01 21:55:07 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34713" docExpressionCount="4046" docLength="35702" endLine="998" length="7" offset="34698" startLine="998" starttimestamp="1612231299681" timestamp="3208144">
    <text><![CDATA[formaer]]></text>
  </DocumentChange>
  <DocumentChange __id="5669" _type="Replace" date="Mon Feb 01 21:55:08 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34713" docExpressionCount="4046" docLength="35702" endLine="998" insertionLength="4" int_docASTNodeCount="6023" int_docActiveCodeLength="34709" int_docExpressionCount="4045" int_docLength="35698" length="4" offset="34694" startLine="998" starttimestamp="1612231299681" timestamp="3208517">
    <deletedText><![CDATA[Date]]></deletedText>
    <insertedText><![CDATA[date]]></insertedText>
  </DocumentChange>
  <Command __id="5664" _type="ShellCommand" date="Mon Feb 01 21:55:06 EST 2021" starttimestamp="1612231299681" timestamp="3207097" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5665" _type="SelectTextCommand" caretOffset="3692" date="Mon Feb 01 21:55:06 EST 2021" end="3736" start="3692" starttimestamp="1612231299681" timestamp="3207181" />
  <Command __id="5666" _type="MoveCaretCommand" caretOffset="3742" date="Mon Feb 01 21:55:07 EST 2021" docOffset="34711" starttimestamp="1612231299681" timestamp="3207999" />
  <Command __id="5668" _type="UndoCommand" date="Mon Feb 01 21:55:07 EST 2021" starttimestamp="1612231299681" timestamp="3208157" />
  <Command __id="5670" _type="UndoCommand" date="Mon Feb 01 21:55:08 EST 2021" starttimestamp="1612231299681" timestamp="3208555" />
  <Command __id="5672" _type="InsertStringCommand" date="Mon Feb 01 21:55:09 EST 2021" starttimestamp="1612231299681" timestamp="3210294" timestamp2="3210294">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5673" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:55:10 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3210331" />
  <Command __id="5677" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:55:11 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3211363" />
  <Command __id="5679" _type="InsertStringCommand" date="Mon Feb 01 21:55:11 EST 2021" starttimestamp="1612231299681" timestamp="3211379" timestamp2="3211379">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5681" _type="InsertStringCommand" date="Mon Feb 01 21:55:11 EST 2021" starttimestamp="1612231299681" timestamp="3212061" timestamp2="3212061">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="5671" _type="Replace" date="Mon Feb 01 21:55:09 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34710" docExpressionCount="4046" docLength="35699" endLine="998" insertionLength="1" int_docASTNodeCount="6023" int_docActiveCodeLength="34709" int_docExpressionCount="4045" int_docLength="35698" length="4" offset="34694" startLine="998" starttimestamp="1612231299681" timestamp="3210287">
    <deletedText><![CDATA[date]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5674" _type="Insert" date="Mon Feb 01 21:55:10 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34713" docExpressionCount="4046" docLength="35702" length="3" offset="34695" repeat="3" starttimestamp="1612231299681" timestamp="3210503" timestamp2="3210727">
    <text><![CDATA[imp]]></text>
  </DocumentChange>
  <DocumentChange __id="5678" _type="Replace" date="Mon Feb 01 21:55:11 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34725" docExpressionCount="4046" docLength="35714" endLine="998" insertionLength="16" int_docASTNodeCount="6023" int_docActiveCodeLength="34709" int_docExpressionCount="4045" int_docLength="35698" length="4" offset="34694" startLine="998" starttimestamp="1612231299681" timestamp="3211369">
    <deletedText><![CDATA[simp]]></deletedText>
    <insertedText><![CDATA[SimpleDateFormat]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5680" _type="Insert" date="Mon Feb 01 21:55:11 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34726" docExpressionCount="4046" docLength="35715" length="1" offset="34710" starttimestamp="1612231299681" timestamp="3212055">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="5685" _type="Delete" date="Mon Feb 01 21:55:16 EST 2021" docASTNodeCount="6023" docActiveCodeLength="34703" docExpressionCount="4045" docLength="35692" endLine="999" length="23" offset="34690" startLine="998" starttimestamp="1612231299681" timestamp="3216889">
    <text><![CDATA[				SimpleDateFormat 
]]></text>
  </DocumentChange>
  <DocumentChange __id="5688" _type="Insert" date="Mon Feb 01 21:55:17 EST 2021" docASTNodeCount="6023" docActiveCodeLength="34708" docExpressionCount="4045" docLength="35697" length="5" offset="34639" starttimestamp="1612231299681" timestamp="3217635">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="5690" _type="Replace" date="Mon Feb 01 21:55:17 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34727" docExpressionCount="4046" docLength="35716" endLine="997" insertionLength="22" int_docASTNodeCount="6023" int_docActiveCodeLength="34705" int_docExpressionCount="4045" int_docLength="35694" length="3" offset="34641" startLine="997" starttimestamp="1612231299681" timestamp="3217891">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			SimpleDateFormat 
]]></insertedText>
  </DocumentChange>
  <Command __id="5682" _type="MoveCaretCommand" caretOffset="3736" date="Mon Feb 01 21:55:15 EST 2021" docOffset="34705" starttimestamp="1612231299681" timestamp="3216282" />
  <Command __id="5683" _type="SelectTextCommand" caretOffset="3741" date="Mon Feb 01 21:55:16 EST 2021" end="3741" start="3725" starttimestamp="1612231299681" timestamp="3216472" />
  <Command __id="5684" _type="SelectTextCommand" caretOffset="3744" date="Mon Feb 01 21:55:16 EST 2021" end="3744" start="3721" starttimestamp="1612231299681" timestamp="3216608" />
  <Command __id="5686" _type="CutCommand" date="Mon Feb 01 21:55:16 EST 2021" starttimestamp="1612231299681" timestamp="3216908" />
  <Command __id="5687" _type="MoveCaretCommand" caretOffset="3670" date="Mon Feb 01 21:55:16 EST 2021" docOffset="34639" starttimestamp="1612231299681" timestamp="3217232" />
  <Command __id="5689" _type="InsertStringCommand" date="Mon Feb 01 21:55:17 EST 2021" starttimestamp="1612231299681" timestamp="3217644" timestamp2="3217644">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5691" _type="PasteCommand" date="Mon Feb 01 21:55:17 EST 2021" starttimestamp="1612231299681" timestamp="3217902" />
  <Command __id="5692" _type="MoveCaretCommand" caretOffset="3692" date="Mon Feb 01 21:55:18 EST 2021" docOffset="34661" starttimestamp="1612231299681" timestamp="3218718" />
  <Command __id="5694" _type="InsertStringCommand" date="Mon Feb 01 21:55:20 EST 2021" starttimestamp="1612231299681" timestamp="3220575" timestamp2="3220575">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5695" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:55:20 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3220612" />
  <Command __id="5701" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:55:21 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3221761" />
  <Command __id="5702" _type="InsertStringCommand" date="Mon Feb 01 21:55:21 EST 2021" starttimestamp="1612231299681" timestamp="3221765" timestamp2="3221765">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5704" _type="InsertStringCommand" date="Mon Feb 01 21:55:21 EST 2021" starttimestamp="1612231299681" timestamp="3221942" timestamp2="3221942">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5706" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:55:22 EST 2021" starttimestamp="1612231299681" timestamp="3222469" />
  <Command __id="5708" _type="InsertStringCommand" date="Mon Feb 01 21:55:22 EST 2021" starttimestamp="1612231299681" timestamp="3223292" timestamp2="3223292">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5709" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:55:23 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3223333" />
  <Command __id="5711" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:55:23 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3223458" />
  <Command __id="5713" _type="InsertStringCommand" date="Mon Feb 01 21:55:23 EST 2021" starttimestamp="1612231299681" timestamp="3223499" timestamp2="3223499">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5715" _type="InsertStringCommand" date="Mon Feb 01 21:55:23 EST 2021" starttimestamp="1612231299681" timestamp="3223573" timestamp2="3223573">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5716" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:55:23 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3223575" />
  <Command __id="5717" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:55:23 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3223608" />
  <Command __id="5719" _type="InsertStringCommand" date="Mon Feb 01 21:55:23 EST 2021" starttimestamp="1612231299681" timestamp="3224284" timestamp2="3224284">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="5721" _type="InsertStringCommand" date="Mon Feb 01 21:55:24 EST 2021" starttimestamp="1612231299681" timestamp="3224398" timestamp2="3224398">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5723" _type="InsertStringCommand" date="Mon Feb 01 21:55:24 EST 2021" starttimestamp="1612231299681" timestamp="3224488" timestamp2="3224488">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="5693" _type="Insert" date="Mon Feb 01 21:55:20 EST 2021" docASTNodeCount="6028" docActiveCodeLength="34734" docExpressionCount="4047" docLength="35723" length="7" offset="34661" repeat="7" starttimestamp="1612231299681" timestamp="3220566" timestamp2="3221935">
    <text><![CDATA[format ]]></text>
  </DocumentChange>
  <DocumentChange __id="5705" _type="Delete" date="Mon Feb 01 21:55:22 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34727" docExpressionCount="4046" docLength="35716" endLine="997" length="7" offset="34661" startLine="997" starttimestamp="1612231299681" timestamp="3222465">
    <text><![CDATA[format ]]></text>
  </DocumentChange>
  <DocumentChange __id="5707" _type="Insert" date="Mon Feb 01 21:55:22 EST 2021" docASTNodeCount="6028" docActiveCodeLength="34740" docExpressionCount="4047" docLength="35729" length="13" offset="34661" repeat="13" starttimestamp="1612231299681" timestamp="3223286" timestamp2="3225282">
    <text><![CDATA[readFormat = ]]></text>
  </DocumentChange>
  <Command __id="5724" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:55:24 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3224529" />
  <Command __id="5725" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:55:24 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3224562" />
  <Command __id="5727" _type="InsertStringCommand" date="Mon Feb 01 21:55:24 EST 2021" starttimestamp="1612231299681" timestamp="3224597" timestamp2="3224597">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5729" _type="InsertStringCommand" date="Mon Feb 01 21:55:24 EST 2021" starttimestamp="1612231299681" timestamp="3224667" timestamp2="3224667">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5730" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:55:24 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3224707" />
  <Command __id="5731" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:55:24 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3224732" />
  <Command __id="5733" _type="InsertStringCommand" date="Mon Feb 01 21:55:24 EST 2021" starttimestamp="1612231299681" timestamp="3224800" timestamp2="3224800">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5734" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:55:24 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3224892" />
  <Command __id="5735" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:55:24 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3224924" />
  <Command __id="5737" _type="InsertStringCommand" date="Mon Feb 01 21:55:24 EST 2021" starttimestamp="1612231299681" timestamp="3225068" timestamp2="3225068">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5739" _type="InsertStringCommand" date="Mon Feb 01 21:55:24 EST 2021" starttimestamp="1612231299681" timestamp="3225183" timestamp2="3225183">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5741" _type="InsertStringCommand" date="Mon Feb 01 21:55:24 EST 2021" starttimestamp="1612231299681" timestamp="3225287" timestamp2="3225287">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="5742" _type="Delete" date="Mon Feb 01 21:55:25 EST 2021" docASTNodeCount="6025" docActiveCodeLength="34727" docExpressionCount="4046" docLength="35716" endLine="997" length="13" offset="34661" repeat="3" startLine="997" starttimestamp="1612231299681" timestamp="3226314" timestamp2="3226819">
    <text><![CDATA[readFormat = ]]></text>
  </DocumentChange>
  <Command __id="5743" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:55:25 EST 2021" starttimestamp="1612231299681" timestamp="3226317" />
  <Command __id="5745" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:55:26 EST 2021" starttimestamp="1612231299681" timestamp="3226447" />
  <Command __id="5747" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 21:55:26 EST 2021" starttimestamp="1612231299681" timestamp="3226822" />
  <DocumentChange __id="5748" _type="Insert" date="Mon Feb 01 21:55:27 EST 2021" docASTNodeCount="6028" docActiveCodeLength="34733" docExpressionCount="4047" docLength="35722" length="6" offset="34661" repeat="6" starttimestamp="1612231299681" timestamp="3227497" timestamp2="3227856">
    <text><![CDATA[format]]></text>
  </DocumentChange>
  <Command __id="5749" _type="InsertStringCommand" date="Mon Feb 01 21:55:27 EST 2021" starttimestamp="1612231299681" timestamp="3227503" timestamp2="3227503">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="5751" _type="InsertStringCommand" date="Mon Feb 01 21:55:27 EST 2021" starttimestamp="1612231299681" timestamp="3227555" timestamp2="3227555">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5752" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:55:27 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3227613" />
  <Command __id="5757" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:55:27 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3227967" />
  <DocumentChange __id="5758" _type="Replace" date="Mon Feb 01 21:55:27 EST 2021" docASTNodeCount="6028" docActiveCodeLength="34734" docExpressionCount="4047" docLength="35723" endLine="997" insertionLength="7" int_docASTNodeCount="6025" int_docActiveCodeLength="34727" int_docExpressionCount="4046" int_docLength="35716" length="6" offset="34661" startLine="997" starttimestamp="1612231299681" timestamp="3227974">
    <deletedText><![CDATA[format]]></deletedText>
    <insertedText><![CDATA[format ]]></insertedText>
  </DocumentChange>
  <Command __id="5759" _type="InsertStringCommand" date="Mon Feb 01 21:55:27 EST 2021" starttimestamp="1612231299681" timestamp="3227984" timestamp2="3227984">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5761" _type="InsertStringCommand" date="Mon Feb 01 21:55:27 EST 2021" starttimestamp="1612231299681" timestamp="3228096" timestamp2="3228096">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5763" _type="InsertStringCommand" date="Mon Feb 01 21:55:27 EST 2021" starttimestamp="1612231299681" timestamp="3228199" timestamp2="3228199">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5765" _type="InsertStringCommand" date="Mon Feb 01 21:55:29 EST 2021" starttimestamp="1612231299681" timestamp="3229379" timestamp2="3229379">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5766" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:55:29 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3229419" />
  <Command __id="5770" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:55:29 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3229669" />
  <Command __id="5772" _type="InsertStringCommand" date="Mon Feb 01 21:55:30 EST 2021" starttimestamp="1612231299681" timestamp="3231303" timestamp2="3231303">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5773" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:55:31 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3231344" />
  <Command __id="5776" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:55:35 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3235748" />
  <Command __id="5779" _type="InsertStringCommand" date="Mon Feb 01 21:55:35 EST 2021" starttimestamp="1612231299681" timestamp="3235892" timestamp2="3235892">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5780" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:55:36 EST 2021" starttimestamp="1612231299681" timestamp="3236669" />
  <Command __id="5781" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:55:36 EST 2021" starttimestamp="1612231299681" timestamp="3236820" />
  <Command __id="5782" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:55:36 EST 2021" starttimestamp="1612231299681" timestamp="3236965" />
  <Command __id="5783" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:55:36 EST 2021" starttimestamp="1612231299681" timestamp="3237097" />
  <Command __id="5784" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:55:36 EST 2021" starttimestamp="1612231299681" timestamp="3237215" />
  <Command __id="5785" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:55:37 EST 2021" starttimestamp="1612231299681" timestamp="3237353" />
  <Command __id="5786" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:55:37 EST 2021" starttimestamp="1612231299681" timestamp="3237482" />
  <Command __id="5787" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:55:37 EST 2021" starttimestamp="1612231299681" timestamp="3237612" />
  <Command __id="5788" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:55:37 EST 2021" starttimestamp="1612231299681" timestamp="3237957" />
  <Command __id="5790" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Mon Feb 01 21:55:38 EST 2021" starttimestamp="1612231299681" timestamp="3238596" />
  <Command __id="5792" _type="InsertStringCommand" date="Mon Feb 01 21:55:38 EST 2021" starttimestamp="1612231299681" timestamp="3239244" timestamp2="3239244">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5793" _type="InsertStringCommand" date="Mon Feb 01 21:55:39 EST 2021" starttimestamp="1612231299681" timestamp="3239359" timestamp2="3239359">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5794" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 21:55:39 EST 2021" starttimestamp="1612231299681" timestamp="3239633" />
  <Command __id="5796" _type="InsertStringCommand" date="Mon Feb 01 21:55:39 EST 2021" starttimestamp="1612231299681" timestamp="3240127" timestamp2="3240127">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5797" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:55:40 EST 2021" starttimestamp="1612231299681" timestamp="3240525" />
  <Command __id="5798" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:55:40 EST 2021" starttimestamp="1612231299681" timestamp="3240671" />
  <Command __id="5799" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 21:55:40 EST 2021" starttimestamp="1612231299681" timestamp="3240809" />
  <Command __id="5800" _type="ShellCommand" date="Mon Feb 01 21:55:40 EST 2021" starttimestamp="1612231299681" timestamp="3241223" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5801" _type="ShellCommand" date="Mon Feb 01 21:57:35 EST 2021" starttimestamp="1612231299681" timestamp="3355889" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5802" _type="MoveCaretCommand" caretOffset="3714" date="Mon Feb 01 21:57:35 EST 2021" docOffset="34683" starttimestamp="1612231299681" timestamp="3355955" />
  <Command __id="5803" _type="MoveCaretCommand" caretOffset="3762" date="Mon Feb 01 21:57:36 EST 2021" docOffset="34731" starttimestamp="1612231299681" timestamp="3356863" />
  <Command __id="5804" _type="MoveCaretCommand" caretOffset="3728" date="Mon Feb 01 21:57:39 EST 2021" docOffset="34697" starttimestamp="1612231299681" timestamp="3359444" />
  <Command __id="5805" _type="ShellCommand" date="Mon Feb 01 21:57:44 EST 2021" starttimestamp="1612231299681" timestamp="3364688" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5806" _type="ShellCommand" date="Mon Feb 01 21:57:44 EST 2021" starttimestamp="1612231299681" timestamp="3364812" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5811" _type="MoveCaretCommand" caretOffset="3776" date="Mon Feb 01 21:57:45 EST 2021" docOffset="34745" starttimestamp="1612231299681" timestamp="3365844" />
  <DocumentChange __id="5760" _type="Insert" date="Mon Feb 01 21:55:27 EST 2021" docASTNodeCount="6031" docActiveCodeLength="34743" docExpressionCount="4049" docLength="35732" length="9" offset="34668" repeat="9" starttimestamp="1612231299681" timestamp="3228083" timestamp2="3233813">
    <text><![CDATA[= new sim]]></text>
  </DocumentChange>
  <DocumentChange __id="5777" _type="Replace" date="Mon Feb 01 21:55:35 EST 2021" docASTNodeCount="6031" docActiveCodeLength="34758" docExpressionCount="4049" docLength="35747" endLine="997" insertionLength="16" int_docASTNodeCount="6031" int_docActiveCodeLength="34742" int_docExpressionCount="4049" int_docLength="35731" length="1" offset="34674" startLine="997" starttimestamp="1612231299681" timestamp="3235756">
    <deletedText><![CDATA[s]]></deletedText>
    <insertedText><![CDATA[SimpleDateFormat]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5778" _type="Replace" date="Mon Feb 01 21:55:35 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34765" docExpressionCount="4050" docLength="35754" endLine="997" insertionLength="9" int_docASTNodeCount="6031" int_docActiveCodeLength="34756" int_docExpressionCount="4049" int_docLength="35745" length="2" offset="34690" startLine="997" starttimestamp="1612231299681" timestamp="3235768">
    <deletedText><![CDATA[im]]></deletedText>
    <insertedText><![CDATA[(pattern)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5789" _type="Delete" date="Mon Feb 01 21:55:38 EST 2021" docASTNodeCount="6031" docActiveCodeLength="34758" docExpressionCount="4049" docLength="35747" endLine="997" length="7" offset="34691" startLine="997" starttimestamp="1612231299681" timestamp="3238591">
    <text><![CDATA[pattern]]></text>
  </DocumentChange>
  <DocumentChange __id="5791" _type="Insert" date="Mon Feb 01 21:55:38 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34760" docExpressionCount="4050" docLength="35749" length="2" offset="34691" starttimestamp="1612231299681" timestamp="3239239">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="5795" _type="Insert" date="Mon Feb 01 21:55:39 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34761" docExpressionCount="4050" docLength="35750" length="1" offset="34694" starttimestamp="1612231299681" timestamp="3240118">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="5807" _type="Delete" date="Mon Feb 01 21:57:44 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34740" docExpressionCount="4050" docLength="35729" endLine="1002" length="21" offset="34771" startLine="1002" starttimestamp="1612231299681" timestamp="3364830">
    <text><![CDATA[FileNotFoundException]]></text>
  </DocumentChange>
  <DocumentChange __id="5808" _type="Insert" date="Mon Feb 01 21:57:44 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34775" docExpressionCount="4050" docLength="35764" length="35" offset="34771" repeat="3" starttimestamp="1612231299681" timestamp="3364833" timestamp2="3364841">
    <text><![CDATA[FileNotFoundException | IOException]]></text>
  </DocumentChange>
  <DocumentChange __id="5813" _type="Insert" date="Mon Feb 01 21:57:47 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34778" docExpressionCount="4050" docLength="35767" length="3" offset="34792" repeat="3" starttimestamp="1612231299681" timestamp="3367490" timestamp2="3367666">
    <text><![CDATA[ re]]></text>
  </DocumentChange>
  <DocumentChange __id="5820" _type="Delete" date="Mon Feb 01 21:57:48 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34776" docExpressionCount="4050" docLength="35765" endLine="1002" length="2" offset="34793" repeat="2" startLine="1002" starttimestamp="1612231299681" timestamp="3368513" timestamp2="3368648">
    <text><![CDATA[re]]></text>
  </DocumentChange>
  <DocumentChange __id="5822" _type="Insert" date="Mon Feb 01 21:57:48 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34777" docExpressionCount="4050" docLength="35766" length="1" offset="34793" starttimestamp="1612231299681" timestamp="3368696">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="5823" _type="Insert" date="Mon Feb 01 21:57:50 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34778" docExpressionCount="4050" docLength="35767" length="1" offset="34794" starttimestamp="1612231299681" timestamp="3371095">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <Command __id="5812" _type="MoveCaretCommand" caretOffset="3823" date="Mon Feb 01 21:57:46 EST 2021" docOffset="34792" starttimestamp="1612231299681" timestamp="3366913" />
  <Command __id="5814" _type="InsertStringCommand" date="Mon Feb 01 21:57:47 EST 2021" starttimestamp="1612231299681" timestamp="3367498" timestamp2="3367498">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5816" _type="InsertStringCommand" date="Mon Feb 01 21:57:47 EST 2021" starttimestamp="1612231299681" timestamp="3367661" timestamp2="3367661">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5818" _type="InsertStringCommand" date="Mon Feb 01 21:57:47 EST 2021" starttimestamp="1612231299681" timestamp="3367671" timestamp2="3367671">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5819" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 21:57:47 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3367711" />
  <Command __id="5824" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 21:57:50 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3371108" />
  <Command __id="5826" _type="UndoCommand" date="Mon Feb 01 21:57:53 EST 2021" starttimestamp="1612231299681" timestamp="3373358" />
  <Command __id="5828" _type="UndoCommand" date="Mon Feb 01 21:57:53 EST 2021" starttimestamp="1612231299681" timestamp="3373534" />
  <Command __id="5830" _type="UndoCommand" date="Mon Feb 01 21:57:53 EST 2021" starttimestamp="1612231299681" timestamp="3373940" />
  <Command __id="5835" _type="UndoCommand" date="Mon Feb 01 21:57:54 EST 2021" starttimestamp="1612231299681" timestamp="3374507" />
  <Command __id="5836" _type="ShellCommand" date="Mon Feb 01 21:58:03 EST 2021" starttimestamp="1612231299681" timestamp="3383608" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5837" _type="ShellCommand" date="Mon Feb 01 21:58:03 EST 2021" starttimestamp="1612231299681" timestamp="3383740" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5846" _type="MoveCaretCommand" caretOffset="3823" date="Mon Feb 01 21:58:05 EST 2021" docOffset="34792" starttimestamp="1612231299681" timestamp="3385320" />
  <Command __id="5847" _type="MoveCaretCommand" caretOffset="3789" date="Mon Feb 01 21:58:05 EST 2021" docOffset="34758" starttimestamp="1612231299681" timestamp="3385944" />
  <Command __id="5848" _type="MoveCaretCommand" caretOffset="3728" date="Mon Feb 01 21:58:07 EST 2021" docOffset="34697" starttimestamp="1612231299681" timestamp="3388191" />
  <Command __id="5849" _type="MoveCaretCommand" caretOffset="3728" date="Mon Feb 01 21:58:09 EST 2021" docOffset="34697" starttimestamp="1612231299681" timestamp="3389776" />
  <Command __id="5850" _type="MoveCaretCommand" caretOffset="3726" date="Mon Feb 01 21:58:09 EST 2021" docOffset="34695" starttimestamp="1612231299681" timestamp="3390284" />
  <DocumentChange __id="5825" _type="Delete" date="Mon Feb 01 21:57:53 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34776" docExpressionCount="4050" docLength="35765" endLine="1002" length="2" offset="34793" startLine="1002" starttimestamp="1612231299681" timestamp="3373351">
    <text><![CDATA[e1]]></text>
  </DocumentChange>
  <DocumentChange __id="5827" _type="Insert" date="Mon Feb 01 21:57:53 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34778" docExpressionCount="4050" docLength="35767" length="2" offset="34793" starttimestamp="1612231299681" timestamp="3373528">
    <text><![CDATA[re]]></text>
  </DocumentChange>
  <DocumentChange __id="5829" _type="Delete" date="Mon Feb 01 21:57:53 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34740" docExpressionCount="4050" docLength="35729" endLine="1002" length="38" offset="34771" repeat="4" startLine="1002" starttimestamp="1612231299681" timestamp="3373933" timestamp2="3374491">
    <text><![CDATA[FileNotFoundException re | IOException]]></text>
  </DocumentChange>
  <DocumentChange __id="5834" _type="Insert" date="Mon Feb 01 21:57:54 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34761" docExpressionCount="4050" docLength="35750" length="21" offset="34771" starttimestamp="1612231299681" timestamp="3374499">
    <text><![CDATA[FileNotFoundException]]></text>
  </DocumentChange>
  <DocumentChange __id="5838" _type="Insert" date="Mon Feb 01 21:58:03 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34820" docExpressionCount="4055" docLength="35843" length="93" offset="34866" repeat="8" starttimestamp="1612231299681" timestamp="3383764" timestamp2="3383801">
    <text><![CDATA[ catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></text>
  </DocumentChange>
  <Command __id="5851" _type="MoveCaretCommand" caretOffset="3723" date="Mon Feb 01 21:58:17 EST 2021" docOffset="34692" starttimestamp="1612231299681" timestamp="3397399" />
  <DocumentChange __id="5852" _type="Insert" date="Mon Feb 01 21:58:20 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34821" docExpressionCount="4055" docLength="35844" length="1" offset="34692" starttimestamp="1612231299681" timestamp="3400809">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="5853" _type="InsertStringCommand" date="Mon Feb 01 21:58:20 EST 2021" starttimestamp="1612231299681" timestamp="3400816" timestamp2="3400816">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="5854" _type="Delete" date="Mon Feb 01 21:58:21 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34820" docExpressionCount="4055" docLength="35843" endLine="997" length="1" offset="34692" startLine="997" starttimestamp="1612231299681" timestamp="3401981">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="5855" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:58:21 EST 2021" starttimestamp="1612231299681" timestamp="3401983" />
  <DocumentChange __id="5856" _type="Insert" date="Mon Feb 01 21:58:21 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34822" docExpressionCount="4055" docLength="35845" length="2" offset="34692" repeat="2" starttimestamp="1612231299681" timestamp="3402196" timestamp2="3402496">
    <text><![CDATA[M/]]></text>
  </DocumentChange>
  <Command __id="5857" _type="InsertStringCommand" date="Mon Feb 01 21:58:21 EST 2021" starttimestamp="1612231299681" timestamp="3402202" timestamp2="3402202">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="5859" _type="InsertStringCommand" date="Mon Feb 01 21:58:22 EST 2021" starttimestamp="1612231299681" timestamp="3402501" timestamp2="3402501">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="5860" _type="Delete" date="Mon Feb 01 21:58:23 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34821" docExpressionCount="4055" docLength="35844" endLine="997" length="1" offset="34693" startLine="997" starttimestamp="1612231299681" timestamp="3404042">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <Command __id="5861" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:58:23 EST 2021" starttimestamp="1612231299681" timestamp="3404045" />
  <DocumentChange __id="5862" _type="Insert" date="Mon Feb 01 21:58:24 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34823" docExpressionCount="4055" docLength="35846" length="2" offset="34693" repeat="2" starttimestamp="1612231299681" timestamp="3404323" timestamp2="3404594">
    <text><![CDATA[M/]]></text>
  </DocumentChange>
  <Command __id="5863" _type="InsertStringCommand" date="Mon Feb 01 21:58:24 EST 2021" starttimestamp="1612231299681" timestamp="3404331" timestamp2="3404331">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="5865" _type="InsertStringCommand" date="Mon Feb 01 21:58:24 EST 2021" starttimestamp="1612231299681" timestamp="3404598" timestamp2="3404598">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="5866" _type="Delete" date="Mon Feb 01 21:58:24 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34821" docExpressionCount="4055" docLength="35844" endLine="997" length="2" offset="34693" repeat="2" startLine="997" starttimestamp="1612231299681" timestamp="3404940" timestamp2="3405063">
    <text><![CDATA[M/]]></text>
  </DocumentChange>
  <Command __id="5867" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:58:24 EST 2021" starttimestamp="1612231299681" timestamp="3404943" />
  <Command __id="5869" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:58:24 EST 2021" starttimestamp="1612231299681" timestamp="3405066" />
  <Command __id="5871" _type="InsertStringCommand" date="Mon Feb 01 21:58:25 EST 2021" starttimestamp="1612231299681" timestamp="3405380" timestamp2="3405380">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5873" _type="InsertStringCommand" date="Mon Feb 01 21:58:26 EST 2021" starttimestamp="1612231299681" timestamp="3406887" timestamp2="3406887">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5875" _type="InsertStringCommand" date="Mon Feb 01 21:58:26 EST 2021" starttimestamp="1612231299681" timestamp="3407054" timestamp2="3407054">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5877" _type="InsertStringCommand" date="Mon Feb 01 21:58:27 EST 2021" starttimestamp="1612231299681" timestamp="3407851" timestamp2="3407851">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5879" _type="InsertStringCommand" date="Mon Feb 01 21:58:27 EST 2021" starttimestamp="1612231299681" timestamp="3407976" timestamp2="3407976">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5881" _type="InsertStringCommand" date="Mon Feb 01 21:58:27 EST 2021" starttimestamp="1612231299681" timestamp="3408128" timestamp2="3408128">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5883" _type="InsertStringCommand" date="Mon Feb 01 21:58:27 EST 2021" starttimestamp="1612231299681" timestamp="3408261" timestamp2="3408261">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="5885" _type="InsertStringCommand" date="Mon Feb 01 21:58:29 EST 2021" starttimestamp="1612231299681" timestamp="3409486" timestamp2="3409486">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5887" _type="InsertStringCommand" date="Mon Feb 01 21:58:30 EST 2021" starttimestamp="1612231299681" timestamp="3410595" timestamp2="3410595">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="5889" _type="InsertStringCommand" date="Mon Feb 01 21:58:30 EST 2021" starttimestamp="1612231299681" timestamp="3410749" timestamp2="3410749">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="5891" _type="InsertStringCommand" date="Mon Feb 01 21:58:31 EST 2021" starttimestamp="1612231299681" timestamp="3411935" timestamp2="3411935">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="5892" _type="ShellCommand" date="Mon Feb 01 21:58:32 EST 2021" starttimestamp="1612231299681" timestamp="3412538" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="5870" _type="Insert" date="Mon Feb 01 21:58:25 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34832" docExpressionCount="4055" docLength="35855" length="11" offset="34693" repeat="11" starttimestamp="1612231299681" timestamp="3405375" timestamp2="3411929">
    <text><![CDATA[/d/yyyy hh:]]></text>
  </DocumentChange>
  <Command __id="5893" _type="ShellCommand" date="Mon Feb 01 21:59:17 EST 2021" starttimestamp="1612231299681" timestamp="3457620" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5894" _type="MoveCaretCommand" caretOffset="3735" date="Mon Feb 01 21:59:17 EST 2021" docOffset="34704" starttimestamp="1612231299681" timestamp="3457685" />
  <DocumentChange __id="5895" _type="Insert" date="Mon Feb 01 21:59:18 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34837" docExpressionCount="4055" docLength="35860" length="5" offset="34704" repeat="5" starttimestamp="1612231299681" timestamp="3459162" timestamp2="3460469">
    <text><![CDATA[mmLss]]></text>
  </DocumentChange>
  <Command __id="5896" _type="InsertStringCommand" date="Mon Feb 01 21:59:18 EST 2021" starttimestamp="1612231299681" timestamp="3459170" timestamp2="3459170">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5898" _type="InsertStringCommand" date="Mon Feb 01 21:59:18 EST 2021" starttimestamp="1612231299681" timestamp="3459307" timestamp2="3459307">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5900" _type="InsertStringCommand" date="Mon Feb 01 21:59:19 EST 2021" starttimestamp="1612231299681" timestamp="3460090" timestamp2="3460090">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="5902" _type="InsertStringCommand" date="Mon Feb 01 21:59:20 EST 2021" starttimestamp="1612231299681" timestamp="3460343" timestamp2="3460343">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5904" _type="InsertStringCommand" date="Mon Feb 01 21:59:20 EST 2021" starttimestamp="1612231299681" timestamp="3460476" timestamp2="3460476">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="5905" _type="Delete" date="Mon Feb 01 21:59:20 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34834" docExpressionCount="4055" docLength="35857" endLine="997" length="3" offset="34706" repeat="3" startLine="997" starttimestamp="1612231299681" timestamp="3460671" timestamp2="3460939">
    <text><![CDATA[Lss]]></text>
  </DocumentChange>
  <Command __id="5906" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:59:20 EST 2021" starttimestamp="1612231299681" timestamp="3460675" />
  <Command __id="5908" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:59:20 EST 2021" starttimestamp="1612231299681" timestamp="3460808" />
  <Command __id="5910" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 21:59:20 EST 2021" starttimestamp="1612231299681" timestamp="3460941" />
  <Command __id="5912" _type="InsertStringCommand" date="Mon Feb 01 21:59:21 EST 2021" starttimestamp="1612231299681" timestamp="3461512" timestamp2="3461512">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="5914" _type="InsertStringCommand" date="Mon Feb 01 21:59:21 EST 2021" starttimestamp="1612231299681" timestamp="3461834" timestamp2="3461834">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5916" _type="InsertStringCommand" date="Mon Feb 01 21:59:21 EST 2021" starttimestamp="1612231299681" timestamp="3461986" timestamp2="3461986">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5918" _type="InsertStringCommand" date="Mon Feb 01 21:59:22 EST 2021" starttimestamp="1612231299681" timestamp="3462465" timestamp2="3462465">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5920" _type="InsertStringCommand" date="Mon Feb 01 21:59:22 EST 2021" starttimestamp="1612231299681" timestamp="3462699" timestamp2="3462699">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5922" _type="InsertStringCommand" date="Mon Feb 01 21:59:22 EST 2021" starttimestamp="1612231299681" timestamp="3462860" timestamp2="3462860">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5923" _type="ShellCommand" date="Mon Feb 01 21:59:24 EST 2021" starttimestamp="1612231299681" timestamp="3465191" type="ECLIPSE_MINIMIZED" />
  <Command __id="5924" _type="ShellCommand" date="Mon Feb 01 21:59:24 EST 2021" starttimestamp="1612231299681" timestamp="3465198" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5925" _type="ShellCommand" date="Mon Feb 01 21:59:26 EST 2021" starttimestamp="1612231299681" timestamp="3467120" type="ECLIPSE_MAXIMIZED" />
  <Command __id="5926" _type="ShellCommand" date="Mon Feb 01 21:59:26 EST 2021" starttimestamp="1612231299681" timestamp="3467180" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5927" _type="ShellCommand" date="Mon Feb 01 21:59:27 EST 2021" starttimestamp="1612231299681" timestamp="3467547" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5928" _type="ShellCommand" date="Mon Feb 01 21:59:37 EST 2021" starttimestamp="1612231299681" timestamp="3477622" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5929" _type="MoveCaretCommand" caretOffset="3707" date="Mon Feb 01 21:59:39 EST 2021" docOffset="34676" starttimestamp="1612231299681" timestamp="3479639" />
  <Command __id="5930" _type="ShellCommand" date="Mon Feb 01 21:59:43 EST 2021" starttimestamp="1612231299681" timestamp="3484139" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5931" _type="ShellCommand" date="Mon Feb 01 21:59:56 EST 2021" starttimestamp="1612231299681" timestamp="3496626" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5932" _type="SelectTextCommand" caretOffset="3729" date="Mon Feb 01 21:59:57 EST 2021" end="3729" start="3728" starttimestamp="1612231299681" timestamp="3497842" />
  <Command __id="5933" _type="MoveCaretCommand" caretOffset="3748" date="Mon Feb 01 21:59:57 EST 2021" docOffset="34717" starttimestamp="1612231299681" timestamp="3498244" />
  <Command __id="5934" _type="MoveCaretCommand" caretOffset="3803" date="Mon Feb 01 22:00:05 EST 2021" docOffset="34772" starttimestamp="1612231299681" timestamp="3506054" />
  <DocumentChange __id="5911" _type="Insert" date="Mon Feb 01 21:59:21 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34840" docExpressionCount="4055" docLength="35863" length="6" offset="34706" repeat="6" starttimestamp="1612231299681" timestamp="3461506" timestamp2="3462851">
    <text><![CDATA[:ss aa]]></text>
  </DocumentChange>
  <Command __id="5935" _type="MoveCaretCommand" caretOffset="3748" date="Mon Feb 01 22:00:07 EST 2021" docOffset="34717" starttimestamp="1612231299681" timestamp="3507580" />
  <DocumentChange __id="5936" _type="Delete" date="Mon Feb 01 22:00:08 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34838" docExpressionCount="4055" docLength="35861" endLine="999" length="2" offset="34717" startLine="998" starttimestamp="1612231299681" timestamp="3508649">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="5937" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:00:08 EST 2021" starttimestamp="1612231299681" timestamp="3508651" />
  <Command __id="5938" _type="MoveCaretCommand" caretOffset="3801" date="Mon Feb 01 22:00:08 EST 2021" docOffset="34770" starttimestamp="1612231299681" timestamp="3509194" />
  <DocumentChange __id="5939" _type="Insert" date="Mon Feb 01 22:00:12 EST 2021" docASTNodeCount="6044" docActiveCodeLength="34844" docExpressionCount="4056" docLength="35867" length="6" offset="34770" repeat="6" starttimestamp="1612231299681" timestamp="3512962" timestamp2="3513478">
    <text><![CDATA[String]]></text>
  </DocumentChange>
  <Command __id="5940" _type="InsertStringCommand" date="Mon Feb 01 22:00:12 EST 2021" starttimestamp="1612231299681" timestamp="3512966" timestamp2="3512966">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="5942" _type="InsertStringCommand" date="Mon Feb 01 22:00:12 EST 2021" starttimestamp="1612231299681" timestamp="3513200" timestamp2="3513200">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5943" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:12 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3513242" />
  <Command __id="5948" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:13 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3513597" />
  <DocumentChange __id="5949" _type="Replace" date="Mon Feb 01 22:00:13 EST 2021" docASTNodeCount="6044" docActiveCodeLength="34845" docExpressionCount="4056" docLength="35868" endLine="999" insertionLength="7" int_docASTNodeCount="6042" int_docActiveCodeLength="34838" int_docExpressionCount="4055" int_docLength="35861" length="6" offset="34770" startLine="999" starttimestamp="1612231299681" timestamp="3513604">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String ]]></insertedText>
  </DocumentChange>
  <Command __id="5950" _type="InsertStringCommand" date="Mon Feb 01 22:00:13 EST 2021" starttimestamp="1612231299681" timestamp="3513612" timestamp2="3513612">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="5951" _type="Delete" date="Mon Feb 01 22:00:14 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34838" docExpressionCount="4055" docLength="35861" endLine="999" length="7" offset="34770" startLine="999" starttimestamp="1612231299681" timestamp="3514496">
    <text><![CDATA[String ]]></text>
  </DocumentChange>
  <Command __id="5952" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:00:14 EST 2021" starttimestamp="1612231299681" timestamp="3514500" />
  <DocumentChange __id="5953" _type="Insert" date="Mon Feb 01 22:00:14 EST 2021" docASTNodeCount="6044" docActiveCodeLength="34844" docExpressionCount="4056" docLength="35867" length="6" offset="34770" repeat="6" starttimestamp="1612231299681" timestamp="3514709" timestamp2="3515454">
    <text><![CDATA[nextli]]></text>
  </DocumentChange>
  <Command __id="5954" _type="InsertStringCommand" date="Mon Feb 01 22:00:14 EST 2021" starttimestamp="1612231299681" timestamp="3514714" timestamp2="3514714">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5955" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:14 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3514756" />
  <Command __id="5961" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:15 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3515699" />
  <DocumentChange __id="5962" _type="Replace" date="Mon Feb 01 22:00:15 EST 2021" docASTNodeCount="6044" docActiveCodeLength="34846" docExpressionCount="4056" docLength="35869" endLine="999" insertionLength="8" int_docASTNodeCount="6042" int_docActiveCodeLength="34838" int_docExpressionCount="4055" int_docLength="35861" length="6" offset="34770" startLine="999" starttimestamp="1612231299681" timestamp="3515705">
    <deletedText><![CDATA[nextli]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <Command __id="5963" _type="InsertStringCommand" date="Mon Feb 01 22:00:15 EST 2021" starttimestamp="1612231299681" timestamp="3515714" timestamp2="3515714">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5964" _type="Insert" date="Mon Feb 01 22:00:15 EST 2021" docASTNodeCount="6046" docActiveCodeLength="34852" docExpressionCount="4058" docLength="35875" length="6" offset="34778" repeat="6" starttimestamp="1612231299681" timestamp="3515804" timestamp2="3517116">
    <text><![CDATA[ = nex]]></text>
  </DocumentChange>
  <Command __id="5965" _type="InsertStringCommand" date="Mon Feb 01 22:00:15 EST 2021" starttimestamp="1612231299681" timestamp="3515811" timestamp2="3515811">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5967" _type="InsertStringCommand" date="Mon Feb 01 22:00:15 EST 2021" starttimestamp="1612231299681" timestamp="3515910" timestamp2="3515910">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5969" _type="InsertStringCommand" date="Mon Feb 01 22:00:15 EST 2021" starttimestamp="1612231299681" timestamp="3516045" timestamp2="3516045">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5971" _type="InsertStringCommand" date="Mon Feb 01 22:00:16 EST 2021" starttimestamp="1612231299681" timestamp="3516870" timestamp2="3516870">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5972" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:16 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3516911" />
  <Command __id="5975" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:16 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3517199" />
  <DocumentChange __id="5976" _type="Replace" date="Mon Feb 01 22:00:16 EST 2021" docASTNodeCount="6046" docActiveCodeLength="34857" docExpressionCount="4058" docLength="35880" endLine="999" insertionLength="8" int_docASTNodeCount="6042" int_docActiveCodeLength="34849" int_docExpressionCount="4055" int_docLength="35872" length="3" offset="34781" startLine="999" starttimestamp="1612231299681" timestamp="3517205">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <Command __id="5977" _type="InsertStringCommand" date="Mon Feb 01 22:00:16 EST 2021" starttimestamp="1612231299681" timestamp="3517217" timestamp2="3517217">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5978" _type="Insert" date="Mon Feb 01 22:00:17 EST 2021" docASTNodeCount="6048" docActiveCodeLength="34861" docExpressionCount="4060" docLength="35884" length="4" offset="34789" repeat="4" starttimestamp="1612231299681" timestamp="3517405" timestamp2="3518189">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <Command __id="5979" _type="InsertStringCommand" date="Mon Feb 01 22:00:17 EST 2021" starttimestamp="1612231299681" timestamp="3517410" timestamp2="3517410">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5980" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:17 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3517445" />
  <DocumentChange __id="5984" _type="Delete" date="Mon Feb 01 22:00:18 EST 2021" docASTNodeCount="6046" docActiveCodeLength="34858" docExpressionCount="4058" docLength="35881" endLine="999" length="3" offset="34790" repeat="3" startLine="999" starttimestamp="1612231299681" timestamp="3518858" timestamp2="3519114">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <DocumentChange __id="5987" _type="Insert" date="Mon Feb 01 22:00:19 EST 2021" docASTNodeCount="6048" docActiveCodeLength="34861" docExpressionCount="4060" docLength="35884" length="3" offset="34790" repeat="3" starttimestamp="1612231299681" timestamp="3519437" timestamp2="3519635">
    <text><![CDATA[sub]]></text>
  </DocumentChange>
  <Command __id="5990" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:19 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3519762" />
  <DocumentChange __id="5991" _type="Replace" date="Mon Feb 01 22:00:19 EST 2021" docASTNodeCount="6049" docActiveCodeLength="34879" docExpressionCount="4061" docLength="35902" endLine="999" insertionLength="21" int_docASTNodeCount="6046" int_docActiveCodeLength="34858" int_docExpressionCount="4058" int_docLength="35881" length="3" offset="34790" startLine="999" starttimestamp="1612231299681" timestamp="3519770">
    <deletedText><![CDATA[sub]]></deletedText>
    <insertedText><![CDATA[substring(beginIndex)]]></insertedText>
  </DocumentChange>
  <Command __id="5992" _type="InsertStringCommand" date="Mon Feb 01 22:00:19 EST 2021" starttimestamp="1612231299681" timestamp="3519904" timestamp2="3519904">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5993" _type="Replace" date="Mon Feb 01 22:00:20 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34870" docExpressionCount="4055" docLength="35893" endLine="999" insertionLength="1" int_docASTNodeCount="6048" int_docActiveCodeLength="34869" int_docExpressionCount="4060" int_docLength="35892" length="10" offset="34800" startLine="999" starttimestamp="1612231299681" timestamp="3520338">
    <deletedText><![CDATA[beginIndex]]></deletedText>
    <insertedText><![CDATA[-]]></insertedText>
  </DocumentChange>
  <Command __id="5994" _type="InsertStringCommand" date="Mon Feb 01 22:00:20 EST 2021" starttimestamp="1612231299681" timestamp="3520347" timestamp2="3520347">
    <data><![CDATA[-]]></data>
  </Command>
  <DocumentChange __id="5995" _type="Delete" date="Mon Feb 01 22:00:20 EST 2021" docASTNodeCount="6048" docActiveCodeLength="34869" docExpressionCount="4060" docLength="35892" endLine="999" length="1" offset="34800" startLine="999" starttimestamp="1612231299681" timestamp="3520786">
    <text><![CDATA[-]]></text>
  </DocumentChange>
  <Command __id="5996" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:00:20 EST 2021" starttimestamp="1612231299681" timestamp="3520792" />
  <DocumentChange __id="5997" _type="Insert" date="Mon Feb 01 22:00:20 EST 2021" docASTNodeCount="6049" docActiveCodeLength="34871" docExpressionCount="4061" docLength="35894" length="2" offset="34800" repeat="2" starttimestamp="1612231299681" timestamp="3521158" timestamp2="3521533">
    <text><![CDATA[0.]]></text>
  </DocumentChange>
  <Command __id="5998" _type="InsertStringCommand" date="Mon Feb 01 22:00:20 EST 2021" starttimestamp="1612231299681" timestamp="3521165" timestamp2="3521165">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="6000" _type="InsertStringCommand" date="Mon Feb 01 22:00:21 EST 2021" starttimestamp="1612231299681" timestamp="3521536" timestamp2="3521536">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6001" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:21 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3521627" />
  <Command __id="6002" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:21 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3521630" />
  <DocumentChange __id="6003" _type="Delete" date="Mon Feb 01 22:00:21 EST 2021" docASTNodeCount="6049" docActiveCodeLength="34870" docExpressionCount="4061" docLength="35893" endLine="999" length="1" offset="34801" startLine="999" starttimestamp="1612231299681" timestamp="3521963">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="6004" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:00:21 EST 2021" starttimestamp="1612231299681" timestamp="3521966" />
  <DocumentChange __id="6005" _type="Insert" date="Mon Feb 01 22:00:21 EST 2021" docASTNodeCount="6050" docActiveCodeLength="34874" docExpressionCount="4062" docLength="35897" length="4" offset="34801" repeat="4" starttimestamp="1612231299681" timestamp="3522159" timestamp2="3522845">
    <text><![CDATA[, 21]]></text>
  </DocumentChange>
  <Command __id="6006" _type="InsertStringCommand" date="Mon Feb 01 22:00:21 EST 2021" starttimestamp="1612231299681" timestamp="3522161" timestamp2="3522161">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="6008" _type="InsertStringCommand" date="Mon Feb 01 22:00:21 EST 2021" starttimestamp="1612231299681" timestamp="3522286" timestamp2="3522286">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6010" _type="InsertStringCommand" date="Mon Feb 01 22:00:22 EST 2021" starttimestamp="1612231299681" timestamp="3522776" timestamp2="3522776">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="6012" _type="InsertStringCommand" date="Mon Feb 01 22:00:22 EST 2021" starttimestamp="1612231299681" timestamp="3522847" timestamp2="3522847">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="6013" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:00:22 EST 2021" starttimestamp="1612231299681" timestamp="3523088" />
  <DocumentChange __id="6014" _type="Insert" date="Mon Feb 01 22:00:23 EST 2021" docASTNodeCount="6050" docActiveCodeLength="34881" docExpressionCount="4062" docLength="35904" length="7" offset="34806" repeat="2" starttimestamp="1612231299681" timestamp="3523490" timestamp2="3523693">
    <text><![CDATA[;
				]]></text>
  </DocumentChange>
  <Command __id="6015" _type="InsertStringCommand" date="Mon Feb 01 22:00:23 EST 2021" starttimestamp="1612231299681" timestamp="3523500" timestamp2="3523500">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6017" _type="InsertStringCommand" date="Mon Feb 01 22:00:23 EST 2021" starttimestamp="1612231299681" timestamp="3523703" timestamp2="3523703">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6018" _type="Insert" date="Mon Feb 01 22:00:26 EST 2021" docASTNodeCount="6052" docActiveCodeLength="34885" docExpressionCount="4063" docLength="35908" length="4" offset="34813" repeat="4" starttimestamp="1612231299681" timestamp="3527196" timestamp2="3527551">
    <text><![CDATA[Date]]></text>
  </DocumentChange>
  <Command __id="6019" _type="InsertStringCommand" date="Mon Feb 01 22:00:26 EST 2021" starttimestamp="1612231299681" timestamp="3527201" timestamp2="3527201">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="6021" _type="InsertStringCommand" date="Mon Feb 01 22:00:27 EST 2021" starttimestamp="1612231299681" timestamp="3527355" timestamp2="3527355">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6022" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:27 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3527398" />
  <Command __id="6025" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:27 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3527743" />
  <DocumentChange __id="6026" _type="Replace" date="Mon Feb 01 22:00:27 EST 2021" docASTNodeCount="6052" docActiveCodeLength="34886" docExpressionCount="4063" docLength="35909" endLine="1000" insertionLength="5" int_docASTNodeCount="6050" int_docActiveCodeLength="34881" int_docExpressionCount="4062" int_docLength="35904" length="4" offset="34813" startLine="1000" starttimestamp="1612231299681" timestamp="3527761">
    <deletedText><![CDATA[Date]]></deletedText>
    <insertedText><![CDATA[Date ]]></insertedText>
  </DocumentChange>
  <Command __id="6027" _type="InsertStringCommand" date="Mon Feb 01 22:00:27 EST 2021" starttimestamp="1612231299681" timestamp="3527768" timestamp2="3527768">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="6028" _type="Insert" date="Mon Feb 01 22:00:27 EST 2021" docASTNodeCount="6055" docActiveCodeLength="34890" docExpressionCount="4064" docLength="35913" length="4" offset="34818" repeat="4" starttimestamp="1612231299681" timestamp="3528084" timestamp2="3528429">
    <text><![CDATA[part]]></text>
  </DocumentChange>
  <Command __id="6029" _type="InsertStringCommand" date="Mon Feb 01 22:00:27 EST 2021" starttimestamp="1612231299681" timestamp="3528090" timestamp2="3528090">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6030" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:27 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3528132" />
  <Command __id="6032" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:27 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3528226" />
  <Command __id="6034" _type="InsertStringCommand" date="Mon Feb 01 22:00:27 EST 2021" starttimestamp="1612231299681" timestamp="3528235" timestamp2="3528235">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6035" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:28 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3528327" />
  <Command __id="6036" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:28 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3528353" />
  <Command __id="6038" _type="InsertStringCommand" date="Mon Feb 01 22:00:28 EST 2021" starttimestamp="1612231299681" timestamp="3528435" timestamp2="3528435">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6039" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:28 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3528519" />
  <Command __id="6040" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:28 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3528543" />
  <DocumentChange __id="6041" _type="Delete" date="Mon Feb 01 22:00:28 EST 2021" docASTNodeCount="6055" docActiveCodeLength="34889" docExpressionCount="4064" docLength="35912" endLine="1000" length="1" offset="34821" startLine="1000" starttimestamp="1612231299681" timestamp="3528799">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="6042" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:00:28 EST 2021" starttimestamp="1612231299681" timestamp="3528802" />
  <DocumentChange __id="6043" _type="Insert" date="Mon Feb 01 22:00:28 EST 2021" docASTNodeCount="6055" docActiveCodeLength="34892" docExpressionCount="4064" docLength="35915" length="3" offset="34821" repeat="3" starttimestamp="1612231299681" timestamp="3528941" timestamp2="3529140">
    <text><![CDATA[se ]]></text>
  </DocumentChange>
  <Command __id="6044" _type="InsertStringCommand" date="Mon Feb 01 22:00:28 EST 2021" starttimestamp="1612231299681" timestamp="3528946" timestamp2="3528946">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6046" _type="InsertStringCommand" date="Mon Feb 01 22:00:28 EST 2021" starttimestamp="1612231299681" timestamp="3528999" timestamp2="3528999">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6047" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:28 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3529092" />
  <Command __id="6048" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:28 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3529126" />
  <Command __id="6050" _type="InsertStringCommand" date="Mon Feb 01 22:00:28 EST 2021" starttimestamp="1612231299681" timestamp="3529147" timestamp2="3529147">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="6051" _type="Delete" date="Mon Feb 01 22:00:30 EST 2021" docASTNodeCount="6050" docActiveCodeLength="34875" docExpressionCount="4062" docLength="35898" endLine="1001" length="17" offset="34809" startLine="1000" starttimestamp="1612231299681" timestamp="3530624">
    <text><![CDATA[				Date parse 
]]></text>
  </DocumentChange>
  <Command __id="6052" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:00:30 EST 2021" starttimestamp="1612231299681" timestamp="3530627" />
  <Command __id="6053" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:00:30 EST 2021" starttimestamp="1612231299681" timestamp="3531033" />
  <Command __id="6054" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:00:30 EST 2021" starttimestamp="1612231299681" timestamp="3531274" />
  <Command __id="6055" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:00:31 EST 2021" starttimestamp="1612231299681" timestamp="3531704" />
  <Command __id="6056" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:00:31 EST 2021" starttimestamp="1612231299681" timestamp="3531972" />
  <DocumentChange __id="6057" _type="Insert" date="Mon Feb 01 22:00:31 EST 2021" docASTNodeCount="6052" docActiveCodeLength="34884" docExpressionCount="4063" docLength="35907" length="9" offset="34715" repeat="5" starttimestamp="1612231299681" timestamp="3532138" timestamp2="3533649">
    <text><![CDATA[
			Date]]></text>
  </DocumentChange>
  <Command __id="6058" _type="InsertStringCommand" date="Mon Feb 01 22:00:31 EST 2021" starttimestamp="1612231299681" timestamp="3532149" timestamp2="3532149">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6060" _type="InsertStringCommand" date="Mon Feb 01 22:00:32 EST 2021" starttimestamp="1612231299681" timestamp="3533227" timestamp2="3533227">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="6062" _type="InsertStringCommand" date="Mon Feb 01 22:00:33 EST 2021" starttimestamp="1612231299681" timestamp="3533368" timestamp2="3533368">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6064" _type="InsertStringCommand" date="Mon Feb 01 22:00:33 EST 2021" starttimestamp="1612231299681" timestamp="3533454" timestamp2="3533454">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6065" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:33 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3533496" />
  <Command __id="6067" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:33 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3533662" />
  <DocumentChange __id="6068" _type="Replace" date="Mon Feb 01 22:00:33 EST 2021" docASTNodeCount="6052" docActiveCodeLength="34885" docExpressionCount="4063" docLength="35908" endLine="998" insertionLength="5" int_docASTNodeCount="6050" int_docActiveCodeLength="34880" int_docExpressionCount="4062" int_docLength="35903" length="4" offset="34720" startLine="998" starttimestamp="1612231299681" timestamp="3533670">
    <deletedText><![CDATA[Date]]></deletedText>
    <insertedText><![CDATA[Date ]]></insertedText>
  </DocumentChange>
  <Command __id="6069" _type="InsertStringCommand" date="Mon Feb 01 22:00:33 EST 2021" starttimestamp="1612231299681" timestamp="3533678" timestamp2="3533678">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6071" _type="InsertStringCommand" date="Mon Feb 01 22:00:33 EST 2021" starttimestamp="1612231299681" timestamp="3534235" timestamp2="3534235">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6072" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:33 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3534277" />
  <DocumentChange __id="6070" _type="Insert" date="Mon Feb 01 22:00:33 EST 2021" docASTNodeCount="6055" docActiveCodeLength="34886" docExpressionCount="4064" docLength="35909" length="1" offset="34725" starttimestamp="1612231299681" timestamp="3534230">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="6074" _type="Replace" date="Mon Feb 01 22:00:35 EST 2021" docASTNodeCount="6055" docActiveCodeLength="34889" docExpressionCount="4064" docLength="35912" endLine="998" insertionLength="4" int_docASTNodeCount="6052" int_docActiveCodeLength="34885" int_docExpressionCount="4063" int_docLength="35908" length="1" offset="34725" startLine="998" starttimestamp="1612231299681" timestamp="3535760">
    <deletedText><![CDATA[d]]></deletedText>
    <insertedText><![CDATA[date]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6076" _type="Insert" date="Mon Feb 01 22:00:35 EST 2021" docASTNodeCount="6050" docActiveCodeLength="34896" docExpressionCount="4062" docLength="35919" length="7" offset="34729" repeat="7" starttimestamp="1612231299681" timestamp="3535888" timestamp2="3537237">
    <text><![CDATA[ = new ]]></text>
  </DocumentChange>
  <Command __id="6073" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:35 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3535751" />
  <Command __id="6075" _type="InsertStringCommand" date="Mon Feb 01 22:00:35 EST 2021" starttimestamp="1612231299681" timestamp="3535768" timestamp2="3535768">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6077" _type="InsertStringCommand" date="Mon Feb 01 22:00:35 EST 2021" starttimestamp="1612231299681" timestamp="3535894" timestamp2="3535894">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6079" _type="InsertStringCommand" date="Mon Feb 01 22:00:35 EST 2021" starttimestamp="1612231299681" timestamp="3536045" timestamp2="3536045">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6081" _type="InsertStringCommand" date="Mon Feb 01 22:00:35 EST 2021" starttimestamp="1612231299681" timestamp="3536121" timestamp2="3536121">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6083" _type="InsertStringCommand" date="Mon Feb 01 22:00:36 EST 2021" starttimestamp="1612231299681" timestamp="3536990" timestamp2="3536990">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6085" _type="InsertStringCommand" date="Mon Feb 01 22:00:36 EST 2021" starttimestamp="1612231299681" timestamp="3537029" timestamp2="3537029">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6086" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:36 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3537072" />
  <Command __id="6089" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:37 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3537322" />
  <Command __id="6091" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:00:38 EST 2021" starttimestamp="1612231299681" timestamp="3539016" />
  <Command __id="6093" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:00:39 EST 2021" starttimestamp="1612231299681" timestamp="3540141" />
  <Command __id="6095" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:00:39 EST 2021" starttimestamp="1612231299681" timestamp="3540309" />
  <Command __id="6097" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:00:40 EST 2021" starttimestamp="1612231299681" timestamp="3540766" />
  <Command __id="6099" _type="UndoCommand" date="Mon Feb 01 22:00:41 EST 2021" starttimestamp="1612231299681" timestamp="3541670" />
  <Command __id="6100" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:00:41 EST 2021" starttimestamp="1612231299681" timestamp="3542252" />
  <Command __id="6102" _type="UndoCommand" date="Mon Feb 01 22:00:42 EST 2021" starttimestamp="1612231299681" timestamp="3542578" />
  <Command __id="6103" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:00:42 EST 2021" starttimestamp="1612231299681" timestamp="3543277" />
  <Command __id="6105" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:00:43 EST 2021" starttimestamp="1612231299681" timestamp="3544103" />
  <Command __id="6107" _type="InsertStringCommand" date="Mon Feb 01 22:00:44 EST 2021" starttimestamp="1612231299681" timestamp="3544430" timestamp2="3544430">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6108" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:00:44 EST 2021" starttimestamp="1612231299681" timestamp="3544859" />
  <Command __id="6109" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:00:44 EST 2021" starttimestamp="1612231299681" timestamp="3545017" />
  <Command __id="6110" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:00:44 EST 2021" starttimestamp="1612231299681" timestamp="3545106" />
  <Command __id="6111" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:00:45 EST 2021" starttimestamp="1612231299681" timestamp="3545623" />
  <Command __id="6112" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:00:45 EST 2021" starttimestamp="1612231299681" timestamp="3545849" />
  <DocumentChange __id="6090" _type="Delete" date="Mon Feb 01 22:00:38 EST 2021" docASTNodeCount="6052" docActiveCodeLength="34885" docExpressionCount="4063" docLength="35908" endLine="998" length="11" offset="34725" repeat="3" startLine="998" starttimestamp="1612231299681" timestamp="3539012" timestamp2="3540305">
    <text><![CDATA[date = new ]]></text>
  </DocumentChange>
  <DocumentChange __id="6096" _type="Delete" date="Mon Feb 01 22:00:40 EST 2021" docASTNodeCount="6050" docActiveCodeLength="34875" docExpressionCount="4062" docLength="35898" endLine="999" length="10" offset="34717" startLine="998" starttimestamp="1612231299681" timestamp="3540763">
    <text><![CDATA[			Date 
]]></text>
  </DocumentChange>
  <DocumentChange __id="6098" _type="Insert" date="Mon Feb 01 22:00:41 EST 2021" docASTNodeCount="6055" docActiveCodeLength="34890" docExpressionCount="4064" docLength="35913" length="15" offset="34717" repeat="2" starttimestamp="1612231299681" timestamp="3541662" timestamp2="3542569">
    <text><![CDATA[			Date date 
]]></text>
  </DocumentChange>
  <DocumentChange __id="6104" _type="Delete" date="Mon Feb 01 22:00:43 EST 2021" docASTNodeCount="6055" docActiveCodeLength="34889" docExpressionCount="4064" docLength="35912" endLine="998" length="1" offset="34729" startLine="998" starttimestamp="1612231299681" timestamp="3544100">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="6106" _type="Insert" date="Mon Feb 01 22:00:44 EST 2021" docASTNodeCount="6055" docActiveCodeLength="34890" docExpressionCount="4064" docLength="35913" length="1" offset="34729" starttimestamp="1612231299681" timestamp="3544424">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6113" _type="Insert" date="Mon Feb 01 22:00:45 EST 2021" docASTNodeCount="6057" docActiveCodeLength="34898" docExpressionCount="4065" docLength="35921" length="8" offset="34822" repeat="3" starttimestamp="1612231299681" timestamp="3546026" timestamp2="3546520">
    <text><![CDATA[
				da]]></text>
  </DocumentChange>
  <DocumentChange __id="6120" _type="Replace" date="Mon Feb 01 22:00:46 EST 2021" docASTNodeCount="6057" docActiveCodeLength="34900" docExpressionCount="4065" docLength="35923" endLine="1001" insertionLength="4" int_docASTNodeCount="6055" int_docActiveCodeLength="34896" int_docExpressionCount="4064" int_docLength="35919" length="2" offset="34828" startLine="1001" starttimestamp="1612231299681" timestamp="3546547">
    <deletedText><![CDATA[da]]></deletedText>
    <insertedText><![CDATA[date]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6122" _type="Insert" date="Mon Feb 01 22:00:46 EST 2021" docASTNodeCount="6059" docActiveCodeLength="34908" docExpressionCount="4067" docLength="35931" length="8" offset="34832" repeat="8" starttimestamp="1612231299681" timestamp="3547186" timestamp2="3548218">
    <text><![CDATA[ = forma]]></text>
  </DocumentChange>
  <DocumentChange __id="6136" _type="Replace" date="Mon Feb 01 22:00:48 EST 2021" docASTNodeCount="6059" docActiveCodeLength="34909" docExpressionCount="4067" docLength="35932" endLine="1001" insertionLength="6" int_docASTNodeCount="6055" int_docActiveCodeLength="34903" int_docExpressionCount="4064" int_docLength="35926" length="5" offset="34835" startLine="1001" starttimestamp="1612231299681" timestamp="3548410">
    <deletedText><![CDATA[forma]]></deletedText>
    <insertedText><![CDATA[format]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6138" _type="Insert" date="Mon Feb 01 22:00:48 EST 2021" docASTNodeCount="6055" docActiveCodeLength="34913" docExpressionCount="4064" docLength="35936" length="4" offset="34841" repeat="4" starttimestamp="1612231299681" timestamp="3548807" timestamp2="3549983">
    <text><![CDATA[.for]]></text>
  </DocumentChange>
  <Command __id="6114" _type="InsertStringCommand" date="Mon Feb 01 22:00:45 EST 2021" starttimestamp="1612231299681" timestamp="3546035" timestamp2="3546035">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6116" _type="InsertStringCommand" date="Mon Feb 01 22:00:45 EST 2021" starttimestamp="1612231299681" timestamp="3546268" timestamp2="3546268">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6117" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:45 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3546309" />
  <Command __id="6119" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3546533" />
  <Command __id="6121" _type="InsertStringCommand" date="Mon Feb 01 22:00:46 EST 2021" starttimestamp="1612231299681" timestamp="3546557" timestamp2="3546557">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6123" _type="InsertStringCommand" date="Mon Feb 01 22:00:46 EST 2021" starttimestamp="1612231299681" timestamp="3547191" timestamp2="3547191">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6125" _type="InsertStringCommand" date="Mon Feb 01 22:00:46 EST 2021" starttimestamp="1612231299681" timestamp="3547308" timestamp2="3547308">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6127" _type="InsertStringCommand" date="Mon Feb 01 22:00:47 EST 2021" starttimestamp="1612231299681" timestamp="3547416" timestamp2="3547416">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6129" _type="InsertStringCommand" date="Mon Feb 01 22:00:47 EST 2021" starttimestamp="1612231299681" timestamp="3547844" timestamp2="3547844">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="6130" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:47 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3547885" />
  <Command __id="6135" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:48 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3548402" />
  <Command __id="6137" _type="InsertStringCommand" date="Mon Feb 01 22:00:48 EST 2021" starttimestamp="1612231299681" timestamp="3548417" timestamp2="3548417">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6139" _type="InsertStringCommand" date="Mon Feb 01 22:00:48 EST 2021" starttimestamp="1612231299681" timestamp="3548812" timestamp2="3548812">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6140" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:48 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3548854" />
  <DocumentChange __id="6144" _type="Delete" date="Mon Feb 01 22:00:51 EST 2021" docASTNodeCount="6059" docActiveCodeLength="34910" docExpressionCount="4067" docLength="35933" endLine="1001" length="3" offset="34842" repeat="3" startLine="1001" starttimestamp="1612231299681" timestamp="3551427" timestamp2="3551669">
    <text><![CDATA[for]]></text>
  </DocumentChange>
  <DocumentChange __id="6147" _type="Insert" date="Mon Feb 01 22:00:51 EST 2021" docASTNodeCount="6061" docActiveCodeLength="34913" docExpressionCount="4069" docLength="35936" length="3" offset="34842" repeat="3" starttimestamp="1612231299681" timestamp="3551892" timestamp2="3552038">
    <text><![CDATA[par]]></text>
  </DocumentChange>
  <Command __id="6150" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:52 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3553181" />
  <DocumentChange __id="6151" _type="Replace" date="Mon Feb 01 22:00:52 EST 2021" docASTNodeCount="6062" docActiveCodeLength="34923" docExpressionCount="4070" docLength="35946" endLine="1001" insertionLength="13" int_docASTNodeCount="6059" int_docActiveCodeLength="34910" int_docExpressionCount="4067" int_docLength="35933" length="3" offset="34842" startLine="1001" starttimestamp="1612231299681" timestamp="3553189">
    <deletedText><![CDATA[par]]></deletedText>
    <insertedText><![CDATA[parse(source)]]></insertedText>
  </DocumentChange>
  <Command __id="6152" _type="InsertStringCommand" date="Mon Feb 01 22:00:52 EST 2021" starttimestamp="1612231299681" timestamp="3553297" timestamp2="3553297">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6153" _type="Replace" date="Mon Feb 01 22:00:54 EST 2021" docASTNodeCount="6062" docActiveCodeLength="34918" docExpressionCount="4070" docLength="35941" endLine="1001" insertionLength="1" int_docASTNodeCount="6061" int_docActiveCodeLength="34917" int_docExpressionCount="4069" int_docLength="35940" length="6" offset="34848" startLine="1001" starttimestamp="1612231299681" timestamp="3554586">
    <deletedText><![CDATA[source]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <Command __id="6154" _type="InsertStringCommand" date="Mon Feb 01 22:00:54 EST 2021" starttimestamp="1612231299681" timestamp="3554594" timestamp2="3554594">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="6155" _type="Insert" date="Mon Feb 01 22:00:54 EST 2021" docASTNodeCount="6062" docActiveCodeLength="34919" docExpressionCount="4070" docLength="35942" length="1" offset="34849" starttimestamp="1612231299681" timestamp="3554668">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6156" _type="InsertStringCommand" date="Mon Feb 01 22:00:54 EST 2021" starttimestamp="1612231299681" timestamp="3554670" timestamp2="3554670">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6157" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:00:54 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3554709" />
  <Command __id="6158" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:00:54 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3554911" />
  <Command __id="6160" _type="InsertStringCommand" date="Mon Feb 01 22:00:54 EST 2021" starttimestamp="1612231299681" timestamp="3554931" timestamp2="3554931">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6161" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:00:55 EST 2021" starttimestamp="1612231299681" timestamp="3555947" />
  <Command __id="6163" _type="InsertStringCommand" date="Mon Feb 01 22:00:56 EST 2021" starttimestamp="1612231299681" timestamp="3556614" timestamp2="3556614">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6164" _type="ShellCommand" date="Mon Feb 01 22:01:01 EST 2021" starttimestamp="1612231299681" timestamp="3562001" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6165" _type="ShellCommand" date="Mon Feb 01 22:01:01 EST 2021" starttimestamp="1612231299681" timestamp="3562052" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6178" _type="MoveCaretCommand" caretOffset="3922" date="Mon Feb 01 22:01:02 EST 2021" docOffset="34925" starttimestamp="1612231299681" timestamp="3562998" />
  <Command __id="6179" _type="MoveCaretCommand" caretOffset="3860" date="Mon Feb 01 22:01:03 EST 2021" docOffset="34863" starttimestamp="1612231299681" timestamp="3564177" />
  <Command __id="6180" _type="SelectTextCommand" caretOffset="3883" date="Mon Feb 01 22:01:05 EST 2021" end="3883" start="3871" starttimestamp="1612231299681" timestamp="3566316" />
  <Command __id="6181" _type="MoveCaretCommand" caretOffset="3878" date="Mon Feb 01 22:01:06 EST 2021" docOffset="34881" starttimestamp="1612231299681" timestamp="3566602" />
  <Command __id="6182" _type="SelectTextCommand" caretOffset="3877" date="Mon Feb 01 22:01:09 EST 2021" end="3877" start="3871" starttimestamp="1612231299681" timestamp="3569460" />
  <Command __id="6183" _type="MoveCaretCommand" caretOffset="3878" date="Mon Feb 01 22:01:09 EST 2021" docOffset="34881" starttimestamp="1612231299681" timestamp="3569768" />
  <Command __id="6184" _type="MoveCaretCommand" caretOffset="3901" date="Mon Feb 01 22:01:10 EST 2021" docOffset="34904" starttimestamp="1612231299681" timestamp="3571199" />
  <Command __id="6185" _type="SelectTextCommand" caretOffset="3852" date="Mon Feb 01 22:01:17 EST 2021" end="3852" start="3827" starttimestamp="1612231299681" timestamp="3577587" />
  <Command __id="6186" _type="CopyCommand" date="Mon Feb 01 22:01:17 EST 2021" starttimestamp="1612231299681" timestamp="3577864" />
  <Command __id="6187" _type="MoveCaretCommand" caretOffset="3896" date="Mon Feb 01 22:01:18 EST 2021" docOffset="34899" starttimestamp="1612231299681" timestamp="3578542" />
  <Command __id="6188" _type="SelectTextCommand" caretOffset="3899" date="Mon Feb 01 22:01:18 EST 2021" end="3899" start="3891" starttimestamp="1612231299681" timestamp="3578681" />
  <Command __id="6190" _type="PasteCommand" date="Mon Feb 01 22:01:18 EST 2021" starttimestamp="1612231299681" timestamp="3578861" />
  <Command __id="6191" _type="MoveCaretCommand" caretOffset="3833" date="Mon Feb 01 22:01:19 EST 2021" docOffset="34836" starttimestamp="1612231299681" timestamp="3579892" />
  <Command __id="6193" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:01:20 EST 2021" starttimestamp="1612231299681" timestamp="3580844" />
  <DocumentChange __id="6159" _type="Replace" date="Mon Feb 01 22:00:54 EST 2021" docASTNodeCount="6062" docActiveCodeLength="34925" docExpressionCount="4070" docLength="35948" endLine="1001" insertionLength="8" int_docASTNodeCount="6061" int_docActiveCodeLength="34917" int_docExpressionCount="4069" int_docLength="35940" length="2" offset="34848" startLine="1001" starttimestamp="1612231299681" timestamp="3554919">
    <deletedText><![CDATA[ne]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6162" _type="Insert" date="Mon Feb 01 22:00:56 EST 2021" docASTNodeCount="6062" docActiveCodeLength="34926" docExpressionCount="4070" docLength="35949" length="1" offset="34857" starttimestamp="1612231299681" timestamp="3556605">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6166" _type="Delete" date="Mon Feb 01 22:01:01 EST 2021" docASTNodeCount="6055" docActiveCodeLength="34896" docExpressionCount="4064" docLength="35919" endLine="1001" length="30" offset="34828" startLine="1001" starttimestamp="1612231299681" timestamp="3562074">
    <text><![CDATA[date = format.parse(nextLine);]]></text>
  </DocumentChange>
  <DocumentChange __id="6167" _type="Insert" date="Mon Feb 01 22:01:01 EST 2021" docASTNodeCount="6074" docActiveCodeLength="35013" docExpressionCount="4075" docLength="36070" length="151" offset="34828" repeat="9" starttimestamp="1612231299681" timestamp="3562086" timestamp2="3562130">
    <text><![CDATA[try {
					date = format.parse(nextLine);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}]]></text>
  </DocumentChange>
  <DocumentChange __id="6176" _type="Insert" date="Mon Feb 01 22:01:01 EST 2021" docASTNodeCount="6080" docActiveCodeLength="35047" docExpressionCount="4080" docLength="36104" length="34" offset="323" repeat="2" starttimestamp="1612231299681" timestamp="3562133" timestamp2="3562137">
    <text><![CDATA[
import java.text.ParseException;]]></text>
  </DocumentChange>
  <DocumentChange __id="6189" _type="Replace" date="Mon Feb 01 22:01:18 EST 2021" docASTNodeCount="6084" docActiveCodeLength="35064" docExpressionCount="4084" docLength="36121" endLine="1003" insertionLength="25" int_docASTNodeCount="6079" int_docActiveCodeLength="35039" int_docExpressionCount="4079" int_docLength="36096" length="8" offset="34894" startLine="1003" starttimestamp="1612231299681" timestamp="3578851">
    <deletedText><![CDATA[nextLine]]></deletedText>
    <insertedText><![CDATA[nextLine.substring(0, 21)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6192" _type="Delete" date="Mon Feb 01 22:01:20 EST 2021" docASTNodeCount="6076" docActiveCodeLength="35021" docExpressionCount="4077" docLength="36078" endLine="1002" length="43" offset="34815" startLine="1001" starttimestamp="1612231299681" timestamp="3580840">
    <text><![CDATA[				nextLine = nextLine.substring(0, 21);
]]></text>
  </DocumentChange>
  <Command __id="6194" _type="MoveCaretCommand" caretOffset="3875" date="Mon Feb 01 22:01:23 EST 2021" docOffset="34878" starttimestamp="1612231299681" timestamp="3584070" />
  <DocumentChange __id="6195" _type="Insert" date="Mon Feb 01 22:01:25 EST 2021" docASTNodeCount="6078" docActiveCodeLength="35033" docExpressionCount="4078" docLength="36090" length="12" offset="34878" repeat="6" starttimestamp="1612231299681" timestamp="3585944" timestamp2="3588403">
    <text><![CDATA[
					retva]]></text>
  </DocumentChange>
  <Command __id="6196" _type="InsertStringCommand" date="Mon Feb 01 22:01:25 EST 2021" starttimestamp="1612231299681" timestamp="3585954" timestamp2="3585954">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6198" _type="InsertStringCommand" date="Mon Feb 01 22:01:27 EST 2021" starttimestamp="1612231299681" timestamp="3587947" timestamp2="3587947">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6199" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:01:27 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3587988" />
  <Command __id="6204" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:01:28 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3588515" />
  <DocumentChange __id="6205" _type="Replace" date="Mon Feb 01 22:01:28 EST 2021" docASTNodeCount="6078" docActiveCodeLength="35034" docExpressionCount="4078" docLength="36091" endLine="1003" insertionLength="6" int_docASTNodeCount="6076" int_docActiveCodeLength="35028" int_docExpressionCount="4077" int_docLength="36085" length="5" offset="34885" startLine="1003" starttimestamp="1612231299681" timestamp="3588523">
    <deletedText><![CDATA[retva]]></deletedText>
    <insertedText><![CDATA[retVal]]></insertedText>
  </DocumentChange>
  <Command __id="6206" _type="InsertStringCommand" date="Mon Feb 01 22:01:28 EST 2021" starttimestamp="1612231299681" timestamp="3588533" timestamp2="3588533">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6207" _type="Insert" date="Mon Feb 01 22:01:28 EST 2021" docASTNodeCount="6080" docActiveCodeLength="35038" docExpressionCount="4080" docLength="36095" length="4" offset="34891" repeat="4" starttimestamp="1612231299681" timestamp="3588738" timestamp2="3589258">
    <text><![CDATA[.add]]></text>
  </DocumentChange>
  <Command __id="6208" _type="InsertStringCommand" date="Mon Feb 01 22:01:28 EST 2021" starttimestamp="1612231299681" timestamp="3588744" timestamp2="3588744">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6209" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:01:28 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3588785" />
  <Command __id="6213" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:01:29 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3589630" />
  <DocumentChange __id="6214" _type="Replace" date="Mon Feb 01 22:01:29 EST 2021" docASTNodeCount="6081" docActiveCodeLength="35041" docExpressionCount="4081" docLength="36098" endLine="1003" insertionLength="6" int_docASTNodeCount="6076" int_docActiveCodeLength="35035" int_docExpressionCount="4077" int_docLength="36092" length="3" offset="34892" startLine="1003" starttimestamp="1612231299681" timestamp="3589638">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[add(e)]]></insertedText>
  </DocumentChange>
  <Command __id="6215" _type="InsertStringCommand" date="Mon Feb 01 22:01:29 EST 2021" starttimestamp="1612231299681" timestamp="3589738" timestamp2="3589738">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6216" _type="Replace" date="Mon Feb 01 22:01:30 EST 2021" docASTNodeCount="6081" docActiveCodeLength="35041" docExpressionCount="4081" docLength="36098" endLine="1003" insertionLength="1" int_docASTNodeCount="6080" int_docActiveCodeLength="35040" int_docExpressionCount="4080" int_docLength="36097" length="1" offset="34896" startLine="1003" starttimestamp="1612231299681" timestamp="3590449">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <Command __id="6217" _type="InsertStringCommand" date="Mon Feb 01 22:01:30 EST 2021" starttimestamp="1612231299681" timestamp="3590457" timestamp2="3590457">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="6218" _type="Insert" date="Mon Feb 01 22:01:30 EST 2021" docASTNodeCount="6081" docActiveCodeLength="35051" docExpressionCount="4081" docLength="36108" length="10" offset="34897" repeat="10" starttimestamp="1612231299681" timestamp="3590549" timestamp2="3593487">
    <text><![CDATA[ew webcomm]]></text>
  </DocumentChange>
  <Command __id="6219" _type="InsertStringCommand" date="Mon Feb 01 22:01:30 EST 2021" starttimestamp="1612231299681" timestamp="3590550" timestamp2="3590550">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6221" _type="InsertStringCommand" date="Mon Feb 01 22:01:30 EST 2021" starttimestamp="1612231299681" timestamp="3590586" timestamp2="3590586">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="6222" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:01:30 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3590636" />
  <Command __id="6224" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:01:30 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3590840" />
  <Command __id="6226" _type="InsertStringCommand" date="Mon Feb 01 22:01:31 EST 2021" starttimestamp="1612231299681" timestamp="3591343" timestamp2="3591343">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="6228" _type="InsertStringCommand" date="Mon Feb 01 22:01:31 EST 2021" starttimestamp="1612231299681" timestamp="3591358" timestamp2="3591358">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6229" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:01:31 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3591399" />
  <Command __id="6235" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:01:33 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3594216" />
  <Command __id="6240" _type="InsertStringCommand" date="Mon Feb 01 22:01:34 EST 2021" starttimestamp="1612231299681" timestamp="3594381" timestamp2="3594381">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6241" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:01:36 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3597066" />
  <Command __id="6242" _type="MoveCaretCommand" caretOffset="3857" date="Mon Feb 01 22:01:36 EST 2021" docOffset="34898" starttimestamp="1612231299681" timestamp="3597175" />
  <DocumentChange __id="6236" _type="Replace" date="Mon Feb 01 22:01:33 EST 2021" docASTNodeCount="6081" docActiveCodeLength="35059" docExpressionCount="4081" docLength="36116" endLine="1003" insertionLength="10" int_docASTNodeCount="6081" int_docActiveCodeLength="35049" int_docExpressionCount="4081" int_docLength="36106" length="2" offset="34900" startLine="1003" starttimestamp="1612231299681" timestamp="3594227">
    <deletedText><![CDATA[we]]></deletedText>
    <insertedText><![CDATA[WebCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6237" _type="Insert" date="Mon Feb 01 22:01:33 EST 2021" docASTNodeCount="6087" docActiveCodeLength="35097" docExpressionCount="4086" docLength="36154" length="38" offset="1675" repeat="2" starttimestamp="1612231299681" timestamp="3594237" timestamp2="3594241">
    <text><![CDATA[
import fluorite.commands.WebCommand;]]></text>
  </DocumentChange>
  <DocumentChange __id="6239" _type="Replace" date="Mon Feb 01 22:01:33 EST 2021" docASTNodeCount="6091" docActiveCodeLength="35106" docExpressionCount="4089" docLength="36163" endLine="1004" insertionLength="14" int_docASTNodeCount="6087" int_docActiveCodeLength="35092" int_docExpressionCount="4086" int_docLength="36149" length="5" offset="34948" startLine="1004" starttimestamp="1612231299681" timestamp="3594252">
    <deletedText><![CDATA[bcomm]]></deletedText>
    <insertedText><![CDATA[(keyword, url)]]></insertedText>
  </DocumentChange>
  <Command __id="6243" _type="MoveCaretCommand" caretOffset="3761" date="Mon Feb 01 22:01:39 EST 2021" docOffset="34802" starttimestamp="1612231299681" timestamp="3599642" />
  <DocumentChange __id="6244" _type="Insert" date="Mon Feb 01 22:01:41 EST 2021" docASTNodeCount="6049" docActiveCodeLength="35117" docExpressionCount="4067" docLength="36174" length="11" offset="34802" repeat="7" starttimestamp="1612231299681" timestamp="3602048" timestamp2="3602757">
    <text><![CDATA[
			String]]></text>
  </DocumentChange>
  <Command __id="6245" _type="InsertStringCommand" date="Mon Feb 01 22:01:41 EST 2021" starttimestamp="1612231299681" timestamp="3602060" timestamp2="3602060">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6247" _type="InsertStringCommand" date="Mon Feb 01 22:01:41 EST 2021" starttimestamp="1612231299681" timestamp="3602295" timestamp2="3602295">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="6249" _type="InsertStringCommand" date="Mon Feb 01 22:01:42 EST 2021" starttimestamp="1612231299681" timestamp="3602509" timestamp2="3602509">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6250" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:01:42 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3602550" />
  <Command __id="6255" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:01:42 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3602810" />
  <DocumentChange __id="6256" _type="Replace" date="Mon Feb 01 22:01:42 EST 2021" docASTNodeCount="6049" docActiveCodeLength="35118" docExpressionCount="4067" docLength="36175" endLine="1001" insertionLength="7" int_docASTNodeCount="6091" int_docActiveCodeLength="35111" int_docExpressionCount="4089" int_docLength="36168" length="6" offset="34807" startLine="1001" starttimestamp="1612231299681" timestamp="3602821">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String ]]></insertedText>
  </DocumentChange>
  <Command __id="6257" _type="InsertStringCommand" date="Mon Feb 01 22:01:42 EST 2021" starttimestamp="1612231299681" timestamp="3602829" timestamp2="3602829">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="6258" _type="Insert" date="Mon Feb 01 22:01:44 EST 2021" docASTNodeCount="6096" docActiveCodeLength="35121" docExpressionCount="4091" docLength="36178" length="3" offset="34814" repeat="3" starttimestamp="1612231299681" timestamp="3605281" timestamp2="3605472">
    <text><![CDATA[key]]></text>
  </DocumentChange>
  <Command __id="6259" _type="InsertStringCommand" date="Mon Feb 01 22:01:44 EST 2021" starttimestamp="1612231299681" timestamp="3605286" timestamp2="3605286">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="6260" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:01:45 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3605328" />
  <Command __id="6263" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:01:45 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3606099" />
  <DocumentChange __id="6264" _type="Replace" date="Mon Feb 01 22:01:45 EST 2021" docASTNodeCount="6096" docActiveCodeLength="35125" docExpressionCount="4091" docLength="36182" endLine="1001" insertionLength="7" int_docASTNodeCount="6049" int_docActiveCodeLength="35118" int_docExpressionCount="4067" int_docLength="36175" length="3" offset="34814" startLine="1001" starttimestamp="1612231299681" timestamp="3606106">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[keyword]]></insertedText>
  </DocumentChange>
  <Command __id="6265" _type="InsertStringCommand" date="Mon Feb 01 22:01:45 EST 2021" starttimestamp="1612231299681" timestamp="3606115" timestamp2="3606115">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6266" _type="Insert" date="Mon Feb 01 22:01:47 EST 2021" docASTNodeCount="6054" docActiveCodeLength="35137" docExpressionCount="4069" docLength="36194" length="12" offset="34821" repeat="8" starttimestamp="1612231299681" timestamp="3607403" timestamp2="3608687">
    <text><![CDATA[;
			String]]></text>
  </DocumentChange>
  <Command __id="6267" _type="InsertStringCommand" date="Mon Feb 01 22:01:47 EST 2021" starttimestamp="1612231299681" timestamp="3607408" timestamp2="3607408">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6269" _type="InsertStringCommand" date="Mon Feb 01 22:01:47 EST 2021" starttimestamp="1612231299681" timestamp="3607512" timestamp2="3607512">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6271" _type="InsertStringCommand" date="Mon Feb 01 22:01:47 EST 2021" starttimestamp="1612231299681" timestamp="3608175" timestamp2="3608175">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="6273" _type="InsertStringCommand" date="Mon Feb 01 22:01:48 EST 2021" starttimestamp="1612231299681" timestamp="3608400" timestamp2="3608400">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6274" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:01:48 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3608440" />
  <Command __id="6279" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:01:48 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3608699" />
  <DocumentChange __id="6280" _type="Replace" date="Mon Feb 01 22:01:48 EST 2021" docASTNodeCount="6054" docActiveCodeLength="35138" docExpressionCount="4069" docLength="36195" endLine="1002" insertionLength="7" int_docASTNodeCount="6096" int_docActiveCodeLength="35131" int_docExpressionCount="4091" int_docLength="36188" length="6" offset="34827" startLine="1002" starttimestamp="1612231299681" timestamp="3608707">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String ]]></insertedText>
  </DocumentChange>
  <Command __id="6281" _type="InsertStringCommand" date="Mon Feb 01 22:01:48 EST 2021" starttimestamp="1612231299681" timestamp="3608717" timestamp2="3608717">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6283" _type="InsertStringCommand" date="Mon Feb 01 22:01:48 EST 2021" starttimestamp="1612231299681" timestamp="3608993" timestamp2="3608993">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="6284" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:01:48 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3609028" />
  <Command __id="6287" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:01:49 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3609840" />
  <Command __id="6288" _type="InsertStringCommand" date="Mon Feb 01 22:01:49 EST 2021" starttimestamp="1612231299681" timestamp="3609843" timestamp2="3609843">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6290" _type="InsertStringCommand" date="Mon Feb 01 22:01:49 EST 2021" starttimestamp="1612231299681" timestamp="3610096" timestamp2="3610096">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="6282" _type="Insert" date="Mon Feb 01 22:01:48 EST 2021" docASTNodeCount="6101" docActiveCodeLength="35142" docExpressionCount="4093" docLength="36199" length="4" offset="34834" repeat="4" starttimestamp="1612231299681" timestamp="3608987" timestamp2="3610091">
    <text><![CDATA[url;]]></text>
  </DocumentChange>
  <Command __id="6291" _type="MoveCaretCommand" caretOffset="3958" date="Mon Feb 01 22:01:52 EST 2021" docOffset="34999" starttimestamp="1612231299681" timestamp="3612452" />
  <Command __id="6293" _type="InsertStringCommand" date="Mon Feb 01 22:01:53 EST 2021" starttimestamp="1612231299681" timestamp="3613861" timestamp2="3613861">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="6292" _type="Insert" date="Mon Feb 01 22:01:53 EST 2021" docASTNodeCount="6101" docActiveCodeLength="35143" docExpressionCount="4093" docLength="36200" length="1" offset="34999" starttimestamp="1612231299681" timestamp="3613839">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="6294" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:01:55 EST 2021" starttimestamp="1612231299681" timestamp="3615387" />
  <Command __id="6295" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:01:55 EST 2021" starttimestamp="1612231299681" timestamp="3615568" />
  <Command __id="6296" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:01:55 EST 2021" starttimestamp="1612231299681" timestamp="3615714" />
  <Command __id="6297" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:01:55 EST 2021" starttimestamp="1612231299681" timestamp="3615841" />
  <DocumentChange __id="6298" _type="Insert" date="Mon Feb 01 22:01:58 EST 2021" docASTNodeCount="6101" docActiveCodeLength="35148" docExpressionCount="4093" docLength="36205" length="5" offset="34838" starttimestamp="1612231299681" timestamp="3618529">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="6299" _type="InsertStringCommand" date="Mon Feb 01 22:01:58 EST 2021" starttimestamp="1612231299681" timestamp="3618539" timestamp2="3618539">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6300" _type="Insert" date="Mon Feb 01 22:02:00 EST 2021" docASTNodeCount="6103" docActiveCodeLength="35154" docExpressionCount="4094" docLength="36211" length="6" offset="34843" repeat="6" starttimestamp="1612231299681" timestamp="3620641" timestamp2="3621445">
    <text><![CDATA[webcom]]></text>
  </DocumentChange>
  <Command __id="6301" _type="InsertStringCommand" date="Mon Feb 01 22:02:00 EST 2021" starttimestamp="1612231299681" timestamp="3620646" timestamp2="3620646">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="6303" _type="InsertStringCommand" date="Mon Feb 01 22:02:00 EST 2021" starttimestamp="1612231299681" timestamp="3620697" timestamp2="3620697">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6304" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:02:00 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3620698" />
  <Command __id="6309" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:02:01 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3621674" />
  <DocumentChange __id="6310" _type="Replace" date="Mon Feb 01 22:02:01 EST 2021" docASTNodeCount="6103" docActiveCodeLength="35158" docExpressionCount="4094" docLength="36215" endLine="1003" insertionLength="10" int_docASTNodeCount="6101" int_docActiveCodeLength="35148" int_docExpressionCount="4093" int_docLength="36205" length="6" offset="34843" startLine="1003" starttimestamp="1612231299681" timestamp="3621682">
    <deletedText><![CDATA[webcom]]></deletedText>
    <insertedText><![CDATA[WebCommand]]></insertedText>
  </DocumentChange>
  <Command __id="6311" _type="InsertStringCommand" date="Mon Feb 01 22:02:01 EST 2021" starttimestamp="1612231299681" timestamp="3621690" timestamp2="3621690">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6312" _type="Insert" date="Mon Feb 01 22:02:01 EST 2021" docASTNodeCount="6103" docActiveCodeLength="35160" docExpressionCount="4094" docLength="36217" length="2" offset="34853" repeat="2" starttimestamp="1612231299681" timestamp="3622117" timestamp2="3622412">
    <text><![CDATA[ =]]></text>
  </DocumentChange>
  <Command __id="6313" _type="InsertStringCommand" date="Mon Feb 01 22:02:01 EST 2021" starttimestamp="1612231299681" timestamp="3622122" timestamp2="3622122">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6315" _type="InsertStringCommand" date="Mon Feb 01 22:02:02 EST 2021" starttimestamp="1612231299681" timestamp="3622417" timestamp2="3622417">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="6316" _type="Delete" date="Mon Feb 01 22:02:02 EST 2021" docASTNodeCount="6103" docActiveCodeLength="35159" docExpressionCount="4094" docLength="36216" endLine="1003" length="1" offset="34854" startLine="1003" starttimestamp="1612231299681" timestamp="3622861">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="6317" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:02:02 EST 2021" starttimestamp="1612231299681" timestamp="3622864" />
  <DocumentChange __id="6318" _type="Insert" date="Mon Feb 01 22:02:03 EST 2021" docASTNodeCount="6106" docActiveCodeLength="35162" docExpressionCount="4095" docLength="36219" length="3" offset="34854" repeat="3" starttimestamp="1612231299681" timestamp="3623483" timestamp2="3623922">
    <text><![CDATA[web]]></text>
  </DocumentChange>
  <Command __id="6319" _type="InsertStringCommand" date="Mon Feb 01 22:02:03 EST 2021" starttimestamp="1612231299681" timestamp="3623487" timestamp2="3623487">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="6321" _type="InsertStringCommand" date="Mon Feb 01 22:02:03 EST 2021" starttimestamp="1612231299681" timestamp="3623573" timestamp2="3623573">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6322" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:02:03 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3623618" />
  <Command __id="6324" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:02:04 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3624321" />
  <DocumentChange __id="6325" _type="Replace" date="Mon Feb 01 22:02:04 EST 2021" docASTNodeCount="6106" docActiveCodeLength="35169" docExpressionCount="4095" docLength="36226" endLine="1003" insertionLength="10" int_docASTNodeCount="6103" int_docActiveCodeLength="35159" int_docExpressionCount="4094" int_docLength="36216" length="3" offset="34854" startLine="1003" starttimestamp="1612231299681" timestamp="3624329">
    <deletedText><![CDATA[web]]></deletedText>
    <insertedText><![CDATA[webCommand]]></insertedText>
  </DocumentChange>
  <Command __id="6326" _type="InsertStringCommand" date="Mon Feb 01 22:02:04 EST 2021" starttimestamp="1612231299681" timestamp="3624339" timestamp2="3624339">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6328" _type="InsertStringCommand" date="Mon Feb 01 22:02:04 EST 2021" starttimestamp="1612231299681" timestamp="3624558" timestamp2="3624558">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6329" _type="SelectTextCommand" caretOffset="3984" date="Mon Feb 01 22:02:07 EST 2021" end="3984" start="3956" starttimestamp="1612231299681" timestamp="3628098" />
  <Command __id="6331" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:02:08 EST 2021" starttimestamp="1612231299681" timestamp="3628601" />
  <Command __id="6332" _type="ShellCommand" date="Mon Feb 01 22:02:09 EST 2021" starttimestamp="1612231299681" timestamp="3629821" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="6327" _type="Insert" date="Mon Feb 01 22:02:04 EST 2021" docASTNodeCount="6106" docActiveCodeLength="35170" docExpressionCount="4095" docLength="36227" length="1" offset="34864" starttimestamp="1612231299681" timestamp="3624552">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="6330" _type="Delete" date="Mon Feb 01 22:02:08 EST 2021" docASTNodeCount="6101" docActiveCodeLength="35142" docExpressionCount="4091" docLength="36199" endLine="1007" length="28" offset="34997" startLine="1007" starttimestamp="1612231299681" timestamp="3628594">
    <text><![CDATA[new WebCommand(keyword, url)]]></text>
  </DocumentChange>
  <DocumentChange __id="6335" _type="Delete" date="Mon Feb 01 22:02:19 EST 2021" docASTNodeCount="6097" docActiveCodeLength="35122" docExpressionCount="4088" docLength="36179" endLine="1008" length="20" offset="34981" startLine="1007" starttimestamp="1612231299681" timestamp="3639766">
    <text><![CDATA[					retVal.add();
]]></text>
  </DocumentChange>
  <DocumentChange __id="6339" _type="Insert" date="Mon Feb 01 22:02:24 EST 2021" docASTNodeCount="6097" docActiveCodeLength="35129" docExpressionCount="4088" docLength="36186" length="7" offset="34979" starttimestamp="1612231299681" timestamp="3644888">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="6341" _type="Insert" date="Mon Feb 01 22:02:34 EST 2021" docASTNodeCount="6099" docActiveCodeLength="35131" docExpressionCount="4089" docLength="36188" length="2" offset="34986" repeat="2" starttimestamp="1612231299681" timestamp="3655190" timestamp2="3655407">
    <text><![CDATA[pm]]></text>
  </DocumentChange>
  <DocumentChange __id="6345" _type="Delete" date="Mon Feb 01 22:02:36 EST 2021" docASTNodeCount="6097" docActiveCodeLength="35129" docExpressionCount="4088" docLength="36186" endLine="1007" length="2" offset="34986" repeat="2" startLine="1007" starttimestamp="1612231299681" timestamp="3656364" timestamp2="3656486">
    <text><![CDATA[pm]]></text>
  </DocumentChange>
  <Command __id="6333" _type="ShellCommand" date="Mon Feb 01 22:02:18 EST 2021" starttimestamp="1612231299681" timestamp="3639145" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6334" _type="MoveCaretCommand" caretOffset="3958" date="Mon Feb 01 22:02:18 EST 2021" docOffset="34999" starttimestamp="1612231299681" timestamp="3639239" />
  <Command __id="6336" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:02:19 EST 2021" starttimestamp="1612231299681" timestamp="3639770" />
  <Command __id="6337" _type="MoveCaretCommand" caretOffset="3884" date="Mon Feb 01 22:02:19 EST 2021" docOffset="34925" starttimestamp="1612231299681" timestamp="3640309" />
  <Command __id="6338" _type="MoveCaretCommand" caretOffset="3938" date="Mon Feb 01 22:02:20 EST 2021" docOffset="34979" starttimestamp="1612231299681" timestamp="3640720" />
  <Command __id="6340" _type="InsertStringCommand" date="Mon Feb 01 22:02:24 EST 2021" starttimestamp="1612231299681" timestamp="3644898" timestamp2="3644898">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6342" _type="InsertStringCommand" date="Mon Feb 01 22:02:34 EST 2021" starttimestamp="1612231299681" timestamp="3655198" timestamp2="3655198">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6343" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:02:34 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3655237" />
  <Command __id="6350" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:02:38 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3658873" />
  <Command __id="6352" _type="InsertStringCommand" date="Mon Feb 01 22:02:38 EST 2021" starttimestamp="1612231299681" timestamp="3658890" timestamp2="3658890">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6354" _type="InsertStringCommand" date="Mon Feb 01 22:02:38 EST 2021" starttimestamp="1612231299681" timestamp="3659076" timestamp2="3659076">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6356" _type="InsertStringCommand" date="Mon Feb 01 22:02:38 EST 2021" starttimestamp="1612231299681" timestamp="3659143" timestamp2="3659143">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6358" _type="InsertStringCommand" date="Mon Feb 01 22:02:38 EST 2021" starttimestamp="1612231299681" timestamp="3659260" timestamp2="3659260">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6360" _type="InsertStringCommand" date="Mon Feb 01 22:02:39 EST 2021" starttimestamp="1612231299681" timestamp="3659667" timestamp2="3659667">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="6361" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:02:39 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3659707" />
  <Command __id="6369" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:02:41 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3661815" />
  <Command __id="6371" _type="InsertStringCommand" date="Mon Feb 01 22:02:41 EST 2021" starttimestamp="1612231299681" timestamp="3661831" timestamp2="3661831">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6373" _type="InsertStringCommand" date="Mon Feb 01 22:02:41 EST 2021" starttimestamp="1612231299681" timestamp="3662167" timestamp2="3662167">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6374" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:02:41 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3662207" />
  <Command __id="6378" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:02:42 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3662734" />
  <Command __id="6380" _type="InsertStringCommand" date="Mon Feb 01 22:02:42 EST 2021" starttimestamp="1612231299681" timestamp="3662861" timestamp2="3662861">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6381" _type="ShellCommand" date="Mon Feb 01 22:02:45 EST 2021" starttimestamp="1612231299681" timestamp="3666095" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6382" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:02:45 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3666148" />
  <DocumentChange __id="6347" _type="Insert" date="Mon Feb 01 22:02:38 EST 2021" docASTNodeCount="6099" docActiveCodeLength="35132" docExpressionCount="4089" docLength="36189" length="3" offset="34986" repeat="3" starttimestamp="1612231299681" timestamp="3658417" timestamp2="3658614">
    <text><![CDATA[key]]></text>
  </DocumentChange>
  <DocumentChange __id="6351" _type="Replace" date="Mon Feb 01 22:02:38 EST 2021" docASTNodeCount="6099" docActiveCodeLength="35136" docExpressionCount="4089" docLength="36193" endLine="1007" insertionLength="7" int_docASTNodeCount="6097" int_docActiveCodeLength="35129" int_docExpressionCount="4088" int_docLength="36186" length="3" offset="34986" startLine="1007" starttimestamp="1612231299681" timestamp="3658881">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[keyword]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6353" _type="Insert" date="Mon Feb 01 22:02:38 EST 2021" docASTNodeCount="6101" docActiveCodeLength="35141" docExpressionCount="4091" docLength="36198" length="5" offset="34993" repeat="5" starttimestamp="1612231299681" timestamp="3659071" timestamp2="3659875">
    <text><![CDATA[ = fo]]></text>
  </DocumentChange>
  <DocumentChange __id="6363" _type="Delete" date="Mon Feb 01 22:02:39 EST 2021" docASTNodeCount="6097" docActiveCodeLength="35139" docExpressionCount="4088" docLength="36196" endLine="1007" length="2" offset="34996" repeat="2" startLine="1007" starttimestamp="1612231299681" timestamp="3660154" timestamp2="3660283">
    <text><![CDATA[fo]]></text>
  </DocumentChange>
  <DocumentChange __id="6365" _type="Insert" date="Mon Feb 01 22:02:40 EST 2021" docASTNodeCount="6101" docActiveCodeLength="35143" docExpressionCount="4091" docLength="36200" length="4" offset="34996" repeat="4" starttimestamp="1612231299681" timestamp="3660927" timestamp2="3661207">
    <text><![CDATA[nexl]]></text>
  </DocumentChange>
  <DocumentChange __id="6370" _type="Replace" date="Mon Feb 01 22:02:41 EST 2021" docASTNodeCount="6101" docActiveCodeLength="35147" docExpressionCount="4091" docLength="36204" endLine="1007" insertionLength="8" int_docASTNodeCount="6097" int_docActiveCodeLength="35139" int_docExpressionCount="4088" int_docLength="36196" length="4" offset="34996" startLine="1007" starttimestamp="1612231299681" timestamp="3661823">
    <deletedText><![CDATA[nexl]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6372" _type="Insert" date="Mon Feb 01 22:02:41 EST 2021" docASTNodeCount="6103" docActiveCodeLength="35151" docExpressionCount="4093" docLength="36208" length="4" offset="35004" repeat="4" starttimestamp="1612231299681" timestamp="3662161" timestamp2="3662642">
    <text><![CDATA[.sub]]></text>
  </DocumentChange>
  <DocumentChange __id="6379" _type="Replace" date="Mon Feb 01 22:02:42 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35169" docExpressionCount="4094" docLength="36226" endLine="1007" insertionLength="21" int_docASTNodeCount="6101" int_docActiveCodeLength="35148" int_docExpressionCount="4091" int_docLength="36205" length="3" offset="35005" startLine="1007" starttimestamp="1612231299681" timestamp="3662742">
    <deletedText><![CDATA[sub]]></deletedText>
    <insertedText><![CDATA[substring(beginIndex)]]></insertedText>
  </DocumentChange>
  <Command __id="6383" _type="ShellCommand" date="Mon Feb 01 22:02:52 EST 2021" starttimestamp="1612231299681" timestamp="3672338" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6384" _type="MoveCaretCommand" caretOffset="3980" date="Mon Feb 01 22:02:52 EST 2021" docOffset="35021" starttimestamp="1612231299681" timestamp="3672396" />
  <Command __id="6385" _type="SelectTextCommand" caretOffset="3984" date="Mon Feb 01 22:02:52 EST 2021" end="3984" start="3974" starttimestamp="1612231299681" timestamp="3672557" />
  <DocumentChange __id="6386" _type="Replace" date="Mon Feb 01 22:02:53 EST 2021" docASTNodeCount="5976" docActiveCodeLength="35160" docExpressionCount="4023" docLength="36217" endLine="1007" insertionLength="1" int_docASTNodeCount="6103" int_docActiveCodeLength="35159" int_docExpressionCount="4093" int_docLength="36216" length="10" offset="35015" startLine="1007" starttimestamp="1612231299681" timestamp="3673965">
    <deletedText><![CDATA[beginIndex]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <Command __id="6387" _type="InsertStringCommand" date="Mon Feb 01 22:02:53 EST 2021" starttimestamp="1612231299681" timestamp="3673975" timestamp2="3673975">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="6388" _type="Delete" date="Mon Feb 01 22:02:54 EST 2021" docASTNodeCount="6103" docActiveCodeLength="35159" docExpressionCount="4093" docLength="36216" endLine="1007" length="1" offset="35015" startLine="1007" starttimestamp="1612231299681" timestamp="3675248">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <Command __id="6389" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:02:54 EST 2021" starttimestamp="1612231299681" timestamp="3675254" />
  <DocumentChange __id="6390" _type="Insert" date="Mon Feb 01 22:02:55 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35161" docExpressionCount="4094" docLength="36218" length="2" offset="35015" repeat="2" starttimestamp="1612231299681" timestamp="3675512" timestamp2="3675656">
    <text><![CDATA[22]]></text>
  </DocumentChange>
  <Command __id="6391" _type="InsertStringCommand" date="Mon Feb 01 22:02:55 EST 2021" starttimestamp="1612231299681" timestamp="3675520" timestamp2="3675520">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="6393" _type="InsertStringCommand" date="Mon Feb 01 22:02:55 EST 2021" starttimestamp="1612231299681" timestamp="3675665" timestamp2="3675665">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="6394" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:02:55 EST 2021" starttimestamp="1612231299681" timestamp="3675853" />
  <Command __id="6396" _type="InsertStringCommand" date="Mon Feb 01 22:02:56 EST 2021" starttimestamp="1612231299681" timestamp="3676600" timestamp2="3676600">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6397" _type="ShellCommand" date="Mon Feb 01 22:03:10 EST 2021" starttimestamp="1612231299681" timestamp="3691186" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="6395" _type="Insert" date="Mon Feb 01 22:02:56 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35162" docExpressionCount="4094" docLength="36219" length="1" offset="35018" starttimestamp="1612231299681" timestamp="3676591">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="6398" _type="ShellCommand" date="Mon Feb 01 22:03:21 EST 2021" starttimestamp="1612231299681" timestamp="3701445" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6399" _type="MoveCaretCommand" caretOffset="3976" date="Mon Feb 01 22:03:21 EST 2021" docOffset="35017" starttimestamp="1612231299681" timestamp="3701548" />
  <DocumentChange __id="6400" _type="Delete" date="Mon Feb 01 22:03:25 EST 2021" docASTNodeCount="6103" docActiveCodeLength="35160" docExpressionCount="4093" docLength="36217" endLine="1007" length="2" offset="35015" repeat="2" startLine="1007" starttimestamp="1612231299681" timestamp="3705624" timestamp2="3705763">
    <text><![CDATA[22]]></text>
  </DocumentChange>
  <Command __id="6401" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:03:25 EST 2021" starttimestamp="1612231299681" timestamp="3705627" />
  <Command __id="6403" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:03:25 EST 2021" starttimestamp="1612231299681" timestamp="3705769" />
  <DocumentChange __id="6404" _type="Insert" date="Mon Feb 01 22:03:26 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35162" docExpressionCount="4094" docLength="36219" length="2" offset="35015" starttimestamp="1612231299681" timestamp="3706775">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="6405" _type="InsertStringCommand" date="Mon Feb 01 22:03:26 EST 2021" starttimestamp="1612231299681" timestamp="3706782" timestamp2="3706782">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="6406" _type="Delete" date="Mon Feb 01 22:03:27 EST 2021" docASTNodeCount="6103" docActiveCodeLength="35160" docExpressionCount="4093" docLength="36217" endLine="1007" length="2" offset="35015" repeat="2" startLine="1007" starttimestamp="1612231299681" timestamp="3707342" timestamp2="3707349">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <Command __id="6408" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:03:27 EST 2021" starttimestamp="1612231299681" timestamp="3707355" />
  <DocumentChange __id="6409" _type="Insert" date="Mon Feb 01 22:03:27 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35163" docExpressionCount="4094" docLength="36220" length="3" offset="35015" repeat="3" starttimestamp="1612231299681" timestamp="3707612" timestamp2="3707910">
    <text><![CDATA[nex]]></text>
  </DocumentChange>
  <Command __id="6410" _type="InsertStringCommand" date="Mon Feb 01 22:03:27 EST 2021" starttimestamp="1612231299681" timestamp="3707622" timestamp2="3707622">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6411" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:03:27 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3707659" />
  <Command __id="6414" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:03:27 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3708137" />
  <DocumentChange __id="6415" _type="Replace" date="Mon Feb 01 22:03:27 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35168" docExpressionCount="4094" docLength="36225" endLine="1007" insertionLength="8" int_docASTNodeCount="6103" int_docActiveCodeLength="35160" int_docExpressionCount="4093" int_docLength="36217" length="3" offset="35015" startLine="1007" starttimestamp="1612231299681" timestamp="3708145">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <Command __id="6416" _type="InsertStringCommand" date="Mon Feb 01 22:03:27 EST 2021" starttimestamp="1612231299681" timestamp="3708155" timestamp2="3708155">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6417" _type="Insert" date="Mon Feb 01 22:03:29 EST 2021" docASTNodeCount="6106" docActiveCodeLength="35169" docExpressionCount="4095" docLength="36226" length="1" offset="35023" starttimestamp="1612231299681" timestamp="3710169">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="6418" _type="InsertStringCommand" date="Mon Feb 01 22:03:29 EST 2021" starttimestamp="1612231299681" timestamp="3710175" timestamp2="3710175">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6419" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:03:29 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3710215" />
  <DocumentChange __id="6420" _type="Delete" date="Mon Feb 01 22:03:31 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35168" docExpressionCount="4094" docLength="36225" endLine="1007" length="1" offset="35023" startLine="1007" starttimestamp="1612231299681" timestamp="3711575">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="6421" _type="UndoCommand" date="Mon Feb 01 22:03:31 EST 2021" starttimestamp="1612231299681" timestamp="3711582" />
  <Command __id="6423" _type="UndoCommand" date="Mon Feb 01 22:03:31 EST 2021" starttimestamp="1612231299681" timestamp="3711834" />
  <Command __id="6424" _type="ShellCommand" date="Mon Feb 01 22:03:34 EST 2021" starttimestamp="1612231299681" timestamp="3714496" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6425" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:03:34 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3714565" />
  <DocumentChange __id="6422" _type="Replace" date="Mon Feb 01 22:03:31 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35163" docExpressionCount="4094" docLength="36220" endLine="1007" insertionLength="3" int_docASTNodeCount="6103" int_docActiveCodeLength="35160" int_docExpressionCount="4093" int_docLength="36217" length="8" offset="35015" startLine="1007" starttimestamp="1612231299681" timestamp="3711797">
    <deletedText><![CDATA[nextLine]]></deletedText>
    <insertedText><![CDATA[nex]]></insertedText>
  </DocumentChange>
  <Command __id="6426" _type="ShellCommand" date="Mon Feb 01 22:03:38 EST 2021" starttimestamp="1612231299681" timestamp="3718934" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6427" _type="MoveCaretCommand" caretOffset="3975" date="Mon Feb 01 22:03:38 EST 2021" docOffset="35016" starttimestamp="1612231299681" timestamp="3719021" />
  <Command __id="6428" _type="MoveCaretCommand" caretOffset="3975" date="Mon Feb 01 22:03:39 EST 2021" docOffset="35016" starttimestamp="1612231299681" timestamp="3719774" />
  <Command __id="6429" _type="SelectTextCommand" caretOffset="3977" date="Mon Feb 01 22:03:39 EST 2021" end="3977" start="3974" starttimestamp="1612231299681" timestamp="3719804" />
  <DocumentChange __id="6430" _type="Replace" date="Mon Feb 01 22:03:44 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35161" docExpressionCount="4094" docLength="36218" endLine="1007" insertionLength="1" int_docASTNodeCount="6103" int_docActiveCodeLength="35160" int_docExpressionCount="4093" int_docLength="36217" length="3" offset="35015" startLine="1007" starttimestamp="1612231299681" timestamp="3724368">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <Command __id="6431" _type="InsertStringCommand" date="Mon Feb 01 22:03:44 EST 2021" starttimestamp="1612231299681" timestamp="3724377" timestamp2="3724377">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6432" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:03:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3724406" />
  <DocumentChange __id="6433" _type="Insert" date="Mon Feb 01 22:03:44 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35163" docExpressionCount="4094" docLength="36220" length="2" offset="35016" repeat="2" starttimestamp="1612231299681" timestamp="3724566" timestamp2="3724685">
    <text><![CDATA[ex]]></text>
  </DocumentChange>
  <DocumentChange __id="6435" _type="Delete" date="Mon Feb 01 22:03:45 EST 2021" docASTNodeCount="6103" docActiveCodeLength="35160" docExpressionCount="4093" docLength="36217" endLine="1007" length="3" offset="35015" startLine="1007" starttimestamp="1612231299681" timestamp="3725452">
    <text><![CDATA[nex]]></text>
  </DocumentChange>
  <Command __id="6436" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:03:45 EST 2021" starttimestamp="1612231299681" timestamp="3725457" />
  <DocumentChange __id="6437" _type="Insert" date="Mon Feb 01 22:03:46 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35163" docExpressionCount="4094" docLength="36220" length="3" offset="35015" repeat="3" starttimestamp="1612231299681" timestamp="3726344" timestamp2="3726664">
    <text><![CDATA[nex]]></text>
  </DocumentChange>
  <Command __id="6440" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:03:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3726695" />
  <DocumentChange __id="6441" _type="Delete" date="Mon Feb 01 22:03:47 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35162" docExpressionCount="4094" docLength="36219" endLine="1007" length="1" offset="35017" startLine="1007" starttimestamp="1612231299681" timestamp="3727327">
    <text><![CDATA[x]]></text>
  </DocumentChange>
  <Command __id="6442" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:03:47 EST 2021" starttimestamp="1612231299681" timestamp="3727330" />
  <DocumentChange __id="6443" _type="Insert" date="Mon Feb 01 22:03:47 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35163" docExpressionCount="4094" docLength="36220" length="1" offset="35017" starttimestamp="1612231299681" timestamp="3727678">
    <text><![CDATA[x]]></text>
  </DocumentChange>
  <Command __id="6444" _type="InsertStringCommand" date="Mon Feb 01 22:03:47 EST 2021" starttimestamp="1612231299681" timestamp="3727685" timestamp2="3727685">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="6445" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:03:47 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3727725" />
  <Command __id="6446" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:03:47 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3727858" />
  <DocumentChange __id="6447" _type="Replace" date="Mon Feb 01 22:03:47 EST 2021" docASTNodeCount="6104" docActiveCodeLength="35168" docExpressionCount="4094" docLength="36225" endLine="1007" insertionLength="8" int_docASTNodeCount="6103" int_docActiveCodeLength="35160" int_docExpressionCount="4093" int_docLength="36217" length="3" offset="35015" startLine="1007" starttimestamp="1612231299681" timestamp="3727873">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <Command __id="6448" _type="InsertStringCommand" date="Mon Feb 01 22:03:47 EST 2021" starttimestamp="1612231299681" timestamp="3727885" timestamp2="3727885">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6449" _type="Insert" date="Mon Feb 01 22:03:47 EST 2021" docASTNodeCount="6106" docActiveCodeLength="35170" docExpressionCount="4096" docLength="36227" length="2" offset="35023" repeat="2" starttimestamp="1612231299681" timestamp="3728231" timestamp2="3728507">
    <text><![CDATA[.g]]></text>
  </DocumentChange>
  <DocumentChange __id="6453" _type="Delete" date="Mon Feb 01 22:03:48 EST 2021" docASTNodeCount="6106" docActiveCodeLength="35169" docExpressionCount="4095" docLength="36226" endLine="1007" length="1" offset="35024" startLine="1007" starttimestamp="1612231299681" timestamp="3729187">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="6450" _type="InsertStringCommand" date="Mon Feb 01 22:03:47 EST 2021" starttimestamp="1612231299681" timestamp="3728238" timestamp2="3728238">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6451" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:03:47 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3728278" />
  <Command __id="6458" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:03:51 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3731962" />
  <Command __id="6460" _type="InsertStringCommand" date="Mon Feb 01 22:03:51 EST 2021" starttimestamp="1612231299681" timestamp="3732080" timestamp2="3732080">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6462" _type="InsertStringCommand" date="Mon Feb 01 22:03:52 EST 2021" starttimestamp="1612231299681" timestamp="3732726" timestamp2="3732726">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6464" _type="InsertStringCommand" date="Mon Feb 01 22:03:52 EST 2021" starttimestamp="1612231299681" timestamp="3733071" timestamp2="3733071">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="6466" _type="InsertStringCommand" date="Mon Feb 01 22:03:53 EST 2021" starttimestamp="1612231299681" timestamp="3733327" timestamp2="3733327">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6468" _type="InsertStringCommand" date="Mon Feb 01 22:03:53 EST 2021" starttimestamp="1612231299681" timestamp="3733738" timestamp2="3733738">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="6454" _type="Insert" date="Mon Feb 01 22:03:50 EST 2021" docASTNodeCount="6106" docActiveCodeLength="35173" docExpressionCount="4096" docLength="36230" length="4" offset="35024" repeat="4" starttimestamp="1612231299681" timestamp="3731247" timestamp2="3731527">
    <text><![CDATA[inde]]></text>
  </DocumentChange>
  <DocumentChange __id="6459" _type="Replace" date="Mon Feb 01 22:03:51 EST 2021" docASTNodeCount="6107" docActiveCodeLength="35180" docExpressionCount="4097" docLength="36237" endLine="1007" insertionLength="11" int_docASTNodeCount="6106" int_docActiveCodeLength="35169" int_docExpressionCount="4095" int_docLength="36226" length="4" offset="35024" startLine="1007" starttimestamp="1612231299681" timestamp="3731970">
    <deletedText><![CDATA[inde]]></deletedText>
    <insertedText><![CDATA[indexOf(ch)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6461" _type="Replace" date="Mon Feb 01 22:03:52 EST 2021" docASTNodeCount="5976" docActiveCodeLength="35179" docExpressionCount="4023" docLength="36236" endLine="1007" insertionLength="1" int_docASTNodeCount="6106" int_docActiveCodeLength="35178" int_docExpressionCount="4096" int_docLength="36235" length="2" offset="35032" startLine="1007" starttimestamp="1612231299681" timestamp="3732717">
    <deletedText><![CDATA[ch]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6463" _type="Insert" date="Mon Feb 01 22:03:52 EST 2021" docASTNodeCount="6107" docActiveCodeLength="35182" docExpressionCount="4097" docLength="36239" length="3" offset="35033" repeat="3" starttimestamp="1612231299681" timestamp="3733068" timestamp2="3733733">
    <text><![CDATA[\t"]]></text>
  </DocumentChange>
  <DocumentChange __id="6470" _type="Insert" date="Mon Feb 01 22:03:55 EST 2021" docASTNodeCount="6107" docActiveCodeLength="35189" docExpressionCount="4097" docLength="36246" length="7" offset="35039" starttimestamp="1612231299681" timestamp="3735968">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="6476" _type="Insert" date="Mon Feb 01 22:03:58 EST 2021" docASTNodeCount="6110" docActiveCodeLength="35196" docExpressionCount="4100" docLength="36253" length="7" offset="35037" repeat="7" starttimestamp="1612231299681" timestamp="3738958" timestamp2="3740520">
    <text><![CDATA[+1, nex]]></text>
  </DocumentChange>
  <DocumentChange __id="6490" _type="Replace" date="Mon Feb 01 22:04:00 EST 2021" docASTNodeCount="6110" docActiveCodeLength="35201" docExpressionCount="4100" docLength="36258" endLine="1007" insertionLength="8" int_docASTNodeCount="6110" int_docActiveCodeLength="35193" int_docExpressionCount="4100" int_docLength="36250" length="3" offset="35041" startLine="1007" starttimestamp="1612231299681" timestamp="3740755">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6492" _type="Insert" date="Mon Feb 01 22:04:00 EST 2021" docASTNodeCount="6112" docActiveCodeLength="35205" docExpressionCount="4102" docLength="36262" length="4" offset="35049" repeat="4" starttimestamp="1612231299681" timestamp="3741228" timestamp2="3741973">
    <text><![CDATA[.ind]]></text>
  </DocumentChange>
  <DocumentChange __id="6498" _type="Delete" date="Mon Feb 01 22:04:02 EST 2021" docASTNodeCount="6112" docActiveCodeLength="35202" docExpressionCount="4101" docLength="36259" endLine="1007" length="3" offset="35050" repeat="3" startLine="1007" starttimestamp="1612231299681" timestamp="3742499" timestamp2="3742748">
    <text><![CDATA[ind]]></text>
  </DocumentChange>
  <DocumentChange __id="6501" _type="Insert" date="Mon Feb 01 22:04:02 EST 2021" docASTNodeCount="6112" docActiveCodeLength="35206" docExpressionCount="4102" docLength="36263" length="4" offset="35050" repeat="4" starttimestamp="1612231299681" timestamp="3743037" timestamp2="3743280">
    <text><![CDATA[last]]></text>
  </DocumentChange>
  <DocumentChange __id="6506" _type="Replace" date="Mon Feb 01 22:04:03 EST 2021" docASTNodeCount="6113" docActiveCodeLength="35217" docExpressionCount="4103" docLength="36274" endLine="1007" insertionLength="15" int_docASTNodeCount="6112" int_docActiveCodeLength="35202" int_docExpressionCount="4101" int_docLength="36259" length="4" offset="35050" startLine="1007" starttimestamp="1612231299681" timestamp="3743863">
    <deletedText><![CDATA[last]]></deletedText>
    <insertedText><![CDATA[lastIndexOf(ch)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6508" _type="Replace" date="Mon Feb 01 22:04:04 EST 2021" docASTNodeCount="5976" docActiveCodeLength="35216" docExpressionCount="4023" docLength="36273" endLine="1007" insertionLength="1" int_docASTNodeCount="6112" int_docActiveCodeLength="35215" int_docExpressionCount="4102" int_docLength="36272" length="2" offset="35062" startLine="1007" starttimestamp="1612231299681" timestamp="3744521">
    <deletedText><![CDATA[ch]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <Command __id="6469" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:03:54 EST 2021" starttimestamp="1612231299681" timestamp="3734980" />
  <Command __id="6471" _type="InsertStringCommand" date="Mon Feb 01 22:03:55 EST 2021" starttimestamp="1612231299681" timestamp="3735980" timestamp2="3735980">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6472" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:03:56 EST 2021" starttimestamp="1612231299681" timestamp="3736784" />
  <Command __id="6473" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:03:57 EST 2021" starttimestamp="1612231299681" timestamp="3737402" />
  <Command __id="6474" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:03:57 EST 2021" starttimestamp="1612231299681" timestamp="3737714" />
  <Command __id="6475" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:03:57 EST 2021" starttimestamp="1612231299681" timestamp="3737885" />
  <Command __id="6477" _type="InsertStringCommand" date="Mon Feb 01 22:03:58 EST 2021" starttimestamp="1612231299681" timestamp="3738964" timestamp2="3738964">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="6479" _type="InsertStringCommand" date="Mon Feb 01 22:03:58 EST 2021" starttimestamp="1612231299681" timestamp="3739140" timestamp2="3739140">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="6481" _type="InsertStringCommand" date="Mon Feb 01 22:03:59 EST 2021" starttimestamp="1612231299681" timestamp="3739371" timestamp2="3739371">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="6483" _type="InsertStringCommand" date="Mon Feb 01 22:03:59 EST 2021" starttimestamp="1612231299681" timestamp="3739510" timestamp2="3739510">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6485" _type="InsertStringCommand" date="Mon Feb 01 22:03:59 EST 2021" starttimestamp="1612231299681" timestamp="3740229" timestamp2="3740229">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6486" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:03:59 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3740269" />
  <Command __id="6489" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:04:00 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3740747" />
  <Command __id="6491" _type="InsertStringCommand" date="Mon Feb 01 22:04:00 EST 2021" starttimestamp="1612231299681" timestamp="3740763" timestamp2="3740763">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6493" _type="InsertStringCommand" date="Mon Feb 01 22:04:00 EST 2021" starttimestamp="1612231299681" timestamp="3741235" timestamp2="3741235">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6494" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:04:00 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3741275" />
  <Command __id="6505" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:04:03 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3743856" />
  <Command __id="6507" _type="InsertStringCommand" date="Mon Feb 01 22:04:03 EST 2021" starttimestamp="1612231299681" timestamp="3743985" timestamp2="3743985">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6509" _type="InsertStringCommand" date="Mon Feb 01 22:04:04 EST 2021" starttimestamp="1612231299681" timestamp="3744532" timestamp2="3744532">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6511" _type="InsertStringCommand" date="Mon Feb 01 22:04:05 EST 2021" starttimestamp="1612231299681" timestamp="3745549" timestamp2="3745549">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="6513" _type="InsertStringCommand" date="Mon Feb 01 22:04:05 EST 2021" starttimestamp="1612231299681" timestamp="3745676" timestamp2="3745676">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6515" _type="InsertStringCommand" date="Mon Feb 01 22:04:05 EST 2021" starttimestamp="1612231299681" timestamp="3745971" timestamp2="3745971">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6516" _type="ShellCommand" date="Mon Feb 01 22:04:08 EST 2021" starttimestamp="1612231299681" timestamp="3748358" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6517" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:04:08 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3748409" />
  <Command __id="6518" _type="ShellCommand" date="Mon Feb 01 22:04:16 EST 2021" starttimestamp="1612231299681" timestamp="3757272" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6519" _type="MoveCaretCommand" caretOffset="4023" date="Mon Feb 01 22:04:17 EST 2021" docOffset="35064" starttimestamp="1612231299681" timestamp="3758168" />
  <Command __id="6520" _type="MoveCaretCommand" caretOffset="4024" date="Mon Feb 01 22:04:18 EST 2021" docOffset="35065" starttimestamp="1612231299681" timestamp="3758547" />
  <Command __id="6521" _type="SelectTextCommand" caretOffset="4019" date="Mon Feb 01 22:04:19 EST 2021" end="4025" start="4019" starttimestamp="1612231299681" timestamp="3759970" />
  <DocumentChange __id="6510" _type="Insert" date="Mon Feb 01 22:04:05 EST 2021" docASTNodeCount="6113" docActiveCodeLength="35219" docExpressionCount="4103" docLength="36276" length="3" offset="35063" repeat="3" starttimestamp="1612231299681" timestamp="3745545" timestamp2="3745964">
    <text><![CDATA[\t"]]></text>
  </DocumentChange>
  <Command __id="6522" _type="SelectTextCommand" caretOffset="4026" date="Mon Feb 01 22:04:21 EST 2021" end="4026" start="4009" starttimestamp="1612231299681" timestamp="3762010" />
  <DocumentChange __id="6523" _type="Replace" date="Mon Feb 01 22:04:25 EST 2021" docASTNodeCount="6112" docActiveCodeLength="35203" docExpressionCount="4102" docLength="36260" endLine="1007" insertionLength="1" int_docASTNodeCount="6112" int_docActiveCodeLength="35202" int_docExpressionCount="4101" int_docLength="36259" length="17" offset="35050" startLine="1007" starttimestamp="1612231299681" timestamp="3765681">
    <deletedText><![CDATA[lastIndexOf("\t")]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <Command __id="6524" _type="InsertStringCommand" date="Mon Feb 01 22:04:25 EST 2021" starttimestamp="1612231299681" timestamp="3765692" timestamp2="3765692">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6525" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:04:25 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3765716" />
  <DocumentChange __id="6526" _type="Insert" date="Mon Feb 01 22:04:25 EST 2021" docASTNodeCount="6112" docActiveCodeLength="35206" docExpressionCount="4102" docLength="36263" length="3" offset="35051" repeat="3" starttimestamp="1612231299681" timestamp="3765852" timestamp2="3765967">
    <text><![CDATA[nde]]></text>
  </DocumentChange>
  <Command __id="6529" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:04:30 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3770829" />
  <Command __id="6531" _type="InsertStringCommand" date="Mon Feb 01 22:04:30 EST 2021" starttimestamp="1612231299681" timestamp="3770958" timestamp2="3770958">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6532" _type="ShellCommand" date="Mon Feb 01 22:04:34 EST 2021" starttimestamp="1612231299681" timestamp="3774893" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6533" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:04:34 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3774959" />
  <Command __id="6534" _type="ShellCommand" date="Mon Feb 01 22:05:03 EST 2021" starttimestamp="1612231299681" timestamp="3803431" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6535" _type="MoveCaretCommand" caretOffset="4018" date="Mon Feb 01 22:05:03 EST 2021" docOffset="35059" starttimestamp="1612231299681" timestamp="3803494" />
  <Command __id="6536" _type="SelectTextCommand" caretOffset="4020" date="Mon Feb 01 22:05:03 EST 2021" end="4020" start="4017" starttimestamp="1612231299681" timestamp="3803641" />
  <Command __id="6538" _type="InsertStringCommand" date="Mon Feb 01 22:05:04 EST 2021" starttimestamp="1612231299681" timestamp="3804405" timestamp2="3804405">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6540" _type="InsertStringCommand" date="Mon Feb 01 22:05:04 EST 2021" starttimestamp="1612231299681" timestamp="3804857" timestamp2="3804857">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="6542" _type="InsertStringCommand" date="Mon Feb 01 22:05:04 EST 2021" starttimestamp="1612231299681" timestamp="3805058" timestamp2="3805058">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6544" _type="InsertStringCommand" date="Mon Feb 01 22:05:04 EST 2021" starttimestamp="1612231299681" timestamp="3805201" timestamp2="3805201">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6546" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:05:05 EST 2021" starttimestamp="1612231299681" timestamp="3805450" />
  <Command __id="6548" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:05:05 EST 2021" starttimestamp="1612231299681" timestamp="3805560" />
  <Command __id="6550" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:05:05 EST 2021" starttimestamp="1612231299681" timestamp="3805665" />
  <Command __id="6552" _type="InsertStringCommand" date="Mon Feb 01 22:05:05 EST 2021" starttimestamp="1612231299681" timestamp="3805989" timestamp2="3805989">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6554" _type="InsertStringCommand" date="Mon Feb 01 22:05:05 EST 2021" starttimestamp="1612231299681" timestamp="3806147" timestamp2="3806147">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6556" _type="InsertStringCommand" date="Mon Feb 01 22:05:05 EST 2021" starttimestamp="1612231299681" timestamp="3806285" timestamp2="3806285">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6558" _type="InsertStringCommand" date="Mon Feb 01 22:05:06 EST 2021" starttimestamp="1612231299681" timestamp="3806350" timestamp2="3806350">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6560" _type="InsertStringCommand" date="Mon Feb 01 22:05:06 EST 2021" starttimestamp="1612231299681" timestamp="3806772" timestamp2="3806772">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6561" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:05:08 EST 2021" starttimestamp="1612231299681" timestamp="3808704" />
  <DocumentChange __id="6530" _type="Replace" date="Mon Feb 01 22:04:30 EST 2021" docASTNodeCount="6113" docActiveCodeLength="35214" docExpressionCount="4103" docLength="36271" endLine="1007" insertionLength="12" int_docASTNodeCount="6112" int_docActiveCodeLength="35202" int_docExpressionCount="4101" int_docLength="36259" length="4" offset="35050" startLine="1007" starttimestamp="1612231299681" timestamp="3770837">
    <deletedText><![CDATA[inde]]></deletedText>
    <insertedText><![CDATA[indexOf(str)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6537" _type="Replace" date="Mon Feb 01 22:05:04 EST 2021" docASTNodeCount="5976" docActiveCodeLength="35212" docExpressionCount="4023" docLength="36269" endLine="1007" insertionLength="1" int_docASTNodeCount="6112" int_docActiveCodeLength="35211" int_docExpressionCount="4102" int_docLength="36268" length="3" offset="35058" startLine="1007" starttimestamp="1612231299681" timestamp="3804396">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6539" _type="Insert" date="Mon Feb 01 22:05:04 EST 2021" docASTNodeCount="5976" docActiveCodeLength="35215" docExpressionCount="4023" docLength="36272" length="3" offset="35059" repeat="3" starttimestamp="1612231299681" timestamp="3804847" timestamp2="3805194">
    <text><![CDATA[jtt]]></text>
  </DocumentChange>
  <DocumentChange __id="6545" _type="Delete" date="Mon Feb 01 22:05:05 EST 2021" docASTNodeCount="5976" docActiveCodeLength="35212" docExpressionCount="4023" docLength="36269" endLine="1007" length="3" offset="35059" repeat="3" startLine="1007" starttimestamp="1612231299681" timestamp="3805448" timestamp2="3805661">
    <text><![CDATA[jtt]]></text>
  </DocumentChange>
  <DocumentChange __id="6551" _type="Insert" date="Mon Feb 01 22:05:05 EST 2021" docASTNodeCount="6113" docActiveCodeLength="35217" docExpressionCount="4103" docLength="36274" length="5" offset="35059" repeat="5" starttimestamp="1612231299681" timestamp="3805982" timestamp2="3806762">
    <text><![CDATA[http"]]></text>
  </DocumentChange>
  <Command __id="6562" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:05:09 EST 2021" starttimestamp="1612231299681" timestamp="3809728" />
  <DocumentChange __id="6563" _type="Insert" date="Mon Feb 01 22:05:17 EST 2021" docASTNodeCount="6117" docActiveCodeLength="35226" docExpressionCount="4106" docLength="36283" length="9" offset="35074" repeat="9" starttimestamp="1612231299681" timestamp="3817699" timestamp2="3819118">
    <text><![CDATA[url = nex]]></text>
  </DocumentChange>
  <Command __id="6564" _type="InsertStringCommand" date="Mon Feb 01 22:05:17 EST 2021" starttimestamp="1612231299681" timestamp="3817705" timestamp2="3817705">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="6565" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:05:17 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3817746" />
  <Command __id="6568" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:05:17 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3818064" />
  <Command __id="6569" _type="InsertStringCommand" date="Mon Feb 01 22:05:17 EST 2021" starttimestamp="1612231299681" timestamp="3818068" timestamp2="3818068">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6571" _type="InsertStringCommand" date="Mon Feb 01 22:05:17 EST 2021" starttimestamp="1612231299681" timestamp="3818227" timestamp2="3818227">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6573" _type="InsertStringCommand" date="Mon Feb 01 22:05:18 EST 2021" starttimestamp="1612231299681" timestamp="3818342" timestamp2="3818342">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6575" _type="InsertStringCommand" date="Mon Feb 01 22:05:18 EST 2021" starttimestamp="1612231299681" timestamp="3818449" timestamp2="3818449">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6577" _type="InsertStringCommand" date="Mon Feb 01 22:05:18 EST 2021" starttimestamp="1612231299681" timestamp="3818862" timestamp2="3818862">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6578" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:05:18 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3818901" />
  <Command __id="6581" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:05:18 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3819204" />
  <DocumentChange __id="6582" _type="Replace" date="Mon Feb 01 22:05:18 EST 2021" docASTNodeCount="6117" docActiveCodeLength="35231" docExpressionCount="4106" docLength="36288" endLine="1008" insertionLength="8" int_docASTNodeCount="6113" int_docActiveCodeLength="35223" int_docExpressionCount="4103" int_docLength="36280" length="3" offset="35080" startLine="1008" starttimestamp="1612231299681" timestamp="3819212">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <Command __id="6583" _type="InsertStringCommand" date="Mon Feb 01 22:05:18 EST 2021" starttimestamp="1612231299681" timestamp="3819220" timestamp2="3819220">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6584" _type="Insert" date="Mon Feb 01 22:05:19 EST 2021" docASTNodeCount="6119" docActiveCodeLength="35235" docExpressionCount="4108" docLength="36292" length="4" offset="35088" repeat="4" starttimestamp="1612231299681" timestamp="3819607" timestamp2="3820237">
    <text><![CDATA[.sub]]></text>
  </DocumentChange>
  <Command __id="6585" _type="InsertStringCommand" date="Mon Feb 01 22:05:19 EST 2021" starttimestamp="1612231299681" timestamp="3819612" timestamp2="3819612">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6586" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:05:19 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3819654" />
  <Command __id="6590" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:05:20 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3820379" />
  <DocumentChange __id="6591" _type="Replace" date="Mon Feb 01 22:05:20 EST 2021" docASTNodeCount="6120" docActiveCodeLength="35253" docExpressionCount="4109" docLength="36310" endLine="1008" insertionLength="21" int_docASTNodeCount="6117" int_docActiveCodeLength="35232" int_docExpressionCount="4106" int_docLength="36289" length="3" offset="35089" startLine="1008" starttimestamp="1612231299681" timestamp="3820388">
    <deletedText><![CDATA[sub]]></deletedText>
    <insertedText><![CDATA[substring(beginIndex)]]></insertedText>
  </DocumentChange>
  <Command __id="6592" _type="InsertStringCommand" date="Mon Feb 01 22:05:20 EST 2021" starttimestamp="1612231299681" timestamp="3820519" timestamp2="3820519">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6593" _type="Replace" date="Mon Feb 01 22:05:28 EST 2021" docASTNodeCount="6120" docActiveCodeLength="35244" docExpressionCount="4109" docLength="36301" endLine="1008" insertionLength="1" int_docASTNodeCount="6119" int_docActiveCodeLength="35243" int_docExpressionCount="4108" int_docLength="36300" length="10" offset="35099" startLine="1008" starttimestamp="1612231299681" timestamp="3829112">
    <deletedText><![CDATA[beginIndex]]></deletedText>
    <insertedText><![CDATA[k]]></insertedText>
  </DocumentChange>
  <Command __id="6594" _type="InsertStringCommand" date="Mon Feb 01 22:05:28 EST 2021" starttimestamp="1612231299681" timestamp="3829123" timestamp2="3829123">
    <data><![CDATA[k]]></data>
  </Command>
  <DocumentChange __id="6595" _type="Insert" date="Mon Feb 01 22:05:28 EST 2021" docASTNodeCount="6120" docActiveCodeLength="35246" docExpressionCount="4109" docLength="36303" length="2" offset="35100" repeat="2" starttimestamp="1612231299681" timestamp="3829212" timestamp2="3829451">
    <text><![CDATA[ey]]></text>
  </DocumentChange>
  <Command __id="6596" _type="InsertStringCommand" date="Mon Feb 01 22:05:28 EST 2021" starttimestamp="1612231299681" timestamp="3829215" timestamp2="3829215">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6597" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:05:28 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3829253" />
  <Command __id="6599" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:05:29 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3829574" />
  <DocumentChange __id="6600" _type="Replace" date="Mon Feb 01 22:05:29 EST 2021" docASTNodeCount="6120" docActiveCodeLength="35250" docExpressionCount="4109" docLength="36307" endLine="1008" insertionLength="7" int_docASTNodeCount="6119" int_docActiveCodeLength="35243" int_docExpressionCount="4108" int_docLength="36300" length="3" offset="35099" startLine="1008" starttimestamp="1612231299681" timestamp="3829582">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[keyword]]></insertedText>
  </DocumentChange>
  <Command __id="6601" _type="InsertStringCommand" date="Mon Feb 01 22:05:29 EST 2021" starttimestamp="1612231299681" timestamp="3829591" timestamp2="3829591">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6603" _type="InsertStringCommand" date="Mon Feb 01 22:05:29 EST 2021" starttimestamp="1612231299681" timestamp="3829930" timestamp2="3829930">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="6605" _type="InsertStringCommand" date="Mon Feb 01 22:05:29 EST 2021" starttimestamp="1612231299681" timestamp="3830056" timestamp2="3830056">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6607" _type="InsertStringCommand" date="Mon Feb 01 22:05:30 EST 2021" starttimestamp="1612231299681" timestamp="3830717" timestamp2="3830717">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6608" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:05:30 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3830812" />
  <DocumentChange __id="6602" _type="Insert" date="Mon Feb 01 22:05:29 EST 2021" docASTNodeCount="6121" docActiveCodeLength="35255" docExpressionCount="4110" docLength="36312" length="5" offset="35106" repeat="5" starttimestamp="1612231299681" timestamp="3829927" timestamp2="3831145">
    <text><![CDATA[, nex]]></text>
  </DocumentChange>
  <DocumentChange __id="6612" _type="Replace" date="Mon Feb 01 22:05:33 EST 2021" docASTNodeCount="6121" docActiveCodeLength="35260" docExpressionCount="4110" docLength="36317" endLine="1008" insertionLength="8" int_docASTNodeCount="6113" int_docActiveCodeLength="35252" int_docExpressionCount="4103" int_docLength="36309" length="3" offset="35108" startLine="1008" starttimestamp="1612231299681" timestamp="3833775">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <Command __id="6611" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:05:33 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3833768" />
  <Command __id="6613" _type="InsertStringCommand" date="Mon Feb 01 22:05:33 EST 2021" starttimestamp="1612231299681" timestamp="3833787" timestamp2="3833787">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6615" _type="InsertStringCommand" date="Mon Feb 01 22:05:35 EST 2021" starttimestamp="1612231299681" timestamp="3835469" timestamp2="3835469">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6616" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:05:35 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3835560" />
  <Command __id="6621" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:05:35 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3836228" />
  <Command __id="6623" _type="InsertStringCommand" date="Mon Feb 01 22:05:36 EST 2021" starttimestamp="1612231299681" timestamp="3836340" timestamp2="3836340">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6624" _type="ShellCommand" date="Mon Feb 01 22:05:40 EST 2021" starttimestamp="1612231299681" timestamp="3840438" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6625" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:05:40 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3840501" />
  <Command __id="6626" _type="ShellCommand" date="Mon Feb 01 22:05:57 EST 2021" starttimestamp="1612231299681" timestamp="3857358" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6627" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:05:57 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3857371" />
  <Command __id="6628" _type="MoveCaretCommand" caretOffset="3993" date="Mon Feb 01 22:05:57 EST 2021" docOffset="35034" starttimestamp="1612231299681" timestamp="3857426" />
  <Command __id="6629" _type="ShellCommand" date="Mon Feb 01 22:06:04 EST 2021" starttimestamp="1612231299681" timestamp="3864711" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6630" _type="ShellCommand" date="Mon Feb 01 22:06:04 EST 2021" starttimestamp="1612231299681" timestamp="3864833" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6631" _type="MoveCaretCommand" caretOffset="4025" date="Mon Feb 01 22:06:07 EST 2021" docOffset="35066" starttimestamp="1612231299681" timestamp="3867360" />
  <Command __id="6632" _type="MoveCaretCommand" caretOffset="4026" date="Mon Feb 01 22:06:07 EST 2021" docOffset="35067" starttimestamp="1612231299681" timestamp="3867733" />
  <DocumentChange __id="6614" _type="Insert" date="Mon Feb 01 22:05:35 EST 2021" docASTNodeCount="6123" docActiveCodeLength="35265" docExpressionCount="4112" docLength="36322" length="5" offset="35116" repeat="5" starttimestamp="1612231299681" timestamp="3835467" timestamp2="3836142">
    <text><![CDATA[.inde]]></text>
  </DocumentChange>
  <DocumentChange __id="6622" _type="Replace" date="Mon Feb 01 22:05:35 EST 2021" docASTNodeCount="6124" docActiveCodeLength="35272" docExpressionCount="4113" docLength="36329" endLine="1008" insertionLength="11" int_docASTNodeCount="6116" int_docActiveCodeLength="35261" int_docExpressionCount="4109" int_docLength="36318" length="4" offset="35117" startLine="1008" starttimestamp="1612231299681" timestamp="3836237">
    <deletedText><![CDATA[inde]]></deletedText>
    <insertedText><![CDATA[indexOf(ch)]]></insertedText>
  </DocumentChange>
  <Command __id="6633" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:06:09 EST 2021" starttimestamp="1612231299681" timestamp="3869961" />
  <DocumentChange __id="6634" _type="Insert" date="Mon Feb 01 22:06:10 EST 2021" docASTNodeCount="6125" docActiveCodeLength="35281" docExpressionCount="4112" docLength="36338" length="9" offset="34979" repeat="3" starttimestamp="1612231299681" timestamp="3871116" timestamp2="3872715">
    <text><![CDATA[
					if]]></text>
  </DocumentChange>
  <Command __id="6635" _type="InsertStringCommand" date="Mon Feb 01 22:06:10 EST 2021" starttimestamp="1612231299681" timestamp="3871127" timestamp2="3871127">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6637" _type="InsertStringCommand" date="Mon Feb 01 22:06:12 EST 2021" starttimestamp="1612231299681" timestamp="3872467" timestamp2="3872467">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6638" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:06:12 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3872510" />
  <Command __id="6640" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:06:12 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3872728" />
  <DocumentChange __id="6641" _type="Replace" date="Mon Feb 01 22:06:12 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35324" docExpressionCount="4114" docLength="36381" endLine="1007" insertionLength="45" int_docASTNodeCount="6124" int_docActiveCodeLength="35279" int_docExpressionCount="4113" int_docLength="36336" length="2" offset="34986" startLine="1007" starttimestamp="1612231299681" timestamp="3872762">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
						
					}]]></insertedText>
  </DocumentChange>
  <Command __id="6642" _type="InsertStringCommand" date="Mon Feb 01 22:06:12 EST 2021" starttimestamp="1612231299681" timestamp="3872834" timestamp2="3872834">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6643" _type="Replace" date="Mon Feb 01 22:06:14 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35303" docExpressionCount="4114" docLength="36360" endLine="1007" insertionLength="1" int_docASTNodeCount="6127" int_docActiveCodeLength="35302" int_docExpressionCount="4114" int_docLength="36359" length="22" offset="34990" startLine="1007" starttimestamp="1612231299681" timestamp="3874978">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <Command __id="6644" _type="InsertStringCommand" date="Mon Feb 01 22:06:14 EST 2021" starttimestamp="1612231299681" timestamp="3874989" timestamp2="3874989">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6645" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:06:14 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3875021" />
  <DocumentChange __id="6646" _type="Insert" date="Mon Feb 01 22:06:14 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35305" docExpressionCount="4114" docLength="36362" length="2" offset="34991" repeat="2" starttimestamp="1612231299681" timestamp="3875214" timestamp2="3875262">
    <text><![CDATA[ex]]></text>
  </DocumentChange>
  <Command __id="6648" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:06:15 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3875416" />
  <DocumentChange __id="6649" _type="Replace" date="Mon Feb 01 22:06:15 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35310" docExpressionCount="4114" docLength="36367" endLine="1007" insertionLength="8" int_docASTNodeCount="6127" int_docActiveCodeLength="35302" int_docExpressionCount="4114" int_docLength="36359" length="3" offset="34990" startLine="1007" starttimestamp="1612231299681" timestamp="3875424">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <Command __id="6650" _type="InsertStringCommand" date="Mon Feb 01 22:06:15 EST 2021" starttimestamp="1612231299681" timestamp="3875434" timestamp2="3875434">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6651" _type="Insert" date="Mon Feb 01 22:06:15 EST 2021" docASTNodeCount="6129" docActiveCodeLength="35314" docExpressionCount="4116" docLength="36371" length="4" offset="34998" repeat="4" starttimestamp="1612231299681" timestamp="3875606" timestamp2="3875964">
    <text><![CDATA[.ind]]></text>
  </DocumentChange>
  <Command __id="6652" _type="InsertStringCommand" date="Mon Feb 01 22:06:15 EST 2021" starttimestamp="1612231299681" timestamp="3875609" timestamp2="3875609">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6653" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:06:15 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3875650" />
  <Command __id="6657" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:06:15 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3876061" />
  <DocumentChange __id="6658" _type="Replace" date="Mon Feb 01 22:06:15 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35322" docExpressionCount="4117" docLength="36379" endLine="1007" insertionLength="11" int_docASTNodeCount="6129" int_docActiveCodeLength="35311" int_docExpressionCount="4115" int_docLength="36368" length="3" offset="34999" startLine="1007" starttimestamp="1612231299681" timestamp="3876077">
    <deletedText><![CDATA[ind]]></deletedText>
    <insertedText><![CDATA[indexOf(ch)]]></insertedText>
  </DocumentChange>
  <Command __id="6659" _type="InsertStringCommand" date="Mon Feb 01 22:06:15 EST 2021" starttimestamp="1612231299681" timestamp="3876204" timestamp2="3876204">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6660" _type="Replace" date="Mon Feb 01 22:06:19 EST 2021" docASTNodeCount="6000" docActiveCodeLength="35321" docExpressionCount="4033" docLength="36378" endLine="1007" insertionLength="1" int_docASTNodeCount="6129" int_docActiveCodeLength="35320" int_docExpressionCount="4116" int_docLength="36377" length="2" offset="35007" startLine="1007" starttimestamp="1612231299681" timestamp="3879488">
    <deletedText><![CDATA[ch]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <Command __id="6661" _type="InsertStringCommand" date="Mon Feb 01 22:06:19 EST 2021" starttimestamp="1612231299681" timestamp="3879498" timestamp2="3879498">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="6662" _type="Insert" date="Mon Feb 01 22:06:19 EST 2021" docASTNodeCount="6000" docActiveCodeLength="35327" docExpressionCount="4033" docLength="36384" length="6" offset="35008" repeat="6" starttimestamp="1612231299681" timestamp="3879758" timestamp2="3881495">
    <text><![CDATA[\tdate]]></text>
  </DocumentChange>
  <Command __id="6663" _type="InsertStringCommand" date="Mon Feb 01 22:06:19 EST 2021" starttimestamp="1612231299681" timestamp="3879761" timestamp2="3879761">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="6665" _type="InsertStringCommand" date="Mon Feb 01 22:06:19 EST 2021" starttimestamp="1612231299681" timestamp="3879895" timestamp2="3879895">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6667" _type="InsertStringCommand" date="Mon Feb 01 22:06:20 EST 2021" starttimestamp="1612231299681" timestamp="3881203" timestamp2="3881203">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6669" _type="InsertStringCommand" date="Mon Feb 01 22:06:20 EST 2021" starttimestamp="1612231299681" timestamp="3881294" timestamp2="3881294">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6671" _type="InsertStringCommand" date="Mon Feb 01 22:06:21 EST 2021" starttimestamp="1612231299681" timestamp="3881387" timestamp2="3881387">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6673" _type="InsertStringCommand" date="Mon Feb 01 22:06:21 EST 2021" starttimestamp="1612231299681" timestamp="3881497" timestamp2="3881497">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="6674" _type="Delete" date="Mon Feb 01 22:06:21 EST 2021" docASTNodeCount="6000" docActiveCodeLength="35326" docExpressionCount="4033" docLength="36383" endLine="1007" length="1" offset="35013" startLine="1007" starttimestamp="1612231299681" timestamp="3882007">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6675" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:06:21 EST 2021" starttimestamp="1612231299681" timestamp="3882010" />
  <DocumentChange __id="6676" _type="Insert" date="Mon Feb 01 22:06:21 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35328" docExpressionCount="4117" docLength="36385" length="2" offset="35013" repeat="2" starttimestamp="1612231299681" timestamp="3882050" timestamp2="3882566">
    <text><![CDATA[a"]]></text>
  </DocumentChange>
  <Command __id="6677" _type="InsertStringCommand" date="Mon Feb 01 22:06:21 EST 2021" starttimestamp="1612231299681" timestamp="3882054" timestamp2="3882054">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6679" _type="InsertStringCommand" date="Mon Feb 01 22:06:22 EST 2021" starttimestamp="1612231299681" timestamp="3882571" timestamp2="3882571">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6680" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:06:23 EST 2021" starttimestamp="1612231299681" timestamp="3883505" />
  <Command __id="6681" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:06:23 EST 2021" starttimestamp="1612231299681" timestamp="3884277" />
  <Command __id="6682" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:06:24 EST 2021" starttimestamp="1612231299681" timestamp="3884753" />
  <DocumentChange __id="6683" _type="Insert" date="Mon Feb 01 22:06:24 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35333" docExpressionCount="4119" docLength="36390" length="5" offset="35016" repeat="5" starttimestamp="1612231299681" timestamp="3885261" timestamp2="3886731">
    <text><![CDATA[ == 1]]></text>
  </DocumentChange>
  <Command __id="6684" _type="InsertStringCommand" date="Mon Feb 01 22:06:24 EST 2021" starttimestamp="1612231299681" timestamp="3885268" timestamp2="3885268">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6686" _type="InsertStringCommand" date="Mon Feb 01 22:06:25 EST 2021" starttimestamp="1612231299681" timestamp="3885924" timestamp2="3885924">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6688" _type="InsertStringCommand" date="Mon Feb 01 22:06:25 EST 2021" starttimestamp="1612231299681" timestamp="3886057" timestamp2="3886057">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="6690" _type="InsertStringCommand" date="Mon Feb 01 22:06:25 EST 2021" starttimestamp="1612231299681" timestamp="3886129" timestamp2="3886129">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6692" _type="InsertStringCommand" date="Mon Feb 01 22:06:26 EST 2021" starttimestamp="1612231299681" timestamp="3886733" timestamp2="3886733">
    <data><![CDATA[1]]></data>
  </Command>
  <DocumentChange __id="6693" _type="Delete" date="Mon Feb 01 22:06:26 EST 2021" docASTNodeCount="6053" docActiveCodeLength="35332" docExpressionCount="4065" docLength="36389" endLine="1007" length="1" offset="35020" startLine="1007" starttimestamp="1612231299681" timestamp="3887012">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <Command __id="6694" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:06:26 EST 2021" starttimestamp="1612231299681" timestamp="3887014" />
  <Command __id="6696" _type="InsertStringCommand" date="Mon Feb 01 22:06:26 EST 2021" starttimestamp="1612231299681" timestamp="3887290" timestamp2="3887290">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="6698" _type="InsertStringCommand" date="Mon Feb 01 22:06:27 EST 2021" starttimestamp="1612231299681" timestamp="3887378" timestamp2="3887378">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="6699" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:06:27 EST 2021" starttimestamp="1612231299681" timestamp="3887911" />
  <Command __id="6700" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:06:28 EST 2021" starttimestamp="1612231299681" timestamp="3889205" />
  <Command __id="6701" _type="ShellCommand" date="Mon Feb 01 22:06:29 EST 2021" starttimestamp="1612231299681" timestamp="3890166" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6702" _type="ShellCommand" date="Mon Feb 01 22:06:30 EST 2021" starttimestamp="1612231299681" timestamp="3891185" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6704" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:06:31 EST 2021" starttimestamp="1612231299681" timestamp="3892174" />
  <Command __id="6706" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:06:31 EST 2021" starttimestamp="1612231299681" timestamp="3892306" />
  <Command __id="6708" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:06:32 EST 2021" starttimestamp="1612231299681" timestamp="3892473" />
  <Command __id="6710" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:06:32 EST 2021" starttimestamp="1612231299681" timestamp="3892621" />
  <Command __id="6712" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:06:32 EST 2021" starttimestamp="1612231299681" timestamp="3892742" />
  <Command __id="6714" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:06:32 EST 2021" starttimestamp="1612231299681" timestamp="3892871" />
  <Command __id="6716" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:06:32 EST 2021" starttimestamp="1612231299681" timestamp="3893009" />
  <Command __id="6718" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:06:32 EST 2021" starttimestamp="1612231299681" timestamp="3893154" />
  <Command __id="6720" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:06:32 EST 2021" starttimestamp="1612231299681" timestamp="3893290" />
  <Command __id="6722" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:06:33 EST 2021" starttimestamp="1612231299681" timestamp="3893419" />
  <Command __id="6724" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:06:33 EST 2021" starttimestamp="1612231299681" timestamp="3893686" />
  <Command __id="6726" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:06:33 EST 2021" starttimestamp="1612231299681" timestamp="3893968" />
  <Command __id="6728" _type="InsertStringCommand" date="Mon Feb 01 22:06:34 EST 2021" starttimestamp="1612231299681" timestamp="3894591" timestamp2="3894591">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6730" _type="InsertStringCommand" date="Mon Feb 01 22:06:34 EST 2021" starttimestamp="1612231299681" timestamp="3894607" timestamp2="3894607">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6731" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:06:34 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3894649" />
  <Command __id="6735" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:06:34 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3894989" />
  <Command __id="6737" _type="InsertStringCommand" date="Mon Feb 01 22:06:34 EST 2021" starttimestamp="1612231299681" timestamp="3895100" timestamp2="3895100">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6739" _type="InsertStringCommand" date="Mon Feb 01 22:06:35 EST 2021" starttimestamp="1612231299681" timestamp="3895866" timestamp2="3895866">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6741" _type="InsertStringCommand" date="Mon Feb 01 22:06:36 EST 2021" starttimestamp="1612231299681" timestamp="3896814" timestamp2="3896814">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="6743" _type="InsertStringCommand" date="Mon Feb 01 22:06:36 EST 2021" starttimestamp="1612231299681" timestamp="3896952" timestamp2="3896952">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6745" _type="InsertStringCommand" date="Mon Feb 01 22:06:37 EST 2021" starttimestamp="1612231299681" timestamp="3897379" timestamp2="3897379">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6747" _type="InsertStringCommand" date="Mon Feb 01 22:06:37 EST 2021" starttimestamp="1612231299681" timestamp="3897447" timestamp2="3897447">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6749" _type="InsertStringCommand" date="Mon Feb 01 22:06:37 EST 2021" starttimestamp="1612231299681" timestamp="3897532" timestamp2="3897532">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6751" _type="InsertStringCommand" date="Mon Feb 01 22:06:37 EST 2021" starttimestamp="1612231299681" timestamp="3897604" timestamp2="3897604">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6753" _type="InsertStringCommand" date="Mon Feb 01 22:06:37 EST 2021" starttimestamp="1612231299681" timestamp="3897999" timestamp2="3897999">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6754" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:06:38 EST 2021" starttimestamp="1612231299681" timestamp="3898603" />
  <Command __id="6755" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:06:39 EST 2021" starttimestamp="1612231299681" timestamp="3899420" />
  <Command __id="6756" _type="MoveCaretCommand" caretOffset="4125" date="Mon Feb 01 22:06:44 EST 2021" docOffset="35166" starttimestamp="1612231299681" timestamp="3904566" />
  <Command __id="6757" _type="SelectTextCommand" caretOffset="4132" date="Mon Feb 01 22:06:44 EST 2021" end="4132" start="4124" starttimestamp="1612231299681" timestamp="3904727" />
  <Command __id="6758" _type="SelectTextCommand" caretOffset="4147" date="Mon Feb 01 22:06:44 EST 2021" end="4147" start="4085" starttimestamp="1612231299681" timestamp="3904874" />
  <Command __id="6760" _type="CutCommand" date="Mon Feb 01 22:06:44 EST 2021" starttimestamp="1612231299681" timestamp="3905082" />
  <Command __id="6761" _type="MoveCaretCommand" caretOffset="3987" date="Mon Feb 01 22:06:45 EST 2021" docOffset="35028" starttimestamp="1612231299681" timestamp="3905390" />
  <Command __id="6763" _type="PasteCommand" date="Mon Feb 01 22:06:45 EST 2021" starttimestamp="1612231299681" timestamp="3905506" />
  <Command __id="6765" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:06:45 EST 2021" starttimestamp="1612231299681" timestamp="3906103" />
  <Command __id="6766" _type="SelectTextCommand" caretOffset="3945" date="Mon Feb 01 22:06:47 EST 2021" end="4050" start="3945" starttimestamp="1612231299681" timestamp="3907450" />
  <Command __id="6768" _type="CutCommand" date="Mon Feb 01 22:06:47 EST 2021" starttimestamp="1612231299681" timestamp="3907549" />
  <Command __id="6769" _type="MoveCaretCommand" caretOffset="4033" date="Mon Feb 01 22:06:48 EST 2021" docOffset="35074" starttimestamp="1612231299681" timestamp="3908387" />
  <Command __id="6771" _type="InsertStringCommand" date="Mon Feb 01 22:06:48 EST 2021" starttimestamp="1612231299681" timestamp="3908605" timestamp2="3908605">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6773" _type="PasteCommand" date="Mon Feb 01 22:06:48 EST 2021" starttimestamp="1612231299681" timestamp="3908815" />
  <DocumentChange __id="6695" _type="Insert" date="Mon Feb 01 22:06:26 EST 2021" docASTNodeCount="6133" docActiveCodeLength="35334" docExpressionCount="4120" docLength="36391" length="2" offset="35020" repeat="2" starttimestamp="1612231299681" timestamp="3887287" timestamp2="3887375">
    <text><![CDATA[-1]]></text>
  </DocumentChange>
  <DocumentChange __id="6703" _type="Delete" date="Mon Feb 01 22:06:31 EST 2021" docASTNodeCount="6129" docActiveCodeLength="35311" docExpressionCount="4115" docLength="36368" endLine="1007" length="23" offset="34999" repeat="12" startLine="1007" starttimestamp="1612231299681" timestamp="3892171" timestamp2="3893964">
    <text><![CDATA[indexOf("\tdata") == -1]]></text>
  </DocumentChange>
  <DocumentChange __id="6727" _type="Insert" date="Mon Feb 01 22:06:34 EST 2021" docASTNodeCount="6129" docActiveCodeLength="35316" docExpressionCount="4116" docLength="36373" length="5" offset="34999" repeat="5" starttimestamp="1612231299681" timestamp="3894585" timestamp2="3894873">
    <text><![CDATA[conta]]></text>
  </DocumentChange>
  <DocumentChange __id="6736" _type="Replace" date="Mon Feb 01 22:06:34 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35322" docExpressionCount="4117" docLength="36379" endLine="1007" insertionLength="11" int_docASTNodeCount="6129" int_docActiveCodeLength="35311" int_docExpressionCount="4115" int_docLength="36368" length="5" offset="34999" startLine="1007" starttimestamp="1612231299681" timestamp="3894997">
    <deletedText><![CDATA[conta]]></deletedText>
    <insertedText><![CDATA[contains(s)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6738" _type="Replace" date="Mon Feb 01 22:06:35 EST 2021" docASTNodeCount="6000" docActiveCodeLength="35322" docExpressionCount="4033" docLength="36379" endLine="1007" insertionLength="1" int_docASTNodeCount="6129" int_docActiveCodeLength="35321" int_docExpressionCount="4116" int_docLength="36378" length="1" offset="35008" startLine="1007" starttimestamp="1612231299681" timestamp="3895858">
    <deletedText><![CDATA[s]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6740" _type="Insert" date="Mon Feb 01 22:06:36 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35329" docExpressionCount="4117" docLength="36386" length="7" offset="35009" repeat="7" starttimestamp="1612231299681" timestamp="3896811" timestamp2="3897994">
    <text><![CDATA[\tdata"]]></text>
  </DocumentChange>
  <DocumentChange __id="6759" _type="Delete" date="Mon Feb 01 22:06:44 EST 2021" docASTNodeCount="6119" docActiveCodeLength="35267" docExpressionCount="4107" docLength="36324" endLine="1012" length="62" offset="35126" startLine="1011" starttimestamp="1612231299681" timestamp="3905061">
    <text><![CDATA[					url = nextLine.substring(keyword, nextLine.indexOf(ch))
]]></text>
  </DocumentChange>
  <DocumentChange __id="6762" _type="Replace" date="Mon Feb 01 22:06:45 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35324" docExpressionCount="4117" docLength="36381" endLine="1008" insertionLength="63" int_docASTNodeCount="6119" int_docActiveCodeLength="35261" int_docExpressionCount="4107" int_docLength="36318" length="6" offset="35022" startLine="1008" starttimestamp="1612231299681" timestamp="3905493">
    <deletedText><![CDATA[						]]></deletedText>
    <insertedText><![CDATA[						url = nextLine.substring(keyword, nextLine.indexOf(ch))
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6764" _type="Delete" date="Mon Feb 01 22:06:45 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35322" docExpressionCount="4117" docLength="36379" endLine="1010" length="2" offset="35085" startLine="1009" starttimestamp="1612231299681" timestamp="3906101">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="6767" _type="Delete" date="Mon Feb 01 22:06:47 EST 2021" docASTNodeCount="6113" docActiveCodeLength="35217" docExpressionCount="4103" docLength="36274" endLine="1009" length="105" offset="34986" startLine="1007" starttimestamp="1612231299681" timestamp="3907537">
    <text><![CDATA[if (nextLine.contains("\tdata")) {
						url = nextLine.substring(keyword, nextLine.indexOf(ch))
					}]]></text>
  </DocumentChange>
  <DocumentChange __id="6770" _type="Insert" date="Mon Feb 01 22:06:48 EST 2021" docASTNodeCount="6113" docActiveCodeLength="35224" docExpressionCount="4103" docLength="36281" length="7" offset="35074" starttimestamp="1612231299681" timestamp="3908594">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="6772" _type="Replace" date="Mon Feb 01 22:06:48 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35329" docExpressionCount="4117" docLength="36386" endLine="1009" insertionLength="110" int_docASTNodeCount="6113" int_docActiveCodeLength="35219" int_docExpressionCount="4103" int_docLength="36276" length="5" offset="35076" startLine="1009" starttimestamp="1612231299681" timestamp="3908801">
    <deletedText><![CDATA[					]]></deletedText>
    <insertedText><![CDATA[					if (nextLine.contains("\tdata")) {
						url = nextLine.substring(keyword, nextLine.indexOf(ch))
					}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6775" _type="Delete" date="Mon Feb 01 22:06:52 EST 2021" docASTNodeCount="6129" docActiveCodeLength="35327" docExpressionCount="4116" docLength="36384" endLine="1010" length="2" offset="35174" repeat="2" startLine="1010" starttimestamp="1612231299681" timestamp="3912430" timestamp2="3912739">
    <text><![CDATA[ch]]></text>
  </DocumentChange>
  <Command __id="6774" _type="MoveCaretCommand" caretOffset="4134" date="Mon Feb 01 22:06:51 EST 2021" docOffset="35175" starttimestamp="1612231299681" timestamp="3911666" />
  <Command __id="6776" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:06:52 EST 2021" starttimestamp="1612231299681" timestamp="3912434" />
  <Command __id="6778" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 01 22:06:52 EST 2021" starttimestamp="1612231299681" timestamp="3912744" />
  <Command __id="6780" _type="InsertStringCommand" date="Mon Feb 01 22:06:54 EST 2021" starttimestamp="1612231299681" timestamp="3915054" timestamp2="3915054">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6782" _type="InsertStringCommand" date="Mon Feb 01 22:06:55 EST 2021" starttimestamp="1612231299681" timestamp="3916078" timestamp2="3916078">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="6784" _type="InsertStringCommand" date="Mon Feb 01 22:06:55 EST 2021" starttimestamp="1612231299681" timestamp="3916193" timestamp2="3916193">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6786" _type="InsertStringCommand" date="Mon Feb 01 22:06:56 EST 2021" starttimestamp="1612231299681" timestamp="3916463" timestamp2="3916463">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6788" _type="InsertStringCommand" date="Mon Feb 01 22:06:56 EST 2021" starttimestamp="1612231299681" timestamp="3916542" timestamp2="3916542">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6790" _type="InsertStringCommand" date="Mon Feb 01 22:06:56 EST 2021" starttimestamp="1612231299681" timestamp="3916679" timestamp2="3916679">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6792" _type="InsertStringCommand" date="Mon Feb 01 22:06:56 EST 2021" starttimestamp="1612231299681" timestamp="3916758" timestamp2="3916758">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6794" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:06:56 EST 2021" starttimestamp="1612231299681" timestamp="3917115" />
  <Command __id="6796" _type="InsertStringCommand" date="Mon Feb 01 22:06:56 EST 2021" starttimestamp="1612231299681" timestamp="3917185" timestamp2="3917185">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6797" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:06:57 EST 2021" starttimestamp="1612231299681" timestamp="3917610" />
  <Command __id="6798" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:06:57 EST 2021" starttimestamp="1612231299681" timestamp="3917762" />
  <Command __id="6799" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:06:57 EST 2021" starttimestamp="1612231299681" timestamp="3917916" />
  <Command __id="6801" _type="InsertStringCommand" date="Mon Feb 01 22:06:58 EST 2021" starttimestamp="1612231299681" timestamp="3918528" timestamp2="3918528">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="6779" _type="Insert" date="Mon Feb 01 22:06:54 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35335" docExpressionCount="4117" docLength="36392" length="8" offset="35174" repeat="7" starttimestamp="1612231299681" timestamp="3915049" timestamp2="3916755">
    <text><![CDATA["\tdate"]]></text>
  </DocumentChange>
  <DocumentChange __id="6793" _type="Delete" date="Mon Feb 01 22:06:56 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35334" docExpressionCount="4117" docLength="36391" endLine="1010" length="1" offset="35180" startLine="1010" starttimestamp="1612231299681" timestamp="3917112">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="6795" _type="Insert" date="Mon Feb 01 22:06:56 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35335" docExpressionCount="4117" docLength="36392" length="1" offset="35180" starttimestamp="1612231299681" timestamp="3917182">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="6800" _type="Insert" date="Mon Feb 01 22:06:58 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35336" docExpressionCount="4117" docLength="36393" length="1" offset="35184" starttimestamp="1612231299681" timestamp="3918516">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="6802" _type="MoveCaretCommand" caretOffset="4114" date="Mon Feb 01 22:07:19 EST 2021" docOffset="35155" starttimestamp="1612231299681" timestamp="3940206" />
  <DocumentChange __id="6803" _type="Delete" date="Mon Feb 01 22:07:21 EST 2021" docASTNodeCount="6129" docActiveCodeLength="35329" docExpressionCount="4116" docLength="36386" endLine="1010" length="7" offset="35148" startLine="1010" starttimestamp="1612231299681" timestamp="3942218">
    <text><![CDATA[keyword]]></text>
  </DocumentChange>
  <Command __id="6804" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:07:21 EST 2021" starttimestamp="1612231299681" timestamp="3942224" />
  <DocumentChange __id="6805" _type="Insert" date="Mon Feb 01 22:07:29 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35333" docExpressionCount="4117" docLength="36390" length="4" offset="35148" repeat="4" starttimestamp="1612231299681" timestamp="3949467" timestamp2="3949797">
    <text><![CDATA[inde]]></text>
  </DocumentChange>
  <Command __id="6806" _type="InsertStringCommand" date="Mon Feb 01 22:07:29 EST 2021" starttimestamp="1612231299681" timestamp="3949476" timestamp2="3949476">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6807" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:07:29 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3949514" />
  <DocumentChange __id="6811" _type="Delete" date="Mon Feb 01 22:07:30 EST 2021" docASTNodeCount="6129" docActiveCodeLength="35329" docExpressionCount="4116" docLength="36386" endLine="1010" length="4" offset="35148" startLine="1010" starttimestamp="1612231299681" timestamp="3950579">
    <text><![CDATA[inde]]></text>
  </DocumentChange>
  <Command __id="6812" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:07:30 EST 2021" starttimestamp="1612231299681" timestamp="3950585" />
  <DocumentChange __id="6813" _type="Insert" date="Mon Feb 01 22:07:38 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35333" docExpressionCount="4117" docLength="36390" length="4" offset="35148" repeat="4" starttimestamp="1612231299681" timestamp="3958591" timestamp2="3958874">
    <text><![CDATA[nelx]]></text>
  </DocumentChange>
  <Command __id="6816" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:07:38 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3958870" />
  <Command __id="6818" _type="InsertStringCommand" date="Mon Feb 01 22:07:38 EST 2021" starttimestamp="1612231299681" timestamp="3958882" timestamp2="3958882">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="6819" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:07:38 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3958922" />
  <Command __id="6820" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:07:38 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3958965" />
  <DocumentChange __id="6821" _type="Delete" date="Mon Feb 01 22:07:39 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35331" docExpressionCount="4117" docLength="36388" endLine="1010" length="2" offset="35150" repeat="2" startLine="1010" starttimestamp="1612231299681" timestamp="3959389" timestamp2="3959493">
    <text><![CDATA[lx]]></text>
  </DocumentChange>
  <Command __id="6822" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:07:39 EST 2021" starttimestamp="1612231299681" timestamp="3959392" />
  <Command __id="6824" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:07:39 EST 2021" starttimestamp="1612231299681" timestamp="3959495" />
  <DocumentChange __id="6825" _type="Insert" date="Mon Feb 01 22:07:39 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35333" docExpressionCount="4117" docLength="36390" length="2" offset="35150" repeat="2" starttimestamp="1612231299681" timestamp="3959622" timestamp2="3959832">
    <text><![CDATA[xl]]></text>
  </DocumentChange>
  <Command __id="6826" _type="InsertStringCommand" date="Mon Feb 01 22:07:39 EST 2021" starttimestamp="1612231299681" timestamp="3959629" timestamp2="3959629">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="6827" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:07:39 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3959719" />
  <Command __id="6829" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:07:40 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3960512" />
  <DocumentChange __id="6830" _type="Replace" date="Mon Feb 01 22:07:40 EST 2021" docASTNodeCount="6130" docActiveCodeLength="35337" docExpressionCount="4117" docLength="36394" endLine="1010" insertionLength="8" int_docASTNodeCount="6129" int_docActiveCodeLength="35329" int_docExpressionCount="4116" int_docLength="36386" length="4" offset="35148" startLine="1010" starttimestamp="1612231299681" timestamp="3960521">
    <deletedText><![CDATA[nexl]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <Command __id="6831" _type="InsertStringCommand" date="Mon Feb 01 22:07:40 EST 2021" starttimestamp="1612231299681" timestamp="3960530" timestamp2="3960530">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6832" _type="Insert" date="Mon Feb 01 22:07:40 EST 2021" docASTNodeCount="6131" docActiveCodeLength="35338" docExpressionCount="4118" docLength="36395" length="1" offset="35156" starttimestamp="1612231299681" timestamp="3960830">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="6833" _type="InsertStringCommand" date="Mon Feb 01 22:07:40 EST 2021" starttimestamp="1612231299681" timestamp="3960839" timestamp2="3960839">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6834" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:07:40 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3960878" />
  <DocumentChange __id="6835" _type="Insert" date="Mon Feb 01 22:07:45 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35342" docExpressionCount="4119" docLength="36399" length="4" offset="35157" repeat="4" starttimestamp="1612231299681" timestamp="3965682" timestamp2="3966034">
    <text><![CDATA[inde]]></text>
  </DocumentChange>
  <Command __id="6839" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:07:49 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3970294" />
  <Command __id="6841" _type="InsertStringCommand" date="Mon Feb 01 22:07:50 EST 2021" starttimestamp="1612231299681" timestamp="3970438" timestamp2="3970438">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6842" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:07:52 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3972728" />
  <Command __id="6843" _type="MoveCaretCommand" caretOffset="4032" date="Mon Feb 01 22:07:52 EST 2021" docOffset="35073" starttimestamp="1612231299681" timestamp="3972835" />
  <Command __id="6844" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:07:53 EST 2021" starttimestamp="1612231299681" timestamp="3973414" />
  <Command __id="6846" _type="InsertStringCommand" date="Mon Feb 01 22:07:53 EST 2021" starttimestamp="1612231299681" timestamp="3973814" timestamp2="3973814">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="6848" _type="InsertStringCommand" date="Mon Feb 01 22:07:53 EST 2021" starttimestamp="1612231299681" timestamp="3973873" timestamp2="3973873">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="6849" _type="MoveCaretCommand" caretOffset="4128" date="Mon Feb 01 22:07:55 EST 2021" docOffset="35169" starttimestamp="1612231299681" timestamp="3975842" />
  <Command __id="6851" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:07:56 EST 2021" starttimestamp="1612231299681" timestamp="3976417" />
  <Command __id="6853" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:07:56 EST 2021" starttimestamp="1612231299681" timestamp="3976549" />
  <Command __id="6855" _type="InsertStringCommand" date="Mon Feb 01 22:07:56 EST 2021" starttimestamp="1612231299681" timestamp="3976811" timestamp2="3976811">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6857" _type="InsertStringCommand" date="Mon Feb 01 22:07:57 EST 2021" starttimestamp="1612231299681" timestamp="3977368" timestamp2="3977368">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="6859" _type="InsertStringCommand" date="Mon Feb 01 22:07:57 EST 2021" starttimestamp="1612231299681" timestamp="3977484" timestamp2="3977484">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6861" _type="InsertStringCommand" date="Mon Feb 01 22:07:57 EST 2021" starttimestamp="1612231299681" timestamp="3977616" timestamp2="3977616">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6863" _type="InsertStringCommand" date="Mon Feb 01 22:07:57 EST 2021" starttimestamp="1612231299681" timestamp="3977739" timestamp2="3977739">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="6865" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:07:57 EST 2021" starttimestamp="1612231299681" timestamp="3978292" />
  <Command __id="6867" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:07:58 EST 2021" starttimestamp="1612231299681" timestamp="3978445" />
  <Command __id="6869" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:07:58 EST 2021" starttimestamp="1612231299681" timestamp="3978571" />
  <Command __id="6871" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:07:58 EST 2021" starttimestamp="1612231299681" timestamp="3978681" />
  <Command __id="6873" _type="InsertStringCommand" date="Mon Feb 01 22:07:58 EST 2021" starttimestamp="1612231299681" timestamp="3979151" timestamp2="3979151">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6875" _type="InsertStringCommand" date="Mon Feb 01 22:07:58 EST 2021" starttimestamp="1612231299681" timestamp="3979296" timestamp2="3979296">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6877" _type="InsertStringCommand" date="Mon Feb 01 22:07:59 EST 2021" starttimestamp="1612231299681" timestamp="3979449" timestamp2="3979449">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6879" _type="InsertStringCommand" date="Mon Feb 01 22:07:59 EST 2021" starttimestamp="1612231299681" timestamp="3979503" timestamp2="3979503">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6880" _type="SelectTextCommand" caretOffset="4024" date="Mon Feb 01 22:08:06 EST 2021" end="4024" start="4007" starttimestamp="1612231299681" timestamp="3986878" />
  <Command __id="6881" _type="MoveCaretCommand" caretOffset="4023" date="Mon Feb 01 22:08:06 EST 2021" docOffset="35064" starttimestamp="1612231299681" timestamp="3987225" />
  <Command __id="6882" _type="MoveCaretCommand" caretOffset="4025" date="Mon Feb 01 22:08:11 EST 2021" docOffset="35066" starttimestamp="1612231299681" timestamp="3991998" />
  <Command __id="6883" _type="MoveCaretCommand" caretOffset="4030" date="Mon Feb 01 22:08:12 EST 2021" docOffset="35071" starttimestamp="1612231299681" timestamp="3993173" />
  <Command __id="6884" _type="SelectTextCommand" caretOffset="4024" date="Mon Feb 01 22:08:14 EST 2021" end="4030" start="4024" starttimestamp="1612231299681" timestamp="3994488" />
  <Command __id="6885" _type="MoveCaretCommand" caretOffset="3938" date="Mon Feb 01 22:08:15 EST 2021" docOffset="34979" starttimestamp="1612231299681" timestamp="3995491" />
  <Command __id="6886" _type="MoveCaretCommand" caretOffset="3945" date="Mon Feb 01 22:08:15 EST 2021" docOffset="34986" starttimestamp="1612231299681" timestamp="3995899" />
  <Command __id="6888" _type="InsertStringCommand" date="Mon Feb 01 22:08:16 EST 2021" starttimestamp="1612231299681" timestamp="3996780" timestamp2="3996780">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6889" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:08:16 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3996818" />
  <Command __id="6893" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:08:17 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="3997553" />
  <Command __id="6895" _type="InsertStringCommand" date="Mon Feb 01 22:08:17 EST 2021" starttimestamp="1612231299681" timestamp="3997569" timestamp2="3997569">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6897" _type="InsertStringCommand" date="Mon Feb 01 22:08:17 EST 2021" starttimestamp="1612231299681" timestamp="3997745" timestamp2="3997745">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6898" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:08:17 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="3997787" />
  <Command __id="6903" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:08:22 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4002925" />
  <Command __id="6904" _type="MoveCaretCommand" caretOffset="3958" date="Mon Feb 01 22:08:22 EST 2021" docOffset="34999" starttimestamp="1612231299681" timestamp="4002979" />
  <Command __id="6906" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:08:23 EST 2021" starttimestamp="1612231299681" timestamp="4003651" />
  <DocumentChange __id="6840" _type="Replace" date="Mon Feb 01 22:07:49 EST 2021" docASTNodeCount="6133" docActiveCodeLength="35349" docExpressionCount="4120" docLength="36406" endLine="1010" insertionLength="11" int_docASTNodeCount="6131" int_docActiveCodeLength="35338" int_docExpressionCount="4118" int_docLength="36395" length="4" offset="35157" startLine="1010" starttimestamp="1612231299681" timestamp="3970310">
    <deletedText><![CDATA[inde]]></deletedText>
    <insertedText><![CDATA[indexOf(ch)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6845" _type="Insert" date="Mon Feb 01 22:07:53 EST 2021" docASTNodeCount="6135" docActiveCodeLength="35351" docExpressionCount="4122" docLength="36408" length="2" offset="35072" repeat="2" starttimestamp="1612231299681" timestamp="3973806" timestamp2="3973864">
    <text><![CDATA[-1]]></text>
  </DocumentChange>
  <DocumentChange __id="6850" _type="Delete" date="Mon Feb 01 22:07:56 EST 2021" docASTNodeCount="6134" docActiveCodeLength="35349" docExpressionCount="4121" docLength="36406" endLine="1010" length="2" offset="35167" repeat="2" startLine="1010" starttimestamp="1612231299681" timestamp="3976416" timestamp2="3976542">
    <text><![CDATA[ch]]></text>
  </DocumentChange>
  <DocumentChange __id="6854" _type="Insert" date="Mon Feb 01 22:07:56 EST 2021" docASTNodeCount="6135" docActiveCodeLength="35355" docExpressionCount="4122" docLength="36412" length="6" offset="35167" repeat="5" starttimestamp="1612231299681" timestamp="3976806" timestamp2="3977737">
    <text><![CDATA["jtt["]]></text>
  </DocumentChange>
  <DocumentChange __id="6864" _type="Delete" date="Mon Feb 01 22:07:57 EST 2021" docASTNodeCount="6135" docActiveCodeLength="35351" docExpressionCount="4122" docLength="36408" endLine="1010" length="4" offset="35168" repeat="4" startLine="1010" starttimestamp="1612231299681" timestamp="3978289" timestamp2="3978678">
    <text><![CDATA[jtt[]]></text>
  </DocumentChange>
  <DocumentChange __id="6872" _type="Insert" date="Mon Feb 01 22:07:58 EST 2021" docASTNodeCount="6135" docActiveCodeLength="35355" docExpressionCount="4122" docLength="36412" length="4" offset="35168" repeat="4" starttimestamp="1612231299681" timestamp="3979148" timestamp2="3979501">
    <text><![CDATA[http]]></text>
  </DocumentChange>
  <DocumentChange __id="6887" _type="Insert" date="Mon Feb 01 22:08:16 EST 2021" docASTNodeCount="6137" docActiveCodeLength="35359" docExpressionCount="4122" docLength="36416" length="4" offset="34986" repeat="4" starttimestamp="1612231299681" timestamp="3996771" timestamp2="3997125">
    <text><![CDATA[nexl]]></text>
  </DocumentChange>
  <DocumentChange __id="6894" _type="Replace" date="Mon Feb 01 22:08:17 EST 2021" docASTNodeCount="6137" docActiveCodeLength="35363" docExpressionCount="4122" docLength="36420" endLine="1007" insertionLength="8" int_docASTNodeCount="6135" int_docActiveCodeLength="35355" int_docExpressionCount="4122" int_docLength="36412" length="4" offset="34986" startLine="1007" starttimestamp="1612231299681" timestamp="3997560">
    <deletedText><![CDATA[nexl]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6896" _type="Insert" date="Mon Feb 01 22:08:17 EST 2021" docASTNodeCount="6139" docActiveCodeLength="35368" docExpressionCount="4124" docLength="36425" length="5" offset="34994" repeat="5" starttimestamp="1612231299681" timestamp="3997740" timestamp2="3998342">
    <text><![CDATA[.inde]]></text>
  </DocumentChange>
  <DocumentChange __id="6905" _type="Delete" date="Mon Feb 01 22:08:23 EST 2021" docASTNodeCount="6135" docActiveCodeLength="35348" docExpressionCount="4122" docLength="36405" endLine="1008" length="20" offset="34981" startLine="1007" starttimestamp="1612231299681" timestamp="4003644">
    <text><![CDATA[					nextLine.inde
]]></text>
  </DocumentChange>
  <DocumentChange __id="6909" _type="Delete" date="Mon Feb 01 22:08:26 EST 2021" docASTNodeCount="5976" docActiveCodeLength="35343" docExpressionCount="4023" docLength="36400" endLine="1007" length="5" offset="35059" repeat="2" startLine="1007" starttimestamp="1612231299681" timestamp="4006424" timestamp2="4006574">
    <text><![CDATA[http"]]></text>
  </DocumentChange>
  <DocumentChange __id="6913" _type="Insert" date="Mon Feb 01 22:08:27 EST 2021" docASTNodeCount="6135" docActiveCodeLength="35346" docExpressionCount="4122" docLength="36403" length="3" offset="35059" repeat="3" starttimestamp="1612231299681" timestamp="4007447" timestamp2="4008301">
    <text><![CDATA[\t"]]></text>
  </DocumentChange>
  <DocumentChange __id="6920" _type="Delete" date="Mon Feb 01 22:08:29 EST 2021" docASTNodeCount="6133" docActiveCodeLength="35344" docExpressionCount="4120" docLength="36401" endLine="1007" length="2" offset="35063" repeat="2" startLine="1007" starttimestamp="1612231299681" timestamp="4010094" timestamp2="4010240">
    <text><![CDATA[-1]]></text>
  </DocumentChange>
  <Command __id="6907" _type="MoveCaretCommand" caretOffset="4024" date="Mon Feb 01 22:08:24 EST 2021" docOffset="35065" starttimestamp="1612231299681" timestamp="4005231" />
  <Command __id="6908" _type="MoveCaretCommand" caretOffset="4023" date="Mon Feb 01 22:08:25 EST 2021" docOffset="35064" starttimestamp="1612231299681" timestamp="4005876" />
  <Command __id="6910" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:08:26 EST 2021" starttimestamp="1612231299681" timestamp="4006433" />
  <Command __id="6912" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:08:26 EST 2021" starttimestamp="1612231299681" timestamp="4006578" />
  <Command __id="6914" _type="InsertStringCommand" date="Mon Feb 01 22:08:27 EST 2021" starttimestamp="1612231299681" timestamp="4007454" timestamp2="4007454">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="6916" _type="InsertStringCommand" date="Mon Feb 01 22:08:27 EST 2021" starttimestamp="1612231299681" timestamp="4007549" timestamp2="4007549">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6918" _type="InsertStringCommand" date="Mon Feb 01 22:08:27 EST 2021" starttimestamp="1612231299681" timestamp="4008313" timestamp2="4008313">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="6919" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:08:28 EST 2021" starttimestamp="1612231299681" timestamp="4008649" />
  <Command __id="6921" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 01 22:08:29 EST 2021" starttimestamp="1612231299681" timestamp="4010098" />
  <Command __id="6923" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 01 22:08:29 EST 2021" starttimestamp="1612231299681" timestamp="4010250" />
  <Command __id="6924" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:08:30 EST 2021" starttimestamp="1612231299681" timestamp="4010863" />
  <Command __id="6926" _type="InsertStringCommand" date="Mon Feb 01 22:08:31 EST 2021" starttimestamp="1612231299681" timestamp="4012203" timestamp2="4012203">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="6928" _type="InsertStringCommand" date="Mon Feb 01 22:08:31 EST 2021" starttimestamp="1612231299681" timestamp="4012288" timestamp2="4012288">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6929" _type="SelectTextCommand" caretOffset="3986" date="Mon Feb 01 22:08:35 EST 2021" end="3986" start="3974" starttimestamp="1612231299681" timestamp="4016305" />
  <Command __id="6930" _type="MoveCaretCommand" caretOffset="3997" date="Mon Feb 01 22:08:36 EST 2021" docOffset="35038" starttimestamp="1612231299681" timestamp="4016632" />
  <Command __id="6931" _type="SelectTextCommand" caretOffset="3976" date="Mon Feb 01 22:08:37 EST 2021" end="3996" start="3976" starttimestamp="1612231299681" timestamp="4017932" />
  <Command __id="6932" _type="MoveCaretCommand" caretOffset="3975" date="Mon Feb 01 22:08:37 EST 2021" docOffset="35016" starttimestamp="1612231299681" timestamp="4018169" />
  <Command __id="6933" _type="SelectTextCommand" caretOffset="3998" date="Mon Feb 01 22:08:40 EST 2021" end="3998" start="3974" starttimestamp="1612231299681" timestamp="4020932" />
  <Command __id="6934" _type="CopyCommand" date="Mon Feb 01 22:08:40 EST 2021" starttimestamp="1612231299681" timestamp="4021138" />
  <Command __id="6935" _type="MoveCaretCommand" caretOffset="4067" date="Mon Feb 01 22:08:41 EST 2021" docOffset="35108" starttimestamp="1612231299681" timestamp="4021611" />
  <Command __id="6936" _type="MoveCaretCommand" caretOffset="4023" date="Mon Feb 01 22:08:41 EST 2021" docOffset="35064" starttimestamp="1612231299681" timestamp="4021978" />
  <Command __id="6938" _type="PasteCommand" date="Mon Feb 01 22:08:42 EST 2021" starttimestamp="1612231299681" timestamp="4022522" />
  <DocumentChange __id="6925" _type="Insert" date="Mon Feb 01 22:08:31 EST 2021" docASTNodeCount="6134" docActiveCodeLength="35346" docExpressionCount="4121" docLength="36403" length="2" offset="35062" repeat="2" starttimestamp="1612231299681" timestamp="4012195" timestamp2="4012281">
    <text><![CDATA[, ]]></text>
  </DocumentChange>
  <DocumentChange __id="6937" _type="Insert" date="Mon Feb 01 22:08:42 EST 2021" docASTNodeCount="6139" docActiveCodeLength="35370" docExpressionCount="4126" docLength="36427" length="24" offset="35064" starttimestamp="1612231299681" timestamp="4022511">
    <text><![CDATA[nextLine.indexOf("\t")+1]]></text>
  </DocumentChange>
  <Command __id="6939" _type="MoveCaretCommand" caretOffset="3938" date="Mon Feb 01 22:08:46 EST 2021" docOffset="34979" starttimestamp="1612231299681" timestamp="4027077" />
  <DocumentChange __id="6940" _type="Insert" date="Mon Feb 01 22:08:48 EST 2021" docASTNodeCount="6139" docActiveCodeLength="35377" docExpressionCount="4126" docLength="36434" length="7" offset="34979" starttimestamp="1612231299681" timestamp="4028338">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <Command __id="6941" _type="InsertStringCommand" date="Mon Feb 01 22:08:48 EST 2021" starttimestamp="1612231299681" timestamp="4028359" timestamp2="4028359">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="6942" _type="Insert" date="Mon Feb 01 22:08:51 EST 2021" docASTNodeCount="6140" docActiveCodeLength="35381" docExpressionCount="4125" docLength="36438" length="4" offset="34986" repeat="4" starttimestamp="1612231299681" timestamp="4032037" timestamp2="4032325">
    <text><![CDATA[int ]]></text>
  </DocumentChange>
  <Command __id="6943" _type="InsertStringCommand" date="Mon Feb 01 22:08:51 EST 2021" starttimestamp="1612231299681" timestamp="4032043" timestamp2="4032043">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6944" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:08:51 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4032084" />
  <Command __id="6948" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:08:52 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4032369" />
  <DocumentChange __id="6949" _type="Insert" date="Mon Feb 01 22:08:55 EST 2021" docASTNodeCount="6143" docActiveCodeLength="35385" docExpressionCount="4127" docLength="36442" length="4" offset="34990" repeat="4" starttimestamp="1612231299681" timestamp="4036138" timestamp2="4036719">
    <text><![CDATA[inde]]></text>
  </DocumentChange>
  <Command __id="6950" _type="InsertStringCommand" date="Mon Feb 01 22:08:55 EST 2021" starttimestamp="1612231299681" timestamp="4036143" timestamp2="4036143">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6951" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:08:55 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4036184" />
  <Command __id="6953" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:08:55 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4036277" />
  <Command __id="6955" _type="InsertStringCommand" date="Mon Feb 01 22:08:56 EST 2021" starttimestamp="1612231299681" timestamp="4036364" timestamp2="4036364">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="6956" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:08:56 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4036402" />
  <Command __id="6957" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:08:56 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4036433" />
  <Command __id="6959" _type="InsertStringCommand" date="Mon Feb 01 22:08:56 EST 2021" starttimestamp="1612231299681" timestamp="4036724" timestamp2="4036724">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6960" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:08:56 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4036817" />
  <Command __id="6961" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:08:56 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4036849" />
  <DocumentChange __id="6962" _type="Delete" date="Mon Feb 01 22:08:57 EST 2021" docASTNodeCount="6143" docActiveCodeLength="35382" docExpressionCount="4127" docLength="36439" endLine="1007" length="3" offset="34991" repeat="3" startLine="1007" starttimestamp="1612231299681" timestamp="4037652" timestamp2="4037927">
    <text><![CDATA[nde]]></text>
  </DocumentChange>
  <Command __id="6963" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:08:57 EST 2021" starttimestamp="1612231299681" timestamp="4037654" />
  <Command __id="6965" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:08:57 EST 2021" starttimestamp="1612231299681" timestamp="4037791" />
  <Command __id="6967" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:08:57 EST 2021" starttimestamp="1612231299681" timestamp="4037931" />
  <Command __id="6969" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:08:58 EST 2021" starttimestamp="1612231299681" timestamp="4038619" />
  <Command __id="6970" _type="MoveCaretCommand" caretOffset="3938" date="Mon Feb 01 22:09:03 EST 2021" docOffset="34979" starttimestamp="1612231299681" timestamp="4043408" />
  <Command __id="6971" _type="MoveCaretCommand" caretOffset="3935" date="Mon Feb 01 22:09:09 EST 2021" docOffset="34976" starttimestamp="1612231299681" timestamp="4049699" />
  <DocumentChange __id="6968" _type="Delete" date="Mon Feb 01 22:08:58 EST 2021" docASTNodeCount="6139" docActiveCodeLength="35370" docExpressionCount="4126" docLength="36427" endLine="1008" length="12" offset="34981" startLine="1007" starttimestamp="1612231299681" timestamp="4038614">
    <text><![CDATA[					int i
]]></text>
  </DocumentChange>
  <DocumentChange __id="6973" _type="Insert" date="Mon Feb 01 22:09:13 EST 2021" docASTNodeCount="6139" docActiveCodeLength="35377" docExpressionCount="4126" docLength="36434" length="7" offset="34925" starttimestamp="1612231299681" timestamp="4053460">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="6975" _type="Insert" date="Mon Feb 01 22:09:19 EST 2021" docASTNodeCount="6141" docActiveCodeLength="35383" docExpressionCount="4126" docLength="36440" length="6" offset="34932" repeat="6" starttimestamp="1612231299681" timestamp="4060257" timestamp2="4060833">
    <text><![CDATA[String]]></text>
  </DocumentChange>
  <DocumentChange __id="6988" _type="Replace" date="Mon Feb 01 22:09:20 EST 2021" docASTNodeCount="6141" docActiveCodeLength="35384" docExpressionCount="4126" docLength="36441" endLine="1006" insertionLength="7" int_docASTNodeCount="6139" int_docActiveCodeLength="35377" int_docExpressionCount="4126" int_docLength="36434" length="6" offset="34932" startLine="1006" starttimestamp="1612231299681" timestamp="4060853">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6990" _type="Delete" date="Mon Feb 01 22:09:20 EST 2021" docASTNodeCount="6139" docActiveCodeLength="35377" docExpressionCount="4126" docLength="36434" endLine="1006" length="7" offset="34932" startLine="1006" starttimestamp="1612231299681" timestamp="4061279">
    <text><![CDATA[String ]]></text>
  </DocumentChange>
  <Command __id="6972" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:09:12 EST 2021" starttimestamp="1612231299681" timestamp="4053251" />
  <Command __id="6974" _type="InsertStringCommand" date="Mon Feb 01 22:09:13 EST 2021" starttimestamp="1612231299681" timestamp="4053472" timestamp2="4053472">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6976" _type="InsertStringCommand" date="Mon Feb 01 22:09:19 EST 2021" starttimestamp="1612231299681" timestamp="4060264" timestamp2="4060264">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="6978" _type="InsertStringCommand" date="Mon Feb 01 22:09:20 EST 2021" starttimestamp="1612231299681" timestamp="4060469" timestamp2="4060469">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6980" _type="InsertStringCommand" date="Mon Feb 01 22:09:20 EST 2021" starttimestamp="1612231299681" timestamp="4060540" timestamp2="4060540">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6982" _type="InsertStringCommand" date="Mon Feb 01 22:09:20 EST 2021" starttimestamp="1612231299681" timestamp="4060572" timestamp2="4060572">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6984" _type="InsertStringCommand" date="Mon Feb 01 22:09:20 EST 2021" starttimestamp="1612231299681" timestamp="4060621" timestamp2="4060621">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6985" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:20 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4060622" />
  <Command __id="6987" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:20 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4060845" />
  <Command __id="6989" _type="InsertStringCommand" date="Mon Feb 01 22:09:20 EST 2021" starttimestamp="1612231299681" timestamp="4060860" timestamp2="4060860">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6991" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:09:20 EST 2021" starttimestamp="1612231299681" timestamp="4061281" />
  <Command __id="6993" _type="InsertStringCommand" date="Mon Feb 01 22:09:22 EST 2021" starttimestamp="1612231299681" timestamp="4062939" timestamp2="4062939">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6995" _type="InsertStringCommand" date="Mon Feb 01 22:09:22 EST 2021" starttimestamp="1612231299681" timestamp="4063011" timestamp2="4063011">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6996" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:22 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4063053" />
  <Command __id="6998" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:23 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4063378" />
  <Command __id="7000" _type="InsertStringCommand" date="Mon Feb 01 22:09:23 EST 2021" starttimestamp="1612231299681" timestamp="4063395" timestamp2="4063395">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7002" _type="InsertStringCommand" date="Mon Feb 01 22:09:23 EST 2021" starttimestamp="1612231299681" timestamp="4063582" timestamp2="4063582">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7003" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:23 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4063621" />
  <DocumentChange __id="6992" _type="Insert" date="Mon Feb 01 22:09:22 EST 2021" docASTNodeCount="6141" docActiveCodeLength="35380" docExpressionCount="4126" docLength="36437" length="3" offset="34932" repeat="3" starttimestamp="1612231299681" timestamp="4062934" timestamp2="4063203">
    <text><![CDATA[nex]]></text>
  </DocumentChange>
  <DocumentChange __id="6999" _type="Replace" date="Mon Feb 01 22:09:23 EST 2021" docASTNodeCount="6141" docActiveCodeLength="35385" docExpressionCount="4126" docLength="36442" endLine="1006" insertionLength="8" int_docASTNodeCount="6139" int_docActiveCodeLength="35377" int_docExpressionCount="4126" int_docLength="36434" length="3" offset="34932" startLine="1006" starttimestamp="1612231299681" timestamp="4063386">
    <deletedText><![CDATA[nex]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7001" _type="Insert" date="Mon Feb 01 22:09:23 EST 2021" docASTNodeCount="6143" docActiveCodeLength="35388" docExpressionCount="4128" docLength="36445" length="3" offset="34940" repeat="3" starttimestamp="1612231299681" timestamp="4063574" timestamp2="4064212">
    <text><![CDATA[.sp]]></text>
  </DocumentChange>
  <DocumentChange __id="7008" _type="Delete" date="Mon Feb 01 22:09:26 EST 2021" docASTNodeCount="6145" docActiveCodeLength="35377" docExpressionCount="4128" docLength="36434" endLine="1006" length="11" offset="34916" startLine="1005" starttimestamp="1612231299681" timestamp="4066528">
    <text><![CDATA[				try {
]]></text>
  </DocumentChange>
  <DocumentChange __id="7010" _type="Insert" date="Mon Feb 01 22:09:26 EST 2021" docASTNodeCount="6143" docActiveCodeLength="35388" docExpressionCount="4128" docLength="36445" length="11" offset="34916" starttimestamp="1612231299681" timestamp="4067125">
    <text><![CDATA[				try {
]]></text>
  </DocumentChange>
  <DocumentChange __id="7012" _type="Delete" date="Mon Feb 01 22:09:27 EST 2021" docASTNodeCount="6141" docActiveCodeLength="35385" docExpressionCount="4126" docLength="36442" endLine="1006" length="3" offset="34940" startLine="1006" starttimestamp="1612231299681" timestamp="4067660">
    <text><![CDATA[.sp]]></text>
  </DocumentChange>
  <Command __id="7006" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:25 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4066196" />
  <Command __id="7007" _type="MoveCaretCommand" caretOffset="3884" date="Mon Feb 01 22:09:25 EST 2021" docOffset="34925" starttimestamp="1612231299681" timestamp="4066243" />
  <Command __id="7009" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:09:26 EST 2021" starttimestamp="1612231299681" timestamp="4066536" />
  <Command __id="7011" _type="UndoCommand" date="Mon Feb 01 22:09:26 EST 2021" starttimestamp="1612231299681" timestamp="4067134" />
  <Command __id="7013" _type="UndoCommand" date="Mon Feb 01 22:09:27 EST 2021" starttimestamp="1612231299681" timestamp="4067671" />
  <Command __id="7014" _type="MoveCaretCommand" caretOffset="3899" date="Mon Feb 01 22:09:28 EST 2021" docOffset="34940" starttimestamp="1612231299681" timestamp="4068429" />
  <Command __id="7016" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:09:30 EST 2021" starttimestamp="1612231299681" timestamp="4070473" />
  <Command __id="7017" _type="MoveCaretCommand" caretOffset="3824" date="Mon Feb 01 22:09:31 EST 2021" docOffset="34865" starttimestamp="1612231299681" timestamp="4071440" />
  <DocumentChange __id="7015" _type="Delete" date="Mon Feb 01 22:09:30 EST 2021" docASTNodeCount="6139" docActiveCodeLength="35370" docExpressionCount="4126" docLength="36427" endLine="1007" length="15" offset="34927" startLine="1006" starttimestamp="1612231299681" timestamp="4070468">
    <text><![CDATA[					nextLine
]]></text>
  </DocumentChange>
  <DocumentChange __id="7019" _type="Insert" date="Mon Feb 01 22:09:34 EST 2021" docASTNodeCount="6141" docActiveCodeLength="35383" docExpressionCount="4126" docLength="36440" length="13" offset="34925" repeat="7" starttimestamp="1612231299681" timestamp="4075129" timestamp2="4075796">
    <text><![CDATA[
					String]]></text>
  </DocumentChange>
  <DocumentChange __id="7031" _type="Replace" date="Mon Feb 01 22:09:35 EST 2021" docASTNodeCount="6141" docActiveCodeLength="35384" docExpressionCount="4126" docLength="36441" endLine="1006" insertionLength="7" int_docASTNodeCount="6139" int_docActiveCodeLength="35377" int_docExpressionCount="4126" int_docLength="36434" length="6" offset="34932" startLine="1006" starttimestamp="1612231299681" timestamp="4075883">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7033" _type="Insert" date="Mon Feb 01 22:09:36 EST 2021" docASTNodeCount="6144" docActiveCodeLength="35385" docExpressionCount="4128" docLength="36442" length="1" offset="34939" starttimestamp="1612231299681" timestamp="4077228">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="7036" _type="Delete" date="Mon Feb 01 22:09:37 EST 2021" docASTNodeCount="6141" docActiveCodeLength="35384" docExpressionCount="4126" docLength="36441" endLine="1006" length="1" offset="34939" startLine="1006" starttimestamp="1612231299681" timestamp="4077808">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="7037" _type="Insert" date="Mon Feb 01 22:09:40 EST 2021" docASTNodeCount="6143" docActiveCodeLength="35393" docExpressionCount="4128" docLength="36450" length="9" offset="34939" repeat="9" starttimestamp="1612231299681" timestamp="4080335" timestamp2="4081301">
    <text><![CDATA[tokens = ]]></text>
  </DocumentChange>
  <Command __id="7018" _type="MoveCaretCommand" caretOffset="3884" date="Mon Feb 01 22:09:34 EST 2021" docOffset="34925" starttimestamp="1612231299681" timestamp="4074432" />
  <Command __id="7020" _type="InsertStringCommand" date="Mon Feb 01 22:09:34 EST 2021" starttimestamp="1612231299681" timestamp="4075149" timestamp2="4075149">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7022" _type="InsertStringCommand" date="Mon Feb 01 22:09:35 EST 2021" starttimestamp="1612231299681" timestamp="4075352" timestamp2="4075352">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="7024" _type="InsertStringCommand" date="Mon Feb 01 22:09:35 EST 2021" starttimestamp="1612231299681" timestamp="4075567" timestamp2="4075567">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7025" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:35 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4075601" />
  <Command __id="7030" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:35 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4075876" />
  <Command __id="7032" _type="InsertStringCommand" date="Mon Feb 01 22:09:35 EST 2021" starttimestamp="1612231299681" timestamp="4075890" timestamp2="4075890">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7034" _type="InsertStringCommand" date="Mon Feb 01 22:09:36 EST 2021" starttimestamp="1612231299681" timestamp="4077242" timestamp2="4077242">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7035" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:36 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4077275" />
  <Command __id="7040" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:40 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4080636" />
  <Command __id="7042" _type="InsertStringCommand" date="Mon Feb 01 22:09:40 EST 2021" starttimestamp="1612231299681" timestamp="4080729" timestamp2="4080729">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7043" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:40 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4080766" />
  <Command __id="7044" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:40 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4080791" />
  <Command __id="7046" _type="InsertStringCommand" date="Mon Feb 01 22:09:40 EST 2021" starttimestamp="1612231299681" timestamp="4080805" timestamp2="4080805">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7048" _type="InsertStringCommand" date="Mon Feb 01 22:09:40 EST 2021" starttimestamp="1612231299681" timestamp="4080904" timestamp2="4080904">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7049" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:40 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4080944" />
  <Command __id="7050" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:40 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4080977" />
  <Command __id="7052" _type="InsertStringCommand" date="Mon Feb 01 22:09:40 EST 2021" starttimestamp="1612231299681" timestamp="4081077" timestamp2="4081077">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7054" _type="InsertStringCommand" date="Mon Feb 01 22:09:40 EST 2021" starttimestamp="1612231299681" timestamp="4081221" timestamp2="4081221">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="7056" _type="InsertStringCommand" date="Mon Feb 01 22:09:40 EST 2021" starttimestamp="1612231299681" timestamp="4081307" timestamp2="4081307">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7058" _type="InsertStringCommand" date="Mon Feb 01 22:09:43 EST 2021" starttimestamp="1612231299681" timestamp="4083534" timestamp2="4083534">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7060" _type="InsertStringCommand" date="Mon Feb 01 22:09:43 EST 2021" starttimestamp="1612231299681" timestamp="4083627" timestamp2="4083627">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7061" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:43 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4083718" />
  <Command __id="7064" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:43 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4083937" />
  <DocumentChange __id="7057" _type="Insert" date="Mon Feb 01 22:09:43 EST 2021" docASTNodeCount="6145" docActiveCodeLength="35399" docExpressionCount="4129" docLength="36456" length="6" offset="34948" repeat="6" starttimestamp="1612231299681" timestamp="4083528" timestamp2="4084086">
    <text><![CDATA[nelxin]]></text>
  </DocumentChange>
  <DocumentChange __id="7073" _type="Delete" date="Mon Feb 01 22:09:44 EST 2021" docASTNodeCount="6145" docActiveCodeLength="35395" docExpressionCount="4129" docLength="36452" endLine="1006" length="4" offset="34950" repeat="4" startLine="1006" starttimestamp="1612231299681" timestamp="4084516" timestamp2="4084890">
    <text><![CDATA[lxin]]></text>
  </DocumentChange>
  <DocumentChange __id="7081" _type="Insert" date="Mon Feb 01 22:09:45 EST 2021" docASTNodeCount="6145" docActiveCodeLength="35397" docExpressionCount="4129" docLength="36454" length="2" offset="34950" repeat="2" starttimestamp="1612231299681" timestamp="4085329" timestamp2="4085663">
    <text><![CDATA[xl]]></text>
  </DocumentChange>
  <DocumentChange __id="7086" _type="Replace" date="Mon Feb 01 22:09:45 EST 2021" docASTNodeCount="6145" docActiveCodeLength="35401" docExpressionCount="4129" docLength="36458" endLine="1006" insertionLength="8" int_docASTNodeCount="6143" int_docActiveCodeLength="35393" int_docExpressionCount="4128" int_docLength="36450" length="4" offset="34948" startLine="1006" starttimestamp="1612231299681" timestamp="4086149">
    <deletedText><![CDATA[nexl]]></deletedText>
    <insertedText><![CDATA[nextLine]]></insertedText>
  </DocumentChange>
  <Command __id="7066" _type="InsertStringCommand" date="Mon Feb 01 22:09:43 EST 2021" starttimestamp="1612231299681" timestamp="4084006" timestamp2="4084006">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7067" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:43 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4084045" />
  <Command __id="7068" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:43 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4084079" />
  <Command __id="7070" _type="InsertStringCommand" date="Mon Feb 01 22:09:43 EST 2021" starttimestamp="1612231299681" timestamp="4084092" timestamp2="4084092">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7071" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:43 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4084184" />
  <Command __id="7072" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:43 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4084223" />
  <Command __id="7074" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:09:44 EST 2021" starttimestamp="1612231299681" timestamp="4084519" />
  <Command __id="7076" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:09:44 EST 2021" starttimestamp="1612231299681" timestamp="4084639" />
  <Command __id="7078" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:09:44 EST 2021" starttimestamp="1612231299681" timestamp="4084777" />
  <Command __id="7080" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:09:44 EST 2021" starttimestamp="1612231299681" timestamp="4084893" />
  <Command __id="7082" _type="InsertStringCommand" date="Mon Feb 01 22:09:45 EST 2021" starttimestamp="1612231299681" timestamp="4085336" timestamp2="4085336">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="7083" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:45 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4085428" />
  <Command __id="7085" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:45 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4086141" />
  <Command __id="7087" _type="InsertStringCommand" date="Mon Feb 01 22:09:45 EST 2021" starttimestamp="1612231299681" timestamp="4086158" timestamp2="4086158">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7089" _type="InsertStringCommand" date="Mon Feb 01 22:09:46 EST 2021" starttimestamp="1612231299681" timestamp="4086574" timestamp2="4086574">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7090" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:09:46 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4086614" />
  <Command __id="7094" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:48 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4088339" />
  <Command __id="7096" _type="InsertStringCommand" date="Mon Feb 01 22:09:48 EST 2021" starttimestamp="1612231299681" timestamp="4088449" timestamp2="4088449">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7098" _type="InsertStringCommand" date="Mon Feb 01 22:09:48 EST 2021" starttimestamp="1612231299681" timestamp="4088963" timestamp2="4088963">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7100" _type="InsertStringCommand" date="Mon Feb 01 22:09:49 EST 2021" starttimestamp="1612231299681" timestamp="4089630" timestamp2="4089630">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="7102" _type="InsertStringCommand" date="Mon Feb 01 22:09:49 EST 2021" starttimestamp="1612231299681" timestamp="4089718" timestamp2="4089718">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7103" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:09:49 EST 2021" starttimestamp="1612231299681" timestamp="4090154" />
  <Command __id="7105" _type="InsertStringCommand" date="Mon Feb 01 22:09:50 EST 2021" starttimestamp="1612231299681" timestamp="4090718" timestamp2="4090718">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7106" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:09:50 EST 2021" starttimestamp="1612231299681" timestamp="4091305" />
  <Command __id="7107" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:09:51 EST 2021" starttimestamp="1612231299681" timestamp="4091610" />
  <Command __id="7109" _type="InsertStringCommand" date="Mon Feb 01 22:09:51 EST 2021" starttimestamp="1612231299681" timestamp="4092055" timestamp2="4092055">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7110" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:09:57 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4098025" />
  <Command __id="7111" _type="MoveCaretCommand" caretOffset="3897" date="Mon Feb 01 22:09:57 EST 2021" docOffset="34938" starttimestamp="1612231299681" timestamp="4098137" />
  <Command __id="7113" _type="InsertStringCommand" date="Mon Feb 01 22:09:58 EST 2021" starttimestamp="1612231299681" timestamp="4098830" timestamp2="4098830">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="7115" _type="InsertStringCommand" date="Mon Feb 01 22:09:58 EST 2021" starttimestamp="1612231299681" timestamp="4098876" timestamp2="4098876">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="7116" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:09:59 EST 2021" starttimestamp="1612231299681" timestamp="4099488" />
  <Command __id="7117" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:09:59 EST 2021" starttimestamp="1612231299681" timestamp="4100006" />
  <Command __id="7118" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:10:00 EST 2021" starttimestamp="1612231299681" timestamp="4100431" />
  <Command __id="7119" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:10:00 EST 2021" starttimestamp="1612231299681" timestamp="4101217" />
  <DocumentChange __id="7088" _type="Insert" date="Mon Feb 01 22:09:46 EST 2021" docASTNodeCount="6147" docActiveCodeLength="35405" docExpressionCount="4131" docLength="36462" length="4" offset="34956" repeat="4" starttimestamp="1612231299681" timestamp="4086567" timestamp2="4088081">
    <text><![CDATA[.spl]]></text>
  </DocumentChange>
  <DocumentChange __id="7095" _type="Replace" date="Mon Feb 01 22:09:48 EST 2021" docASTNodeCount="6148" docActiveCodeLength="35414" docExpressionCount="4132" docLength="36471" endLine="1006" insertionLength="12" int_docASTNodeCount="6145" int_docActiveCodeLength="35402" int_docExpressionCount="4130" int_docLength="36459" length="3" offset="34957" startLine="1006" starttimestamp="1612231299681" timestamp="4088346">
    <deletedText><![CDATA[spl]]></deletedText>
    <insertedText><![CDATA[split(regex)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7097" _type="Replace" date="Mon Feb 01 22:09:48 EST 2021" docASTNodeCount="5976" docActiveCodeLength="35410" docExpressionCount="4023" docLength="36467" endLine="1006" insertionLength="1" int_docASTNodeCount="6147" int_docActiveCodeLength="35409" int_docExpressionCount="4131" int_docLength="36466" length="5" offset="34963" startLine="1006" starttimestamp="1612231299681" timestamp="4088953">
    <deletedText><![CDATA[regex]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7099" _type="Insert" date="Mon Feb 01 22:09:49 EST 2021" docASTNodeCount="5976" docActiveCodeLength="35412" docExpressionCount="4023" docLength="36469" length="2" offset="34964" repeat="2" starttimestamp="1612231299681" timestamp="4089627" timestamp2="4089715">
    <text><![CDATA[\t]]></text>
  </DocumentChange>
  <DocumentChange __id="7104" _type="Insert" date="Mon Feb 01 22:09:50 EST 2021" docASTNodeCount="5976" docActiveCodeLength="35413" docExpressionCount="4023" docLength="36470" length="1" offset="34967" starttimestamp="1612231299681" timestamp="4090711">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="7108" _type="Insert" date="Mon Feb 01 22:09:51 EST 2021" docASTNodeCount="6148" docActiveCodeLength="35414" docExpressionCount="4132" docLength="36471" length="1" offset="34966" starttimestamp="1612231299681" timestamp="4092046">
    <text><![CDATA["]]></text>
  </DocumentChange>
  <DocumentChange __id="7112" _type="Insert" date="Mon Feb 01 22:09:58 EST 2021" docASTNodeCount="6149" docActiveCodeLength="35416" docExpressionCount="4132" docLength="36473" length="2" offset="34938" repeat="2" starttimestamp="1612231299681" timestamp="4098822" timestamp2="4098867">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="7121" _type="Insert" date="Mon Feb 01 22:10:04 EST 2021" docASTNodeCount="6150" docActiveCodeLength="35425" docExpressionCount="4131" docLength="36482" length="9" offset="34971" repeat="3" starttimestamp="1612231299681" timestamp="4104493" timestamp2="4105662">
    <text><![CDATA[
					if]]></text>
  </DocumentChange>
  <DocumentChange __id="7128" _type="Replace" date="Mon Feb 01 22:10:05 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35468" docExpressionCount="4133" docLength="36525" endLine="1007" insertionLength="45" int_docASTNodeCount="6149" int_docActiveCodeLength="35423" int_docExpressionCount="4132" int_docLength="36480" length="2" offset="34978" startLine="1007" starttimestamp="1612231299681" timestamp="4105715">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
						
					}]]></insertedText>
  </DocumentChange>
  <Command __id="7120" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:10:03 EST 2021" starttimestamp="1612231299681" timestamp="4104233" />
  <Command __id="7122" _type="InsertStringCommand" date="Mon Feb 01 22:10:04 EST 2021" starttimestamp="1612231299681" timestamp="4104505" timestamp2="4104505">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7124" _type="InsertStringCommand" date="Mon Feb 01 22:10:05 EST 2021" starttimestamp="1612231299681" timestamp="4105457" timestamp2="4105457">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7125" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:10:05 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4105500" />
  <Command __id="7127" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:10:05 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4105681" />
  <Command __id="7129" _type="InsertStringCommand" date="Mon Feb 01 22:10:05 EST 2021" starttimestamp="1612231299681" timestamp="4105792" timestamp2="4105792">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7131" _type="InsertStringCommand" date="Mon Feb 01 22:10:06 EST 2021" starttimestamp="1612231299681" timestamp="4107231" timestamp2="4107231">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7132" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:10:06 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4107264" />
  <Command __id="7137" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:10:07 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4107869" />
  <Command __id="7139" _type="InsertStringCommand" date="Mon Feb 01 22:10:07 EST 2021" starttimestamp="1612231299681" timestamp="4107884" timestamp2="4107884">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7141" _type="InsertStringCommand" date="Mon Feb 01 22:10:07 EST 2021" starttimestamp="1612231299681" timestamp="4108275" timestamp2="4108275">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7142" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:10:07 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4108313" />
  <Command __id="7145" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:10:08 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4109050" />
  <Command __id="7147" _type="InsertStringCommand" date="Mon Feb 01 22:10:08 EST 2021" starttimestamp="1612231299681" timestamp="4109068" timestamp2="4109068">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7149" _type="InsertStringCommand" date="Mon Feb 01 22:10:09 EST 2021" starttimestamp="1612231299681" timestamp="4109356" timestamp2="4109356">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:10:09 EST 2021" starttimestamp="1612231299681" timestamp="4110117" />
  <Command __id="7153" _type="InsertStringCommand" date="Mon Feb 01 22:10:10 EST 2021" starttimestamp="1612231299681" timestamp="4110597" timestamp2="4110597">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7155" _type="InsertStringCommand" date="Mon Feb 01 22:10:10 EST 2021" starttimestamp="1612231299681" timestamp="4110904" timestamp2="4110904">
    <data><![CDATA[>]]></data>
  </Command>
  <Command __id="7157" _type="InsertStringCommand" date="Mon Feb 01 22:10:10 EST 2021" starttimestamp="1612231299681" timestamp="4110985" timestamp2="4110985">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7159" _type="InsertStringCommand" date="Mon Feb 01 22:10:10 EST 2021" starttimestamp="1612231299681" timestamp="4111187" timestamp2="4111187">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="7161" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:10:11 EST 2021" starttimestamp="1612231299681" timestamp="4111840" />
  <Command __id="7163" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:10:11 EST 2021" starttimestamp="1612231299681" timestamp="4112010" />
  <Command __id="7165" _type="InsertStringCommand" date="Mon Feb 01 22:10:12 EST 2021" starttimestamp="1612231299681" timestamp="4112784" timestamp2="4112784">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="7167" _type="InsertStringCommand" date="Mon Feb 01 22:10:12 EST 2021" starttimestamp="1612231299681" timestamp="4112854" timestamp2="4112854">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7169" _type="InsertStringCommand" date="Mon Feb 01 22:10:12 EST 2021" starttimestamp="1612231299681" timestamp="4112956" timestamp2="4112956">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="7171" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:10:12 EST 2021" starttimestamp="1612231299681" timestamp="4113232" />
  <Command __id="7173" _type="InsertStringCommand" date="Mon Feb 01 22:10:12 EST 2021" starttimestamp="1612231299681" timestamp="4113318" timestamp2="4113318">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="7174" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:10:13 EST 2021" starttimestamp="1612231299681" timestamp="4114102" />
  <Command __id="7175" _type="SelectTextCommand" caretOffset="3985" date="Mon Feb 01 22:10:16 EST 2021" end="4280" start="3985" starttimestamp="1612231299681" timestamp="4117211" />
  <Command __id="7177" _type="CutCommand" date="Mon Feb 01 22:10:17 EST 2021" starttimestamp="1612231299681" timestamp="4117353" />
  <Command __id="7178" _type="MoveCaretCommand" caretOffset="3970" date="Mon Feb 01 22:10:17 EST 2021" docOffset="35011" starttimestamp="1612231299681" timestamp="4117557" />
  <Command __id="7180" _type="PasteCommand" date="Mon Feb 01 22:10:17 EST 2021" starttimestamp="1612231299681" timestamp="4117808" />
  <Command __id="7181" _type="SelectTextCommand" caretOffset="4017" date="Mon Feb 01 22:10:21 EST 2021" end="4017" start="3977" starttimestamp="1612231299681" timestamp="4122057" />
  <Command __id="7183" _type="InsertStringCommand" date="Mon Feb 01 22:10:22 EST 2021" starttimestamp="1612231299681" timestamp="4122785" timestamp2="4122785">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7184" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:10:22 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4122813" />
  <Command __id="7188" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:10:23 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4123494" />
  <Command __id="7190" _type="InsertStringCommand" date="Mon Feb 01 22:10:23 EST 2021" starttimestamp="1612231299681" timestamp="4123510" timestamp2="4123510">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7192" _type="InsertStringCommand" date="Mon Feb 01 22:10:23 EST 2021" starttimestamp="1612231299681" timestamp="4124040" timestamp2="4124040">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="7194" _type="InsertStringCommand" date="Mon Feb 01 22:10:24 EST 2021" starttimestamp="1612231299681" timestamp="4124644" timestamp2="4124644">
    <data><![CDATA[0]]></data>
  </Command>
  <DocumentChange __id="7130" _type="Replace" date="Mon Feb 01 22:10:06 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35447" docExpressionCount="4133" docLength="36504" endLine="1007" insertionLength="1" int_docASTNodeCount="6152" int_docActiveCodeLength="35446" int_docExpressionCount="4133" int_docLength="36503" length="22" offset="34982" startLine="1007" starttimestamp="1612231299681" timestamp="4107221">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7133" _type="Insert" date="Mon Feb 01 22:10:07 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35451" docExpressionCount="4133" docLength="36508" length="4" offset="34983" repeat="4" starttimestamp="1612231299681" timestamp="4107455" timestamp2="4107614">
    <text><![CDATA[oken]]></text>
  </DocumentChange>
  <DocumentChange __id="7138" _type="Replace" date="Mon Feb 01 22:10:07 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35452" docExpressionCount="4133" docLength="36509" endLine="1007" insertionLength="6" int_docASTNodeCount="6152" int_docActiveCodeLength="35446" int_docExpressionCount="4133" int_docLength="36503" length="5" offset="34982" startLine="1007" starttimestamp="1612231299681" timestamp="4107876">
    <deletedText><![CDATA[token]]></deletedText>
    <insertedText><![CDATA[tokens]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7140" _type="Insert" date="Mon Feb 01 22:10:07 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35455" docExpressionCount="4135" docLength="36512" length="3" offset="34988" repeat="3" starttimestamp="1612231299681" timestamp="4108270" timestamp2="4108955">
    <text><![CDATA[.le]]></text>
  </DocumentChange>
  <DocumentChange __id="7146" _type="Replace" date="Mon Feb 01 22:10:08 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35459" docExpressionCount="4135" docLength="36516" endLine="1007" insertionLength="6" int_docASTNodeCount="6154" int_docActiveCodeLength="35453" int_docExpressionCount="4134" int_docLength="36510" length="2" offset="34989" startLine="1007" starttimestamp="1612231299681" timestamp="4109059">
    <deletedText><![CDATA[le]]></deletedText>
    <insertedText><![CDATA[length]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7148" _type="Insert" date="Mon Feb 01 22:10:09 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35460" docExpressionCount="4135" docLength="36517" length="1" offset="34995" starttimestamp="1612231299681" timestamp="4109354">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="7150" _type="Delete" date="Mon Feb 01 22:10:09 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35459" docExpressionCount="4135" docLength="36516" endLine="1007" length="1" offset="34995" startLine="1007" starttimestamp="1612231299681" timestamp="4110114">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="7152" _type="Insert" date="Mon Feb 01 22:10:10 EST 2021" docASTNodeCount="6156" docActiveCodeLength="35463" docExpressionCount="4137" docLength="36520" length="4" offset="34995" repeat="4" starttimestamp="1612231299681" timestamp="4110594" timestamp2="4111184">
    <text><![CDATA[ > 3]]></text>
  </DocumentChange>
  <DocumentChange __id="7160" _type="Delete" date="Mon Feb 01 22:10:11 EST 2021" docASTNodeCount="6052" docActiveCodeLength="35461" docExpressionCount="4061" docLength="36518" endLine="1007" length="2" offset="34997" repeat="2" startLine="1007" starttimestamp="1612231299681" timestamp="4111837" timestamp2="4112005">
    <text><![CDATA[ 3]]></text>
  </DocumentChange>
  <DocumentChange __id="7164" _type="Insert" date="Mon Feb 01 22:10:12 EST 2021" docASTNodeCount="6156" docActiveCodeLength="35464" docExpressionCount="4137" docLength="36521" length="3" offset="34997" repeat="3" starttimestamp="1612231299681" timestamp="4112780" timestamp2="4112954">
    <text><![CDATA[= 2]]></text>
  </DocumentChange>
  <DocumentChange __id="7170" _type="Delete" date="Mon Feb 01 22:10:12 EST 2021" docASTNodeCount="6052" docActiveCodeLength="35463" docExpressionCount="4061" docLength="36520" endLine="1007" length="1" offset="34999" startLine="1007" starttimestamp="1612231299681" timestamp="4113230">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="7172" _type="Insert" date="Mon Feb 01 22:10:12 EST 2021" docASTNodeCount="6156" docActiveCodeLength="35464" docExpressionCount="4137" docLength="36521" length="1" offset="34999" starttimestamp="1612231299681" timestamp="4113315">
    <text><![CDATA[3]]></text>
  </DocumentChange>
  <DocumentChange __id="7176" _type="Delete" date="Mon Feb 01 22:10:17 EST 2021" docASTNodeCount="6103" docActiveCodeLength="35169" docExpressionCount="4089" docLength="36226" endLine="1014" length="295" offset="35026" startLine="1010" starttimestamp="1612231299681" timestamp="4117333">
    <text><![CDATA[date = format.parse(nextLine.substring(0, 21));
					keyword = nextLine.substring(nextLine.indexOf("\t")+1, nextLine.indexOf("\t", nextLine.indexOf("\t")+1));
					if (nextLine.contains("\tdata")) {
						url = nextLine.substring(nextLine.indexOf("http"), nextLine.indexOf("\tdata"));
					}]]></text>
  </DocumentChange>
  <DocumentChange __id="7179" _type="Replace" date="Mon Feb 01 22:10:17 EST 2021" docASTNodeCount="6156" docActiveCodeLength="35468" docExpressionCount="4137" docLength="36525" endLine="1008" insertionLength="305" int_docASTNodeCount="6103" int_docActiveCodeLength="35163" int_docExpressionCount="4089" int_docLength="36220" length="6" offset="35005" startLine="1008" starttimestamp="1612231299681" timestamp="4117789">
    <deletedText><![CDATA[						]]></deletedText>
    <insertedText><![CDATA[						date = format.parse(nextLine.substring(0, 21));
						keyword = nextLine.substring(nextLine.indexOf("\t")+1, nextLine.indexOf("\t", nextLine.indexOf("\t")+1));
						if (nextLine.contains("\tdata")) {
							url = nextLine.substring(nextLine.indexOf("http"), nextLine.indexOf("\tdata"));
						}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7182" _type="Replace" date="Mon Feb 01 22:10:22 EST 2021" docASTNodeCount="6149" docActiveCodeLength="35429" docExpressionCount="4130" docLength="36486" endLine="1008" insertionLength="1" int_docASTNodeCount="6147" int_docActiveCodeLength="35428" int_docExpressionCount="4129" int_docLength="36485" length="40" offset="35018" startLine="1008" starttimestamp="1612231299681" timestamp="4122769">
    <deletedText><![CDATA[format.parse(nextLine.substring(0, 21));]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7185" _type="Insert" date="Mon Feb 01 22:10:22 EST 2021" docASTNodeCount="6149" docActiveCodeLength="35432" docExpressionCount="4130" docLength="36489" length="3" offset="35019" repeat="3" starttimestamp="1612231299681" timestamp="4123015" timestamp2="4123105">
    <text><![CDATA[oke]]></text>
  </DocumentChange>
  <DocumentChange __id="7189" _type="Replace" date="Mon Feb 01 22:10:23 EST 2021" docASTNodeCount="6149" docActiveCodeLength="35434" docExpressionCount="4130" docLength="36491" endLine="1008" insertionLength="6" int_docASTNodeCount="6147" int_docActiveCodeLength="35428" int_docExpressionCount="4129" int_docLength="36485" length="4" offset="35018" startLine="1008" starttimestamp="1612231299681" timestamp="4123502">
    <deletedText><![CDATA[toke]]></deletedText>
    <insertedText><![CDATA[tokens]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7191" _type="Insert" date="Mon Feb 01 22:10:23 EST 2021" docASTNodeCount="6151" docActiveCodeLength="35438" docExpressionCount="4132" docLength="36495" length="4" offset="35024" repeat="3" starttimestamp="1612231299681" timestamp="4124036" timestamp2="4126061">
    <text><![CDATA[[0];]]></text>
  </DocumentChange>
  <Command __id="7195" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:10:25 EST 2021" starttimestamp="1612231299681" timestamp="4125669" />
  <Command __id="7197" _type="InsertStringCommand" date="Mon Feb 01 22:10:25 EST 2021" starttimestamp="1612231299681" timestamp="4126069" timestamp2="4126069">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="7198" _type="Delete" date="Mon Feb 01 22:10:31 EST 2021" docASTNodeCount="6151" docActiveCodeLength="35437" docExpressionCount="4132" docLength="36494" endLine="1008" length="1" offset="35027" startLine="1008" starttimestamp="1612231299681" timestamp="4131548">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="7199" _type="UndoCommand" date="Mon Feb 01 22:10:31 EST 2021" starttimestamp="1612231299681" timestamp="4131561" />
  <DocumentChange __id="7200" _type="Delete" date="Mon Feb 01 22:10:31 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35436" docExpressionCount="4131" docLength="36493" endLine="1008" length="1" offset="35025" startLine="1008" starttimestamp="1612231299681" timestamp="4131729">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <Command __id="7201" _type="UndoCommand" date="Mon Feb 01 22:10:31 EST 2021" starttimestamp="1612231299681" timestamp="4131768" />
  <DocumentChange __id="7202" _type="Delete" date="Mon Feb 01 22:10:31 EST 2021" docASTNodeCount="6149" docActiveCodeLength="35434" docExpressionCount="4130" docLength="36491" endLine="1008" length="2" offset="35024" startLine="1008" starttimestamp="1612231299681" timestamp="4131877">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <Command __id="7203" _type="UndoCommand" date="Mon Feb 01 22:10:31 EST 2021" starttimestamp="1612231299681" timestamp="4131884" />
  <DocumentChange __id="7204" _type="Replace" date="Mon Feb 01 22:10:31 EST 2021" docASTNodeCount="6149" docActiveCodeLength="35432" docExpressionCount="4130" docLength="36489" endLine="1008" insertionLength="4" int_docASTNodeCount="6147" int_docActiveCodeLength="35428" int_docExpressionCount="4129" int_docLength="36485" length="6" offset="35018" startLine="1008" starttimestamp="1612231299681" timestamp="4132162">
    <deletedText><![CDATA[tokens]]></deletedText>
    <insertedText><![CDATA[toke]]></insertedText>
  </DocumentChange>
  <Command __id="7205" _type="UndoCommand" date="Mon Feb 01 22:10:31 EST 2021" starttimestamp="1612231299681" timestamp="4132216" />
  <DocumentChange __id="7206" _type="Delete" date="Mon Feb 01 22:10:31 EST 2021" docASTNodeCount="6149" docActiveCodeLength="35429" docExpressionCount="4130" docLength="36486" endLine="1008" length="3" offset="35019" startLine="1008" starttimestamp="1612231299681" timestamp="4132273">
    <text><![CDATA[oke]]></text>
  </DocumentChange>
  <Command __id="7207" _type="UndoCommand" date="Mon Feb 01 22:10:31 EST 2021" starttimestamp="1612231299681" timestamp="4132282" />
  <Command __id="7209" _type="UndoCommand" date="Mon Feb 01 22:10:32 EST 2021" starttimestamp="1612231299681" timestamp="4132595" />
  <Command __id="7210" _type="MoveCaretCommand" caretOffset="4000" date="Mon Feb 01 22:10:33 EST 2021" docOffset="35041" starttimestamp="1612231299681" timestamp="4133737" />
  <DocumentChange __id="7208" _type="Replace" date="Mon Feb 01 22:10:32 EST 2021" docASTNodeCount="6156" docActiveCodeLength="35468" docExpressionCount="4137" docLength="36525" endLine="1008" insertionLength="40" int_docASTNodeCount="6147" int_docActiveCodeLength="35428" int_docExpressionCount="4129" int_docLength="36485" length="1" offset="35018" startLine="1008" starttimestamp="1612231299681" timestamp="4132586">
    <deletedText><![CDATA[t]]></deletedText>
    <insertedText><![CDATA[format.parse(nextLine.substring(0, 21));]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7212" _type="Replace" date="Mon Feb 01 22:10:35 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35444" docExpressionCount="4133" docLength="36501" endLine="1008" insertionLength="1" int_docASTNodeCount="6151" int_docActiveCodeLength="35443" int_docExpressionCount="4132" int_docLength="36500" length="25" offset="35031" startLine="1008" starttimestamp="1612231299681" timestamp="4135895">
    <deletedText><![CDATA[nextLine.substring(0, 21)]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7215" _type="Insert" date="Mon Feb 01 22:10:35 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35450" docExpressionCount="4134" docLength="36507" length="6" offset="35032" repeat="6" starttimestamp="1612231299681" timestamp="4136100" timestamp2="4136878">
    <text><![CDATA[okens.]]></text>
  </DocumentChange>
  <Command __id="7211" _type="SelectTextCommand" caretOffset="4015" date="Mon Feb 01 22:10:34 EST 2021" end="4015" start="3990" starttimestamp="1612231299681" timestamp="4135316" />
  <Command __id="7213" _type="InsertStringCommand" date="Mon Feb 01 22:10:35 EST 2021" starttimestamp="1612231299681" timestamp="4135906" timestamp2="4135906">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7214" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:10:35 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4135939" />
  <Command __id="7220" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:10:36 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4136661" />
  <Command __id="7221" _type="InsertStringCommand" date="Mon Feb 01 22:10:36 EST 2021" starttimestamp="1612231299681" timestamp="4136665" timestamp2="4136665">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7223" _type="InsertStringCommand" date="Mon Feb 01 22:10:36 EST 2021" starttimestamp="1612231299681" timestamp="4136885" timestamp2="4136885">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7224" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:10:36 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4136925" />
  <Command __id="7227" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:10:40 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4141212" />
  <Command __id="7229" _type="InsertStringCommand" date="Mon Feb 01 22:10:41 EST 2021" starttimestamp="1612231299681" timestamp="4141536" timestamp2="4141536">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="7230" _type="InsertStringCommand" date="Mon Feb 01 22:10:41 EST 2021" starttimestamp="1612231299681" timestamp="4142089" timestamp2="4142089">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="7231" _type="SelectTextCommand" caretOffset="4114" date="Mon Feb 01 22:10:45 EST 2021" end="4114" start="4019" starttimestamp="1612231299681" timestamp="4145449" />
  <Command __id="7233" _type="InsertStringCommand" date="Mon Feb 01 22:10:45 EST 2021" starttimestamp="1612231299681" timestamp="4146225" timestamp2="4146225">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7235" _type="InsertStringCommand" date="Mon Feb 01 22:10:45 EST 2021" starttimestamp="1612231299681" timestamp="4146245" timestamp2="4146245">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7236" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:10:45 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4146286" />
  <Command __id="7240" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:10:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4146911" />
  <Command __id="7242" _type="InsertStringCommand" date="Mon Feb 01 22:10:46 EST 2021" starttimestamp="1612231299681" timestamp="4146931" timestamp2="4146931">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7244" _type="InsertStringCommand" date="Mon Feb 01 22:10:47 EST 2021" starttimestamp="1612231299681" timestamp="4147377" timestamp2="4147377">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="7246" _type="InsertStringCommand" date="Mon Feb 01 22:10:47 EST 2021" starttimestamp="1612231299681" timestamp="4147634" timestamp2="4147634">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="7247" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:10:47 EST 2021" starttimestamp="1612231299681" timestamp="4147977" />
  <Command __id="7249" _type="InsertStringCommand" date="Mon Feb 01 22:10:48 EST 2021" starttimestamp="1612231299681" timestamp="4148512" timestamp2="4148512">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="7225" _type="Delete" date="Mon Feb 01 22:10:40 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35449" docExpressionCount="4133" docLength="36506" endLine="1008" length="1" offset="35037" startLine="1008" starttimestamp="1612231299681" timestamp="4140807">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="7226" _type="Insert" date="Mon Feb 01 22:10:40 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35452" docExpressionCount="4135" docLength="36509" length="3" offset="35037" repeat="2" starttimestamp="1612231299681" timestamp="4141180" timestamp2="4141530">
    <text><![CDATA[[0]]]></text>
  </DocumentChange>
  <DocumentChange __id="7232" _type="Replace" date="Mon Feb 01 22:10:45 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35358" docExpressionCount="4117" docLength="36415" endLine="1009" insertionLength="1" int_docASTNodeCount="6134" int_docActiveCodeLength="35357" int_docExpressionCount="4115" int_docLength="36414" length="95" offset="35060" startLine="1009" starttimestamp="1612231299681" timestamp="4146213">
    <deletedText><![CDATA[nextLine.substring(nextLine.indexOf("\t")+1, nextLine.indexOf("\t", nextLine.indexOf("\t")+1));]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7234" _type="Insert" date="Mon Feb 01 22:10:45 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35362" docExpressionCount="4117" docLength="36419" length="4" offset="35061" repeat="4" starttimestamp="1612231299681" timestamp="4146240" timestamp2="4146551">
    <text><![CDATA[oken]]></text>
  </DocumentChange>
  <DocumentChange __id="7241" _type="Replace" date="Mon Feb 01 22:10:46 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35363" docExpressionCount="4117" docLength="36420" endLine="1009" insertionLength="6" int_docASTNodeCount="6134" int_docActiveCodeLength="35357" int_docExpressionCount="4115" int_docLength="36414" length="5" offset="35060" startLine="1009" starttimestamp="1612231299681" timestamp="4146919">
    <deletedText><![CDATA[token]]></deletedText>
    <insertedText><![CDATA[tokens]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7243" _type="Insert" date="Mon Feb 01 22:10:47 EST 2021" docASTNodeCount="6138" docActiveCodeLength="35367" docExpressionCount="4119" docLength="36424" length="4" offset="35066" repeat="3" starttimestamp="1612231299681" timestamp="4147373" timestamp2="4148504">
    <text><![CDATA[[1];]]></text>
  </DocumentChange>
  <DocumentChange __id="7251" _type="Replace" date="Mon Feb 01 22:10:54 EST 2021" docASTNodeCount="6120" docActiveCodeLength="35237" docExpressionCount="4103" docLength="36294" endLine="1012" insertionLength="1" int_docASTNodeCount="6118" int_docActiveCodeLength="35236" int_docExpressionCount="4102" int_docLength="36293" length="131" offset="35078" startLine="1010" starttimestamp="1612231299681" timestamp="4154445">
    <deletedText><![CDATA[if (nextLine.contains("\tdata")) {
							url = nextLine.substring(nextLine.indexOf("http"), nextLine.indexOf("\tdata"));
						}]]></deletedText>
    <insertedText><![CDATA[u]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7254" _type="Insert" date="Mon Feb 01 22:10:54 EST 2021" docASTNodeCount="6120" docActiveCodeLength="35239" docExpressionCount="4103" docLength="36296" length="2" offset="35079" repeat="2" starttimestamp="1612231299681" timestamp="4154672" timestamp2="4154685">
    <text><![CDATA[rl]]></text>
  </DocumentChange>
  <DocumentChange __id="7257" _type="Replace" date="Mon Feb 01 22:10:54 EST 2021" docASTNodeCount="6120" docActiveCodeLength="35240" docExpressionCount="4103" docLength="36297" endLine="1010" insertionLength="4" int_docASTNodeCount="6118" int_docActiveCodeLength="35236" int_docExpressionCount="4102" int_docLength="36293" length="3" offset="35078" startLine="1010" starttimestamp="1612231299681" timestamp="4155128">
    <deletedText><![CDATA[url]]></deletedText>
    <insertedText><![CDATA[url ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7259" _type="Insert" date="Mon Feb 01 22:10:54 EST 2021" docASTNodeCount="6124" docActiveCodeLength="35252" docExpressionCount="4107" docLength="36309" length="12" offset="35082" repeat="11" starttimestamp="1612231299681" timestamp="4155318" timestamp2="4158402">
    <text><![CDATA[= tokens[2];]]></text>
  </DocumentChange>
  <DocumentChange __id="7281" _type="Insert" date="Mon Feb 01 22:11:00 EST 2021" docASTNodeCount="6125" docActiveCodeLength="35275" docExpressionCount="4107" docLength="36332" length="23" offset="35102" repeat="8" starttimestamp="1612231299681" timestamp="4161219" timestamp2="4163170">
    <text><![CDATA[ else {
						
					}]]></text>
  </DocumentChange>
  <DocumentChange __id="7295" _type="Insert" date="Mon Feb 01 22:11:05 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35279" docExpressionCount="4108" docLength="36336" length="4" offset="35117" repeat="4" starttimestamp="1612231299681" timestamp="4166037" timestamp2="4166573">
    <text><![CDATA[date]]></text>
  </DocumentChange>
  <Command __id="7250" _type="SelectTextCommand" caretOffset="4168" date="Mon Feb 01 22:10:53 EST 2021" end="4168" start="4037" starttimestamp="1612231299681" timestamp="4153881" />
  <Command __id="7252" _type="InsertStringCommand" date="Mon Feb 01 22:10:54 EST 2021" starttimestamp="1612231299681" timestamp="4154471" timestamp2="4154471">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="7253" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:10:54 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4154487" />
  <Command __id="7256" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:10:54 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4155116" />
  <Command __id="7258" _type="InsertStringCommand" date="Mon Feb 01 22:10:54 EST 2021" starttimestamp="1612231299681" timestamp="4155138" timestamp2="4155138">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7260" _type="InsertStringCommand" date="Mon Feb 01 22:10:55 EST 2021" starttimestamp="1612231299681" timestamp="4155322" timestamp2="4155322">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="7262" _type="InsertStringCommand" date="Mon Feb 01 22:10:55 EST 2021" starttimestamp="1612231299681" timestamp="4155419" timestamp2="4155419">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7264" _type="InsertStringCommand" date="Mon Feb 01 22:10:55 EST 2021" starttimestamp="1612231299681" timestamp="4155803" timestamp2="4155803">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7265" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:10:55 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4155844" />
  <Command __id="7271" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:10:56 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4156932" />
  <Command __id="7272" _type="InsertStringCommand" date="Mon Feb 01 22:10:56 EST 2021" starttimestamp="1612231299681" timestamp="4156937" timestamp2="4156937">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7274" _type="InsertStringCommand" date="Mon Feb 01 22:10:57 EST 2021" starttimestamp="1612231299681" timestamp="4157422" timestamp2="4157422">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="7276" _type="InsertStringCommand" date="Mon Feb 01 22:10:57 EST 2021" starttimestamp="1612231299681" timestamp="4157570" timestamp2="4157570">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="7277" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:10:57 EST 2021" starttimestamp="1612231299681" timestamp="4158150" />
  <Command __id="7279" _type="InsertStringCommand" date="Mon Feb 01 22:10:58 EST 2021" starttimestamp="1612231299681" timestamp="4158410" timestamp2="4158410">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7280" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:10:58 EST 2021" starttimestamp="1612231299681" timestamp="4158907" />
  <Command __id="7282" _type="InsertStringCommand" date="Mon Feb 01 22:11:00 EST 2021" starttimestamp="1612231299681" timestamp="4161227" timestamp2="4161227">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7284" _type="InsertStringCommand" date="Mon Feb 01 22:11:01 EST 2021" starttimestamp="1612231299681" timestamp="4161395" timestamp2="4161395">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7285" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:01 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4161438" />
  <Command __id="7290" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:01 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4161712" />
  <Command __id="7292" _type="InsertStringCommand" date="Mon Feb 01 22:11:02 EST 2021" starttimestamp="1612231299681" timestamp="4162997" timestamp2="4162997">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="7294" _type="InsertStringCommand" date="Mon Feb 01 22:11:02 EST 2021" starttimestamp="1612231299681" timestamp="4163178" timestamp2="4163178">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7296" _type="InsertStringCommand" date="Mon Feb 01 22:11:05 EST 2021" starttimestamp="1612231299681" timestamp="4166043" timestamp2="4166043">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7297" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:05 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4166075" />
  <DocumentChange __id="7301" _type="Delete" date="Mon Feb 01 22:11:09 EST 2021" docASTNodeCount="6125" docActiveCodeLength="35267" docExpressionCount="4107" docLength="36324" endLine="1013" length="12" offset="35111" startLine="1012" starttimestamp="1612231299681" timestamp="4170065">
    <text><![CDATA[						date
]]></text>
  </DocumentChange>
  <Command __id="7302" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:11:09 EST 2021" starttimestamp="1612231299681" timestamp="4170068" />
  <Command __id="7304" _type="UndoCommand" date="Mon Feb 01 22:11:10 EST 2021" starttimestamp="1612231299681" timestamp="4170956" />
  <Command __id="7305" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:12 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4172594" />
  <Command __id="7306" _type="MoveCaretCommand" caretOffset="4080" date="Mon Feb 01 22:11:12 EST 2021" docOffset="35121" starttimestamp="1612231299681" timestamp="4172673" />
  <DocumentChange __id="7303" _type="Insert" date="Mon Feb 01 22:11:10 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35279" docExpressionCount="4108" docLength="36336" length="12" offset="35111" starttimestamp="1612231299681" timestamp="4170949">
    <text><![CDATA[						date
]]></text>
  </DocumentChange>
  <Command __id="7307" _type="MoveCaretCommand" caretOffset="4078" date="Mon Feb 01 22:11:13 EST 2021" docOffset="35119" starttimestamp="1612231299681" timestamp="4174312" />
  <Command __id="7308" _type="SelectTextCommand" caretOffset="4080" date="Mon Feb 01 22:11:14 EST 2021" end="4080" start="4076" starttimestamp="1612231299681" timestamp="4174488" />
  <DocumentChange __id="7309" _type="Replace" date="Mon Feb 01 22:11:16 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35276" docExpressionCount="4108" docLength="36333" endLine="1012" insertionLength="1" int_docASTNodeCount="6125" int_docActiveCodeLength="35275" int_docExpressionCount="4107" int_docLength="36332" length="4" offset="35117" startLine="1012" starttimestamp="1612231299681" timestamp="4176529">
    <deletedText><![CDATA[date]]></deletedText>
    <insertedText><![CDATA[d]]></insertedText>
  </DocumentChange>
  <Command __id="7310" _type="InsertStringCommand" date="Mon Feb 01 22:11:16 EST 2021" starttimestamp="1612231299681" timestamp="4176536" timestamp2="4176536">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7311" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:16 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4176562" />
  <DocumentChange __id="7312" _type="Insert" date="Mon Feb 01 22:11:16 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35279" docExpressionCount="4108" docLength="36336" length="3" offset="35118" repeat="3" starttimestamp="1612231299681" timestamp="4176758" timestamp2="4176787">
    <text><![CDATA[ate]]></text>
  </DocumentChange>
  <Command __id="7315" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:18 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4178790" />
  <DocumentChange __id="7316" _type="Replace" date="Mon Feb 01 22:11:18 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35279" docExpressionCount="4108" docLength="36336" endLine="1012" insertionLength="4" int_docASTNodeCount="6125" int_docActiveCodeLength="35275" int_docExpressionCount="4107" int_docLength="36332" length="4" offset="35117" startLine="1012" starttimestamp="1612231299681" timestamp="4178797">
    <deletedText><![CDATA[date]]></deletedText>
    <insertedText><![CDATA[Date]]></insertedText>
  </DocumentChange>
  <Command __id="7317" _type="InsertStringCommand" date="Mon Feb 01 22:11:18 EST 2021" starttimestamp="1612231299681" timestamp="4178808" timestamp2="4178808">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7318" _type="Replace" date="Mon Feb 01 22:11:19 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35279" docExpressionCount="4108" docLength="36336" endLine="1012" insertionLength="4" int_docASTNodeCount="6125" int_docActiveCodeLength="35275" int_docExpressionCount="4107" int_docLength="36332" length="4" offset="35117" startLine="1012" starttimestamp="1612231299681" timestamp="4180005">
    <deletedText><![CDATA[Date]]></deletedText>
    <insertedText><![CDATA[date]]></insertedText>
  </DocumentChange>
  <Command __id="7319" _type="UndoCommand" date="Mon Feb 01 22:11:19 EST 2021" starttimestamp="1612231299681" timestamp="4180046" />
  <DocumentChange __id="7320" _type="Replace" date="Mon Feb 01 22:11:20 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35276" docExpressionCount="4108" docLength="36333" endLine="1012" insertionLength="1" int_docASTNodeCount="6125" int_docActiveCodeLength="35275" int_docExpressionCount="4107" int_docLength="36332" length="4" offset="35117" startLine="1012" starttimestamp="1612231299681" timestamp="4180413">
    <deletedText><![CDATA[date]]></deletedText>
    <insertedText><![CDATA[d]]></insertedText>
  </DocumentChange>
  <Command __id="7321" _type="InsertStringCommand" date="Mon Feb 01 22:11:20 EST 2021" starttimestamp="1612231299681" timestamp="4180419" timestamp2="4180419">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7322" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:20 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4180456" />
  <DocumentChange __id="7323" _type="Insert" date="Mon Feb 01 22:11:20 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35279" docExpressionCount="4108" docLength="36336" length="3" offset="35118" repeat="3" starttimestamp="1612231299681" timestamp="4180609" timestamp2="4180735">
    <text><![CDATA[ate]]></text>
  </DocumentChange>
  <Command __id="7326" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:20 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4180839" />
  <DocumentChange __id="7327" _type="Replace" date="Mon Feb 01 22:11:20 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35280" docExpressionCount="4108" docLength="36337" endLine="1012" insertionLength="5" int_docASTNodeCount="6125" int_docActiveCodeLength="35275" int_docExpressionCount="4107" int_docLength="36332" length="4" offset="35117" startLine="1012" starttimestamp="1612231299681" timestamp="4180847">
    <deletedText><![CDATA[date]]></deletedText>
    <insertedText><![CDATA[date ]]></insertedText>
  </DocumentChange>
  <Command __id="7328" _type="InsertStringCommand" date="Mon Feb 01 22:11:20 EST 2021" starttimestamp="1612231299681" timestamp="4180858" timestamp2="4180858">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="7329" _type="Insert" date="Mon Feb 01 22:11:20 EST 2021" docASTNodeCount="6131" docActiveCodeLength="35290" docExpressionCount="4111" docLength="36347" length="10" offset="35122" repeat="10" starttimestamp="1612231299681" timestamp="4181201" timestamp2="4182642">
    <text><![CDATA[= new date]]></text>
  </DocumentChange>
  <Command __id="7330" _type="InsertStringCommand" date="Mon Feb 01 22:11:20 EST 2021" starttimestamp="1612231299681" timestamp="4181206" timestamp2="4181206">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="7332" _type="InsertStringCommand" date="Mon Feb 01 22:11:20 EST 2021" starttimestamp="1612231299681" timestamp="4181314" timestamp2="4181314">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7334" _type="InsertStringCommand" date="Mon Feb 01 22:11:21 EST 2021" starttimestamp="1612231299681" timestamp="4181809" timestamp2="4181809">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7335" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:21 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4181843" />
  <Command __id="7339" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:21 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4182126" />
  <Command __id="7341" _type="InsertStringCommand" date="Mon Feb 01 22:11:21 EST 2021" starttimestamp="1612231299681" timestamp="4182222" timestamp2="4182222">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7343" _type="InsertStringCommand" date="Mon Feb 01 22:11:21 EST 2021" starttimestamp="1612231299681" timestamp="4182269" timestamp2="4182269">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7344" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:21 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4182310" />
  <Command __id="7347" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:23 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4183544" />
  <DocumentChange __id="7348" _type="Replace" date="Mon Feb 01 22:11:23 EST 2021" docASTNodeCount="6131" docActiveCodeLength="35292" docExpressionCount="4111" docLength="36349" endLine="1012" insertionLength="4" int_docASTNodeCount="6131" int_docActiveCodeLength="35288" int_docExpressionCount="4111" int_docLength="36345" length="2" offset="35128" startLine="1012" starttimestamp="1612231299681" timestamp="4183563">
    <deletedText><![CDATA[da]]></deletedText>
    <insertedText><![CDATA[Date]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7349" _type="Replace" date="Mon Feb 01 22:11:23 EST 2021" docASTNodeCount="6131" docActiveCodeLength="35292" docExpressionCount="4111" docLength="36349" endLine="1012" insertionLength="2" int_docASTNodeCount="6131" int_docActiveCodeLength="35290" int_docExpressionCount="4111" int_docLength="36347" length="2" offset="35132" startLine="1012" starttimestamp="1612231299681" timestamp="4183576">
    <deletedText><![CDATA[te]]></deletedText>
    <insertedText><![CDATA[()]]></insertedText>
  </DocumentChange>
  <Command __id="7350" _type="InsertStringCommand" date="Mon Feb 01 22:11:23 EST 2021" starttimestamp="1612231299681" timestamp="4183587" timestamp2="4183587">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7351" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:11:23 EST 2021" starttimestamp="1612231299681" timestamp="4184131" />
  <DocumentChange __id="7352" _type="Insert" date="Mon Feb 01 22:11:24 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35293" docExpressionCount="4112" docLength="36350" length="1" offset="35133" starttimestamp="1612231299681" timestamp="4184865">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <Command __id="7353" _type="InsertStringCommand" date="Mon Feb 01 22:11:24 EST 2021" starttimestamp="1612231299681" timestamp="4184876" timestamp2="4184876">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="7354" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:11:24 EST 2021" starttimestamp="1612231299681" timestamp="4185215" />
  <DocumentChange __id="7355" _type="Insert" date="Mon Feb 01 22:11:25 EST 2021" docASTNodeCount="6134" docActiveCodeLength="35305" docExpressionCount="4113" docLength="36362" length="12" offset="35135" repeat="5" starttimestamp="1612231299681" timestamp="4185645" timestamp2="4187164">
    <text><![CDATA[;
						key]]></text>
  </DocumentChange>
  <Command __id="7356" _type="InsertStringCommand" date="Mon Feb 01 22:11:25 EST 2021" starttimestamp="1612231299681" timestamp="4185654" timestamp2="4185654">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7358" _type="InsertStringCommand" date="Mon Feb 01 22:11:25 EST 2021" starttimestamp="1612231299681" timestamp="4186170" timestamp2="4186170">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7360" _type="InsertStringCommand" date="Mon Feb 01 22:11:26 EST 2021" starttimestamp="1612231299681" timestamp="4186927" timestamp2="4186927">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="7361" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:26 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4186969" />
  <Command __id="7364" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:27 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4187392" />
  <DocumentChange __id="7365" _type="Replace" date="Mon Feb 01 22:11:27 EST 2021" docASTNodeCount="6134" docActiveCodeLength="35309" docExpressionCount="4113" docLength="36366" endLine="1013" insertionLength="7" int_docASTNodeCount="6132" int_docActiveCodeLength="35302" int_docExpressionCount="4112" int_docLength="36359" length="3" offset="35144" startLine="1013" starttimestamp="1612231299681" timestamp="4187400">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[keyword]]></insertedText>
  </DocumentChange>
  <Command __id="7366" _type="InsertStringCommand" date="Mon Feb 01 22:11:27 EST 2021" starttimestamp="1612231299681" timestamp="4187409" timestamp2="4187409">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7367" _type="Insert" date="Mon Feb 01 22:11:27 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35316" docExpressionCount="4115" docLength="36373" length="7" offset="35151" repeat="7" starttimestamp="1612231299681" timestamp="4187943" timestamp2="4189499">
    <text><![CDATA[ = toke]]></text>
  </DocumentChange>
  <Command __id="7368" _type="InsertStringCommand" date="Mon Feb 01 22:11:27 EST 2021" starttimestamp="1612231299681" timestamp="4187948" timestamp2="4187948">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7370" _type="InsertStringCommand" date="Mon Feb 01 22:11:27 EST 2021" starttimestamp="1612231299681" timestamp="4188046" timestamp2="4188046">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="7372" _type="InsertStringCommand" date="Mon Feb 01 22:11:27 EST 2021" starttimestamp="1612231299681" timestamp="4188159" timestamp2="4188159">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7374" _type="InsertStringCommand" date="Mon Feb 01 22:11:28 EST 2021" starttimestamp="1612231299681" timestamp="4189147" timestamp2="4189147">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7375" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:28 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4189189" />
  <DocumentChange __id="7379" _type="Delete" date="Mon Feb 01 22:11:29 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35312" docExpressionCount="4112" docLength="36369" endLine="1013" length="4" offset="35154" repeat="4" startLine="1013" starttimestamp="1612231299681" timestamp="4190071" timestamp2="4190441">
    <text><![CDATA[toke]]></text>
  </DocumentChange>
  <DocumentChange __id="7383" _type="Insert" date="Mon Feb 01 22:11:30 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35315" docExpressionCount="4115" docLength="36372" length="3" offset="35154" repeat="2" starttimestamp="1612231299681" timestamp="4190884" timestamp2="4191130">
    <text><![CDATA[";"]]></text>
  </DocumentChange>
  <Command __id="7384" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:30 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4190895" />
  <Command __id="7386" _type="InsertStringCommand" date="Mon Feb 01 22:11:30 EST 2021" starttimestamp="1612231299681" timestamp="4191133" timestamp2="4191133">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="7387" _type="Delete" date="Mon Feb 01 22:11:31 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35314" docExpressionCount="4115" docLength="36371" endLine="1013" length="1" offset="35155" startLine="1013" starttimestamp="1612231299681" timestamp="4191799">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="7388" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:11:31 EST 2021" starttimestamp="1612231299681" timestamp="4191801" />
  <Command __id="7389" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:11:31 EST 2021" starttimestamp="1612231299681" timestamp="4192025" />
  <DocumentChange __id="7390" _type="Insert" date="Mon Feb 01 22:11:32 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35315" docExpressionCount="4115" docLength="36372" length="1" offset="35156" starttimestamp="1612231299681" timestamp="4192347">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="7391" _type="InsertStringCommand" date="Mon Feb 01 22:11:32 EST 2021" starttimestamp="1612231299681" timestamp="4192353" timestamp2="4192353">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7392" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:11:32 EST 2021" starttimestamp="1612231299681" timestamp="4192691" />
  <DocumentChange __id="7393" _type="Insert" date="Mon Feb 01 22:11:32 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35322" docExpressionCount="4115" docLength="36379" length="7" offset="35165" starttimestamp="1612231299681" timestamp="4192950">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <Command __id="7394" _type="InsertStringCommand" date="Mon Feb 01 22:11:32 EST 2021" starttimestamp="1612231299681" timestamp="4192962" timestamp2="4192962">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7395" _type="Delete" date="Mon Feb 01 22:11:33 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35308" docExpressionCount="4115" docLength="36365" endLine="1017" length="14" offset="35167" repeat="2" startLine="1015" starttimestamp="1612231299681" timestamp="4193762" timestamp2="4194303">
    <text><![CDATA[					
					
]]></text>
  </DocumentChange>
  <Command __id="7396" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:11:33 EST 2021" starttimestamp="1612231299681" timestamp="4193766" />
  <Command __id="7398" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:11:33 EST 2021" starttimestamp="1612231299681" timestamp="4194307" />
  <Command __id="7399" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:11:34 EST 2021" starttimestamp="1612231299681" timestamp="4194546" />
  <Command __id="7400" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:11:34 EST 2021" starttimestamp="1612231299681" timestamp="4195029" />
  <Command __id="7401" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:11:34 EST 2021" starttimestamp="1612231299681" timestamp="4195307" />
  <Command __id="7403" _type="InsertStringCommand" date="Mon Feb 01 22:11:35 EST 2021" starttimestamp="1612231299681" timestamp="4195475" timestamp2="4195475">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7404" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:11:37 EST 2021" starttimestamp="1612231299681" timestamp="4197672" />
  <Command __id="7405" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:11:37 EST 2021" starttimestamp="1612231299681" timestamp="4198043" />
  <Command __id="7407" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:11:38 EST 2021" starttimestamp="1612231299681" timestamp="4198358" />
  <Command __id="7409" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:11:38 EST 2021" starttimestamp="1612231299681" timestamp="4198502" />
  <Command __id="7410" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:11:38 EST 2021" starttimestamp="1612231299681" timestamp="4199146" />
  <Command __id="7411" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:11:38 EST 2021" starttimestamp="1612231299681" timestamp="4199278" />
  <Command __id="7412" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:11:39 EST 2021" starttimestamp="1612231299681" timestamp="4199589" />
  <Command __id="7414" _type="InsertStringCommand" date="Mon Feb 01 22:11:39 EST 2021" starttimestamp="1612231299681" timestamp="4199735" timestamp2="4199735">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7415" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:11:41 EST 2021" starttimestamp="1612231299681" timestamp="4201895" />
  <Command __id="7416" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:11:41 EST 2021" starttimestamp="1612231299681" timestamp="4202036" />
  <Command __id="7418" _type="InsertStringCommand" date="Mon Feb 01 22:11:42 EST 2021" starttimestamp="1612231299681" timestamp="4202567" timestamp2="4202567">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7419" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:42 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4202609" />
  <Command __id="7425" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:42 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4203010" />
  <Command __id="7427" _type="InsertStringCommand" date="Mon Feb 01 22:11:42 EST 2021" starttimestamp="1612231299681" timestamp="4203030" timestamp2="4203030">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7429" _type="InsertStringCommand" date="Mon Feb 01 22:11:43 EST 2021" starttimestamp="1612231299681" timestamp="4203684" timestamp2="4203684">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7431" _type="InsertStringCommand" date="Mon Feb 01 22:11:43 EST 2021" starttimestamp="1612231299681" timestamp="4204053" timestamp2="4204053">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="7433" _type="InsertStringCommand" date="Mon Feb 01 22:11:43 EST 2021" starttimestamp="1612231299681" timestamp="4204102" timestamp2="4204102">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7435" _type="InsertStringCommand" date="Mon Feb 01 22:11:43 EST 2021" starttimestamp="1612231299681" timestamp="4204181" timestamp2="4204181">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7437" _type="InsertStringCommand" date="Mon Feb 01 22:11:44 EST 2021" starttimestamp="1612231299681" timestamp="4204320" timestamp2="4204320">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="7439" _type="InsertStringCommand" date="Mon Feb 01 22:11:44 EST 2021" starttimestamp="1612231299681" timestamp="4204705" timestamp2="4204705">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7441" _type="InsertStringCommand" date="Mon Feb 01 22:11:44 EST 2021" starttimestamp="1612231299681" timestamp="4204884" timestamp2="4204884">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7443" _type="InsertStringCommand" date="Mon Feb 01 22:11:44 EST 2021" starttimestamp="1612231299681" timestamp="4204947" timestamp2="4204947">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7445" _type="InsertStringCommand" date="Mon Feb 01 22:11:44 EST 2021" starttimestamp="1612231299681" timestamp="4205094" timestamp2="4205094">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7447" _type="InsertStringCommand" date="Mon Feb 01 22:11:44 EST 2021" starttimestamp="1612231299681" timestamp="4205147" timestamp2="4205147">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7449" _type="InsertStringCommand" date="Mon Feb 01 22:11:44 EST 2021" starttimestamp="1612231299681" timestamp="4205226" timestamp2="4205226">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7451" _type="InsertStringCommand" date="Mon Feb 01 22:11:45 EST 2021" starttimestamp="1612231299681" timestamp="4205523" timestamp2="4205523">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7453" _type="InsertStringCommand" date="Mon Feb 01 22:11:45 EST 2021" starttimestamp="1612231299681" timestamp="4205599" timestamp2="4205599">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="7455" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:11:45 EST 2021" starttimestamp="1612231299681" timestamp="4205947" />
  <Command __id="7457" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:11:45 EST 2021" starttimestamp="1612231299681" timestamp="4206057" />
  <Command __id="7459" _type="InsertStringCommand" date="Mon Feb 01 22:11:45 EST 2021" starttimestamp="1612231299681" timestamp="4206237" timestamp2="4206237">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="7461" _type="InsertStringCommand" date="Mon Feb 01 22:11:45 EST 2021" starttimestamp="1612231299681" timestamp="4206292" timestamp2="4206292">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7463" _type="InsertStringCommand" date="Mon Feb 01 22:11:46 EST 2021" starttimestamp="1612231299681" timestamp="4206353" timestamp2="4206353">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="7402" _type="Insert" date="Mon Feb 01 22:11:35 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35316" docExpressionCount="4115" docLength="36373" length="8" offset="35157" starttimestamp="1612231299681" timestamp="4195465">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <DocumentChange __id="7406" _type="Delete" date="Mon Feb 01 22:11:38 EST 2021" docASTNodeCount="6125" docActiveCodeLength="35268" docExpressionCount="4107" docLength="36325" endLine="1014" length="48" offset="35111" repeat="2" startLine="1012" starttimestamp="1612231299681" timestamp="4198355" timestamp2="4198501">
    <text><![CDATA[						date = new Date(0);
						keyword = "";
]]></text>
  </DocumentChange>
  <DocumentChange __id="7413" _type="Insert" date="Mon Feb 01 22:11:39 EST 2021" docASTNodeCount="6125" docActiveCodeLength="35276" docExpressionCount="4107" docLength="36333" length="8" offset="35094" starttimestamp="1612231299681" timestamp="4199727">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <DocumentChange __id="7417" _type="Insert" date="Mon Feb 01 22:11:42 EST 2021" docASTNodeCount="6127" docActiveCodeLength="35282" docExpressionCount="4108" docLength="36339" length="6" offset="35125" repeat="6" starttimestamp="1612231299681" timestamp="4202562" timestamp2="4202923">
    <text><![CDATA[sysout]]></text>
  </DocumentChange>
  <DocumentChange __id="7426" _type="Replace" date="Mon Feb 01 22:11:42 EST 2021" docASTNodeCount="6131" docActiveCodeLength="35297" docExpressionCount="4112" docLength="36354" endLine="1013" insertionLength="21" int_docASTNodeCount="6125" int_docActiveCodeLength="35276" int_docExpressionCount="4107" int_docLength="36333" length="6" offset="35125" startLine="1013" starttimestamp="1612231299681" timestamp="4203019">
    <deletedText><![CDATA[sysout]]></deletedText>
    <insertedText><![CDATA[System.out.println();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7428" _type="Insert" date="Mon Feb 01 22:11:43 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35311" docExpressionCount="4113" docLength="36368" length="14" offset="35144" repeat="13" starttimestamp="1612231299681" timestamp="4203680" timestamp2="4205596">
    <text><![CDATA["failed to ap"]]></text>
  </DocumentChange>
  <DocumentChange __id="7454" _type="Delete" date="Mon Feb 01 22:11:45 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35309" docExpressionCount="4113" docLength="36366" endLine="1013" length="2" offset="35155" repeat="2" startLine="1013" starttimestamp="1612231299681" timestamp="4205944" timestamp2="4206053">
    <text><![CDATA[ap]]></text>
  </DocumentChange>
  <DocumentChange __id="7458" _type="Insert" date="Mon Feb 01 22:11:45 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35315" docExpressionCount="4113" docLength="36372" length="6" offset="35155" repeat="6" starttimestamp="1612231299681" timestamp="4206235" timestamp2="4206640">
    <text><![CDATA[parse ]]></text>
  </DocumentChange>
  <DocumentChange __id="7473" _type="Delete" date="Mon Feb 01 22:11:47 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35314" docExpressionCount="4113" docLength="36371" endLine="1013" length="1" offset="35145" startLine="1013" starttimestamp="1612231299681" timestamp="4207890">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <DocumentChange __id="7475" _type="Insert" date="Mon Feb 01 22:11:47 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35315" docExpressionCount="4113" docLength="36372" length="1" offset="35145" starttimestamp="1612231299681" timestamp="4208176">
    <text><![CDATA[F]]></text>
  </DocumentChange>
  <DocumentChange __id="7478" _type="Insert" date="Mon Feb 01 22:11:49 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35316" docExpressionCount="4113" docLength="36373" length="1" offset="35161" starttimestamp="1612231299681" timestamp="4209777">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <DocumentChange __id="7480" _type="Delete" date="Mon Feb 01 22:11:49 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35315" docExpressionCount="4113" docLength="36372" endLine="1013" length="1" offset="35161" startLine="1013" starttimestamp="1612231299681" timestamp="4210185">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <DocumentChange __id="7482" _type="Insert" date="Mon Feb 01 22:11:49 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35325" docExpressionCount="4113" docLength="36382" length="10" offset="35161" repeat="10" starttimestamp="1612231299681" timestamp="4210310" timestamp2="4211778">
    <text><![CDATA[WebCommand]]></text>
  </DocumentChange>
  <Command __id="7465" _type="InsertStringCommand" date="Mon Feb 01 22:11:46 EST 2021" starttimestamp="1612231299681" timestamp="4206506" timestamp2="4206506">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7467" _type="InsertStringCommand" date="Mon Feb 01 22:11:46 EST 2021" starttimestamp="1612231299681" timestamp="4206577" timestamp2="4206577">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7469" _type="InsertStringCommand" date="Mon Feb 01 22:11:46 EST 2021" starttimestamp="1612231299681" timestamp="4206642" timestamp2="4206642">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7470" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 22:11:46 EST 2021" starttimestamp="1612231299681" timestamp="4207169" />
  <Command __id="7471" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 22:11:47 EST 2021" starttimestamp="1612231299681" timestamp="4207326" />
  <Command __id="7472" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Mon Feb 01 22:11:47 EST 2021" starttimestamp="1612231299681" timestamp="4207448" />
  <Command __id="7474" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Mon Feb 01 22:11:47 EST 2021" starttimestamp="1612231299681" timestamp="4207894" />
  <Command __id="7476" _type="InsertStringCommand" date="Mon Feb 01 22:11:47 EST 2021" starttimestamp="1612231299681" timestamp="4208185" timestamp2="4208185">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="7477" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:11:48 EST 2021" starttimestamp="1612231299681" timestamp="4208325" />
  <Command __id="7479" _type="InsertStringCommand" date="Mon Feb 01 22:11:49 EST 2021" starttimestamp="1612231299681" timestamp="4209779" timestamp2="4209779">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="7481" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:11:49 EST 2021" starttimestamp="1612231299681" timestamp="4210188" />
  <Command __id="7483" _type="InsertStringCommand" date="Mon Feb 01 22:11:49 EST 2021" starttimestamp="1612231299681" timestamp="4210312" timestamp2="4210312">
    <data><![CDATA[W]]></data>
  </Command>
  <Command __id="7485" _type="InsertStringCommand" date="Mon Feb 01 22:11:50 EST 2021" starttimestamp="1612231299681" timestamp="4210492" timestamp2="4210492">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7487" _type="InsertStringCommand" date="Mon Feb 01 22:11:50 EST 2021" starttimestamp="1612231299681" timestamp="4210694" timestamp2="4210694">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="7489" _type="InsertStringCommand" date="Mon Feb 01 22:11:50 EST 2021" starttimestamp="1612231299681" timestamp="4211170" timestamp2="4211170">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="7491" _type="InsertStringCommand" date="Mon Feb 01 22:11:50 EST 2021" starttimestamp="1612231299681" timestamp="4211290" timestamp2="4211290">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7493" _type="InsertStringCommand" date="Mon Feb 01 22:11:51 EST 2021" starttimestamp="1612231299681" timestamp="4211457" timestamp2="4211457">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7495" _type="InsertStringCommand" date="Mon Feb 01 22:11:51 EST 2021" starttimestamp="1612231299681" timestamp="4211555" timestamp2="4211555">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7497" _type="InsertStringCommand" date="Mon Feb 01 22:11:51 EST 2021" starttimestamp="1612231299681" timestamp="4211662" timestamp2="4211662">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7499" _type="InsertStringCommand" date="Mon Feb 01 22:11:51 EST 2021" starttimestamp="1612231299681" timestamp="4211740" timestamp2="4211740">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7501" _type="InsertStringCommand" date="Mon Feb 01 22:11:51 EST 2021" starttimestamp="1612231299681" timestamp="4211780" timestamp2="4211780">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7502" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:11:51 EST 2021" starttimestamp="1612231299681" timestamp="4212289" />
  <Command __id="7503" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:11:52 EST 2021" starttimestamp="1612231299681" timestamp="4212422" />
  <Command __id="7505" _type="InsertStringCommand" date="Mon Feb 01 22:11:55 EST 2021" starttimestamp="1612231299681" timestamp="4215715" timestamp2="4215715">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="7504" _type="Insert" date="Mon Feb 01 22:11:55 EST 2021" docASTNodeCount="6134" docActiveCodeLength="35330" docExpressionCount="4114" docLength="36387" length="5" offset="35102" repeat="5" starttimestamp="1612231299681" timestamp="4215709" timestamp2="4216249">
    <text><![CDATA[retva]]></text>
  </DocumentChange>
  <DocumentChange __id="7512" _type="Replace" date="Mon Feb 01 22:11:56 EST 2021" docASTNodeCount="6134" docActiveCodeLength="35331" docExpressionCount="4114" docLength="36388" endLine="1011" insertionLength="6" int_docASTNodeCount="6132" int_docActiveCodeLength="35325" int_docExpressionCount="4113" int_docLength="36382" length="5" offset="35102" startLine="1011" starttimestamp="1612231299681" timestamp="4216431">
    <deletedText><![CDATA[retva]]></deletedText>
    <insertedText><![CDATA[retVal]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7514" _type="Insert" date="Mon Feb 01 22:11:56 EST 2021" docASTNodeCount="6136" docActiveCodeLength="35335" docExpressionCount="4116" docLength="36392" length="4" offset="35108" repeat="4" starttimestamp="1612231299681" timestamp="4216685" timestamp2="4217289">
    <text><![CDATA[.add]]></text>
  </DocumentChange>
  <DocumentChange __id="7521" _type="Replace" date="Mon Feb 01 22:11:57 EST 2021" docASTNodeCount="6137" docActiveCodeLength="35338" docExpressionCount="4117" docLength="36395" endLine="1011" insertionLength="6" int_docASTNodeCount="6132" int_docActiveCodeLength="35332" int_docExpressionCount="4113" int_docLength="36389" length="3" offset="35109" startLine="1011" starttimestamp="1612231299681" timestamp="4217471">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[add(e)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7523" _type="Replace" date="Mon Feb 01 22:11:57 EST 2021" docASTNodeCount="6137" docActiveCodeLength="35338" docExpressionCount="4117" docLength="36395" endLine="1011" insertionLength="1" int_docASTNodeCount="6136" int_docActiveCodeLength="35337" int_docExpressionCount="4116" int_docLength="36394" length="1" offset="35113" startLine="1011" starttimestamp="1612231299681" timestamp="4217821">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7525" _type="Insert" date="Mon Feb 01 22:11:57 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35341" docExpressionCount="4113" docLength="36398" length="3" offset="35114" repeat="3" starttimestamp="1612231299681" timestamp="4217875" timestamp2="4218109">
    <text><![CDATA[ew ]]></text>
  </DocumentChange>
  <DocumentChange __id="7531" _type="Delete" date="Mon Feb 01 22:11:59 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35317" docExpressionCount="4113" docLength="36374" endLine="1012" length="24" offset="35096" startLine="1011" starttimestamp="1612231299681" timestamp="4220202">
    <text><![CDATA[						retVal.add(new )
]]></text>
  </DocumentChange>
  <DocumentChange __id="7535" _type="Insert" date="Mon Feb 01 22:12:00 EST 2021" docASTNodeCount="6132" docActiveCodeLength="35325" docExpressionCount="4113" docLength="36382" length="8" offset="35094" starttimestamp="1612231299681" timestamp="4220880">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <Command __id="7506" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:55 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4215757" />
  <Command __id="7511" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:56 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4216417" />
  <Command __id="7513" _type="InsertStringCommand" date="Mon Feb 01 22:11:56 EST 2021" starttimestamp="1612231299681" timestamp="4216440" timestamp2="4216440">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7515" _type="InsertStringCommand" date="Mon Feb 01 22:11:56 EST 2021" starttimestamp="1612231299681" timestamp="4216690" timestamp2="4216690">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7516" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:56 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4216732" />
  <Command __id="7520" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:57 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4217463" />
  <Command __id="7522" _type="InsertStringCommand" date="Mon Feb 01 22:11:57 EST 2021" starttimestamp="1612231299681" timestamp="4217573" timestamp2="4217573">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7524" _type="InsertStringCommand" date="Mon Feb 01 22:11:57 EST 2021" starttimestamp="1612231299681" timestamp="4217829" timestamp2="4217829">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7526" _type="InsertStringCommand" date="Mon Feb 01 22:11:57 EST 2021" starttimestamp="1612231299681" timestamp="4217878" timestamp2="4217878">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7527" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:11:57 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4217918" />
  <Command __id="7530" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:11:57 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4218170" />
  <Command __id="7532" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:11:59 EST 2021" starttimestamp="1612231299681" timestamp="4220207" />
  <Command __id="7533" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:00 EST 2021" starttimestamp="1612231299681" timestamp="4220519" />
  <Command __id="7534" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:12:00 EST 2021" starttimestamp="1612231299681" timestamp="4220754" />
  <Command __id="7536" _type="InsertStringCommand" date="Mon Feb 01 22:12:00 EST 2021" starttimestamp="1612231299681" timestamp="4220890" timestamp2="4220890">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7538" _type="InsertStringCommand" date="Mon Feb 01 22:12:04 EST 2021" starttimestamp="1612231299681" timestamp="4224360" timestamp2="4224360">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="7540" _type="InsertStringCommand" date="Mon Feb 01 22:12:04 EST 2021" starttimestamp="1612231299681" timestamp="4224385" timestamp2="4224385">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7541" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:12:04 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4224426" />
  <Command __id="7543" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:12:05 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4225416" />
  <Command __id="7545" _type="InsertStringCommand" date="Mon Feb 01 22:12:05 EST 2021" starttimestamp="1612231299681" timestamp="4225433" timestamp2="4225433">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7547" _type="InsertStringCommand" date="Mon Feb 01 22:12:05 EST 2021" starttimestamp="1612231299681" timestamp="4225779" timestamp2="4225779">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7549" _type="InsertStringCommand" date="Mon Feb 01 22:12:05 EST 2021" starttimestamp="1612231299681" timestamp="4225863" timestamp2="4225863">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="7551" _type="InsertStringCommand" date="Mon Feb 01 22:12:05 EST 2021" starttimestamp="1612231299681" timestamp="4225965" timestamp2="4225965">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7553" _type="InsertStringCommand" date="Mon Feb 01 22:12:05 EST 2021" starttimestamp="1612231299681" timestamp="4226113" timestamp2="4226113">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="7537" _type="Insert" date="Mon Feb 01 22:12:04 EST 2021" docASTNodeCount="6134" docActiveCodeLength="35328" docExpressionCount="4114" docLength="36385" length="3" offset="35102" repeat="3" starttimestamp="1612231299681" timestamp="4224355" timestamp2="4224786">
    <text><![CDATA[web]]></text>
  </DocumentChange>
  <DocumentChange __id="7544" _type="Replace" date="Mon Feb 01 22:12:05 EST 2021" docASTNodeCount="6134" docActiveCodeLength="35335" docExpressionCount="4114" docLength="36392" endLine="1011" insertionLength="10" int_docASTNodeCount="6132" int_docActiveCodeLength="35325" int_docExpressionCount="4113" int_docLength="36382" length="3" offset="35102" startLine="1011" starttimestamp="1612231299681" timestamp="4225424">
    <deletedText><![CDATA[web]]></deletedText>
    <insertedText><![CDATA[webCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7546" _type="Insert" date="Mon Feb 01 22:12:05 EST 2021" docASTNodeCount="6138" docActiveCodeLength="35345" docExpressionCount="4117" docLength="36402" length="10" offset="35112" repeat="10" starttimestamp="1612231299681" timestamp="4225771" timestamp2="4226858">
    <text><![CDATA[ = new web]]></text>
  </DocumentChange>
  <DocumentChange __id="7566" _type="Replace" date="Mon Feb 01 22:12:06 EST 2021" docASTNodeCount="6138" docActiveCodeLength="35353" docExpressionCount="4117" docLength="36410" endLine="1011" insertionLength="10" int_docASTNodeCount="6138" int_docActiveCodeLength="35343" int_docExpressionCount="4117" int_docLength="36400" length="2" offset="35119" startLine="1011" starttimestamp="1612231299681" timestamp="4227044">
    <deletedText><![CDATA[we]]></deletedText>
    <insertedText><![CDATA[WebCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7567" _type="Replace" date="Mon Feb 01 22:12:06 EST 2021" docASTNodeCount="6138" docActiveCodeLength="35354" docExpressionCount="4117" docLength="36411" endLine="1011" insertionLength="2" int_docASTNodeCount="6138" int_docActiveCodeLength="35352" int_docExpressionCount="4117" int_docLength="36409" length="1" offset="35129" startLine="1011" starttimestamp="1612231299681" timestamp="4227058">
    <deletedText><![CDATA[b]]></deletedText>
    <insertedText><![CDATA[()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7569" _type="Insert" date="Mon Feb 01 22:12:08 EST 2021" docASTNodeCount="6138" docActiveCodeLength="35357" docExpressionCount="4117" docLength="36414" length="3" offset="35131" repeat="2" starttimestamp="1612231299681" timestamp="4228526" timestamp2="4228539">
    <text><![CDATA[';']]></text>
  </DocumentChange>
  <DocumentChange __id="7573" _type="Delete" date="Mon Feb 01 22:12:08 EST 2021" docASTNodeCount="6138" docActiveCodeLength="35354" docExpressionCount="4117" docLength="36411" endLine="1011" length="3" offset="35131" repeat="3" startLine="1011" starttimestamp="1612231299681" timestamp="4229022" timestamp2="4229375">
    <text><![CDATA[';']]></text>
  </DocumentChange>
  <DocumentChange __id="7578" _type="Insert" date="Mon Feb 01 22:12:09 EST 2021" docASTNodeCount="6138" docActiveCodeLength="35355" docExpressionCount="4117" docLength="36412" length="1" offset="35131" starttimestamp="1612231299681" timestamp="4229715">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="7554" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:12:05 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4226155" />
  <Command __id="7558" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:12:06 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4226461" />
  <Command __id="7560" _type="InsertStringCommand" date="Mon Feb 01 22:12:06 EST 2021" starttimestamp="1612231299681" timestamp="4226602" timestamp2="4226602">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="7562" _type="InsertStringCommand" date="Mon Feb 01 22:12:06 EST 2021" starttimestamp="1612231299681" timestamp="4226650" timestamp2="4226650">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7563" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:12:06 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4226690" />
  <Command __id="7565" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:12:06 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4227037" />
  <Command __id="7568" _type="InsertStringCommand" date="Mon Feb 01 22:12:06 EST 2021" starttimestamp="1612231299681" timestamp="4227068" timestamp2="4227068">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7570" _type="InsertStringCommand" date="Mon Feb 01 22:12:08 EST 2021" starttimestamp="1612231299681" timestamp="4228530" timestamp2="4228530">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="7572" _type="InsertStringCommand" date="Mon Feb 01 22:12:08 EST 2021" starttimestamp="1612231299681" timestamp="4228544" timestamp2="4228544">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7574" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:12:08 EST 2021" starttimestamp="1612231299681" timestamp="4229025" />
  <Command __id="7577" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:12:09 EST 2021" starttimestamp="1612231299681" timestamp="4229382" />
  <Command __id="7579" _type="InsertStringCommand" date="Mon Feb 01 22:12:09 EST 2021" starttimestamp="1612231299681" timestamp="4229724" timestamp2="4229724">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7580" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:12:09 EST 2021" starttimestamp="1612231299681" timestamp="4230071" />
  <Command __id="7581" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:12:09 EST 2021" starttimestamp="1612231299681" timestamp="4230187" />
  <Command __id="7583" _type="InsertStringCommand" date="Mon Feb 01 22:12:13 EST 2021" starttimestamp="1612231299681" timestamp="4233979" timestamp2="4233979">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7584" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:12:13 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4234015" />
  <Command __id="7593" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:12:16 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4236526" />
  <Command __id="7595" _type="InsertStringCommand" date="Mon Feb 01 22:12:16 EST 2021" starttimestamp="1612231299681" timestamp="4236620" timestamp2="4236620">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7596" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:12:16 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4236660" />
  <Command __id="7598" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:12:16 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4237015" />
  <Command __id="7600" _type="InsertStringCommand" date="Mon Feb 01 22:12:16 EST 2021" starttimestamp="1612231299681" timestamp="4237032" timestamp2="4237032">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7602" _type="InsertStringCommand" date="Mon Feb 01 22:12:16 EST 2021" starttimestamp="1612231299681" timestamp="4237281" timestamp2="4237281">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="7604" _type="InsertStringCommand" date="Mon Feb 01 22:12:17 EST 2021" starttimestamp="1612231299681" timestamp="4237510" timestamp2="4237510">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7606" _type="InsertStringCommand" date="Mon Feb 01 22:12:17 EST 2021" starttimestamp="1612231299681" timestamp="4238240" timestamp2="4238240">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="7607" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:12:17 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4238273" />
  <Command __id="7610" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:12:18 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4238645" />
  <Command __id="7611" _type="InsertStringCommand" date="Mon Feb 01 22:12:18 EST 2021" starttimestamp="1612231299681" timestamp="4238656" timestamp2="4238656">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7612" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:22 EST 2021" starttimestamp="1612231299681" timestamp="4242500" />
  <Command __id="7613" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:22 EST 2021" starttimestamp="1612231299681" timestamp="4242615" />
  <Command __id="7614" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:22 EST 2021" starttimestamp="1612231299681" timestamp="4242762" />
  <Command __id="7615" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:22 EST 2021" starttimestamp="1612231299681" timestamp="4242900" />
  <Command __id="7616" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:22 EST 2021" starttimestamp="1612231299681" timestamp="4243025" />
  <Command __id="7617" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:22 EST 2021" starttimestamp="1612231299681" timestamp="4243169" />
  <Command __id="7618" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:22 EST 2021" starttimestamp="1612231299681" timestamp="4243291" />
  <Command __id="7619" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:23 EST 2021" starttimestamp="1612231299681" timestamp="4243433" />
  <Command __id="7620" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:23 EST 2021" starttimestamp="1612231299681" timestamp="4243574" />
  <Command __id="7621" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Mon Feb 01 22:12:31 EST 2021" starttimestamp="1612231299681" timestamp="4251427" />
  <DocumentChange __id="7582" _type="Insert" date="Mon Feb 01 22:12:13 EST 2021" docASTNodeCount="6139" docActiveCodeLength="35359" docExpressionCount="4118" docLength="36416" length="4" offset="35130" repeat="4" starttimestamp="1612231299681" timestamp="4233968" timestamp2="4234238">
    <text><![CDATA[date]]></text>
  </DocumentChange>
  <DocumentChange __id="7588" _type="Delete" date="Mon Feb 01 22:12:14 EST 2021" docASTNodeCount="6138" docActiveCodeLength="35355" docExpressionCount="4117" docLength="36412" endLine="1011" length="4" offset="35130" repeat="4" startLine="1011" starttimestamp="1612231299681" timestamp="4235141" timestamp2="4235550">
    <text><![CDATA[date]]></text>
  </DocumentChange>
  <DocumentChange __id="7592" _type="Insert" date="Mon Feb 01 22:12:16 EST 2021" docASTNodeCount="6139" docActiveCodeLength="35358" docExpressionCount="4118" docLength="36415" length="3" offset="35130" repeat="3" starttimestamp="1612231299681" timestamp="4236510" timestamp2="4236796">
    <text><![CDATA[key]]></text>
  </DocumentChange>
  <DocumentChange __id="7599" _type="Replace" date="Mon Feb 01 22:12:16 EST 2021" docASTNodeCount="6139" docActiveCodeLength="35362" docExpressionCount="4118" docLength="36419" endLine="1011" insertionLength="7" int_docASTNodeCount="6138" int_docActiveCodeLength="35355" int_docExpressionCount="4117" int_docLength="36412" length="3" offset="35130" startLine="1011" starttimestamp="1612231299681" timestamp="4237022">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[keyword]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7601" _type="Insert" date="Mon Feb 01 22:12:16 EST 2021" docASTNodeCount="6140" docActiveCodeLength="35367" docExpressionCount="4119" docLength="36424" length="5" offset="35137" repeat="5" starttimestamp="1612231299681" timestamp="4237273" timestamp2="4238465">
    <text><![CDATA[, url]]></text>
  </DocumentChange>
  <DocumentChange __id="7624" _type="Insert" date="Mon Feb 01 22:12:55 EST 2021" docASTNodeCount="6142" docActiveCodeLength="35379" docExpressionCount="4120" docLength="36436" length="12" offset="35144" repeat="5" starttimestamp="1612231299681" timestamp="4275648" timestamp2="4276482">
    <text><![CDATA[
						webc]]></text>
  </DocumentChange>
  <DocumentChange __id="7634" _type="Replace" date="Mon Feb 01 22:12:56 EST 2021" docASTNodeCount="6142" docActiveCodeLength="35385" docExpressionCount="4120" docLength="36442" endLine="1012" insertionLength="10" int_docASTNodeCount="6140" int_docActiveCodeLength="35375" int_docExpressionCount="4119" int_docLength="36432" length="4" offset="35152" startLine="1012" starttimestamp="1612231299681" timestamp="4276646">
    <deletedText><![CDATA[webc]]></deletedText>
    <insertedText><![CDATA[webCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7636" _type="Insert" date="Mon Feb 01 22:12:56 EST 2021" docASTNodeCount="6144" docActiveCodeLength="35393" docExpressionCount="4122" docLength="36450" length="8" offset="35162" repeat="8" starttimestamp="1612231299681" timestamp="4277151" timestamp2="4279764">
    <text><![CDATA[.settime]]></text>
  </DocumentChange>
  <Command __id="7622" _type="MoveCaretCommand" caretOffset="4053" date="Mon Feb 01 22:12:54 EST 2021" docOffset="35094" starttimestamp="1612231299681" timestamp="4274792" />
  <Command __id="7623" _type="MoveCaretCommand" caretOffset="4103" date="Mon Feb 01 22:12:54 EST 2021" docOffset="35144" starttimestamp="1612231299681" timestamp="4275118" />
  <Command __id="7625" _type="InsertStringCommand" date="Mon Feb 01 22:12:55 EST 2021" starttimestamp="1612231299681" timestamp="4275658" timestamp2="4275658">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7627" _type="InsertStringCommand" date="Mon Feb 01 22:12:55 EST 2021" starttimestamp="1612231299681" timestamp="4275847" timestamp2="4275847">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="7629" _type="InsertStringCommand" date="Mon Feb 01 22:12:55 EST 2021" starttimestamp="1612231299681" timestamp="4275887" timestamp2="4275887">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7630" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:12:55 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4275929" />
  <Command __id="7633" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:12:56 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4276638" />
  <Command __id="7635" _type="InsertStringCommand" date="Mon Feb 01 22:12:56 EST 2021" starttimestamp="1612231299681" timestamp="4276654" timestamp2="4276654">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7637" _type="InsertStringCommand" date="Mon Feb 01 22:12:56 EST 2021" starttimestamp="1612231299681" timestamp="4277157" timestamp2="4277157">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7638" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:12:56 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4277198" />
  <Command __id="7647" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:13:03 EST 2021" starttimestamp="1612231299681" timestamp="4283742" />
  <DocumentChange __id="7646" _type="Delete" date="Mon Feb 01 22:13:03 EST 2021" docASTNodeCount="6140" docActiveCodeLength="35386" docExpressionCount="4119" docLength="36443" endLine="1012" length="7" offset="35163" startLine="1012" starttimestamp="1612231299681" timestamp="4283737">
    <text><![CDATA[settime]]></text>
  </DocumentChange>
  <DocumentChange __id="7648" _type="Insert" date="Mon Feb 01 22:13:03 EST 2021" docASTNodeCount="6144" docActiveCodeLength="35390" docExpressionCount="4122" docLength="36447" length="4" offset="35163" repeat="4" starttimestamp="1612231299681" timestamp="4284317" timestamp2="4284804">
    <text><![CDATA[star]]></text>
  </DocumentChange>
  <DocumentChange __id="7653" _type="Replace" date="Mon Feb 01 22:13:06 EST 2021" docASTNodeCount="6145" docActiveCodeLength="35415" docExpressionCount="4123" docLength="36472" endLine="1012" insertionLength="29" int_docASTNodeCount="6140" int_docActiveCodeLength="35386" int_docExpressionCount="4119" int_docLength="36443" length="4" offset="35163" startLine="1012" starttimestamp="1612231299681" timestamp="4287066">
    <deletedText><![CDATA[star]]></deletedText>
    <insertedText><![CDATA[setStartTimestamp(timestamp);]]></insertedText>
  </DocumentChange>
  <Command __id="7652" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:13:06 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4287049" />
  <Command __id="7654" _type="InsertStringCommand" date="Mon Feb 01 22:13:06 EST 2021" starttimestamp="1612231299681" timestamp="4287203" timestamp2="4287203">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7656" _type="InsertStringCommand" date="Mon Feb 01 22:13:08 EST 2021" starttimestamp="1612231299681" timestamp="4288620" timestamp2="4288620">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7658" _type="InsertStringCommand" date="Mon Feb 01 22:13:08 EST 2021" starttimestamp="1612231299681" timestamp="4288677" timestamp2="4288677">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7659" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:13:08 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4288716" />
  <Command __id="7662" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:13:08 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4289310" />
  <Command __id="7663" _type="InsertStringCommand" date="Mon Feb 01 22:13:08 EST 2021" starttimestamp="1612231299681" timestamp="4289315" timestamp2="4289315">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7665" _type="InsertStringCommand" date="Mon Feb 01 22:13:09 EST 2021" starttimestamp="1612231299681" timestamp="4289573" timestamp2="4289573">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7666" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:13:09 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4289665" />
  <Command __id="7667" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:13:12 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4292887" />
  <Command __id="7669" _type="InsertStringCommand" date="Mon Feb 01 22:13:12 EST 2021" starttimestamp="1612231299681" timestamp="4292903" timestamp2="4292903">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7670" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:13:15 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4295770" />
  <DocumentChange __id="7655" _type="Replace" date="Mon Feb 01 22:13:08 EST 2021" docASTNodeCount="6145" docActiveCodeLength="35407" docExpressionCount="4123" docLength="36464" endLine="1012" insertionLength="1" int_docASTNodeCount="6144" int_docActiveCodeLength="35406" int_docExpressionCount="4122" int_docLength="36463" length="9" offset="35181" startLine="1012" starttimestamp="1612231299681" timestamp="4288610">
    <deletedText><![CDATA[timestamp]]></deletedText>
    <insertedText><![CDATA[d]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7657" _type="Insert" date="Mon Feb 01 22:13:08 EST 2021" docASTNodeCount="6147" docActiveCodeLength="35411" docExpressionCount="4124" docLength="36468" length="4" offset="35182" repeat="4" starttimestamp="1612231299681" timestamp="4288675" timestamp2="4289570">
    <text><![CDATA[ate.]]></text>
  </DocumentChange>
  <DocumentChange __id="7668" _type="Insert" date="Mon Feb 01 22:13:12 EST 2021" docASTNodeCount="6147" docActiveCodeLength="35420" docExpressionCount="4125" docLength="36477" length="9" offset="35186" starttimestamp="1612231299681" timestamp="4292894">
    <text><![CDATA[getTime()]]></text>
  </DocumentChange>
  <Command __id="7671" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:13:19 EST 2021" starttimestamp="1612231299681" timestamp="4300312" />
  <DocumentChange __id="7672" _type="Insert" date="Mon Feb 01 22:13:20 EST 2021" docASTNodeCount="6149" docActiveCodeLength="35433" docExpressionCount="4126" docLength="36490" length="13" offset="35197" repeat="6" starttimestamp="1612231299681" timestamp="4300505" timestamp2="4302307">
    <text><![CDATA[
						retva]]></text>
  </DocumentChange>
  <Command __id="7673" _type="InsertStringCommand" date="Mon Feb 01 22:13:20 EST 2021" starttimestamp="1612231299681" timestamp="4300515" timestamp2="4300515">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7675" _type="InsertStringCommand" date="Mon Feb 01 22:13:21 EST 2021" starttimestamp="1612231299681" timestamp="4301691" timestamp2="4301691">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7676" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:13:21 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4301734" />
  <Command __id="7681" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:13:22 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4302447" />
  <DocumentChange __id="7682" _type="Replace" date="Mon Feb 01 22:13:22 EST 2021" docASTNodeCount="6149" docActiveCodeLength="35434" docExpressionCount="4126" docLength="36491" endLine="1013" insertionLength="6" int_docASTNodeCount="6147" int_docActiveCodeLength="35428" int_docExpressionCount="4125" int_docLength="36485" length="5" offset="35205" startLine="1013" starttimestamp="1612231299681" timestamp="4302455">
    <deletedText><![CDATA[retva]]></deletedText>
    <insertedText><![CDATA[retVal]]></insertedText>
  </DocumentChange>
  <Command __id="7683" _type="InsertStringCommand" date="Mon Feb 01 22:13:22 EST 2021" starttimestamp="1612231299681" timestamp="4302464" timestamp2="4302464">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7684" _type="Insert" date="Mon Feb 01 22:13:22 EST 2021" docASTNodeCount="6151" docActiveCodeLength="35438" docExpressionCount="4128" docLength="36495" length="4" offset="35211" repeat="4" starttimestamp="1612231299681" timestamp="4302597" timestamp2="4303157">
    <text><![CDATA[.add]]></text>
  </DocumentChange>
  <Command __id="7685" _type="InsertStringCommand" date="Mon Feb 01 22:13:22 EST 2021" starttimestamp="1612231299681" timestamp="4302603" timestamp2="4302603">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7686" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:13:22 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4302644" />
  <Command __id="7690" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:13:22 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4303252" />
  <DocumentChange __id="7691" _type="Replace" date="Mon Feb 01 22:13:22 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35441" docExpressionCount="4129" docLength="36498" endLine="1013" insertionLength="6" int_docASTNodeCount="6147" int_docActiveCodeLength="35435" int_docExpressionCount="4125" int_docLength="36492" length="3" offset="35212" startLine="1013" starttimestamp="1612231299681" timestamp="4303260">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[add(e)]]></insertedText>
  </DocumentChange>
  <Command __id="7692" _type="InsertStringCommand" date="Mon Feb 01 22:13:23 EST 2021" starttimestamp="1612231299681" timestamp="4303371" timestamp2="4303371">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7693" _type="Replace" date="Mon Feb 01 22:13:23 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35441" docExpressionCount="4129" docLength="36498" endLine="1013" insertionLength="1" int_docASTNodeCount="6151" int_docActiveCodeLength="35440" int_docExpressionCount="4128" int_docLength="36497" length="1" offset="35216" startLine="1013" starttimestamp="1612231299681" timestamp="4303830">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA[w]]></insertedText>
  </DocumentChange>
  <Command __id="7694" _type="InsertStringCommand" date="Mon Feb 01 22:13:23 EST 2021" starttimestamp="1612231299681" timestamp="4303839" timestamp2="4303839">
    <data><![CDATA[w]]></data>
  </Command>
  <DocumentChange __id="7695" _type="Insert" date="Mon Feb 01 22:13:23 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35444" docExpressionCount="4129" docLength="36501" length="3" offset="35217" repeat="3" starttimestamp="1612231299681" timestamp="4303874" timestamp2="4304452">
    <text><![CDATA[ebc]]></text>
  </DocumentChange>
  <Command __id="7696" _type="InsertStringCommand" date="Mon Feb 01 22:13:23 EST 2021" starttimestamp="1612231299681" timestamp="4303876" timestamp2="4303876">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7697" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:13:23 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4303916" />
  <Command __id="7700" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:13:24 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4304605" />
  <DocumentChange __id="7701" _type="Replace" date="Mon Feb 01 22:13:24 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35450" docExpressionCount="4129" docLength="36507" endLine="1013" insertionLength="10" int_docASTNodeCount="6151" int_docActiveCodeLength="35440" int_docExpressionCount="4128" int_docLength="36497" length="4" offset="35216" startLine="1013" starttimestamp="1612231299681" timestamp="4304614">
    <deletedText><![CDATA[webc]]></deletedText>
    <insertedText><![CDATA[webCommand]]></insertedText>
  </DocumentChange>
  <Command __id="7702" _type="InsertStringCommand" date="Mon Feb 01 22:13:24 EST 2021" starttimestamp="1612231299681" timestamp="4304625" timestamp2="4304625">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7703" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Mon Feb 01 22:13:25 EST 2021" starttimestamp="1612231299681" timestamp="4305401" />
  <Command __id="7705" _type="InsertStringCommand" date="Mon Feb 01 22:13:25 EST 2021" starttimestamp="1612231299681" timestamp="4305799" timestamp2="4305799">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="7704" _type="Insert" date="Mon Feb 01 22:13:25 EST 2021" docASTNodeCount="6152" docActiveCodeLength="35451" docExpressionCount="4129" docLength="36508" length="1" offset="35227" starttimestamp="1612231299681" timestamp="4305791">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="7707" _type="Insert" date="Mon Feb 01 22:13:33 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35454" docExpressionCount="4130" docLength="36511" length="3" offset="35628" repeat="3" starttimestamp="1612231299681" timestamp="4313557" timestamp2="4313798">
    <text><![CDATA[ret]]></text>
  </DocumentChange>
  <DocumentChange __id="7713" _type="Replace" date="Mon Feb 01 22:13:33 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35457" docExpressionCount="4130" docLength="36514" endLine="1029" insertionLength="6" int_docASTNodeCount="6152" int_docActiveCodeLength="35451" int_docExpressionCount="4129" int_docLength="36508" length="3" offset="35628" startLine="1029" starttimestamp="1612231299681" timestamp="4313850">
    <deletedText><![CDATA[ret]]></deletedText>
    <insertedText><![CDATA[retVal]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7715" _type="Insert" date="Mon Feb 01 22:13:33 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35458" docExpressionCount="4130" docLength="36515" length="1" offset="35634" starttimestamp="1612231299681" timestamp="4313911">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="7717" _type="Delete" date="Mon Feb 01 22:13:34 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35454" docExpressionCount="4130" docLength="36511" endLine="1029" length="4" offset="35631" startLine="1029" starttimestamp="1612231299681" timestamp="4314891">
    <text><![CDATA[Val ]]></text>
  </DocumentChange>
  <DocumentChange __id="7719" _type="Insert" date="Mon Feb 01 22:13:34 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35457" docExpressionCount="4130" docLength="36514" length="3" offset="35631" repeat="3" starttimestamp="1612231299681" timestamp="4315108" timestamp2="4315379">
    <text><![CDATA[ret]]></text>
  </DocumentChange>
  <DocumentChange __id="7724" _type="Delete" date="Mon Feb 01 22:13:35 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35454" docExpressionCount="4130" docLength="36511" endLine="1029" length="3" offset="35631" repeat="3" startLine="1029" starttimestamp="1612231299681" timestamp="4315692" timestamp2="4315936">
    <text><![CDATA[ret]]></text>
  </DocumentChange>
  <DocumentChange __id="7727" _type="Insert" date="Mon Feb 01 22:13:35 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35456" docExpressionCount="4130" docLength="36513" length="2" offset="35631" repeat="2" starttimestamp="1612231299681" timestamp="4316145" timestamp2="4316229">
    <text><![CDATA[ur]]></text>
  </DocumentChange>
  <DocumentChange __id="7730" _type="Replace" date="Mon Feb 01 22:13:36 EST 2021" docASTNodeCount="6153" docActiveCodeLength="35457" docExpressionCount="4129" docLength="36514" endLine="1029" insertionLength="6" int_docASTNodeCount="6152" int_docActiveCodeLength="35451" int_docExpressionCount="4129" int_docLength="36508" length="5" offset="35628" startLine="1029" starttimestamp="1612231299681" timestamp="4316349">
    <deletedText><![CDATA[retur]]></deletedText>
    <insertedText><![CDATA[return]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7732" _type="Insert" date="Mon Feb 01 22:13:36 EST 2021" docASTNodeCount="6153" docActiveCodeLength="35458" docExpressionCount="4129" docLength="36515" length="1" offset="35634" starttimestamp="1612231299681" timestamp="4316804">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="7706" _type="MoveCaretCommand" caretOffset="4587" date="Mon Feb 01 22:13:32 EST 2021" docOffset="35628" starttimestamp="1612231299681" timestamp="4312838" />
  <Command __id="7708" _type="InsertStringCommand" date="Mon Feb 01 22:13:33 EST 2021" starttimestamp="1612231299681" timestamp="4313562" timestamp2="4313562">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7709" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:13:33 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4313603" />
  <Command __id="7712" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:13:33 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4313841" />
  <Command __id="7714" _type="InsertStringCommand" date="Mon Feb 01 22:13:33 EST 2021" starttimestamp="1612231299681" timestamp="4313860" timestamp2="4313860">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7716" _type="InsertStringCommand" date="Mon Feb 01 22:13:33 EST 2021" starttimestamp="1612231299681" timestamp="4313920" timestamp2="4313920">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7718" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:13:34 EST 2021" starttimestamp="1612231299681" timestamp="4314895" />
  <Command __id="7720" _type="InsertStringCommand" date="Mon Feb 01 22:13:34 EST 2021" starttimestamp="1612231299681" timestamp="4315113" timestamp2="4315113">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7721" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:13:34 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4315155" />
  <Command __id="7729" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:13:36 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4316341" />
  <Command __id="7731" _type="InsertStringCommand" date="Mon Feb 01 22:13:36 EST 2021" starttimestamp="1612231299681" timestamp="4316358" timestamp2="4316358">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7733" _type="InsertStringCommand" date="Mon Feb 01 22:13:36 EST 2021" starttimestamp="1612231299681" timestamp="4316810" timestamp2="4316810">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7735" _type="InsertStringCommand" date="Mon Feb 01 22:13:44 EST 2021" starttimestamp="1612231299681" timestamp="4324368" timestamp2="4324368">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7736" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:13:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4324408" />
  <Command __id="7741" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:13:44 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4324913" />
  <Command __id="7743" _type="InsertStringCommand" date="Mon Feb 01 22:13:44 EST 2021" starttimestamp="1612231299681" timestamp="4324931" timestamp2="4324931">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7745" _type="InsertStringCommand" date="Mon Feb 01 22:13:44 EST 2021" starttimestamp="1612231299681" timestamp="4325154" timestamp2="4325154">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7746" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:13:46 EST 2021" starttimestamp="1612231299681" timestamp="4326383" />
  <Command __id="7748" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:13:46 EST 2021" starttimestamp="1612231299681" timestamp="4326563" />
  <DocumentChange __id="7734" _type="Insert" date="Mon Feb 01 22:13:44 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35463" docExpressionCount="4130" docLength="36520" length="5" offset="35635" repeat="5" starttimestamp="1612231299681" timestamp="4324361" timestamp2="4324799">
    <text><![CDATA[retva]]></text>
  </DocumentChange>
  <DocumentChange __id="7742" _type="Replace" date="Mon Feb 01 22:13:44 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35464" docExpressionCount="4130" docLength="36521" endLine="1029" insertionLength="6" int_docASTNodeCount="6153" int_docActiveCodeLength="35458" int_docExpressionCount="4129" int_docLength="36515" length="5" offset="35635" startLine="1029" starttimestamp="1612231299681" timestamp="4324922">
    <deletedText><![CDATA[retva]]></deletedText>
    <insertedText><![CDATA[retVal]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7744" _type="Insert" date="Mon Feb 01 22:13:44 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35465" docExpressionCount="4130" docLength="36522" length="1" offset="35641" starttimestamp="1612231299681" timestamp="4325150">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="7747" _type="Delete" date="Mon Feb 01 22:13:46 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35461" docExpressionCount="4130" docLength="36518" endLine="1031" length="4" offset="35644" startLine="1030" starttimestamp="1612231299681" timestamp="4326558">
    <text><![CDATA[		
]]></text>
  </DocumentChange>
  <Command __id="7749" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 22:13:50 EST 2021" starttimestamp="1612231299681" timestamp="4331264" />
  <Command __id="7750" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:13:51 EST 2021" starttimestamp="1612231299681" timestamp="4331353" />
  <Command __id="7751" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:13:51 EST 2021" starttimestamp="1612231299681" timestamp="4331579" />
  <Command __id="7752" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 22:13:56 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21089" docExpressionCount="2351" docLength="22236" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="4337299">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						for (File file : logs) {¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶									if (rest >= 1*ONE_SECOND) {¶										String range = "";¶										if (rest < 2*ONE_SECOND) {¶											range = "1s-2s";¶										} else if (rest < 5*ONE_SECOND) {¶											range = "2s-5s";¶										} else if (rest < 10*ONE_SECOND) {¶											range = "5s-10s";¶										} else if (rest < 20*ONE_SECOND) {¶											range = "10s-20s";¶										} else if (rest < 30*ONE_SECOND) {¶											range = "20s-30s";¶										} else if (rest < ONE_MIN) {¶											range = "30s-1m";¶										} else if (rest < TWO_MIN) {¶											range = "1m-2m";¶										} else if (rest < FIVE_MIN) {¶											range = "2m-5m";¶										} else if (rest < TEN_MIN) {¶											range = "5m-10m";¶										} else if (rest < 3*TEN_MIN) {¶											range = "10m-30m";¶										} else if (rest < 6*TEN_MIN) {¶											range = "30m-60m";¶										} else {¶											range = ">1h";¶										}¶										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶										rCommnad.setStartTimestamp(last.getStartTimestamp());¶										rCommnad.setTimestamp(last.getTimestamp()+1);¶										newCommands.add(rCommnad);¶									} ¶									newCommands.add(command);¶								}¶							}¶							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								// TODO Auto-generated catch block¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7753" _type="MoveCaretCommand" caretOffset="1658" date="Mon Feb 01 22:13:57 EST 2021" docOffset="7876" starttimestamp="1612231299681" timestamp="4337463" />
  <Command __id="7754" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 22:13:59 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35461" docExpressionCount="4130" docLength="36518" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="4339690">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶"), Diff(INSERT,"import java.io.FileNotFoundException;¶"), Diff(EQUAL,"import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶"), Diff(INSERT,"import java.text.ParseException;¶"), Diff(EQUAL,"import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶"), Diff(INSERT,"import fluorite.commands.WebCommand;¶"), Diff(EQUAL,"import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶"), Diff(INSERT,"	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		try {¶			BufferedReader br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss aa");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setStartTimestamp(date.getTime());¶						retVal.add(webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		return retVal;¶	}¶	¶"), Diff(EQUAL,"	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	private Analyzer analyzer;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private int count = 0;
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	private static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private static final String XML_FILE_ENDING = "\r\n</Events>"; 
	private int threadCount = 0;
	private CountDownLatch latch;
	private static final int THREAD_LIM = 5;


	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",
//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createRestCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		latch = new CountDownLatch(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					latch.countDown();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
								return;
							}
							try {
								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}finally {
								// TODO: handle finally clause
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
							}
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
//		return df.format(t/ONE_SECOND);
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			for(int k = 1; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {
//						continue;
//					}
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	protected List<EHICommand> readWebCommands(File file){
		if (!file.exists()) {
			return null;
		}
		List<EHICommand> retVal = new ArrayList<>();
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			String nextLine;
			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss aa");
			Date date;
			String keyword;
			String url;
			WebCommand webCommand;
			while ((nextLine = br.readLine()) != null) {
				try {
					String[] tokens = nextLine.split("\t");
					if (tokens.length >= 3) {
						date = format.parse(tokens[0]);
						keyword = tokens[1];
						url = tokens[2];
						webCommand = new WebCommand(keyword, url);
						webCommand.setStartTimestamp(date.getTime());
						retVal.add(webCommand);
					} else {
						System.out.println("Failed to parse WebCommand");
					}
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return retVal;
	}
	
	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
}
]]></snapshot>
  </Command>
  <Command __id="7755" _type="MoveCaretCommand" caretOffset="4603" date="Mon Feb 01 22:13:59 EST 2021" docOffset="35644" starttimestamp="1612231299681" timestamp="4339840" />
  <Command __id="7757" _type="MoveCaretCommand" caretOffset="1658" date="Mon Feb 01 22:14:05 EST 2021" docOffset="7876" starttimestamp="1612231299681" timestamp="4345522" />
  <Command __id="7756" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 22:14:04 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21089" docExpressionCount="2351" docLength="22236" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="4345318">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						for (File file : logs) {¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶									if (rest >= 1*ONE_SECOND) {¶										String range = "";¶										if (rest < 2*ONE_SECOND) {¶											range = "1s-2s";¶										} else if (rest < 5*ONE_SECOND) {¶											range = "2s-5s";¶										} else if (rest < 10*ONE_SECOND) {¶											range = "5s-10s";¶										} else if (rest < 20*ONE_SECOND) {¶											range = "10s-20s";¶										} else if (rest < 30*ONE_SECOND) {¶											range = "20s-30s";¶										} else if (rest < ONE_MIN) {¶											range = "30s-1m";¶										} else if (rest < TWO_MIN) {¶											range = "1m-2m";¶										} else if (rest < FIVE_MIN) {¶											range = "2m-5m";¶										} else if (rest < TEN_MIN) {¶											range = "5m-10m";¶										} else if (rest < 3*TEN_MIN) {¶											range = "10m-30m";¶										} else if (rest < 6*TEN_MIN) {¶											range = "30m-60m";¶										} else {¶											range = ">1h";¶										}¶										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶										rCommnad.setStartTimestamp(last.getStartTimestamp());¶										rCommnad.setTimestamp(last.getTimestamp()+1);¶										newCommands.add(rCommnad);¶									} ¶									newCommands.add(command);¶								}¶							}¶							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								// TODO Auto-generated catch block¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7758" _type="MoveCaretCommand" caretOffset="1617" date="Mon Feb 01 22:14:13 EST 2021" docOffset="3027" starttimestamp="1612231299681" timestamp="4353806" />
  <Command __id="7759" _type="MoveCaretCommand" caretOffset="1619" date="Mon Feb 01 22:14:14 EST 2021" docOffset="3029" starttimestamp="1612231299681" timestamp="4354355" />
  <DocumentChange __id="7760" _type="Delete" date="Mon Feb 01 22:14:18 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21085" docExpressionCount="2351" docLength="22232" endLine="68" length="4" offset="3025" repeat="4" startLine="68" starttimestamp="1612231299681" timestamp="4358686" timestamp2="4359260">
    <text><![CDATA[Rest]]></text>
  </DocumentChange>
  <Command __id="7761" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:18 EST 2021" starttimestamp="1612231299681" timestamp="4358689" />
  <Command __id="7763" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:18 EST 2021" starttimestamp="1612231299681" timestamp="4358837" />
  <Command __id="7765" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:18 EST 2021" starttimestamp="1612231299681" timestamp="4358970" />
  <Command __id="7767" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:18 EST 2021" starttimestamp="1612231299681" timestamp="4359262" />
  <Command __id="7769" _type="InsertStringCommand" date="Mon Feb 01 22:14:19 EST 2021" starttimestamp="1612231299681" timestamp="4359806" timestamp2="4359806">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="7771" _type="InsertStringCommand" date="Mon Feb 01 22:14:19 EST 2021" starttimestamp="1612231299681" timestamp="4360012" timestamp2="4360012">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7772" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:14:19 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4360055" />
  <Command __id="7773" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:14:19 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4360080" />
  <Command __id="7775" _type="InsertStringCommand" date="Mon Feb 01 22:14:19 EST 2021" starttimestamp="1612231299681" timestamp="4360143" timestamp2="4360143">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="7777" _type="InsertStringCommand" date="Mon Feb 01 22:14:19 EST 2021" starttimestamp="1612231299681" timestamp="4360203" timestamp2="4360203">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7779" _type="InsertStringCommand" date="Mon Feb 01 22:14:19 EST 2021" starttimestamp="1612231299681" timestamp="4360280" timestamp2="4360280">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7780" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:14:19 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4360280" />
  <Command __id="7781" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:14:19 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4360301" />
  <Command __id="7782" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 22:14:21 EST 2021" starttimestamp="1612231299681" timestamp="4362118" />
  <Command __id="7783" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:14:21 EST 2021" starttimestamp="1612231299681" timestamp="4362194" />
  <Command __id="7784" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:14:22 EST 2021" starttimestamp="1612231299681" timestamp="4362325" />
  <Command __id="7786" _type="MoveCaretCommand" caretOffset="4603" date="Mon Feb 01 22:14:22 EST 2021" docOffset="35644" starttimestamp="1612231299681" timestamp="4362863" />
  <DocumentChange __id="7768" _type="Insert" date="Mon Feb 01 22:14:19 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21090" docExpressionCount="2351" docLength="22237" length="5" offset="3025" repeat="5" starttimestamp="1612231299681" timestamp="4359799" timestamp2="4360272">
    <text><![CDATA[Pause]]></text>
  </DocumentChange>
  <Command __id="7785" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 22:14:22 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35461" docExpressionCount="4130" docLength="36518" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="4362711">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createRestCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		try {¶			BufferedReader br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss aa");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setStartTimestamp(date.getTime());¶						retVal.add(webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="7790" _type="Delete" date="Mon Feb 01 22:14:29 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35457" docExpressionCount="4130" docLength="36514" endLine="450" length="4" offset="17503" repeat="4" startLine="450" starttimestamp="1612231299681" timestamp="4369626" timestamp2="4370046">
    <text><![CDATA[Rest]]></text>
  </DocumentChange>
  <DocumentChange __id="7798" _type="Insert" date="Mon Feb 01 22:14:30 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35462" docExpressionCount="4130" docLength="36519" length="5" offset="17503" repeat="5" starttimestamp="1612231299681" timestamp="4370549" timestamp2="4371030">
    <text><![CDATA[Pause]]></text>
  </DocumentChange>
  <Command __id="7787" _type="MoveCaretCommand" caretOffset="2222" date="Mon Feb 01 22:14:27 EST 2021" docOffset="17482" starttimestamp="1612231299681" timestamp="4367891" />
  <Command __id="7788" _type="MoveCaretCommand" caretOffset="2222" date="Mon Feb 01 22:14:28 EST 2021" docOffset="17482" starttimestamp="1612231299681" timestamp="4368523" />
  <Command __id="7789" _type="MoveCaretCommand" caretOffset="2247" date="Mon Feb 01 22:14:28 EST 2021" docOffset="17507" starttimestamp="1612231299681" timestamp="4368915" />
  <Command __id="7791" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:29 EST 2021" starttimestamp="1612231299681" timestamp="4369632" />
  <Command __id="7793" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:29 EST 2021" starttimestamp="1612231299681" timestamp="4369724" />
  <Command __id="7795" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:29 EST 2021" starttimestamp="1612231299681" timestamp="4369842" />
  <Command __id="7797" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:29 EST 2021" starttimestamp="1612231299681" timestamp="4370049" />
  <Command __id="7799" _type="InsertStringCommand" date="Mon Feb 01 22:14:30 EST 2021" starttimestamp="1612231299681" timestamp="4370556" timestamp2="4370556">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="7801" _type="InsertStringCommand" date="Mon Feb 01 22:14:30 EST 2021" starttimestamp="1612231299681" timestamp="4370746" timestamp2="4370746">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7802" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:14:30 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4370788" />
  <Command __id="7803" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:14:30 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4370833" />
  <Command __id="7805" _type="InsertStringCommand" date="Mon Feb 01 22:14:30 EST 2021" starttimestamp="1612231299681" timestamp="4370847" timestamp2="4370847">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="7806" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:14:30 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4370939" />
  <Command __id="7807" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:14:30 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4370961" />
  <Command __id="7809" _type="InsertStringCommand" date="Mon Feb 01 22:14:30 EST 2021" starttimestamp="1612231299681" timestamp="4370972" timestamp2="4370972">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7811" _type="InsertStringCommand" date="Mon Feb 01 22:14:30 EST 2021" starttimestamp="1612231299681" timestamp="4371036" timestamp2="4371036">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7812" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:14:30 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4371078" />
  <Command __id="7813" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:14:30 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4371121" />
  <Command __id="7814" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:14:31 EST 2021" starttimestamp="1612231299681" timestamp="4372115" />
  <Command __id="7815" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 22:14:31 EST 2021" starttimestamp="1612231299681" timestamp="4372138" />
  <Command __id="7816" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:14:31 EST 2021" starttimestamp="1612231299681" timestamp="4372291" />
  <Command __id="7818" _type="MoveCaretCommand" caretOffset="592" date="Mon Feb 01 22:14:33 EST 2021" docOffset="619" starttimestamp="1612231299681" timestamp="4373689" />
  <Command __id="7819" _type="MoveCaretCommand" caretOffset="660" date="Mon Feb 01 22:14:34 EST 2021" docOffset="687" starttimestamp="1612231299681" timestamp="4374870" />
  <Command __id="7820" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:14:35 EST 2021" starttimestamp="1612231299681" timestamp="4375487" />
  <Command __id="7822" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:35 EST 2021" starttimestamp="1612231299681" timestamp="4375906" />
  <Command __id="7824" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:35 EST 2021" starttimestamp="1612231299681" timestamp="4376026" />
  <Command __id="7826" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:35 EST 2021" starttimestamp="1612231299681" timestamp="4376162" />
  <Command __id="7828" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:35 EST 2021" starttimestamp="1612231299681" timestamp="4376248" />
  <Command __id="7830" _type="InsertStringCommand" date="Mon Feb 01 22:14:36 EST 2021" starttimestamp="1612231299681" timestamp="4376595" timestamp2="4376595">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="7832" _type="InsertStringCommand" date="Mon Feb 01 22:14:36 EST 2021" starttimestamp="1612231299681" timestamp="4376838" timestamp2="4376838">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7834" _type="InsertStringCommand" date="Mon Feb 01 22:14:36 EST 2021" starttimestamp="1612231299681" timestamp="4376978" timestamp2="4376978">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="7836" _type="InsertStringCommand" date="Mon Feb 01 22:14:36 EST 2021" starttimestamp="1612231299681" timestamp="4377066" timestamp2="4377066">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7838" _type="InsertStringCommand" date="Mon Feb 01 22:14:36 EST 2021" starttimestamp="1612231299681" timestamp="4377127" timestamp2="4377127">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7817" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 22:14:33 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="983" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="4373472">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶//	private static AExperimentalReplayer replayer;¶	private static AReplayer replayer;¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶		replayer = new AReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶		replayer.analyzeFolder(classFolderPath);¶//		replayer.createRestCommandLogs(classFolderPath);¶//		replayer = new AExperimentalReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		replayer.createRestCommandLogs(experimentalClassFolderPath);¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="7821" _type="Delete" date="Mon Feb 01 22:14:35 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="979" endLine="17" length="4" offset="684" repeat="4" startLine="17" starttimestamp="1612231299681" timestamp="4375901" timestamp2="4376246">
    <text><![CDATA[Rest]]></text>
  </DocumentChange>
  <DocumentChange __id="7829" _type="Insert" date="Mon Feb 01 22:14:36 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="984" length="5" offset="684" repeat="5" starttimestamp="1612231299681" timestamp="4376590" timestamp2="4377122">
    <text><![CDATA[Pause]]></text>
  </DocumentChange>
  <DocumentChange __id="7840" _type="Delete" date="Mon Feb 01 22:14:39 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="980" endLine="21" length="4" offset="896" repeat="4" startLine="21" starttimestamp="1612231299681" timestamp="4379447" timestamp2="4379985">
    <text><![CDATA[Rest]]></text>
  </DocumentChange>
  <DocumentChange __id="7848" _type="Insert" date="Mon Feb 01 22:14:40 EST 2021" docASTNodeCount="78" docActiveCodeLength="667" docExpressionCount="38" docLength="985" length="5" offset="896" repeat="5" starttimestamp="1612231299681" timestamp="4380390" timestamp2="4380853">
    <text><![CDATA[Pause]]></text>
  </DocumentChange>
  <Command __id="7839" _type="MoveCaretCommand" caretOffset="873" date="Mon Feb 01 22:14:38 EST 2021" docOffset="900" starttimestamp="1612231299681" timestamp="4378910" />
  <Command __id="7841" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:39 EST 2021" starttimestamp="1612231299681" timestamp="4379450" />
  <Command __id="7843" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:39 EST 2021" starttimestamp="1612231299681" timestamp="4379577" />
  <Command __id="7845" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:39 EST 2021" starttimestamp="1612231299681" timestamp="4379796" />
  <Command __id="7847" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:14:39 EST 2021" starttimestamp="1612231299681" timestamp="4379987" />
  <Command __id="7849" _type="InsertStringCommand" date="Mon Feb 01 22:14:40 EST 2021" starttimestamp="1612231299681" timestamp="4380395" timestamp2="4380395">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="7851" _type="InsertStringCommand" date="Mon Feb 01 22:14:40 EST 2021" starttimestamp="1612231299681" timestamp="4380570" timestamp2="4380570">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7853" _type="InsertStringCommand" date="Mon Feb 01 22:14:40 EST 2021" starttimestamp="1612231299681" timestamp="4380711" timestamp2="4380711">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="7855" _type="InsertStringCommand" date="Mon Feb 01 22:14:40 EST 2021" starttimestamp="1612231299681" timestamp="4380798" timestamp2="4380798">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7857" _type="InsertStringCommand" date="Mon Feb 01 22:14:40 EST 2021" starttimestamp="1612231299681" timestamp="4380862" timestamp2="4380862">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7858" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 22:14:40 EST 2021" starttimestamp="1612231299681" timestamp="4381276" />
  <Command __id="7859" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:14:41 EST 2021" starttimestamp="1612231299681" timestamp="4381364" />
  <Command __id="7860" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:14:41 EST 2021" starttimestamp="1612231299681" timestamp="4381442" />
  <Command __id="7862" _type="MoveCaretCommand" caretOffset="1620" date="Mon Feb 01 22:14:42 EST 2021" docOffset="3030" starttimestamp="1612231299681" timestamp="4382938" />
  <Command __id="7872" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:15:02 EST 2021" starttimestamp="1612231299681" timestamp="4402859" />
  <Command __id="7873" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 22:15:02 EST 2021" starttimestamp="1612231299681" timestamp="4402882" />
  <Command __id="7874" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:15:02 EST 2021" starttimestamp="1612231299681" timestamp="4402961" />
  <Command __id="7875" _type="MoveCaretCommand" caretOffset="1960" date="Mon Feb 01 22:15:27 EST 2021" docOffset="3462" starttimestamp="1612231299681" timestamp="4427686" />
  <Command __id="7876" _type="MoveCaretCommand" caretOffset="1999" date="Mon Feb 01 22:15:27 EST 2021" docOffset="3501" starttimestamp="1612231299681" timestamp="4428046" />
  <Command __id="7877" _type="MoveCaretCommand" caretOffset="2086" date="Mon Feb 01 22:15:28 EST 2021" docOffset="3588" starttimestamp="1612231299681" timestamp="4428501" />
  <Command __id="7878" _type="MoveCaretCommand" caretOffset="2086" date="Mon Feb 01 22:15:28 EST 2021" docOffset="3588" starttimestamp="1612231299681" timestamp="4428856" />
  <Command __id="7879" _type="MoveCaretCommand" caretOffset="2125" date="Mon Feb 01 22:15:28 EST 2021" docOffset="3627" starttimestamp="1612231299681" timestamp="4429173" />
  <Command __id="7880" _type="MoveCaretCommand" caretOffset="2131" date="Mon Feb 01 22:15:29 EST 2021" docOffset="3633" starttimestamp="1612231299681" timestamp="4429781" />
  <Command __id="7861" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 22:14:42 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21090" docExpressionCount="2351" docLength="22237" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="4382765">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void create"), Diff(DELETE,"Rest"), Diff(INSERT,"Pause"), Diff(EQUAL,"CommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						for (File file : logs) {¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶									if (rest >= 1*ONE_SECOND) {¶										String range = "";¶										if (rest < 2*ONE_SECOND) {¶											range = "1s-2s";¶										} else if (rest < 5*ONE_SECOND) {¶											range = "2s-5s";¶										} else if (rest < 10*ONE_SECOND) {¶											range = "5s-10s";¶										} else if (rest < 20*ONE_SECOND) {¶											range = "10s-20s";¶										} else if (rest < 30*ONE_SECOND) {¶											range = "20s-30s";¶										} else if (rest < ONE_MIN) {¶											range = "30s-1m";¶										} else if (rest < TWO_MIN) {¶											range = "1m-2m";¶										} else if (rest < FIVE_MIN) {¶											range = "2m-5m";¶										} else if (rest < TEN_MIN) {¶											range = "5m-10m";¶										} else if (rest < 3*TEN_MIN) {¶											range = "10m-30m";¶										} else if (rest < 6*TEN_MIN) {¶											range = "30m-60m";¶										} else {¶											range = ">1h";¶										}¶										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶										rCommnad.setStartTimestamp(last.getStartTimestamp());¶										rCommnad.setTimestamp(last.getTimestamp()+1);¶										newCommands.add(rCommnad);¶									} ¶									newCommands.add(command);¶								}¶							}¶							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								// TODO Auto-generated catch block¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private CountDownLatch latch;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						for (File file : logs) {
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
									if (rest >= 1*ONE_SECOND) {
										String range = "";
										if (rest < 2*ONE_SECOND) {
											range = "1s-2s";
										} else if (rest < 5*ONE_SECOND) {
											range = "2s-5s";
										} else if (rest < 10*ONE_SECOND) {
											range = "5s-10s";
										} else if (rest < 20*ONE_SECOND) {
											range = "10s-20s";
										} else if (rest < 30*ONE_SECOND) {
											range = "20s-30s";
										} else if (rest < ONE_MIN) {
											range = "30s-1m";
										} else if (rest < TWO_MIN) {
											range = "1m-2m";
										} else if (rest < FIVE_MIN) {
											range = "2m-5m";
										} else if (rest < TEN_MIN) {
											range = "5m-10m";
										} else if (rest < 3*TEN_MIN) {
											range = "10m-30m";
										} else if (rest < 6*TEN_MIN) {
											range = "30m-60m";
										} else {
											range = ">1h";
										}
										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
										rCommnad.setStartTimestamp(last.getStartTimestamp());
										rCommnad.setTimestamp(last.getTimestamp()+1);
										newCommands.add(rCommnad);
									} 
									newCommands.add(command);
								}
							}
							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						// TODO: handle exception
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
//			if (j == students.length-1) {
//				try {
//					thread.join();
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} 
//				System.exit(0);
//			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",
//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",
//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",
//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <DocumentChange __id="7864" _type="Delete" date="Mon Feb 01 22:14:59 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21072" docExpressionCount="2351" docLength="22010" endLine="214" length="227" offset="7471" startLine="205" starttimestamp="1612231299681" timestamp="4399693">
    <text><![CDATA[//			if (j == students.length-1) {
//				try {
//					thread.join();
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				} 
//				System.exit(0);
//			}
]]></text>
  </DocumentChange>
  <DocumentChange __id="7870" _type="Delete" date="Mon Feb 01 22:15:01 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21067" docExpressionCount="2351" docLength="21971" endLine="210" length="39" offset="7542" startLine="209" starttimestamp="1612231299681" timestamp="4401684">
    <text><![CDATA[			// TODO Auto-generated catch block
]]></text>
  </DocumentChange>
  <Command __id="7881" _type="MoveCaretCommand" caretOffset="2479" date="Mon Feb 01 22:15:36 EST 2021" docOffset="4130" starttimestamp="1612231299681" timestamp="4436905" />
  <Command __id="7882" _type="MoveCaretCommand" caretOffset="2479" date="Mon Feb 01 22:15:37 EST 2021" docOffset="4130" starttimestamp="1612231299681" timestamp="4437487" />
  <Command __id="7883" _type="MoveCaretCommand" caretOffset="2491" date="Mon Feb 01 22:15:37 EST 2021" docOffset="4142" starttimestamp="1612231299681" timestamp="4437815" />
  <Command __id="7885" _type="InsertStringCommand" date="Mon Feb 01 22:15:39 EST 2021" starttimestamp="1612231299681" timestamp="4439560" timestamp2="4439560">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7886" _type="MoveCaretCommand" caretOffset="2223" date="Mon Feb 01 22:15:54 EST 2021" docOffset="3725" starttimestamp="1612231299681" timestamp="4454356" />
  <Command __id="7887" _type="ShellCommand" date="Mon Feb 01 22:16:00 EST 2021" starttimestamp="1612231299681" timestamp="4460373" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="7884" _type="Insert" date="Mon Feb 01 22:15:39 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21075" docExpressionCount="2351" docLength="21979" length="8" offset="4142" starttimestamp="1612231299681" timestamp="4439548">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <Command __id="7888" _type="ShellCommand" date="Mon Feb 01 22:16:04 EST 2021" starttimestamp="1612231299681" timestamp="4465047" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7889" _type="MoveCaretCommand" caretOffset="2499" date="Mon Feb 01 22:16:04 EST 2021" docOffset="4150" starttimestamp="1612231299681" timestamp="4465110" />
  <DocumentChange __id="7890" _type="Insert" date="Mon Feb 01 22:16:09 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21078" docExpressionCount="2352" docLength="21982" length="3" offset="4150" repeat="3" starttimestamp="1612231299681" timestamp="4469674" timestamp2="4469956">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <Command __id="7891" _type="InsertStringCommand" date="Mon Feb 01 22:16:09 EST 2021" starttimestamp="1612231299681" timestamp="4469680" timestamp2="4469680">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="7892" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:16:09 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4469773" />
  <DocumentChange __id="7895" _type="Delete" date="Mon Feb 01 22:16:10 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21075" docExpressionCount="2351" docLength="21979" endLine="103" length="3" offset="4150" startLine="103" starttimestamp="1612231299681" timestamp="4471173">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <Command __id="7896" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:16:10 EST 2021" starttimestamp="1612231299681" timestamp="4471176" />
  <DocumentChange __id="7897" _type="Insert" date="Mon Feb 01 22:16:19 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21081" docExpressionCount="2352" docLength="21985" length="6" offset="4150" repeat="6" starttimestamp="1612231299681" timestamp="4479442" timestamp2="4480309">
    <text><![CDATA[readwe]]></text>
  </DocumentChange>
  <Command __id="7903" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:16:20 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4481268" />
  <DocumentChange __id="7904" _type="Replace" date="Mon Feb 01 22:16:20 EST 2021" docASTNodeCount="3454" docActiveCodeLength="21096" docExpressionCount="2354" docLength="22000" endLine="103" insertionLength="21" int_docASTNodeCount="3450" int_docActiveCodeLength="21075" int_docExpressionCount="2351" int_docLength="21979" length="6" offset="4150" startLine="103" starttimestamp="1612231299681" timestamp="4481281">
    <deletedText><![CDATA[readwe]]></deletedText>
    <insertedText><![CDATA[readWebCommands(file)]]></insertedText>
  </DocumentChange>
  <Command __id="7905" _type="InsertStringCommand" date="Mon Feb 01 22:16:21 EST 2021" starttimestamp="1612231299681" timestamp="4481384" timestamp2="4481384">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7906" _type="Replace" date="Mon Feb 01 22:16:22 EST 2021" docASTNodeCount="3454" docActiveCodeLength="21093" docExpressionCount="2354" docLength="21997" endLine="103" insertionLength="1" int_docASTNodeCount="3453" int_docActiveCodeLength="21092" int_docExpressionCount="2353" int_docLength="21996" length="4" offset="4166" startLine="103" starttimestamp="1612231299681" timestamp="4482754">
    <deletedText><![CDATA[file]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <Command __id="7907" _type="InsertStringCommand" date="Mon Feb 01 22:16:22 EST 2021" starttimestamp="1612231299681" timestamp="4482761" timestamp2="4482761">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="7908" _type="Insert" date="Mon Feb 01 22:16:22 EST 2021" docASTNodeCount="3032" docActiveCodeLength="21100" docExpressionCount="2064" docLength="22004" length="7" offset="4167" repeat="7" starttimestamp="1612231299681" timestamp="4482820" timestamp2="4483380">
    <text><![CDATA[ew file]]></text>
  </DocumentChange>
  <Command __id="7909" _type="InsertStringCommand" date="Mon Feb 01 22:16:22 EST 2021" starttimestamp="1612231299681" timestamp="4482822" timestamp2="4482822">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7911" _type="InsertStringCommand" date="Mon Feb 01 22:16:22 EST 2021" starttimestamp="1612231299681" timestamp="4482830" timestamp2="4482830">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="7912" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:16:22 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4482873" />
  <Command __id="7914" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:16:22 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4483063" />
  <Command __id="7916" _type="InsertStringCommand" date="Mon Feb 01 22:16:22 EST 2021" starttimestamp="1612231299681" timestamp="4483071" timestamp2="4483071">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="7918" _type="InsertStringCommand" date="Mon Feb 01 22:16:22 EST 2021" starttimestamp="1612231299681" timestamp="4483117" timestamp2="4483117">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7919" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:16:22 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4483159" />
  <Command __id="7922" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:16:23 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4483486" />
  <Command __id="7925" _type="InsertStringCommand" date="Mon Feb 01 22:16:23 EST 2021" starttimestamp="1612231299681" timestamp="4483613" timestamp2="4483613">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="7923" _type="Replace" date="Mon Feb 01 22:16:23 EST 2021" docASTNodeCount="3032" docActiveCodeLength="21102" docExpressionCount="2064" docLength="22006" endLine="103" insertionLength="4" int_docASTNodeCount="3032" int_docActiveCodeLength="21098" int_docExpressionCount="2064" int_docLength="22002" length="2" offset="4170" startLine="103" starttimestamp="1612231299681" timestamp="4483492">
    <deletedText><![CDATA[fi]]></deletedText>
    <insertedText><![CDATA[File]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7924" _type="Replace" date="Mon Feb 01 22:16:23 EST 2021" docASTNodeCount="3457" docActiveCodeLength="21110" docExpressionCount="2356" docLength="22014" endLine="103" insertionLength="10" int_docASTNodeCount="3032" int_docActiveCodeLength="21100" int_docExpressionCount="2064" int_docLength="22004" length="2" offset="4174" startLine="103" starttimestamp="1612231299681" timestamp="4483502">
    <deletedText><![CDATA[le]]></deletedText>
    <insertedText><![CDATA[(pathname)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7931" _type="Insert" date="Mon Feb 01 22:16:26 EST 2021" docASTNodeCount="3457" docActiveCodeLength="21111" docExpressionCount="2356" docLength="22015" length="1" offset="4185" starttimestamp="1612231299681" timestamp="4486713">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="7936" _type="Delete" date="Mon Feb 01 22:16:27 EST 2021" docASTNodeCount="3456" docActiveCodeLength="21103" docExpressionCount="2355" docLength="22007" endLine="103" length="8" offset="4175" startLine="103" starttimestamp="1612231299681" timestamp="4487658">
    <text><![CDATA[pathname]]></text>
  </DocumentChange>
  <DocumentChange __id="7938" _type="Insert" date="Mon Feb 01 22:16:31 EST 2021" docASTNodeCount="3457" docActiveCodeLength="21106" docExpressionCount="2356" docLength="22010" length="3" offset="4175" repeat="3" starttimestamp="1612231299681" timestamp="4491919" timestamp2="4492231">
    <text><![CDATA[log]]></text>
  </DocumentChange>
  <DocumentChange __id="7943" _type="Delete" date="Mon Feb 01 22:16:32 EST 2021" docASTNodeCount="3456" docActiveCodeLength="21103" docExpressionCount="2355" docLength="22007" endLine="103" length="3" offset="4175" repeat="3" startLine="103" starttimestamp="1612231299681" timestamp="4493006" timestamp2="4493529">
    <text><![CDATA[log]]></text>
  </DocumentChange>
  <DocumentChange __id="7946" _type="Insert" date="Mon Feb 01 22:16:33 EST 2021" docASTNodeCount="3457" docActiveCodeLength="21107" docExpressionCount="2356" docLength="22011" length="4" offset="4175" repeat="4" starttimestamp="1612231299681" timestamp="4493671" timestamp2="4494087">
    <text><![CDATA[stud]]></text>
  </DocumentChange>
  <DocumentChange __id="7954" _type="Replace" date="Mon Feb 01 22:16:33 EST 2021" docASTNodeCount="3457" docActiveCodeLength="21116" docExpressionCount="2356" docLength="22020" endLine="103" insertionLength="13" int_docASTNodeCount="3456" int_docActiveCodeLength="21103" int_docExpressionCount="2355" int_docLength="22007" length="4" offset="4175" startLine="103" starttimestamp="1612231299681" timestamp="4494135">
    <deletedText><![CDATA[stud]]></deletedText>
    <insertedText><![CDATA[studentFolder]]></insertedText>
  </DocumentChange>
  <Command __id="7926" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:16:24 EST 2021" starttimestamp="1612231299681" timestamp="4484775" />
  <Command __id="7927" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:16:24 EST 2021" starttimestamp="1612231299681" timestamp="4484935" />
  <Command __id="7928" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:16:24 EST 2021" starttimestamp="1612231299681" timestamp="4485266" />
  <Command __id="7929" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:16:25 EST 2021" starttimestamp="1612231299681" timestamp="4485426" />
  <Command __id="7930" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:16:25 EST 2021" starttimestamp="1612231299681" timestamp="4486088" />
  <Command __id="7932" _type="InsertStringCommand" date="Mon Feb 01 22:16:26 EST 2021" starttimestamp="1612231299681" timestamp="4486721" timestamp2="4486721">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7933" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:16:26 EST 2021" starttimestamp="1612231299681" timestamp="4487017" />
  <Command __id="7934" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:16:26 EST 2021" starttimestamp="1612231299681" timestamp="4487149" />
  <Command __id="7935" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Mon Feb 01 22:16:26 EST 2021" starttimestamp="1612231299681" timestamp="4487292" />
  <Command __id="7937" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:16:27 EST 2021" starttimestamp="1612231299681" timestamp="4487665" />
  <Command __id="7939" _type="InsertStringCommand" date="Mon Feb 01 22:16:31 EST 2021" starttimestamp="1612231299681" timestamp="4491929" timestamp2="4491929">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="7940" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:16:31 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4491968" />
  <Command __id="7948" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:16:33 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4493789" />
  <Command __id="7950" _type="InsertStringCommand" date="Mon Feb 01 22:16:33 EST 2021" starttimestamp="1612231299681" timestamp="4493875" timestamp2="4493875">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="7951" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:16:33 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4493915" />
  <Command __id="7953" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:16:33 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4494130" />
  <Command __id="7955" _type="InsertStringCommand" date="Mon Feb 01 22:16:33 EST 2021" starttimestamp="1612231299681" timestamp="4494144" timestamp2="4494144">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7957" _type="InsertStringCommand" date="Mon Feb 01 22:16:35 EST 2021" starttimestamp="1612231299681" timestamp="4495737" timestamp2="4495737">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="7959" _type="InsertStringCommand" date="Mon Feb 01 22:16:35 EST 2021" starttimestamp="1612231299681" timestamp="4495878" timestamp2="4495878">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7961" _type="InsertStringCommand" date="Mon Feb 01 22:16:36 EST 2021" starttimestamp="1612231299681" timestamp="4496393" timestamp2="4496393">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="7963" _type="InsertStringCommand" date="Mon Feb 01 22:16:36 EST 2021" starttimestamp="1612231299681" timestamp="4497081" timestamp2="4497081">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="7965" _type="InsertStringCommand" date="Mon Feb 01 22:16:36 EST 2021" starttimestamp="1612231299681" timestamp="4497259" timestamp2="4497259">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7967" _type="InsertStringCommand" date="Mon Feb 01 22:16:37 EST 2021" starttimestamp="1612231299681" timestamp="4497347" timestamp2="4497347">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7969" _type="InsertStringCommand" date="Mon Feb 01 22:16:37 EST 2021" starttimestamp="1612231299681" timestamp="4497675" timestamp2="4497675">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7971" _type="InsertStringCommand" date="Mon Feb 01 22:16:37 EST 2021" starttimestamp="1612231299681" timestamp="4497820" timestamp2="4497820">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7973" _type="InsertStringCommand" date="Mon Feb 01 22:16:37 EST 2021" starttimestamp="1612231299681" timestamp="4497902" timestamp2="4497902">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7975" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:16:38 EST 2021" starttimestamp="1612231299681" timestamp="4498685" />
  <Command __id="7977" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:16:38 EST 2021" starttimestamp="1612231299681" timestamp="4498821" />
  <Command __id="7979" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:16:38 EST 2021" starttimestamp="1612231299681" timestamp="4498936" />
  <Command __id="7981" _type="InsertStringCommand" date="Mon Feb 01 22:16:38 EST 2021" starttimestamp="1612231299681" timestamp="4499092" timestamp2="4499092">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="7983" _type="InsertStringCommand" date="Mon Feb 01 22:16:39 EST 2021" starttimestamp="1612231299681" timestamp="4499341" timestamp2="4499341">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7985" _type="InsertStringCommand" date="Mon Feb 01 22:16:39 EST 2021" starttimestamp="1612231299681" timestamp="4499405" timestamp2="4499405">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7987" _type="InsertStringCommand" date="Mon Feb 01 22:16:39 EST 2021" starttimestamp="1612231299681" timestamp="4499462" timestamp2="4499462">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7988" _type="ShellCommand" date="Mon Feb 01 22:16:39 EST 2021" starttimestamp="1612231299681" timestamp="4499757" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7989" _type="ShellCommand" date="Mon Feb 01 22:16:50 EST 2021" starttimestamp="1612231299681" timestamp="4510962" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7990" _type="MoveCaretCommand" caretOffset="2421" date="Mon Feb 01 22:16:50 EST 2021" docOffset="4072" starttimestamp="1612231299681" timestamp="4511020" />
  <Command __id="7991" _type="MoveCaretCommand" caretOffset="2515" date="Mon Feb 01 22:16:53 EST 2021" docOffset="4166" starttimestamp="1612231299681" timestamp="4513862" />
  <Command __id="7992" _type="SelectTextCommand" caretOffset="2538" date="Mon Feb 01 22:17:00 EST 2021" end="2538" start="2515" starttimestamp="1612231299681" timestamp="4520338" />
  <Command __id="7993" _type="MoveCaretCommand" caretOffset="2536" date="Mon Feb 01 22:17:00 EST 2021" docOffset="4187" starttimestamp="1612231299681" timestamp="4521045" />
  <Command __id="7994" _type="MoveCaretCommand" caretOffset="2540" date="Mon Feb 01 22:17:01 EST 2021" docOffset="4191" starttimestamp="1612231299681" timestamp="4521726" />
  <DocumentChange __id="7956" _type="Insert" date="Mon Feb 01 22:16:35 EST 2021" docASTNodeCount="3458" docActiveCodeLength="21126" docExpressionCount="2357" docLength="22030" length="10" offset="4188" repeat="9" starttimestamp="1612231299681" timestamp="4495731" timestamp2="4497900">
    <text><![CDATA[, "Broser"]]></text>
  </DocumentChange>
  <DocumentChange __id="7974" _type="Delete" date="Mon Feb 01 22:16:38 EST 2021" docASTNodeCount="3458" docActiveCodeLength="21123" docExpressionCount="2357" docLength="22027" endLine="103" length="3" offset="4194" repeat="3" startLine="103" starttimestamp="1612231299681" timestamp="4498682" timestamp2="4498933">
    <text><![CDATA[ser]]></text>
  </DocumentChange>
  <DocumentChange __id="7980" _type="Insert" date="Mon Feb 01 22:16:38 EST 2021" docASTNodeCount="3458" docActiveCodeLength="21127" docExpressionCount="2357" docLength="22031" length="4" offset="4194" repeat="4" starttimestamp="1612231299681" timestamp="4499090" timestamp2="4499459">
    <text><![CDATA[wser]]></text>
  </DocumentChange>
  <Command __id="7995" _type="MoveCaretCommand" caretOffset="2549" date="Mon Feb 01 22:17:06 EST 2021" docOffset="4200" starttimestamp="1612231299681" timestamp="4526389" />
  <Command __id="7997" _type="InsertStringCommand" date="Mon Feb 01 22:17:08 EST 2021" starttimestamp="1612231299681" timestamp="4528495" timestamp2="4528495">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7998" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:08 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4528537" />
  <Command __id="7999" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:18 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4538883" />
  <Command __id="8000" _type="MoveCaretCommand" caretOffset="2499" date="Mon Feb 01 22:17:18 EST 2021" docOffset="4150" starttimestamp="1612231299681" timestamp="4538957" />
  <Command __id="8002" _type="InsertStringCommand" date="Mon Feb 01 22:17:19 EST 2021" starttimestamp="1612231299681" timestamp="4539611" timestamp2="4539611">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8004" _type="InsertStringCommand" date="Mon Feb 01 22:17:19 EST 2021" starttimestamp="1612231299681" timestamp="4539759" timestamp2="4539759">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8005" _type="MoveCaretCommand" caretOffset="2554" date="Mon Feb 01 22:17:20 EST 2021" docOffset="4205" starttimestamp="1612231299681" timestamp="4540451" />
  <Command __id="8006" _type="SelectTextCommand" caretOffset="2552" date="Mon Feb 01 22:17:22 EST 2021" end="2552" start="2517" starttimestamp="1612231299681" timestamp="4542587" />
  <Command __id="8007" _type="CopyCommand" date="Mon Feb 01 22:17:22 EST 2021" starttimestamp="1612231299681" timestamp="4542749" />
  <Command __id="8008" _type="MoveCaretCommand" caretOffset="2554" date="Mon Feb 01 22:17:22 EST 2021" docOffset="4205" starttimestamp="1612231299681" timestamp="4543003" />
  <Command __id="8010" _type="InsertStringCommand" date="Mon Feb 01 22:17:23 EST 2021" starttimestamp="1612231299681" timestamp="4543671" timestamp2="4543671">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8011" _type="ShellCommand" date="Mon Feb 01 22:17:26 EST 2021" starttimestamp="1612231299681" timestamp="4546530" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="7996" _type="Insert" date="Mon Feb 01 22:17:08 EST 2021" docASTNodeCount="3460" docActiveCodeLength="21128" docExpressionCount="2359" docLength="22032" length="1" offset="4200" starttimestamp="1612231299681" timestamp="4528489">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="8001" _type="Insert" date="Mon Feb 01 22:17:19 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21075" docExpressionCount="2351" docLength="22034" length="2" offset="4150" repeat="2" starttimestamp="1612231299681" timestamp="4539605" timestamp2="4539752">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8009" _type="Insert" date="Mon Feb 01 22:17:23 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21083" docExpressionCount="2351" docLength="22042" length="8" offset="4205" starttimestamp="1612231299681" timestamp="4543652">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <Command __id="8012" _type="ShellCommand" date="Mon Feb 01 22:17:28 EST 2021" starttimestamp="1612231299681" timestamp="4548864" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8013" _type="MoveCaretCommand" caretOffset="2562" date="Mon Feb 01 22:17:28 EST 2021" docOffset="4213" starttimestamp="1612231299681" timestamp="4548938" />
  <DocumentChange __id="8014" _type="Insert" date="Mon Feb 01 22:17:33 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21086" docExpressionCount="2352" docLength="22045" length="3" offset="4213" repeat="3" starttimestamp="1612231299681" timestamp="4553950" timestamp2="4554189">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <DocumentChange __id="8019" _type="Delete" date="Mon Feb 01 22:17:34 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21083" docExpressionCount="2351" docLength="22042" endLine="104" length="3" offset="4213" repeat="3" startLine="104" starttimestamp="1612231299681" timestamp="4554759" timestamp2="4555420">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <DocumentChange __id="8022" _type="Insert" date="Mon Feb 01 22:17:36 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21084" docExpressionCount="2352" docLength="22043" length="1" offset="4213" starttimestamp="1612231299681" timestamp="4556880">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="8023" _type="Delete" date="Mon Feb 01 22:17:37 EST 2021" docASTNodeCount="3450" docActiveCodeLength="21083" docExpressionCount="2351" docLength="22042" endLine="104" length="1" offset="4213" startLine="104" starttimestamp="1612231299681" timestamp="4557461">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="8024" _type="Insert" date="Mon Feb 01 22:17:37 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21087" docExpressionCount="2352" docLength="22046" length="4" offset="4213" repeat="4" starttimestamp="1612231299681" timestamp="4558312" timestamp2="4558549">
    <text><![CDATA[File]]></text>
  </DocumentChange>
  <DocumentChange __id="8029" _type="Replace" date="Mon Feb 01 22:17:38 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21104" docExpressionCount="2352" docLength="22063" endLine="104" insertionLength="21" int_docASTNodeCount="3450" int_docActiveCodeLength="21083" int_docExpressionCount="2351" int_docLength="22042" length="4" offset="4213" startLine="104" starttimestamp="1612231299681" timestamp="4558660">
    <deletedText><![CDATA[File]]></deletedText>
    <insertedText><![CDATA[DIFFICULTY_FIlE_NAME ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8031" _type="Replace" date="Mon Feb 01 22:17:39 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21087" docExpressionCount="2352" docLength="22046" endLine="104" insertionLength="4" int_docASTNodeCount="3450" int_docActiveCodeLength="21083" int_docExpressionCount="2351" int_docLength="22042" length="21" offset="4213" startLine="104" starttimestamp="1612231299681" timestamp="4559352">
    <deletedText><![CDATA[DIFFICULTY_FIlE_NAME ]]></deletedText>
    <insertedText><![CDATA[File]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8033" _type="Replace" date="Mon Feb 01 22:17:39 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21084" docExpressionCount="2352" docLength="22043" endLine="104" insertionLength="1" int_docASTNodeCount="3450" int_docActiveCodeLength="21083" int_docExpressionCount="2351" int_docLength="22042" length="4" offset="4213" startLine="104" starttimestamp="1612231299681" timestamp="4559789">
    <deletedText><![CDATA[File]]></deletedText>
    <insertedText><![CDATA[F]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8035" _type="Insert" date="Mon Feb 01 22:17:39 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21085" docExpressionCount="2352" docLength="22044" length="1" offset="4214" starttimestamp="1612231299681" timestamp="4560008">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="8038" _type="Delete" date="Mon Feb 01 22:17:40 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21084" docExpressionCount="2352" docLength="22043" endLine="104" length="1" offset="4214" startLine="104" starttimestamp="1612231299681" timestamp="4560381">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="8039" _type="Insert" date="Mon Feb 01 22:17:40 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21087" docExpressionCount="2352" docLength="22046" length="3" offset="4214" repeat="3" starttimestamp="1612231299681" timestamp="4560541" timestamp2="4560688">
    <text><![CDATA[ile]]></text>
  </DocumentChange>
  <DocumentChange __id="8043" _type="Replace" date="Mon Feb 01 22:17:40 EST 2021" docASTNodeCount="3452" docActiveCodeLength="21088" docExpressionCount="2352" docLength="22047" endLine="104" insertionLength="5" int_docASTNodeCount="3450" int_docActiveCodeLength="21083" int_docExpressionCount="2351" int_docLength="22042" length="4" offset="4213" startLine="104" starttimestamp="1612231299681" timestamp="4561081">
    <deletedText><![CDATA[File]]></deletedText>
    <insertedText><![CDATA[File ]]></insertedText>
  </DocumentChange>
  <Command __id="8015" _type="InsertStringCommand" date="Mon Feb 01 22:17:33 EST 2021" starttimestamp="1612231299681" timestamp="4553955" timestamp2="4553955">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="8016" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:33 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4553998" />
  <Command __id="8028" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:38 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4558654" />
  <Command __id="8030" _type="InsertStringCommand" date="Mon Feb 01 22:17:38 EST 2021" starttimestamp="1612231299681" timestamp="4558672" timestamp2="4558672">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8032" _type="UndoCommand" date="Mon Feb 01 22:17:39 EST 2021" starttimestamp="1612231299681" timestamp="4559395" />
  <Command __id="8034" _type="InsertStringCommand" date="Mon Feb 01 22:17:39 EST 2021" starttimestamp="1612231299681" timestamp="4559795" timestamp2="4559795">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="8036" _type="InsertStringCommand" date="Mon Feb 01 22:17:39 EST 2021" starttimestamp="1612231299681" timestamp="4560014" timestamp2="4560014">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="8037" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:39 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4560056" />
  <Command __id="8042" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:40 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4561076" />
  <Command __id="8044" _type="InsertStringCommand" date="Mon Feb 01 22:17:40 EST 2021" starttimestamp="1612231299681" timestamp="4561092" timestamp2="4561092">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8046" _type="InsertStringCommand" date="Mon Feb 01 22:17:43 EST 2021" starttimestamp="1612231299681" timestamp="4564313" timestamp2="4564313">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="8047" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4564349" />
  <Command __id="8049" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:44 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4564505" />
  <Command __id="8051" _type="InsertStringCommand" date="Mon Feb 01 22:17:44 EST 2021" starttimestamp="1612231299681" timestamp="4564588" timestamp2="4564588">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="8052" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4564627" />
  <Command __id="8053" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:44 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4564660" />
  <Command __id="8055" _type="InsertStringCommand" date="Mon Feb 01 22:17:44 EST 2021" starttimestamp="1612231299681" timestamp="4564690" timestamp2="4564690">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8057" _type="InsertStringCommand" date="Mon Feb 01 22:17:44 EST 2021" starttimestamp="1612231299681" timestamp="4564780" timestamp2="4564780">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8058" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4564823" />
  <Command __id="8059" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:44 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4564858" />
  <Command __id="8061" _type="InsertStringCommand" date="Mon Feb 01 22:17:44 EST 2021" starttimestamp="1612231299681" timestamp="4564875" timestamp2="4564875">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8062" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:44 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4564968" />
  <Command __id="8063" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:44 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4564992" />
  <Command __id="8065" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:17:44 EST 2021" starttimestamp="1612231299681" timestamp="4565295" />
  <DocumentChange __id="8045" _type="Insert" date="Mon Feb 01 22:17:43 EST 2021" docASTNodeCount="3455" docActiveCodeLength="21094" docExpressionCount="2353" docLength="22053" length="6" offset="4218" repeat="6" starttimestamp="1612231299681" timestamp="4564307" timestamp2="4564870">
    <text><![CDATA[broser]]></text>
  </DocumentChange>
  <DocumentChange __id="8064" _type="Delete" date="Mon Feb 01 22:17:44 EST 2021" docASTNodeCount="3455" docActiveCodeLength="21091" docExpressionCount="2353" docLength="22050" endLine="104" length="3" offset="4221" repeat="3" startLine="104" starttimestamp="1612231299681" timestamp="4565292" timestamp2="4565686">
    <text><![CDATA[ser]]></text>
  </DocumentChange>
  <DocumentChange __id="8070" _type="Insert" date="Mon Feb 01 22:17:45 EST 2021" docASTNodeCount="3455" docActiveCodeLength="21096" docExpressionCount="2353" docLength="22055" length="5" offset="4221" repeat="5" starttimestamp="1612231299681" timestamp="4565914" timestamp2="4566464">
    <text><![CDATA[wser ]]></text>
  </DocumentChange>
  <Command __id="8067" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:17:45 EST 2021" starttimestamp="1612231299681" timestamp="4565439" />
  <Command __id="8069" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:17:45 EST 2021" starttimestamp="1612231299681" timestamp="4565689" />
  <Command __id="8071" _type="InsertStringCommand" date="Mon Feb 01 22:17:45 EST 2021" starttimestamp="1612231299681" timestamp="4565920" timestamp2="4565920">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="8072" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:45 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4566013" />
  <Command __id="8073" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:45 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4566047" />
  <Command __id="8075" _type="InsertStringCommand" date="Mon Feb 01 22:17:45 EST 2021" starttimestamp="1612231299681" timestamp="4566153" timestamp2="4566153">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8076" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:45 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4566246" />
  <Command __id="8077" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:45 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4566270" />
  <Command __id="8079" _type="InsertStringCommand" date="Mon Feb 01 22:17:45 EST 2021" starttimestamp="1612231299681" timestamp="4566281" timestamp2="4566281">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8081" _type="InsertStringCommand" date="Mon Feb 01 22:17:46 EST 2021" starttimestamp="1612231299681" timestamp="4566339" timestamp2="4566339">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8082" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:46 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4566382" />
  <Command __id="8083" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4566408" />
  <Command __id="8085" _type="InsertStringCommand" date="Mon Feb 01 22:17:46 EST 2021" starttimestamp="1612231299681" timestamp="4566469" timestamp2="4566469">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8087" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:17:47 EST 2021" starttimestamp="1612231299681" timestamp="4567690" />
  <Command __id="8089" _type="InsertStringCommand" date="Mon Feb 01 22:17:48 EST 2021" starttimestamp="1612231299681" timestamp="4568400" timestamp2="4568400">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8091" _type="InsertStringCommand" date="Mon Feb 01 22:17:48 EST 2021" starttimestamp="1612231299681" timestamp="4568639" timestamp2="4568639">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="8093" _type="InsertStringCommand" date="Mon Feb 01 22:17:48 EST 2021" starttimestamp="1612231299681" timestamp="4568761" timestamp2="4568761">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8095" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:17:48 EST 2021" starttimestamp="1612231299681" timestamp="4569082" />
  <Command __id="8097" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:17:48 EST 2021" starttimestamp="1612231299681" timestamp="4569208" />
  <Command __id="8099" _type="InsertStringCommand" date="Mon Feb 01 22:17:49 EST 2021" starttimestamp="1612231299681" timestamp="4569344" timestamp2="4569344">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="8101" _type="InsertStringCommand" date="Mon Feb 01 22:17:49 EST 2021" starttimestamp="1612231299681" timestamp="4569469" timestamp2="4569469">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8103" _type="InsertStringCommand" date="Mon Feb 01 22:17:49 EST 2021" starttimestamp="1612231299681" timestamp="4570283" timestamp2="4570283">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8105" _type="InsertStringCommand" date="Mon Feb 01 22:17:50 EST 2021" starttimestamp="1612231299681" timestamp="4570342" timestamp2="4570342">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8107" _type="InsertStringCommand" date="Mon Feb 01 22:17:50 EST 2021" starttimestamp="1612231299681" timestamp="4570393" timestamp2="4570393">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="8108" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:50 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4570400" />
  <Command __id="8110" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:50 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4570594" />
  <Command __id="8112" _type="InsertStringCommand" date="Mon Feb 01 22:17:50 EST 2021" starttimestamp="1612231299681" timestamp="4570604" timestamp2="4570604">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="8114" _type="InsertStringCommand" date="Mon Feb 01 22:17:50 EST 2021" starttimestamp="1612231299681" timestamp="4570613" timestamp2="4570613">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="8115" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:17:50 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4570655" />
  <Command __id="8118" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:17:50 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4571280" />
  <Command __id="8121" _type="InsertStringCommand" date="Mon Feb 01 22:17:51 EST 2021" starttimestamp="1612231299681" timestamp="4571422" timestamp2="4571422">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8086" _type="Delete" date="Mon Feb 01 22:17:47 EST 2021" docASTNodeCount="3455" docActiveCodeLength="21095" docExpressionCount="2353" docLength="22054" endLine="104" length="1" offset="4225" startLine="104" starttimestamp="1612231299681" timestamp="4567688">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="8088" _type="Insert" date="Mon Feb 01 22:17:48 EST 2021" docASTNodeCount="3455" docActiveCodeLength="21098" docExpressionCount="2353" docLength="22057" length="3" offset="4225" repeat="3" starttimestamp="1612231299681" timestamp="4568395" timestamp2="4568755">
    <text><![CDATA[ - ]]></text>
  </DocumentChange>
  <DocumentChange __id="8094" _type="Delete" date="Mon Feb 01 22:17:48 EST 2021" docASTNodeCount="3455" docActiveCodeLength="21096" docExpressionCount="2353" docLength="22055" endLine="104" length="2" offset="4226" repeat="2" startLine="104" starttimestamp="1612231299681" timestamp="4569079" timestamp2="4569206">
    <text><![CDATA[- ]]></text>
  </DocumentChange>
  <DocumentChange __id="8098" _type="Insert" date="Mon Feb 01 22:17:49 EST 2021" docASTNodeCount="3458" docActiveCodeLength="21106" docExpressionCount="2355" docLength="22065" length="10" offset="4226" repeat="10" starttimestamp="1612231299681" timestamp="4569338" timestamp2="4570870">
    <text><![CDATA[= new file]]></text>
  </DocumentChange>
  <DocumentChange __id="8119" _type="Replace" date="Mon Feb 01 22:17:50 EST 2021" docASTNodeCount="3458" docActiveCodeLength="21108" docExpressionCount="2355" docLength="22067" endLine="104" insertionLength="4" int_docASTNodeCount="3458" int_docActiveCodeLength="21104" int_docExpressionCount="2355" int_docLength="22063" length="2" offset="4232" startLine="104" starttimestamp="1612231299681" timestamp="4571285">
    <deletedText><![CDATA[fi]]></deletedText>
    <insertedText><![CDATA[File]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8120" _type="Replace" date="Mon Feb 01 22:17:50 EST 2021" docASTNodeCount="3459" docActiveCodeLength="21116" docExpressionCount="2356" docLength="22075" endLine="104" insertionLength="10" int_docASTNodeCount="3458" int_docActiveCodeLength="21106" int_docExpressionCount="2355" int_docLength="22065" length="2" offset="4236" startLine="104" starttimestamp="1612231299681" timestamp="4571296">
    <deletedText><![CDATA[le]]></deletedText>
    <insertedText><![CDATA[(pathname)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8124" _type="Delete" date="Mon Feb 01 22:17:53 EST 2021" docASTNodeCount="3455" docActiveCodeLength="21098" docExpressionCount="2353" docLength="22057" endLine="104" length="18" offset="4228" repeat="5" startLine="104" starttimestamp="1612231299681" timestamp="4573969" timestamp2="4574463">
    <text><![CDATA[new File(pathname)]]></text>
  </DocumentChange>
  <DocumentChange __id="8134" _type="Insert" date="Mon Feb 01 22:17:54 EST 2021" docASTNodeCount="3462" docActiveCodeLength="21134" docExpressionCount="2359" docLength="22093" length="36" offset="4228" repeat="2" starttimestamp="1612231299681" timestamp="4574863" timestamp2="4575558">
    <text><![CDATA[new File(studentFolder, "Browser").;]]></text>
  </DocumentChange>
  <DocumentChange __id="8138" _type="Delete" date="Mon Feb 01 22:17:55 EST 2021" docASTNodeCount="3460" docActiveCodeLength="21132" docExpressionCount="2357" docLength="22091" endLine="104" length="2" offset="4262" repeat="2" startLine="104" starttimestamp="1612231299681" timestamp="4575965" timestamp2="4576087">
    <text><![CDATA[.;]]></text>
  </DocumentChange>
  <DocumentChange __id="8142" _type="Insert" date="Mon Feb 01 22:17:55 EST 2021" docASTNodeCount="3460" docActiveCodeLength="21141" docExpressionCount="2357" docLength="22100" length="9" offset="4262" repeat="2" starttimestamp="1612231299681" timestamp="4576272" timestamp2="4576393">
    <text><![CDATA[;
						]]></text>
  </DocumentChange>
  <DocumentChange __id="8146" _type="Insert" date="Mon Feb 01 22:18:05 EST 2021" docASTNodeCount="3462" docActiveCodeLength="21145" docExpressionCount="2358" docLength="22104" length="4" offset="4271" repeat="4" starttimestamp="1612231299681" timestamp="4585802" timestamp2="4586100">
    <text><![CDATA[File]]></text>
  </DocumentChange>
  <DocumentChange __id="8154" _type="Replace" date="Mon Feb 01 22:18:05 EST 2021" docASTNodeCount="3462" docActiveCodeLength="21146" docExpressionCount="2358" docLength="22105" endLine="105" insertionLength="5" int_docASTNodeCount="3460" int_docActiveCodeLength="21141" int_docExpressionCount="2357" int_docLength="22100" length="4" offset="4271" startLine="105" starttimestamp="1612231299681" timestamp="4586165">
    <deletedText><![CDATA[File]]></deletedText>
    <insertedText><![CDATA[File ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8156" _type="Delete" date="Mon Feb 01 22:18:06 EST 2021" docASTNodeCount="3462" docActiveCodeLength="21145" docExpressionCount="2358" docLength="22104" endLine="105" length="1" offset="4275" startLine="105" starttimestamp="1612231299681" timestamp="4587187">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="8158" _type="Delete" date="Mon Feb 01 22:18:08 EST 2021" docASTNodeCount="3460" docActiveCodeLength="21141" docExpressionCount="2357" docLength="22100" endLine="105" length="4" offset="4271" startLine="105" starttimestamp="1612231299681" timestamp="4589287">
    <text><![CDATA[File]]></text>
  </DocumentChange>
  <DocumentChange __id="8160" _type="Insert" date="Mon Feb 01 22:18:09 EST 2021" docASTNodeCount="3460" docActiveCodeLength="21143" docExpressionCount="2357" docLength="22102" length="2" offset="4271" repeat="2" starttimestamp="1612231299681" timestamp="4590061" timestamp2="4590295">
    <text><![CDATA[if]]></text>
  </DocumentChange>
  <DocumentChange __id="8165" _type="Replace" date="Mon Feb 01 22:18:10 EST 2021" docASTNodeCount="3463" docActiveCodeLength="21188" docExpressionCount="2358" docLength="22147" endLine="105" insertionLength="47" int_docASTNodeCount="3460" int_docActiveCodeLength="21141" int_docExpressionCount="2357" int_docLength="22100" length="2" offset="4271" startLine="105" starttimestamp="1612231299681" timestamp="4590329">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
							
						}]]></insertedText>
  </DocumentChange>
  <Command __id="8122" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 01 22:17:53 EST 2021" starttimestamp="1612231299681" timestamp="4573442" />
  <Command __id="8123" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Mon Feb 01 22:17:53 EST 2021" starttimestamp="1612231299681" timestamp="4573562" />
  <Command __id="8125" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:17:53 EST 2021" starttimestamp="1612231299681" timestamp="4573981" />
  <Command __id="8127" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:17:53 EST 2021" starttimestamp="1612231299681" timestamp="4574113" />
  <Command __id="8129" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:17:53 EST 2021" starttimestamp="1612231299681" timestamp="4574222" />
  <Command __id="8131" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:17:54 EST 2021" starttimestamp="1612231299681" timestamp="4574326" />
  <Command __id="8133" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:17:54 EST 2021" starttimestamp="1612231299681" timestamp="4574467" />
  <Command __id="8135" _type="PasteCommand" date="Mon Feb 01 22:17:54 EST 2021" starttimestamp="1612231299681" timestamp="4574869" />
  <Command __id="8137" _type="InsertStringCommand" date="Mon Feb 01 22:17:55 EST 2021" starttimestamp="1612231299681" timestamp="4575563" timestamp2="4575563">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8139" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:17:55 EST 2021" starttimestamp="1612231299681" timestamp="4575968" />
  <Command __id="8141" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:17:55 EST 2021" starttimestamp="1612231299681" timestamp="4576092" />
  <Command __id="8143" _type="InsertStringCommand" date="Mon Feb 01 22:17:55 EST 2021" starttimestamp="1612231299681" timestamp="4576281" timestamp2="4576281">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8145" _type="InsertStringCommand" date="Mon Feb 01 22:17:56 EST 2021" starttimestamp="1612231299681" timestamp="4576403" timestamp2="4576403">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8147" _type="InsertStringCommand" date="Mon Feb 01 22:18:05 EST 2021" starttimestamp="1612231299681" timestamp="4585808" timestamp2="4585808">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="8149" _type="InsertStringCommand" date="Mon Feb 01 22:18:05 EST 2021" starttimestamp="1612231299681" timestamp="4585876" timestamp2="4585876">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="8150" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:05 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4585919" />
  <Command __id="8153" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:05 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4586159" />
  <Command __id="8155" _type="InsertStringCommand" date="Mon Feb 01 22:18:05 EST 2021" starttimestamp="1612231299681" timestamp="4586172" timestamp2="4586172">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8157" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:18:06 EST 2021" starttimestamp="1612231299681" timestamp="4587190" />
  <Command __id="8159" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Mon Feb 01 22:18:08 EST 2021" starttimestamp="1612231299681" timestamp="4589292" />
  <Command __id="8161" _type="InsertStringCommand" date="Mon Feb 01 22:18:09 EST 2021" starttimestamp="1612231299681" timestamp="4590066" timestamp2="4590066">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="8162" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:09 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4590110" />
  <Command __id="8164" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:09 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4590309" />
  <Command __id="8166" _type="InsertStringCommand" date="Mon Feb 01 22:18:10 EST 2021" starttimestamp="1612231299681" timestamp="4590407" timestamp2="4590407">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8167" _type="Replace" date="Mon Feb 01 22:18:12 EST 2021" docASTNodeCount="3463" docActiveCodeLength="21167" docExpressionCount="2358" docLength="22126" endLine="105" insertionLength="1" int_docASTNodeCount="3463" int_docActiveCodeLength="21166" int_docExpressionCount="2358" int_docLength="22125" length="22" offset="4275" startLine="105" starttimestamp="1612231299681" timestamp="4593084">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[b]]></insertedText>
  </DocumentChange>
  <Command __id="8168" _type="InsertStringCommand" date="Mon Feb 01 22:18:12 EST 2021" starttimestamp="1612231299681" timestamp="4593092" timestamp2="4593092">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="8169" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:12 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4593130" />
  <DocumentChange __id="8170" _type="Insert" date="Mon Feb 01 22:18:13 EST 2021" docASTNodeCount="3463" docActiveCodeLength="21169" docExpressionCount="2358" docLength="22128" length="2" offset="4276" repeat="2" starttimestamp="1612231299681" timestamp="4593360" timestamp2="4593404">
    <text><![CDATA[ro]]></text>
  </DocumentChange>
  <Command __id="8172" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:13 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4593593" />
  <DocumentChange __id="8173" _type="Replace" date="Mon Feb 01 22:18:13 EST 2021" docASTNodeCount="3463" docActiveCodeLength="21173" docExpressionCount="2358" docLength="22132" endLine="105" insertionLength="7" int_docASTNodeCount="3463" int_docActiveCodeLength="21166" int_docExpressionCount="2358" int_docLength="22125" length="3" offset="4275" startLine="105" starttimestamp="1612231299681" timestamp="4593599">
    <deletedText><![CDATA[bro]]></deletedText>
    <insertedText><![CDATA[browser]]></insertedText>
  </DocumentChange>
  <Command __id="8174" _type="InsertStringCommand" date="Mon Feb 01 22:18:13 EST 2021" starttimestamp="1612231299681" timestamp="4593608" timestamp2="4593608">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8175" _type="Insert" date="Mon Feb 01 22:18:13 EST 2021" docASTNodeCount="3465" docActiveCodeLength="21177" docExpressionCount="2360" docLength="22136" length="4" offset="4282" repeat="4" starttimestamp="1612231299681" timestamp="4593834" timestamp2="4594997">
    <text><![CDATA[.lis]]></text>
  </DocumentChange>
  <Command __id="8176" _type="InsertStringCommand" date="Mon Feb 01 22:18:13 EST 2021" starttimestamp="1612231299681" timestamp="4593836" timestamp2="4593836">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8177" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:13 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4593871" />
  <Command __id="8181" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:14 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4595158" />
  <DocumentChange __id="8182" _type="Replace" date="Mon Feb 01 22:18:14 EST 2021" docASTNodeCount="3465" docActiveCodeLength="21180" docExpressionCount="2360" docLength="22139" endLine="105" insertionLength="6" int_docASTNodeCount="3465" int_docActiveCodeLength="21174" int_docExpressionCount="2359" int_docLength="22133" length="3" offset="4283" startLine="105" starttimestamp="1612231299681" timestamp="4595164">
    <deletedText><![CDATA[lis]]></deletedText>
    <insertedText><![CDATA[list()]]></insertedText>
  </DocumentChange>
  <Command __id="8183" _type="InsertStringCommand" date="Mon Feb 01 22:18:14 EST 2021" starttimestamp="1612231299681" timestamp="4595172" timestamp2="4595172">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8184" _type="Delete" date="Mon Feb 01 22:18:16 EST 2021" docASTNodeCount="3465" docActiveCodeLength="21177" docExpressionCount="2360" docLength="22136" endLine="105" length="3" offset="4286" repeat="3" startLine="105" starttimestamp="1612231299681" timestamp="4596542" timestamp2="4596814">
    <text><![CDATA[t()]]></text>
  </DocumentChange>
  <Command __id="8185" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:18:16 EST 2021" starttimestamp="1612231299681" timestamp="4596548" />
  <Command __id="8187" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:18:16 EST 2021" starttimestamp="1612231299681" timestamp="4596690" />
  <Command __id="8189" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:18:16 EST 2021" starttimestamp="1612231299681" timestamp="4596816" />
  <DocumentChange __id="8190" _type="Insert" date="Mon Feb 01 22:18:16 EST 2021" docASTNodeCount="3465" docActiveCodeLength="21179" docExpressionCount="2360" docLength="22138" length="2" offset="4286" repeat="2" starttimestamp="1612231299681" timestamp="4597014" timestamp2="4597063">
    <text><![CDATA[fi]]></text>
  </DocumentChange>
  <Command __id="8191" _type="InsertStringCommand" date="Mon Feb 01 22:18:16 EST 2021" starttimestamp="1612231299681" timestamp="4597016" timestamp2="4597016">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="8193" _type="InsertStringCommand" date="Mon Feb 01 22:18:16 EST 2021" starttimestamp="1612231299681" timestamp="4597065" timestamp2="4597065">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="8194" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:16 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4597108" />
  <Command __id="8195" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:17 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4597855" />
  <DocumentChange __id="8196" _type="Replace" date="Mon Feb 01 22:18:17 EST 2021" docASTNodeCount="3465" docActiveCodeLength="21185" docExpressionCount="2360" docLength="22144" endLine="105" insertionLength="11" int_docASTNodeCount="3465" int_docActiveCodeLength="21174" int_docExpressionCount="2359" int_docLength="22133" length="5" offset="4283" startLine="105" starttimestamp="1612231299681" timestamp="4597861">
    <deletedText><![CDATA[lisfi]]></deletedText>
    <insertedText><![CDATA[listFiles()]]></insertedText>
  </DocumentChange>
  <Command __id="8197" _type="InsertStringCommand" date="Mon Feb 01 22:18:17 EST 2021" starttimestamp="1612231299681" timestamp="4597872" timestamp2="4597872">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8198" _type="Insert" date="Mon Feb 01 22:18:18 EST 2021" docASTNodeCount="3467" docActiveCodeLength="21188" docExpressionCount="2362" docLength="22147" length="3" offset="4294" repeat="3" starttimestamp="1612231299681" timestamp="4598965" timestamp2="4599393">
    <text><![CDATA[.le]]></text>
  </DocumentChange>
  <Command __id="8199" _type="InsertStringCommand" date="Mon Feb 01 22:18:18 EST 2021" starttimestamp="1612231299681" timestamp="4598968" timestamp2="4598968">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8200" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:18 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4599008" />
  <Command __id="8203" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:19 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4599522" />
  <DocumentChange __id="8204" _type="Replace" date="Mon Feb 01 22:18:19 EST 2021" docASTNodeCount="3467" docActiveCodeLength="21192" docExpressionCount="2362" docLength="22151" endLine="105" insertionLength="6" int_docASTNodeCount="3467" int_docActiveCodeLength="21186" int_docExpressionCount="2362" int_docLength="22145" length="2" offset="4295" startLine="105" starttimestamp="1612231299681" timestamp="4599526">
    <deletedText><![CDATA[le]]></deletedText>
    <insertedText><![CDATA[length]]></insertedText>
  </DocumentChange>
  <Command __id="8205" _type="InsertStringCommand" date="Mon Feb 01 22:18:19 EST 2021" starttimestamp="1612231299681" timestamp="4599535" timestamp2="4599535">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8206" _type="Insert" date="Mon Feb 01 22:18:19 EST 2021" docASTNodeCount="3036" docActiveCodeLength="21194" docExpressionCount="2066" docLength="22153" length="2" offset="4301" repeat="2" starttimestamp="1612231299681" timestamp="4599967" timestamp2="4600892">
    <text><![CDATA[ >]]></text>
  </DocumentChange>
  <Command __id="8207" _type="InsertStringCommand" date="Mon Feb 01 22:18:19 EST 2021" starttimestamp="1612231299681" timestamp="4599969" timestamp2="4599969">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8209" _type="InsertStringCommand" date="Mon Feb 01 22:18:20 EST 2021" starttimestamp="1612231299681" timestamp="4600897" timestamp2="4600897">
    <data><![CDATA[>]]></data>
  </Command>
  <DocumentChange __id="8210" _type="Delete" date="Mon Feb 01 22:18:21 EST 2021" docASTNodeCount="3467" docActiveCodeLength="21193" docExpressionCount="2362" docLength="22152" endLine="105" length="1" offset="4302" startLine="105" starttimestamp="1612231299681" timestamp="4601670">
    <text><![CDATA[>]]></text>
  </DocumentChange>
  <Command __id="8211" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:18:21 EST 2021" starttimestamp="1612231299681" timestamp="4601676" />
  <DocumentChange __id="8212" _type="Insert" date="Mon Feb 01 22:18:22 EST 2021" docASTNodeCount="3036" docActiveCodeLength="21195" docExpressionCount="2066" docLength="22154" length="2" offset="4302" repeat="2" starttimestamp="1612231299681" timestamp="4603032" timestamp2="4603182">
    <text><![CDATA[> ]]></text>
  </DocumentChange>
  <Command __id="8213" _type="InsertStringCommand" date="Mon Feb 01 22:18:22 EST 2021" starttimestamp="1612231299681" timestamp="4603036" timestamp2="4603036">
    <data><![CDATA[>]]></data>
  </Command>
  <Command __id="8215" _type="InsertStringCommand" date="Mon Feb 01 22:18:22 EST 2021" starttimestamp="1612231299681" timestamp="4603186" timestamp2="4603186">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8216" _type="Delete" date="Mon Feb 01 22:18:23 EST 2021" docASTNodeCount="3467" docActiveCodeLength="21193" docExpressionCount="2362" docLength="22152" endLine="105" length="2" offset="4302" repeat="2" startLine="105" starttimestamp="1612231299681" timestamp="4604073" timestamp2="4604204">
    <text><![CDATA[> ]]></text>
  </DocumentChange>
  <Command __id="8217" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:18:23 EST 2021" starttimestamp="1612231299681" timestamp="4604078" />
  <Command __id="8219" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:18:23 EST 2021" starttimestamp="1612231299681" timestamp="4604207" />
  <DocumentChange __id="8220" _type="Insert" date="Mon Feb 01 22:18:24 EST 2021" docASTNodeCount="3469" docActiveCodeLength="21197" docExpressionCount="2364" docLength="22156" length="4" offset="4302" repeat="4" starttimestamp="1612231299681" timestamp="4604384" timestamp2="4605027">
    <text><![CDATA[!= 9]]></text>
  </DocumentChange>
  <Command __id="8221" _type="InsertStringCommand" date="Mon Feb 01 22:18:24 EST 2021" starttimestamp="1612231299681" timestamp="4604387" timestamp2="4604387">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="8223" _type="InsertStringCommand" date="Mon Feb 01 22:18:24 EST 2021" starttimestamp="1612231299681" timestamp="4604522" timestamp2="4604522">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="8225" _type="InsertStringCommand" date="Mon Feb 01 22:18:24 EST 2021" starttimestamp="1612231299681" timestamp="4604601" timestamp2="4604601">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8227" _type="InsertStringCommand" date="Mon Feb 01 22:18:24 EST 2021" starttimestamp="1612231299681" timestamp="4605028" timestamp2="4605028">
    <data><![CDATA[9]]></data>
  </Command>
  <DocumentChange __id="8228" _type="Delete" date="Mon Feb 01 22:18:25 EST 2021" docASTNodeCount="3036" docActiveCodeLength="21196" docExpressionCount="2066" docLength="22155" endLine="105" length="1" offset="4305" startLine="105" starttimestamp="1612231299681" timestamp="4605395">
    <text><![CDATA[9]]></text>
  </DocumentChange>
  <Command __id="8229" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:18:25 EST 2021" starttimestamp="1612231299681" timestamp="4605399" />
  <DocumentChange __id="8230" _type="Insert" date="Mon Feb 01 22:18:25 EST 2021" docASTNodeCount="3469" docActiveCodeLength="21197" docExpressionCount="2364" docLength="22156" length="1" offset="4305" starttimestamp="1612231299681" timestamp="4605758">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <Command __id="8231" _type="InsertStringCommand" date="Mon Feb 01 22:18:25 EST 2021" starttimestamp="1612231299681" timestamp="4605761" timestamp2="4605761">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="8232" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Mon Feb 01 22:18:26 EST 2021" starttimestamp="1612231299681" timestamp="4606375" />
  <DocumentChange __id="8233" _type="Insert" date="Mon Feb 01 22:18:27 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21203" docExpressionCount="2004" docLength="22162" length="6" offset="4318" repeat="6" starttimestamp="1612231299681" timestamp="4607794" timestamp2="4609722">
    <text><![CDATA[readwe]]></text>
  </DocumentChange>
  <Command __id="8234" _type="InsertStringCommand" date="Mon Feb 01 22:18:27 EST 2021" starttimestamp="1612231299681" timestamp="4607800" timestamp2="4607800">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8235" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:27 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4607841" />
  <Command __id="8241" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:29 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4610255" />
  <DocumentChange __id="8242" _type="Replace" date="Mon Feb 01 22:18:29 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21218" docExpressionCount="2004" docLength="22177" endLine="106" insertionLength="21" int_docASTNodeCount="3469" int_docActiveCodeLength="21197" int_docExpressionCount="2364" int_docLength="22156" length="6" offset="4318" startLine="106" starttimestamp="1612231299681" timestamp="4610260">
    <deletedText><![CDATA[readwe]]></deletedText>
    <insertedText><![CDATA[readWebCommands(file)]]></insertedText>
  </DocumentChange>
  <Command __id="8243" _type="InsertStringCommand" date="Mon Feb 01 22:18:30 EST 2021" starttimestamp="1612231299681" timestamp="4610383" timestamp2="4610383">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8244" _type="Replace" date="Mon Feb 01 22:18:32 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21215" docExpressionCount="2004" docLength="22174" endLine="106" insertionLength="1" int_docASTNodeCount="2926" int_docActiveCodeLength="21214" int_docExpressionCount="2004" int_docLength="22173" length="4" offset="4334" startLine="106" starttimestamp="1612231299681" timestamp="4612952">
    <deletedText><![CDATA[file]]></deletedText>
    <insertedText><![CDATA[b]]></insertedText>
  </DocumentChange>
  <Command __id="8245" _type="InsertStringCommand" date="Mon Feb 01 22:18:32 EST 2021" starttimestamp="1612231299681" timestamp="4612962" timestamp2="4612962">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="8246" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:32 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4613047" />
  <DocumentChange __id="8247" _type="Insert" date="Mon Feb 01 22:18:33 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21216" docExpressionCount="2004" docLength="22175" length="1" offset="4335" starttimestamp="1612231299681" timestamp="4613408">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="8248" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:33 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4613860" />
  <DocumentChange __id="8249" _type="Replace" date="Mon Feb 01 22:18:33 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21221" docExpressionCount="2004" docLength="22180" endLine="106" insertionLength="7" int_docASTNodeCount="2926" int_docActiveCodeLength="21214" int_docExpressionCount="2004" int_docLength="22173" length="2" offset="4334" startLine="106" starttimestamp="1612231299681" timestamp="4613866">
    <deletedText><![CDATA[br]]></deletedText>
    <insertedText><![CDATA[browser]]></insertedText>
  </DocumentChange>
  <Command __id="8250" _type="InsertStringCommand" date="Mon Feb 01 22:18:33 EST 2021" starttimestamp="1612231299681" timestamp="4613874" timestamp2="4613874">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8251" _type="Insert" date="Mon Feb 01 22:18:33 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21224" docExpressionCount="2004" docLength="22183" length="3" offset="4341" repeat="3" starttimestamp="1612231299681" timestamp="4614116" timestamp2="4614584">
    <text><![CDATA[.li]]></text>
  </DocumentChange>
  <Command __id="8252" _type="InsertStringCommand" date="Mon Feb 01 22:18:33 EST 2021" starttimestamp="1612231299681" timestamp="4614119" timestamp2="4614119">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8253" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:33 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4614206" />
  <Command __id="8256" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:34 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4614790" />
  <DocumentChange __id="8257" _type="Replace" date="Mon Feb 01 22:18:34 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21228" docExpressionCount="2004" docLength="22187" endLine="106" insertionLength="6" int_docASTNodeCount="3469" int_docActiveCodeLength="21222" int_docExpressionCount="2364" int_docLength="22181" length="2" offset="4342" startLine="106" starttimestamp="1612231299681" timestamp="4614810">
    <deletedText><![CDATA[li]]></deletedText>
    <insertedText><![CDATA[list()]]></insertedText>
  </DocumentChange>
  <Command __id="8258" _type="InsertStringCommand" date="Mon Feb 01 22:18:34 EST 2021" starttimestamp="1612231299681" timestamp="4614820" timestamp2="4614820">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8259" _type="Delete" date="Mon Feb 01 22:18:35 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21226" docExpressionCount="2004" docLength="22185" endLine="106" length="2" offset="4346" repeat="2" startLine="106" starttimestamp="1612231299681" timestamp="4615617" timestamp2="4615743">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="8260" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:18:35 EST 2021" starttimestamp="1612231299681" timestamp="4615622" />
  <Command __id="8262" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:18:35 EST 2021" starttimestamp="1612231299681" timestamp="4615749" />
  <DocumentChange __id="8263" _type="Insert" date="Mon Feb 01 22:18:35 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21228" docExpressionCount="2004" docLength="22187" length="2" offset="4346" repeat="2" starttimestamp="1612231299681" timestamp="4615856" timestamp2="4616044">
    <text><![CDATA[fi]]></text>
  </DocumentChange>
  <Command __id="8264" _type="InsertStringCommand" date="Mon Feb 01 22:18:35 EST 2021" starttimestamp="1612231299681" timestamp="4615858" timestamp2="4615858">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="8265" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:35 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4615949" />
  <Command __id="8267" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:35 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4616201" />
  <DocumentChange __id="8268" _type="Replace" date="Mon Feb 01 22:18:35 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21233" docExpressionCount="2004" docLength="22192" endLine="106" insertionLength="11" int_docASTNodeCount="3469" int_docActiveCodeLength="21222" int_docExpressionCount="2364" int_docLength="22181" length="6" offset="4342" startLine="106" starttimestamp="1612231299681" timestamp="4616208">
    <deletedText><![CDATA[listfi]]></deletedText>
    <insertedText><![CDATA[listFiles()]]></insertedText>
  </DocumentChange>
  <Command __id="8269" _type="InsertStringCommand" date="Mon Feb 01 22:18:35 EST 2021" starttimestamp="1612231299681" timestamp="4616218" timestamp2="4616218">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8270" _type="Insert" date="Mon Feb 01 22:18:39 EST 2021" docASTNodeCount="2926" docActiveCodeLength="21236" docExpressionCount="2004" docLength="22195" length="3" offset="4353" repeat="2" starttimestamp="1612231299681" timestamp="4619927" timestamp2="4620174">
    <text><![CDATA[[0]]]></text>
  </DocumentChange>
  <Command __id="8271" _type="InsertStringCommand" date="Mon Feb 01 22:18:39 EST 2021" starttimestamp="1612231299681" timestamp="4619932" timestamp2="4619932">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="8273" _type="InsertStringCommand" date="Mon Feb 01 22:18:39 EST 2021" starttimestamp="1612231299681" timestamp="4620180" timestamp2="4620180">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="8274" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:18:40 EST 2021" starttimestamp="1612231299681" timestamp="4620933" />
  <Command __id="8275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:18:40 EST 2021" starttimestamp="1612231299681" timestamp="4621087" />
  <Command __id="8277" _type="InsertStringCommand" date="Mon Feb 01 22:18:41 EST 2021" starttimestamp="1612231299681" timestamp="4621675" timestamp2="4621675">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="8276" _type="Insert" date="Mon Feb 01 22:18:41 EST 2021" docASTNodeCount="3477" docActiveCodeLength="21237" docExpressionCount="2371" docLength="22196" length="1" offset="4357" starttimestamp="1612231299681" timestamp="4621667">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="8278" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineStart" date="Mon Feb 01 22:18:42 EST 2021" starttimestamp="1612231299681" timestamp="4622897" />
  <Command __id="8280" _type="InsertStringCommand" date="Mon Feb 01 22:18:43 EST 2021" starttimestamp="1612231299681" timestamp="4624116" timestamp2="4624116">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="8281" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:43 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4624158" />
  <DocumentChange __id="8279" _type="Insert" date="Mon Feb 01 22:18:43 EST 2021" docASTNodeCount="3477" docActiveCodeLength="21248" docExpressionCount="2371" docLength="22207" length="11" offset="4318" repeat="11" starttimestamp="1612231299681" timestamp="4624109" timestamp2="4625388">
    <text><![CDATA[webcommands]]></text>
  </DocumentChange>
  <DocumentChange __id="8293" _type="Replace" date="Mon Feb 01 22:18:46 EST 2021" docASTNodeCount="3481" docActiveCodeLength="21258" docExpressionCount="2374" docLength="22217" endLine="106" insertionLength="21" int_docASTNodeCount="3477" int_docActiveCodeLength="21237" int_docExpressionCount="2371" int_docLength="22196" length="11" offset="4318" startLine="106" starttimestamp="1612231299681" timestamp="4626771">
    <deletedText><![CDATA[webcommands]]></deletedText>
    <insertedText><![CDATA[readWebCommands(file)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8295" _type="Replace" date="Mon Feb 01 22:18:47 EST 2021" docASTNodeCount="3477" docActiveCodeLength="21248" docExpressionCount="2371" docLength="22207" endLine="106" insertionLength="11" int_docASTNodeCount="3477" int_docActiveCodeLength="21237" int_docExpressionCount="2371" int_docLength="22196" length="21" offset="4318" startLine="106" starttimestamp="1612231299681" timestamp="4628266">
    <deletedText><![CDATA[readWebCommands(file)]]></deletedText>
    <insertedText><![CDATA[webcommands]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8297" _type="Delete" date="Mon Feb 01 22:18:48 EST 2021" docASTNodeCount="3477" docActiveCodeLength="21237" docExpressionCount="2371" docLength="22196" endLine="106" length="11" offset="4318" startLine="106" starttimestamp="1612231299681" timestamp="4628409">
    <text><![CDATA[webcommands]]></text>
  </DocumentChange>
  <Command __id="8299" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 22:18:51 EST 2021" docASTNodeCount="6154" docActiveCodeLength="35462" docExpressionCount="4130" docLength="36519" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="4631782">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	private Analyzer analyzer;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private int count = 0;¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	private static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 5;¶¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",¶//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void create"), Diff(DELETE,"Rest"), Diff(INSERT,"Pause"), Diff(EQUAL,"CommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶//		return df.format(t/ONE_SECOND);¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			for(int k = 1; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {¶//						continue;¶//					}¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		try {¶			BufferedReader br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss aa");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setStartTimestamp(date.getTime());¶						retVal.add(webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	private Analyzer analyzer;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private int count = 0;
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	private static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private static final String XML_FILE_ENDING = "\r\n</Events>"; 
	private int threadCount = 0;
	private CountDownLatch latch;
	private static final int THREAD_LIM = 5;


	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(30s)", "Rest Time(30s)", "# of Rests(30s)",
//					"Active Time(1min)", "Rest Time(1min)", "# of Rests(1min)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		latch = new CountDownLatch(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					latch.countDown();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
								return;
							}
							try {
								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}finally {
								// TODO: handle finally clause
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
							}
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
//		return df.format(t/ONE_SECOND);
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() != 0 || commands.get(j).getTimestamp() != 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			for(int k = 1; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
//					if (last.getStartTimestamp() == 0 || cur.getStartTimestamp() == 0) {
//						continue;
//					}
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() != 0 || c1.getTimestamp() != 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	protected List<EHICommand> readWebCommands(File file){
		if (!file.exists()) {
			return null;
		}
		List<EHICommand> retVal = new ArrayList<>();
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			String nextLine;
			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss aa");
			Date date;
			String keyword;
			String url;
			WebCommand webCommand;
			while ((nextLine = br.readLine()) != null) {
				try {
					String[] tokens = nextLine.split("\t");
					if (tokens.length >= 3) {
						date = format.parse(tokens[0]);
						keyword = tokens[1];
						url = tokens[2];
						webCommand = new WebCommand(keyword, url);
						webCommand.setStartTimestamp(date.getTime());
						retVal.add(webCommand);
					} else {
						System.out.println("Failed to parse WebCommand");
					}
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return retVal;
	}
	
	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
}
]]></snapshot>
  </Command>
  <Command __id="8301" _type="DiffBasedFileOpenCommand" date="Mon Feb 01 22:18:54 EST 2021" docASTNodeCount="3477" docActiveCodeLength="21237" docExpressionCount="2371" docLength="22196" projectName="LogAnalyzer" starttimestamp="1612231299681" timestamp="4634478">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Analyzer analyzer;¶	private Map<String, List<List<EHICommand>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶	private static final String REST_INSESSION = "Rest(In Session)";¶	private static final String REST_ENDSESSION = "Rest(End Session)";¶	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	private static final long ONE_SECOND = 1000;¶	private static final long ONE_MIN = 60*1000;¶	private static final long TEN_MIN = 10*ONE_MIN;¶	private static final long FIVE_MIN = 5*ONE_MIN;¶	private static final long HALF_MIN = ONE_MIN/2;¶	private static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	private static final String XML_START1 = "<Events startTimestamp=\"";¶	private static final String XML_START2 = " logVersion=\"";¶	private static final String XML_VERSION = "1.0.0.202008151525";¶	private static final String XML_START3 = "\">\r\n";¶	private int threadCount = 0;¶	private CountDownLatch latch;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						"), Diff(INSERT,"//readWebCommands(new File(studentFolder, "Browser").);¶						File browser = new File(studentFolder, "Browser");¶						if (browser.listFiles().length != 0) {¶							readWebCommands(browser.listFiles()[0]);¶						}¶						"), Diff(EQUAL,"for (File file : logs) {¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶									if (rest >= 1*ONE_SECOND) {¶										String range = "";¶										if (rest < 2*ONE_SECOND) {¶											range = "1s-2s";¶										} else if (rest < 5*ONE_SECOND) {¶											range = "2s-5s";¶										} else if (rest < 10*ONE_SECOND) {¶											range = "5s-10s";¶										} else if (rest < 20*ONE_SECOND) {¶											range = "10s-20s";¶										} else if (rest < 30*ONE_SECOND) {¶											range = "20s-30s";¶										} else if (rest < ONE_MIN) {¶											range = "30s-1m";¶										} else if (rest < TWO_MIN) {¶											range = "1m-2m";¶										} else if (rest < FIVE_MIN) {¶											range = "2m-5m";¶										} else if (rest < TEN_MIN) {¶											range = "5m-10m";¶										} else if (rest < 3*TEN_MIN) {¶											range = "10m-30m";¶										} else if (rest < 6*TEN_MIN) {¶											range = "30m-60m";¶										} else {¶											range = ">1h";¶										}¶										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶										rCommnad.setStartTimestamp(last.getStartTimestamp());¶										rCommnad.setTimestamp(last.getTimestamp()+1);¶										newCommands.add(rCommnad);¶									} ¶									newCommands.add(command);¶								}¶							}¶							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								// TODO Auto-generated catch block¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						// TODO: handle exception¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶"), Diff(DELETE,"//			if (j == students.length-1) {¶//				try {¶//					thread.join();¶//				} catch (InterruptedException e) {¶//					// TODO Auto-generated catch block¶//					e.printStackTrace();¶//				} ¶//				System.exit(0);¶//			}¶"), Diff(EQUAL,"		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			"), Diff(DELETE,"// TODO Auto-generated catch block¶			"), Diff(EQUAL,"e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		createAssignData("Experiment", folder);¶		createDistributionData("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[9];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[8];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶¶						if (command instanceof InsertStringCommand) {¶							numCommands[1]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[2]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[3]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[4]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[5]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[6]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[7]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[7]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 1; i < 8; i++) {¶					retVal.add(i+4, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					sum[8] += numCommands[i];¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+12, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", ¶//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",¶//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",¶//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",¶//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", ¶//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", ¶//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", ¶//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", ¶//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", ¶//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", ¶//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", ¶//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", ¶//					"# of Days", "Time Spent Each Day"};¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	private String getEventType(EHICommand command) {¶¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private static final String XML_FILE_ENDING = "\r\n</Events>"; ¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;

public class AExperimentalReplayer extends AReplayer{
	private Analyzer analyzer;
	private Map<String, List<List<EHICommand>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};
	private static final String REST_INSESSION = "Rest(In Session)";
	private static final String REST_ENDSESSION = "Rest(End Session)";
	private static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	private static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	private static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	private static final long ONE_SECOND = 1000;
	private static final long ONE_MIN = 60*1000;
	private static final long TEN_MIN = 10*ONE_MIN;
	private static final long FIVE_MIN = 5*ONE_MIN;
	private static final long HALF_MIN = ONE_MIN/2;
	private static final long TWO_MIN = 2*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	private static final String XML_START1 = "<Events startTimestamp=\"";
	private static final String XML_START2 = " logVersion=\"";
	private static final String XML_VERSION = "1.0.0.202008151525";
	private static final String XML_START3 = "\">\r\n";
	private int threadCount = 0;
	private CountDownLatch latch;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						//readWebCommands(new File(studentFolder, "Browser").);
						File browser = new File(studentFolder, "Browser");
						if (browser.listFiles().length != 0) {
							readWebCommands(browser.listFiles()[0]);
						}
						for (File file : logs) {
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
									long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
									if (rest >= 1*ONE_SECOND) {
										String range = "";
										if (rest < 2*ONE_SECOND) {
											range = "1s-2s";
										} else if (rest < 5*ONE_SECOND) {
											range = "2s-5s";
										} else if (rest < 10*ONE_SECOND) {
											range = "5s-10s";
										} else if (rest < 20*ONE_SECOND) {
											range = "10s-20s";
										} else if (rest < 30*ONE_SECOND) {
											range = "20s-30s";
										} else if (rest < ONE_MIN) {
											range = "30s-1m";
										} else if (rest < TWO_MIN) {
											range = "1m-2m";
										} else if (rest < FIVE_MIN) {
											range = "2m-5m";
										} else if (rest < TEN_MIN) {
											range = "5m-10m";
										} else if (rest < 3*TEN_MIN) {
											range = "10m-30m";
										} else if (rest < 6*TEN_MIN) {
											range = "30m-60m";
										} else {
											range = ">1h";
										}
										PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
										rCommnad.setStartTimestamp(last.getStartTimestamp());
										rCommnad.setTimestamp(last.getTimestamp()+1);
										newCommands.add(rCommnad);
									} 
									newCommands.add(command);
								}
							}
							String logContent = XML_START1 + newCommands.get(0).getStartTimestamp() + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						// TODO: handle exception
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		createAssignData("Experiment", folder);
		createDistributionData("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[9];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[8];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}

						if (command instanceof InsertStringCommand) {
							numCommands[1]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[2]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[3]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[4]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[5]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[6]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[7]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[7]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 1; i < 8; i++) {
					retVal.add(i+4, numCommands[i]+"");
					sum[i] += numCommands[i];
					sum[8] += numCommands[i];
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+12, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
//			String[] header = {"Student", "Total Time Spent", "Wall Clock Time", 
//					"Active Time(1s)", "Rest Time(1s)", "# of Rests(1s)",
//					"Active Time(2s)", "Rest Time(2s)", "# of Rests(2s)",
//					"Active Time(5s)", "Rest Time(5s)", "# of Rests(5s)",
//					"Active Time(10s)", "Rest Time(10s)", "# of Rests(10s)", 
//					"Active Time(2min)", "Rest Time(2min)", "# of Rests(2min)", 
//					"Active Time(5min)", "Rest Time(5min)", "# of Rests(5min)", 
//					"Active Time(10min)", "Rest Time(10min)", "# of Rests(10min)", 
//					"Active Time(20min)", "Rest Time(20min)", "# of Rests(20min)", 
//					"Active Time(30min)", "Rest Time(30min)", "# of Rests(30min)", 
//					"Active Time(45min)", "Rest Time(45min)", "# of Rests(45min)", 
//					"Active Time(60min)", "Rest Time(60min)", "# of Rests(60min)", 
//					"# of Days", "Time Spent Each Day"};
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	private String getEventType(EHICommand command) {

		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath);
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private static final String XML_FILE_ENDING = "\r\n</Events>"; 

}
]]></snapshot>
  </Command>
  <DocumentChange __id="8304" _type="Insert" date="Mon Feb 01 22:18:55 EST 2021" docASTNodeCount="3478" docActiveCodeLength="21248" docExpressionCount="2371" docLength="22207" length="11" offset="2865" repeat="9" starttimestamp="1612231299681" timestamp="4635930" timestamp2="4637326">
    <text><![CDATA[
	private ]]></text>
  </DocumentChange>
  <Command __id="8292" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4626759" />
  <Command __id="8294" _type="InsertStringCommand" date="Mon Feb 01 22:18:46 EST 2021" starttimestamp="1612231299681" timestamp="4626931" timestamp2="4626931">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8296" _type="UndoCommand" date="Mon Feb 01 22:18:47 EST 2021" starttimestamp="1612231299681" timestamp="4628315" />
  <Command __id="8298" _type="UndoCommand" date="Mon Feb 01 22:18:48 EST 2021" starttimestamp="1612231299681" timestamp="4628420" />
  <Command __id="8300" _type="MoveCaretCommand" caretOffset="2248" date="Mon Feb 01 22:18:51 EST 2021" docOffset="17508" starttimestamp="1612231299681" timestamp="4631952" />
  <Command __id="8302" _type="MoveCaretCommand" caretOffset="2667" date="Mon Feb 01 22:18:54 EST 2021" docOffset="4318" starttimestamp="1612231299681" timestamp="4634649" />
  <Command __id="8303" _type="MoveCaretCommand" caretOffset="1534" date="Mon Feb 01 22:18:54 EST 2021" docOffset="2865" starttimestamp="1612231299681" timestamp="4635237" />
  <Command __id="8305" _type="InsertStringCommand" date="Mon Feb 01 22:18:55 EST 2021" starttimestamp="1612231299681" timestamp="4635939" timestamp2="4635939">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8307" _type="InsertStringCommand" date="Mon Feb 01 22:18:56 EST 2021" starttimestamp="1612231299681" timestamp="4636721" timestamp2="4636721">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="8308" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:18:56 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4636762" />
  <Command __id="8316" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:18:57 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4637338" />
  <Command __id="8318" _type="UndoCommand" date="Mon Feb 01 22:18:58 EST 2021" starttimestamp="1612231299681" timestamp="4639151" />
  <DocumentChange __id="8317" _type="Delete" date="Mon Feb 01 22:18:58 EST 2021" docASTNodeCount="3477" docActiveCodeLength="21237" docExpressionCount="2371" docLength="22196" endLine="61" length="11" offset="2865" startLine="60" starttimestamp="1612231299681" timestamp="4639139">
    <text><![CDATA[
	private ]]></text>
  </DocumentChange>
  <Command __id="8319" _type="MoveCaretCommand" caretOffset="2737" date="Mon Feb 01 22:19:09 EST 2021" docOffset="4309" starttimestamp="1612231299681" timestamp="4649887" />
  <Command __id="8320" _type="MoveCaretCommand" caretOffset="2691" date="Mon Feb 01 22:19:09 EST 2021" docOffset="4263" starttimestamp="1612231299681" timestamp="4650281" />
  <DocumentChange __id="8321" _type="Insert" date="Mon Feb 01 22:19:11 EST 2021" docASTNodeCount="3477" docActiveCodeLength="21245" docExpressionCount="2371" docLength="22204" length="8" offset="4263" starttimestamp="1612231299681" timestamp="4651595">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <Command __id="8322" _type="InsertStringCommand" date="Mon Feb 01 22:19:11 EST 2021" starttimestamp="1612231299681" timestamp="4651607" timestamp2="4651607">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8323" _type="Insert" date="Mon Feb 01 22:19:26 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21246" docExpressionCount="2372" docLength="22205" length="1" offset="4271" starttimestamp="1612231299681" timestamp="4666733">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="8324" _type="InsertStringCommand" date="Mon Feb 01 22:19:26 EST 2021" starttimestamp="1612231299681" timestamp="4666738" timestamp2="4666738">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8325" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:19:26 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4666780" />
  <DocumentChange __id="8326" _type="Delete" date="Mon Feb 01 22:19:27 EST 2021" docASTNodeCount="3477" docActiveCodeLength="21245" docExpressionCount="2371" docLength="22204" endLine="105" length="1" offset="4271" startLine="105" starttimestamp="1612231299681" timestamp="4667431">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="8327" _type="Insert" date="Mon Feb 01 22:19:27 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21246" docExpressionCount="2372" docLength="22205" length="1" offset="4271" starttimestamp="1612231299681" timestamp="4667867">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <DocumentChange __id="8328" _type="Delete" date="Mon Feb 01 22:19:27 EST 2021" docASTNodeCount="3477" docActiveCodeLength="21245" docExpressionCount="2371" docLength="22204" endLine="105" length="1" offset="4271" startLine="105" starttimestamp="1612231299681" timestamp="4668287">
    <text><![CDATA[w]]></text>
  </DocumentChange>
  <DocumentChange __id="8329" _type="Insert" date="Mon Feb 01 22:19:28 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21248" docExpressionCount="2372" docLength="22207" length="3" offset="4271" repeat="3" starttimestamp="1612231299681" timestamp="4669226" timestamp2="4669404">
    <text><![CDATA[lis]]></text>
  </DocumentChange>
  <Command __id="8332" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:29 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4669515" />
  <DocumentChange __id="8333" _type="Replace" date="Mon Feb 01 22:19:29 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21259" docExpressionCount="2372" docLength="22218" endLine="105" insertionLength="14" int_docASTNodeCount="3477" int_docActiveCodeLength="21245" int_docExpressionCount="2371" int_docLength="22204" length="3" offset="4271" startLine="105" starttimestamp="1612231299681" timestamp="4669520">
    <deletedText><![CDATA[lis]]></deletedText>
    <insertedText><![CDATA[ECLIPSE_CLOSED]]></insertedText>
  </DocumentChange>
  <Command __id="8334" _type="InsertStringCommand" date="Mon Feb 01 22:19:29 EST 2021" starttimestamp="1612231299681" timestamp="4669530" timestamp2="4669530">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8335" _type="Replace" date="Mon Feb 01 22:19:30 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21248" docExpressionCount="2372" docLength="22207" endLine="105" insertionLength="3" int_docASTNodeCount="3477" int_docActiveCodeLength="21245" int_docExpressionCount="2371" int_docLength="22204" length="14" offset="4271" startLine="105" starttimestamp="1612231299681" timestamp="4670346">
    <deletedText><![CDATA[ECLIPSE_CLOSED]]></deletedText>
    <insertedText><![CDATA[lis]]></insertedText>
  </DocumentChange>
  <Command __id="8336" _type="UndoCommand" date="Mon Feb 01 22:19:30 EST 2021" starttimestamp="1612231299681" timestamp="4670388" />
  <DocumentChange __id="8337" _type="Replace" date="Mon Feb 01 22:19:30 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21246" docExpressionCount="2372" docLength="22205" endLine="105" insertionLength="1" int_docASTNodeCount="3477" int_docActiveCodeLength="21245" int_docExpressionCount="2371" int_docLength="22204" length="3" offset="4271" startLine="105" starttimestamp="1612231299681" timestamp="4670864">
    <deletedText><![CDATA[lis]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <Command __id="8338" _type="InsertStringCommand" date="Mon Feb 01 22:19:30 EST 2021" starttimestamp="1612231299681" timestamp="4670872" timestamp2="4670872">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="8339" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:19:30 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4670909" />
  <DocumentChange __id="8340" _type="Insert" date="Mon Feb 01 22:19:30 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21250" docExpressionCount="2372" docLength="22209" length="4" offset="4272" repeat="4" starttimestamp="1612231299681" timestamp="4671069" timestamp2="4671698">
    <text><![CDATA[istc]]></text>
  </DocumentChange>
  <DocumentChange __id="8344" _type="Delete" date="Mon Feb 01 22:19:31 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21249" docExpressionCount="2372" docLength="22208" endLine="105" length="1" offset="4275" startLine="105" starttimestamp="1612231299681" timestamp="4672012">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="8345" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:31 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4672257" />
  <DocumentChange __id="8346" _type="Replace" date="Mon Feb 01 22:19:31 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21252" docExpressionCount="2372" docLength="22211" endLine="105" insertionLength="7" int_docASTNodeCount="3477" int_docActiveCodeLength="21245" int_docExpressionCount="2371" int_docLength="22204" length="4" offset="4271" startLine="105" starttimestamp="1612231299681" timestamp="4672262">
    <deletedText><![CDATA[list]]></deletedText>
    <insertedText><![CDATA[List<E>]]></insertedText>
  </DocumentChange>
  <Command __id="8347" _type="InsertStringCommand" date="Mon Feb 01 22:19:31 EST 2021" starttimestamp="1612231299681" timestamp="4672302" timestamp2="4672302">
    <data><![CDATA[<]]></data>
  </Command>
  <DocumentChange __id="8348" _type="Replace" date="Mon Feb 01 22:19:33 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21252" docExpressionCount="2372" docLength="22211" endLine="105" insertionLength="1" int_docASTNodeCount="3479" int_docActiveCodeLength="21251" int_docExpressionCount="2372" int_docLength="22210" length="1" offset="4276" startLine="105" starttimestamp="1612231299681" timestamp="4673702">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[e]]></insertedText>
  </DocumentChange>
  <Command __id="8349" _type="InsertStringCommand" date="Mon Feb 01 22:19:33 EST 2021" starttimestamp="1612231299681" timestamp="4673710" timestamp2="4673710">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8350" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:19:33 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4673797" />
  <DocumentChange __id="8351" _type="Insert" date="Mon Feb 01 22:19:33 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21254" docExpressionCount="2372" docLength="22213" length="2" offset="4277" repeat="2" starttimestamp="1612231299681" timestamp="4674314" timestamp2="4674364">
    <text><![CDATA[hi]]></text>
  </DocumentChange>
  <Command __id="8353" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:34 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4674670" />
  <DocumentChange __id="8354" _type="Replace" date="Mon Feb 01 22:19:34 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21261" docExpressionCount="2372" docLength="22220" endLine="105" insertionLength="10" int_docASTNodeCount="3479" int_docActiveCodeLength="21251" int_docExpressionCount="2372" int_docLength="22210" length="3" offset="4276" startLine="105" starttimestamp="1612231299681" timestamp="4674676">
    <deletedText><![CDATA[ehi]]></deletedText>
    <insertedText><![CDATA[EHICommand]]></insertedText>
  </DocumentChange>
  <Command __id="8355" _type="InsertStringCommand" date="Mon Feb 01 22:19:34 EST 2021" starttimestamp="1612231299681" timestamp="4674686" timestamp2="4674686">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8356" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Mon Feb 01 22:19:34 EST 2021" starttimestamp="1612231299681" timestamp="4675210" />
  <DocumentChange __id="8357" _type="Insert" date="Mon Feb 01 22:19:35 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21262" docExpressionCount="2372" docLength="22221" length="1" offset="4287" starttimestamp="1612231299681" timestamp="4675455">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="8358" _type="InsertStringCommand" date="Mon Feb 01 22:19:35 EST 2021" starttimestamp="1612231299681" timestamp="4675464" timestamp2="4675464">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="8359" _type="Insert" date="Mon Feb 01 22:19:43 EST 2021" docASTNodeCount="3485" docActiveCodeLength="21263" docExpressionCount="2374" docLength="22222" length="1" offset="4288" starttimestamp="1612231299681" timestamp="4683764">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="8362" _type="Delete" date="Mon Feb 01 22:19:43 EST 2021" docASTNodeCount="3479" docActiveCodeLength="21262" docExpressionCount="2372" docLength="22221" endLine="105" length="1" offset="4288" startLine="105" starttimestamp="1612231299681" timestamp="4684239">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="8360" _type="InsertStringCommand" date="Mon Feb 01 22:19:43 EST 2021" starttimestamp="1612231299681" timestamp="4683769" timestamp2="4683769">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="8361" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:19:43 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4683853" />
  <Command __id="8365" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:45 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4685796" />
  <Command __id="8367" _type="InsertStringCommand" date="Mon Feb 01 22:19:45 EST 2021" starttimestamp="1612231299681" timestamp="4685990" timestamp2="4685990">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="8368" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:19:45 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4686083" />
  <Command __id="8369" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:45 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4686114" />
  <Command __id="8371" _type="InsertStringCommand" date="Mon Feb 01 22:19:46 EST 2021" starttimestamp="1612231299681" timestamp="4686321" timestamp2="4686321">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="8373" _type="InsertStringCommand" date="Mon Feb 01 22:19:46 EST 2021" starttimestamp="1612231299681" timestamp="4686407" timestamp2="4686407">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="8374" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:19:46 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4686502" />
  <Command __id="8375" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4686527" />
  <Command __id="8377" _type="InsertStringCommand" date="Mon Feb 01 22:19:46 EST 2021" starttimestamp="1612231299681" timestamp="4686564" timestamp2="4686564">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="8378" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:19:46 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4686657" />
  <Command __id="8379" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4686690" />
  <Command __id="8381" _type="InsertStringCommand" date="Mon Feb 01 22:19:46 EST 2021" starttimestamp="1612231299681" timestamp="4686701" timestamp2="4686701">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="8383" _type="InsertStringCommand" date="Mon Feb 01 22:19:46 EST 2021" starttimestamp="1612231299681" timestamp="4686724" timestamp2="4686724">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8384" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:19:46 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4686766" />
  <Command __id="8385" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4686792" />
  <Command __id="8387" _type="InsertStringCommand" date="Mon Feb 01 22:19:46 EST 2021" starttimestamp="1612231299681" timestamp="4686845" timestamp2="4686845">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8389" _type="InsertStringCommand" date="Mon Feb 01 22:19:46 EST 2021" starttimestamp="1612231299681" timestamp="4686932" timestamp2="4686932">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="8391" _type="InsertStringCommand" date="Mon Feb 01 22:19:46 EST 2021" starttimestamp="1612231299681" timestamp="4686979" timestamp2="4686979">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8392" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:19:46 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4687021" />
  <Command __id="8393" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:46 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4687057" />
  <Command __id="8395" _type="InsertStringCommand" date="Mon Feb 01 22:19:47 EST 2021" starttimestamp="1612231299681" timestamp="4687588" timestamp2="4687588">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8397" _type="InsertStringCommand" date="Mon Feb 01 22:19:47 EST 2021" starttimestamp="1612231299681" timestamp="4687836" timestamp2="4687836">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8399" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:19:47 EST 2021" starttimestamp="1612231299681" timestamp="4688307" />
  <Command __id="8401" _type="InsertStringCommand" date="Mon Feb 01 22:19:48 EST 2021" starttimestamp="1612231299681" timestamp="4688473" timestamp2="4688473">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="8403" _type="InsertStringCommand" date="Mon Feb 01 22:19:48 EST 2021" starttimestamp="1612231299681" timestamp="4688649" timestamp2="4688649">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8405" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:19:48 EST 2021" starttimestamp="1612231299681" timestamp="4689149" />
  <Command __id="8407" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:19:48 EST 2021" starttimestamp="1612231299681" timestamp="4689263" />
  <Command __id="8409" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Mon Feb 01 22:19:49 EST 2021" starttimestamp="1612231299681" timestamp="4689441" />
  <Command __id="8411" _type="InsertStringCommand" date="Mon Feb 01 22:19:49 EST 2021" starttimestamp="1612231299681" timestamp="4689816" timestamp2="4689816">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8412" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:51 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4691562" />
  <Command __id="8413" _type="MoveCaretCommand" caretOffset="2832" date="Mon Feb 01 22:19:51 EST 2021" docOffset="4404" starttimestamp="1612231299681" timestamp="4691644" />
  <Command __id="8414" _type="MoveCaretCommand" caretOffset="2783" date="Mon Feb 01 22:19:51 EST 2021" docOffset="4355" starttimestamp="1612231299681" timestamp="4692196" />
  <Command __id="8416" _type="InsertStringCommand" date="Mon Feb 01 22:19:52 EST 2021" starttimestamp="1612231299681" timestamp="4692435" timestamp2="4692435">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="8418" _type="InsertStringCommand" date="Mon Feb 01 22:19:52 EST 2021" starttimestamp="1612231299681" timestamp="4692484" timestamp2="4692484">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8419" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Mon Feb 01 22:19:52 EST 2021" start_end="START" starttimestamp="1612231299681" timestamp="4692485" />
  <Command __id="8422" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Mon Feb 01 22:19:52 EST 2021" start_end="END" starttimestamp="1612231299681" timestamp="4693045" />
  <Command __id="8424" _type="InsertStringCommand" date="Mon Feb 01 22:19:52 EST 2021" starttimestamp="1612231299681" timestamp="4693059" timestamp2="4693059">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8426" _type="InsertStringCommand" date="Mon Feb 01 22:19:53 EST 2021" starttimestamp="1612231299681" timestamp="4693387" timestamp2="4693387">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8428" _type="InsertStringCommand" date="Mon Feb 01 22:19:53 EST 2021" starttimestamp="1612231299681" timestamp="4693509" timestamp2="4693509">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="8430" _type="InsertStringCommand" date="Mon Feb 01 22:19:53 EST 2021" starttimestamp="1612231299681" timestamp="4693593" timestamp2="4693593">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8431" _type="MoveCaretCommand" caretOffset="2846" date="Mon Feb 01 22:19:57 EST 2021" docOffset="4418" starttimestamp="1612231299681" timestamp="4697643" />
  <DocumentChange __id="8363" _type="Insert" date="Mon Feb 01 22:19:45 EST 2021" docASTNodeCount="3485" docActiveCodeLength="21275" docExpressionCount="2374" docLength="22234" length="13" offset="4288" repeat="13" starttimestamp="1612231299681" timestamp="4685732" timestamp2="4687830">
    <text><![CDATA[webCommands  ]]></text>
  </DocumentChange>
  <DocumentChange __id="8398" _type="Delete" date="Mon Feb 01 22:19:47 EST 2021" docASTNodeCount="3485" docActiveCodeLength="21274" docExpressionCount="2374" docLength="22233" endLine="105" length="1" offset="4300" startLine="105" starttimestamp="1612231299681" timestamp="4688303">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="8400" _type="Insert" date="Mon Feb 01 22:19:48 EST 2021" docASTNodeCount="3485" docActiveCodeLength="21276" docExpressionCount="2374" docLength="22235" length="2" offset="4300" repeat="2" starttimestamp="1612231299681" timestamp="4688468" timestamp2="4688643">
    <text><![CDATA[= ]]></text>
  </DocumentChange>
  <DocumentChange __id="8404" _type="Delete" date="Mon Feb 01 22:19:48 EST 2021" docASTNodeCount="3485" docActiveCodeLength="21273" docExpressionCount="2374" docLength="22232" endLine="105" length="3" offset="4299" repeat="3" startLine="105" starttimestamp="1612231299681" timestamp="4689147" timestamp2="4689439">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <DocumentChange __id="8410" _type="Insert" date="Mon Feb 01 22:19:49 EST 2021" docASTNodeCount="3485" docActiveCodeLength="21274" docExpressionCount="2374" docLength="22233" length="1" offset="4299" starttimestamp="1612231299681" timestamp="4689811">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="8415" _type="Insert" date="Mon Feb 01 22:19:52 EST 2021" docASTNodeCount="3485" docActiveCodeLength="21278" docExpressionCount="2374" docLength="22237" length="4" offset="4355" repeat="4" starttimestamp="1612231299681" timestamp="4692428" timestamp2="4692917">
    <text><![CDATA[webc]]></text>
  </DocumentChange>
  <DocumentChange __id="8423" _type="Replace" date="Mon Feb 01 22:19:52 EST 2021" docASTNodeCount="3485" docActiveCodeLength="21285" docExpressionCount="2374" docLength="22244" endLine="107" insertionLength="11" int_docASTNodeCount="3485" int_docActiveCodeLength="21274" int_docExpressionCount="2374" int_docLength="22233" length="4" offset="4355" startLine="107" starttimestamp="1612231299681" timestamp="4693049">
    <deletedText><![CDATA[webc]]></deletedText>
    <insertedText><![CDATA[webCommands]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8425" _type="Insert" date="Mon Feb 01 22:19:53 EST 2021" docASTNodeCount="3487" docActiveCodeLength="21288" docExpressionCount="2376" docLength="22247" length="3" offset="4366" repeat="3" starttimestamp="1612231299681" timestamp="4693379" timestamp2="4693587">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <Command __id="8432" _type="MoveCaretCommand" caretOffset="2593" date="Mon Feb 01 22:20:02 EST 2021" docOffset="4165" starttimestamp="1612231299681" timestamp="4702494" />
  <Command __id="8434" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Mon Feb 01 22:20:03 EST 2021" starttimestamp="1612231299681" timestamp="4703589" />
  <Command __id="8435" _type="MoveCaretCommand" caretOffset="2783" date="Mon Feb 01 22:20:03 EST 2021" docOffset="4355" starttimestamp="1612231299681" timestamp="4704297" />
  <Command __id="8436" _type="MoveCaretCommand" caretOffset="2774" date="Mon Feb 01 22:21:16 EST 2021" docOffset="4346" starttimestamp="1612231299681" timestamp="4776441" />
  <Command __id="8437" _type="SelectTextCommand" caretOffset="2774" date="Mon Feb 01 22:21:29 EST 2021" end="2774" start="2720" starttimestamp="1612231299681" timestamp="4789464" />
  <Command __id="8438" _type="MoveCaretCommand" caretOffset="2774" date="Mon Feb 01 22:21:29 EST 2021" docOffset="4346" starttimestamp="1612231299681" timestamp="4789870" />
  <Command __id="8439" _type="MoveCaretCommand" caretOffset="2783" date="Mon Feb 01 22:21:31 EST 2021" docOffset="4355" starttimestamp="1612231299681" timestamp="4792126" />
  <Command __id="8440" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Mon Feb 01 22:21:35 EST 2021" starttimestamp="1612231299681" timestamp="4795791" />
  <Command __id="8441" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:21:35 EST 2021" starttimestamp="1612231299681" timestamp="4795880" />
  <Command __id="8442" _type="EclipseCommand" commandID="" date="Mon Feb 01 22:21:35 EST 2021" starttimestamp="1612231299681" timestamp="4795996" />
  <Command __id="8443" _type="ShellCommand" date="Mon Feb 01 22:21:38 EST 2021" starttimestamp="1612231299681" timestamp="4798430" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8444" _type="ShellCommand" date="Mon Feb 01 22:21:41 EST 2021" starttimestamp="1612231299681" timestamp="4802136" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8445" _type="ShellCommand" date="Mon Feb 01 22:21:42 EST 2021" starttimestamp="1612231299681" timestamp="4803134" type="ECLIPSE_LOST_FOCUS" />
</Events>
