<Events startTimestamp="1614131043210" logVersion="1.0.0.202102091426">
  <Command __id="17" _type="PauseCommand" date="Tue Feb 23 20:48:37 EST 2021" range="2m-5m" starttimestamp="1614131043210" timestamp="273875">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[192626]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="16" _type="ShellCommand" date="Tue Feb 23 20:48:37 EST 2021" starttimestamp="1614131043210" timestamp="273875" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="18" _type="MoveCaretCommand" caretOffset="1568" date="Tue Feb 23 20:48:37 EST 2021" docOffset="1913" starttimestamp="1614131043210" timestamp="273937" />
  <Command __id="20" _type="PauseCommand" date="Tue Feb 23 20:48:38 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="274937">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1000]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="19" _type="MoveCaretCommand" caretOffset="1568" date="Tue Feb 23 20:48:38 EST 2021" docOffset="1913" starttimestamp="1614131043210" timestamp="274937" />
  <Command __id="22" _type="PauseCommand" date="Tue Feb 23 20:48:41 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="278303">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3366]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="23" _type="MoveCaretCommand" caretOffset="385" date="Tue Feb 23 20:48:41 EST 2021" docOffset="1667" starttimestamp="1614131043210" timestamp="278499" />
  <Command __id="25" _type="PauseCommand" date="Tue Feb 23 20:48:45 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="282766">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4267]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="24" _type="MoveCaretCommand" caretOffset="209" date="Tue Feb 23 20:48:45 EST 2021" docOffset="1491" starttimestamp="1614131043210" timestamp="282766" />
  <Command __id="26" _type="MoveCaretCommand" caretOffset="206" date="Tue Feb 23 20:48:46 EST 2021" docOffset="1488" starttimestamp="1614131043210" timestamp="283105" />
  <Command __id="28" _type="PauseCommand" date="Tue Feb 23 20:48:47 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="284130">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1025]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="29" _type="InsertStringCommand" date="Tue Feb 23 20:48:47 EST 2021" starttimestamp="1614131043210" timestamp="284140" timestamp2="284140">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="31" _type="InsertStringCommand" date="Tue Feb 23 20:48:47 EST 2021" starttimestamp="1614131043210" timestamp="284414" timestamp2="284414">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="32" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:48:48 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="284862" />
  <Command __id="34" _type="PauseCommand" date="Tue Feb 23 20:48:49 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="286001">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1139]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="41" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:48:49 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="286138" />
  <Command __id="43" _type="InsertStringCommand" date="Tue Feb 23 20:48:49 EST 2021" starttimestamp="1614131043210" timestamp="286159" timestamp2="286159">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="45" _type="InsertStringCommand" date="Tue Feb 23 20:48:49 EST 2021" starttimestamp="1614131043210" timestamp="286197" timestamp2="286197">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="47" _type="InsertStringCommand" date="Tue Feb 23 20:48:49 EST 2021" starttimestamp="1614131043210" timestamp="286214" timestamp2="286214">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="49" _type="InsertStringCommand" date="Tue Feb 23 20:48:49 EST 2021" starttimestamp="1614131043210" timestamp="286230" timestamp2="286230">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="51" _type="InsertStringCommand" date="Tue Feb 23 20:48:49 EST 2021" starttimestamp="1614131043210" timestamp="286307" timestamp2="286307">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="52" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:48:49 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="286341" />
  <Command __id="55" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:48:49 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="286605" />
  <Command __id="57" _type="InsertStringCommand" date="Tue Feb 23 20:48:49 EST 2021" starttimestamp="1614131043210" timestamp="286618" timestamp2="286618">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="59" _type="InsertStringCommand" date="Tue Feb 23 20:48:49 EST 2021" starttimestamp="1614131043210" timestamp="286688" timestamp2="286688">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="60" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:48:49 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="286722" />
  <Command __id="65" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:48:50 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="286975" />
  <Command __id="67" _type="PauseCommand" date="Tue Feb 23 20:48:52 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="289563">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2588]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="68" _type="InsertStringCommand" date="Tue Feb 23 20:48:52 EST 2021" starttimestamp="1614131043210" timestamp="289568" timestamp2="289568">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="70" _type="InsertStringCommand" date="Tue Feb 23 20:48:53 EST 2021" starttimestamp="1614131043210" timestamp="289858" timestamp2="289858">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="71" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:48:53 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="289893" />
  <Command __id="76" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:48:54 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="290810" />
  <Command __id="78" _type="InsertStringCommand" date="Tue Feb 23 20:48:54 EST 2021" starttimestamp="1614131043210" timestamp="290835" timestamp2="290835">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="80" _type="PauseCommand" date="Tue Feb 23 20:48:59 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="296293">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5458]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="81" _type="InsertStringCommand" date="Tue Feb 23 20:48:59 EST 2021" starttimestamp="1614131043210" timestamp="296297" timestamp2="296297">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="83" _type="InsertStringCommand" date="Tue Feb 23 20:48:59 EST 2021" starttimestamp="1614131043210" timestamp="296351" timestamp2="296351">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="85" _type="InsertStringCommand" date="Tue Feb 23 20:48:59 EST 2021" starttimestamp="1614131043210" timestamp="296456" timestamp2="296456">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="87" _type="InsertStringCommand" date="Tue Feb 23 20:48:59 EST 2021" starttimestamp="1614131043210" timestamp="296523" timestamp2="296523">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="89" _type="InsertStringCommand" date="Tue Feb 23 20:49:00 EST 2021" starttimestamp="1614131043210" timestamp="296844" timestamp2="296844">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="91" _type="InsertStringCommand" date="Tue Feb 23 20:49:00 EST 2021" starttimestamp="1614131043210" timestamp="297275" timestamp2="297275">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="93" _type="InsertStringCommand" date="Tue Feb 23 20:49:00 EST 2021" starttimestamp="1614131043210" timestamp="297366" timestamp2="297366">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="95" _type="InsertStringCommand" date="Tue Feb 23 20:49:00 EST 2021" starttimestamp="1614131043210" timestamp="297499" timestamp2="297499">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="97" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 20:49:01 EST 2021" starttimestamp="1614131043210" timestamp="297812" />
  <Command __id="99" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 20:49:01 EST 2021" starttimestamp="1614131043210" timestamp="297933" />
  <Command __id="101" _type="InsertStringCommand" date="Tue Feb 23 20:49:01 EST 2021" starttimestamp="1614131043210" timestamp="298042" timestamp2="298042">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="103" _type="InsertStringCommand" date="Tue Feb 23 20:49:01 EST 2021" starttimestamp="1614131043210" timestamp="298131" timestamp2="298131">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="105" _type="InsertStringCommand" date="Tue Feb 23 20:49:01 EST 2021" starttimestamp="1614131043210" timestamp="298213" timestamp2="298213">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="107" _type="InsertStringCommand" date="Tue Feb 23 20:49:01 EST 2021" starttimestamp="1614131043210" timestamp="298353" timestamp2="298353">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="109" _type="InsertStringCommand" date="Tue Feb 23 20:49:01 EST 2021" starttimestamp="1614131043210" timestamp="298501" timestamp2="298501">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="111" _type="InsertStringCommand" date="Tue Feb 23 20:49:01 EST 2021" starttimestamp="1614131043210" timestamp="298575" timestamp2="298575">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="113" _type="PauseCommand" date="Tue Feb 23 20:49:03 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="300096">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1521]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="114" _type="InsertStringCommand" date="Tue Feb 23 20:49:03 EST 2021" starttimestamp="1614131043210" timestamp="300112" timestamp2="300112">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="116" _type="PasteCommand" date="Tue Feb 23 20:49:03 EST 2021" starttimestamp="1614131043210" timestamp="300674" />
  <Command __id="118" _type="PauseCommand" date="Tue Feb 23 20:49:04 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="301763">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1089]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="117" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 20:49:04 EST 2021" starttimestamp="1614131043210" timestamp="301763" />
  <Command __id="120" _type="InsertStringCommand" date="Tue Feb 23 20:49:05 EST 2021" starttimestamp="1614131043210" timestamp="302374" timestamp2="302374">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="122" _type="PauseCommand" date="Tue Feb 23 20:49:10 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="307734">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5360]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="121" _type="MoveCaretCommand" caretOffset="469" date="Tue Feb 23 20:49:10 EST 2021" docOffset="1751" starttimestamp="1614131043210" timestamp="307734" />
  <Command __id="124" _type="PauseCommand" date="Tue Feb 23 20:49:11 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="308757">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1023]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="123" _type="MoveCaretCommand" caretOffset="286" date="Tue Feb 23 20:49:11 EST 2021" docOffset="1568" starttimestamp="1614131043210" timestamp="308757" />
  <Command __id="126" _type="InsertStringCommand" date="Tue Feb 23 20:49:12 EST 2021" starttimestamp="1614131043210" timestamp="309365" timestamp2="309365">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="128" _type="InsertStringCommand" date="Tue Feb 23 20:49:13 EST 2021" starttimestamp="1614131043210" timestamp="310314" timestamp2="310314">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="130" _type="InsertStringCommand" date="Tue Feb 23 20:49:13 EST 2021" starttimestamp="1614131043210" timestamp="310395" timestamp2="310395">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="132" _type="InsertStringCommand" date="Tue Feb 23 20:49:13 EST 2021" starttimestamp="1614131043210" timestamp="310458" timestamp2="310458">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="134" _type="InsertStringCommand" date="Tue Feb 23 20:49:13 EST 2021" starttimestamp="1614131043210" timestamp="310606" timestamp2="310606">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="136" _type="InsertStringCommand" date="Tue Feb 23 20:49:13 EST 2021" starttimestamp="1614131043210" timestamp="310699" timestamp2="310699">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="138" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:49:14 EST 2021" starttimestamp="1614131043210" timestamp="311672" />
  <Command __id="140" _type="InsertStringCommand" date="Tue Feb 23 20:49:15 EST 2021" starttimestamp="1614131043210" timestamp="311993" timestamp2="311993">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="141" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:49:15 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="312035" />
  <Command __id="149" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:49:15 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="312703" />
  <Command __id="151" _type="PauseCommand" date="Tue Feb 23 20:49:21 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="318434">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[5731]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="152" _type="InsertStringCommand" date="Tue Feb 23 20:49:21 EST 2021" starttimestamp="1614131043210" timestamp="318439" timestamp2="318439">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="153" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:49:21 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="318480" />
  <Command __id="154" _type="EclipseCommand" commandID="" date="Tue Feb 23 20:49:21 EST 2021" starttimestamp="1614131043210" timestamp="318580" />
  <Command __id="155" _type="EclipseCommand" commandID="" date="Tue Feb 23 20:49:21 EST 2021" starttimestamp="1614131043210" timestamp="318583" />
  <Command __id="156" _type="EclipseCommand" commandID="" date="Tue Feb 23 20:49:21 EST 2021" starttimestamp="1614131043210" timestamp="318583" />
  <Command __id="157" _type="EclipseCommand" commandID="" date="Tue Feb 23 20:49:21 EST 2021" starttimestamp="1614131043210" timestamp="318586" />
  <Command __id="161" _type="PauseCommand" date="Tue Feb 23 20:49:22 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="319681">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1000]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="160" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:49:22 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="319680" />
  <Command __id="163" _type="InsertStringCommand" date="Tue Feb 23 20:49:22 EST 2021" starttimestamp="1614131043210" timestamp="319714" timestamp2="319714">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="165" _type="PauseCommand" date="Tue Feb 23 20:49:26 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="323245">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3531]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="166" _type="InsertStringCommand" date="Tue Feb 23 20:49:26 EST 2021" starttimestamp="1614131043210" timestamp="323251" timestamp2="323251">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="167" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:49:26 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="323333" />
  <Command __id="170" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:49:27 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="324206" />
  <Command __id="172" _type="InsertStringCommand" date="Tue Feb 23 20:49:27 EST 2021" starttimestamp="1614131043210" timestamp="324230" timestamp2="324230">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="173" _type="InsertStringCommand" date="Tue Feb 23 20:49:27 EST 2021" starttimestamp="1614131043210" timestamp="324278" timestamp2="324278">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="175" _type="PauseCommand" date="Tue Feb 23 20:49:41 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="337870">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[13592]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="176" _type="InsertStringCommand" date="Tue Feb 23 20:49:41 EST 2021" starttimestamp="1614131043210" timestamp="337878" timestamp2="337878">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="178" _type="InsertStringCommand" date="Tue Feb 23 20:49:41 EST 2021" starttimestamp="1614131043210" timestamp="337964" timestamp2="337964">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="179" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:49:41 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="338006" />
  <Command __id="181" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:49:41 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="338636" />
  <Command __id="183" _type="InsertStringCommand" date="Tue Feb 23 20:49:41 EST 2021" starttimestamp="1614131043210" timestamp="338661" timestamp2="338661">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="185" _type="PauseCommand" date="Tue Feb 23 20:49:44 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="341108">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2447]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="186" _type="InsertStringCommand" date="Tue Feb 23 20:49:44 EST 2021" starttimestamp="1614131043210" timestamp="341114" timestamp2="341114">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="187" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:49:44 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="341196" />
  <Command __id="191" _type="PauseCommand" date="Tue Feb 23 20:49:51 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="348582">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[7177]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="190" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:49:51 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="348582" />
  <Command __id="193" _type="InsertStringCommand" date="Tue Feb 23 20:49:51 EST 2021" starttimestamp="1614131043210" timestamp="348600" timestamp2="348600">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="195" _type="PauseCommand" date="Tue Feb 23 20:49:53 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="350033">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1433]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="194" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 20:49:53 EST 2021" starttimestamp="1614131043210" timestamp="350033" />
  <Command __id="197" _type="PauseCommand" date="Tue Feb 23 20:49:56 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="352823">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2790]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="198" _type="InsertStringCommand" date="Tue Feb 23 20:49:56 EST 2021" starttimestamp="1614131043210" timestamp="352828" timestamp2="352828">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 20:44:03 EST 2021" docASTNodeCount="460" docActiveCodeLength="3021" docExpressionCount="293" docLength="3021" projectName="A0" starttimestamp="1614131043210" timestamp="207">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Sophomore 2st Sem\COMP533\A0\src\MVC\SlaveThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package MVC;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import Bean.AKeyValue;
import Bean.KeyValue;
import launcher.MapReduceTracer;
import partitioner.Partitioner;
import partitioner.PartitionerFactory;
import reducer.Reducer;
import reducer.ReducerFactory;
import reducer.RemoteReducer;

public class SlaveThread extends MapReduceTracer implements Runnable{
	private int slaveNum;
	private List<KeyValue<String,Integer>> slaveKeyValues;	
	private Model model;
	private RemoteReducer<String, Integer> clientReducer;
	private Reducer<String, Integer> reducer;
	private Partitioner<String, Integer> partitioner;
	
	public SlaveThread(int num, Model model) {
		slaveNum = num;
		slaveKeyValues = new ArrayList<>();
		this.model = model;
	}
	
	public void run() {
		reducer = ReducerFactory.getReducer();
		partitioner = PartitionerFactory.getPartitioner();
		try {
			while(true) {
				try {
					traceDequeueRequest(model.getKeyValueQueue());
					KeyValue<String,Integer> keyValue = model.getKeyValueQueue().take();
					traceDequeue(keyValue);
					if (keyValue.getKey() == null && keyValue.getValue() == null) {
						Map<String, Integer> partiallyReducedMap = new HashMap<>();
						if (clientReducer == null) {
							 partiallyReducedMap = reducer.reduce(slaveKeyValues);
						} else {
							traceRemoteList(slaveKeyValues);
							partiallyReducedMap = clientReducer.remoteReduce(slaveKeyValues);
							traceRemoteResult(partiallyReducedMap);
						}
						for (String key: partiallyReducedMap.keySet()) {
							model.getReductionQueueList().get(partitioner.getPartition(key, partiallyReducedMap.get(key), model.getNumThreads())).add(new AKeyValue<String,Integer>(key,partiallyReducedMap.get(key)));
						}
						model.getBarrier().barrier();
						traceSplitAfterBarrier(slaveNum, slaveKeyValues);
						Map<String, Integer> fullReducedMap = new HashMap<>();
						if (clientReducer == null) {
							 fullReducedMap = reducer.reduce(model.getReductionQueueList().get(slaveNum));
						} else {
							traceRemoteList(model.getReductionQueueList().get(slaveNum));
							fullReducedMap = clientReducer.remoteReduce(model.getReductionQueueList().get(slaveNum));
							traceRemoteResult(fullReducedMap);
						}
						Map<String, Integer> originalMap = model.getResult();
						originalMap.putAll(fullReducedMap);
						traceAddedToMap(originalMap, fullReducedMap);
						slaveKeyValues.clear();
						model.getJoiner().finish();
						synchronizedWait();
					} else {
						slaveKeyValues.add(keyValue);
					}
				} catch (RemoteException e) {
					e.printStackTrace();
				}
			}
		} catch (InterruptedException e) {
			traceQuit();
			e.printStackTrace();
		} 
	}
	
	public void setClientReducer(RemoteReducer<String, Integer> clientReducer) {
		traceClientAssignment(clientReducer);
		this.clientReducer = clientReducer;
	}

}
]]></snapshot>
  </Command>
  <Command __id="21" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 20:48:41 EST 2021" docASTNodeCount="5849" docActiveCodeLength="33210" docExpressionCount="4051" docLength="35445" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="278303">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="27" _type="Insert" date="Tue Feb 23 20:48:47 EST 2021" docASTNodeCount="5852" docActiveCodeLength="33234" docExpressionCount="4051" docLength="35469" length="24" offset="1488" repeat="22" starttimestamp="1614131043210" timestamp="284130" timestamp2="286936">
    <text><![CDATA[
	private static final ]]></text>
  </DocumentChange>
  <DocumentChange __id="66" _type="Insert" date="Tue Feb 23 20:48:52 EST 2021" docASTNodeCount="5852" docActiveCodeLength="33240" docExpressionCount="4051" docLength="35475" length="6" offset="1512" repeat="6" starttimestamp="1614131043210" timestamp="289563" timestamp2="290110">
    <text><![CDATA[String]]></text>
  </DocumentChange>
  <DocumentChange __id="77" _type="Replace" date="Tue Feb 23 20:48:54 EST 2021" docASTNodeCount="5852" docActiveCodeLength="33241" docExpressionCount="4051" docLength="35476" endLine="44" insertionLength="7" int_docASTNodeCount="5852" int_docActiveCodeLength="33234" int_docExpressionCount="4051" int_docLength="35469" length="6" offset="1512" startLine="44" starttimestamp="1614131043210" timestamp="290828">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="79" _type="Insert" date="Tue Feb 23 20:48:59 EST 2021" docASTNodeCount="5857" docActiveCodeLength="33249" docExpressionCount="4053" docLength="35484" length="8" offset="1519" repeat="8" starttimestamp="1614131043210" timestamp="296293" timestamp2="297495">
    <text><![CDATA[TIMESTEM]]></text>
  </DocumentChange>
  <DocumentChange __id="96" _type="Delete" date="Tue Feb 23 20:49:01 EST 2021" docASTNodeCount="5857" docActiveCodeLength="33247" docExpressionCount="4053" docLength="35482" endLine="44" length="2" offset="1525" repeat="2" startLine="44" starttimestamp="1614131043210" timestamp="297809" timestamp2="297931">
    <text><![CDATA[EM]]></text>
  </DocumentChange>
  <DocumentChange __id="100" _type="Insert" date="Tue Feb 23 20:49:01 EST 2021" docASTNodeCount="5858" docActiveCodeLength="33290" docExpressionCount="4054" docLength="35525" length="43" offset="1525" repeat="9" starttimestamp="1614131043210" timestamp="298037" timestamp2="302368">
    <text><![CDATA[AMP = "timestamp for each participant.csv";]]></text>
  </DocumentChange>
  <DocumentChange __id="125" _type="Insert" date="Tue Feb 23 20:49:12 EST 2021" docASTNodeCount="5858" docActiveCodeLength="33298" docExpressionCount="4054" docLength="35533" length="8" offset="1568" repeat="6" starttimestamp="1614131043210" timestamp="309357" timestamp2="310695">
    <text><![CDATA[
	PRIVA]]></text>
  </DocumentChange>
  <DocumentChange __id="137" _type="Delete" date="Tue Feb 23 20:49:14 EST 2021" docASTNodeCount="5858" docActiveCodeLength="33293" docExpressionCount="4054" docLength="35528" endLine="45" length="5" offset="1571" startLine="45" starttimestamp="1614131043210" timestamp="311669">
    <text><![CDATA[PRIVA]]></text>
  </DocumentChange>
  <DocumentChange __id="139" _type="Insert" date="Tue Feb 23 20:49:15 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33301" docExpressionCount="4054" docLength="35536" length="8" offset="1571" repeat="8" starttimestamp="1614131043210" timestamp="311989" timestamp2="312696">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <DocumentChange __id="150" _type="Insert" date="Tue Feb 23 20:49:21 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33304" docExpressionCount="4054" docLength="35539" length="3" offset="1579" repeat="3" starttimestamp="1614131043210" timestamp="318434" timestamp2="318680">
    <text><![CDATA[map]]></text>
  </DocumentChange>
  <DocumentChange __id="162" _type="Replace" date="Tue Feb 23 20:49:22 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33310" docExpressionCount="4054" docLength="35545" endLine="45" insertionLength="9" int_docASTNodeCount="5859" int_docActiveCodeLength="33301" int_docExpressionCount="4054" int_docLength="35536" length="3" offset="1579" startLine="45" starttimestamp="1614131043210" timestamp="319691">
    <deletedText><![CDATA[map]]></deletedText>
    <insertedText><![CDATA[Map<K, V>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="164" _type="Replace" date="Tue Feb 23 20:49:26 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33310" docExpressionCount="4054" docLength="35545" endLine="45" insertionLength="1" int_docASTNodeCount="5859" int_docActiveCodeLength="33309" int_docExpressionCount="4054" int_docLength="35544" length="1" offset="1583" startLine="45" starttimestamp="1614131043210" timestamp="323245">
    <deletedText><![CDATA[K]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="168" _type="Insert" date="Tue Feb 23 20:49:26 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33312" docExpressionCount="4054" docLength="35547" length="2" offset="1584" repeat="2" starttimestamp="1614131043210" timestamp="323548" timestamp2="323566">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="171" _type="Replace" date="Tue Feb 23 20:49:27 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33315" docExpressionCount="4054" docLength="35550" endLine="45" insertionLength="6" int_docASTNodeCount="5859" int_docActiveCodeLength="33309" int_docExpressionCount="4054" int_docLength="35544" length="3" offset="1583" startLine="45" starttimestamp="1614131043210" timestamp="324222">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA[String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="174" _type="Replace" date="Tue Feb 23 20:49:41 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33315" docExpressionCount="4054" docLength="35550" endLine="45" insertionLength="1" int_docASTNodeCount="5859" int_docActiveCodeLength="33314" int_docExpressionCount="4054" int_docLength="35549" length="1" offset="1591" startLine="45" starttimestamp="1614131043210" timestamp="337870">
    <deletedText><![CDATA[V]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="177" _type="Insert" date="Tue Feb 23 20:49:41 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33317" docExpressionCount="4054" docLength="35552" length="2" offset="1592" repeat="2" starttimestamp="1614131043210" timestamp="337963" timestamp2="338149">
    <text><![CDATA[is]]></text>
  </DocumentChange>
  <DocumentChange __id="182" _type="Replace" date="Tue Feb 23 20:49:41 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33321" docExpressionCount="4054" docLength="35556" endLine="45" insertionLength="7" int_docASTNodeCount="5859" int_docActiveCodeLength="33314" int_docExpressionCount="4054" int_docLength="35549" length="3" offset="1591" startLine="45" starttimestamp="1614131043210" timestamp="338647">
    <deletedText><![CDATA[lis]]></deletedText>
    <insertedText><![CDATA[List<E>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="184" _type="Replace" date="Tue Feb 23 20:49:44 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33321" docExpressionCount="4054" docLength="35556" endLine="45" insertionLength="1" int_docASTNodeCount="5859" int_docActiveCodeLength="33320" int_docExpressionCount="4054" int_docLength="35555" length="1" offset="1596" startLine="45" starttimestamp="1614131043210" timestamp="341108">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="188" _type="Insert" date="Tue Feb 23 20:49:44 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33323" docExpressionCount="4054" docLength="35558" length="2" offset="1597" repeat="2" starttimestamp="1614131043210" timestamp="341361" timestamp2="341405">
    <text><![CDATA[on]]></text>
  </DocumentChange>
  <DocumentChange __id="192" _type="Replace" date="Tue Feb 23 20:49:51 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33324" docExpressionCount="4054" docLength="35559" endLine="45" insertionLength="4" int_docASTNodeCount="5859" int_docActiveCodeLength="33320" int_docExpressionCount="4054" int_docLength="35555" length="3" offset="1596" startLine="45" starttimestamp="1614131043210" timestamp="348594">
    <deletedText><![CDATA[lon]]></deletedText>
    <insertedText><![CDATA[Long]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="196" _type="Insert" date="Tue Feb 23 20:49:56 EST 2021" docASTNodeCount="5859" docActiveCodeLength="33325" docExpressionCount="4054" docLength="35560" length="1" offset="1602" starttimestamp="1614131043210" timestamp="352823">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="199" _type="Insert" date="Tue Feb 23 20:50:00 EST 2021" docASTNodeCount="5872" docActiveCodeLength="33329" docExpressionCount="4059" docLength="35564" length="4" offset="1603" repeat="4" starttimestamp="1614131043210" timestamp="357370" timestamp2="357664">
    <text><![CDATA[tims]]></text>
  </DocumentChange>
  <Command __id="200" _type="PauseCommand" date="Tue Feb 23 20:50:00 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="357370">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4542]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="201" _type="InsertStringCommand" date="Tue Feb 23 20:50:00 EST 2021" starttimestamp="1614131043210" timestamp="357375" timestamp2="357375">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="203" _type="InsertStringCommand" date="Tue Feb 23 20:50:00 EST 2021" starttimestamp="1614131043210" timestamp="357427" timestamp2="357427">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="204" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:00 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="357468" />
  <Command __id="207" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:00 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="357671" />
  <Command __id="209" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 20:50:01 EST 2021" starttimestamp="1614131043210" timestamp="358306" />
  <Command __id="211" _type="InsertStringCommand" date="Tue Feb 23 20:50:01 EST 2021" starttimestamp="1614131043210" timestamp="358421" timestamp2="358421">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="212" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:01 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="358513" />
  <Command __id="213" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:01 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="358538" />
  <Command __id="215" _type="InsertStringCommand" date="Tue Feb 23 20:50:01 EST 2021" starttimestamp="1614131043210" timestamp="358614" timestamp2="358614">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="216" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:01 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="358705" />
  <Command __id="217" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:01 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="358728" />
  <Command __id="219" _type="InsertStringCommand" date="Tue Feb 23 20:50:02 EST 2021" starttimestamp="1614131043210" timestamp="358910" timestamp2="358910">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="220" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:02 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="358999" />
  <Command __id="221" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:02 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="359024" />
  <Command __id="223" _type="InsertStringCommand" date="Tue Feb 23 20:50:02 EST 2021" starttimestamp="1614131043210" timestamp="359035" timestamp2="359035">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="225" _type="InsertStringCommand" date="Tue Feb 23 20:50:02 EST 2021" starttimestamp="1614131043210" timestamp="359068" timestamp2="359068">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="226" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:02 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="359110" />
  <Command __id="227" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:02 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="359134" />
  <Command __id="229" _type="InsertStringCommand" date="Tue Feb 23 20:50:02 EST 2021" starttimestamp="1614131043210" timestamp="359176" timestamp2="359176">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="230" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:02 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="359268" />
  <Command __id="231" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:02 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="359293" />
  <Command __id="233" _type="PauseCommand" date="Tue Feb 23 20:50:03 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="360661">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1368]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="234" _type="InsertStringCommand" date="Tue Feb 23 20:50:03 EST 2021" starttimestamp="1614131043210" timestamp="360666" timestamp2="360666">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="235" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:03 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="360757" />
  <Command __id="236" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:03 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="360784" />
  <Command __id="238" _type="InsertStringCommand" date="Tue Feb 23 20:50:04 EST 2021" starttimestamp="1614131043210" timestamp="360956" timestamp2="360956">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="240" _type="InsertStringCommand" date="Tue Feb 23 20:50:04 EST 2021" starttimestamp="1614131043210" timestamp="361031" timestamp2="361031">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="242" _type="InsertStringCommand" date="Tue Feb 23 20:50:04 EST 2021" starttimestamp="1614131043210" timestamp="361141" timestamp2="361141">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="244" _type="PauseCommand" date="Tue Feb 23 20:50:05 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="362619">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1478]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="245" _type="InsertStringCommand" date="Tue Feb 23 20:50:05 EST 2021" starttimestamp="1614131043210" timestamp="362623" timestamp2="362623">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="247" _type="InsertStringCommand" date="Tue Feb 23 20:50:05 EST 2021" starttimestamp="1614131043210" timestamp="362704" timestamp2="362704">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="249" _type="InsertStringCommand" date="Tue Feb 23 20:50:05 EST 2021" starttimestamp="1614131043210" timestamp="362730" timestamp2="362730">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="250" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:05 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="362770" />
  <Command __id="252" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:06 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="362995" />
  <Command __id="254" _type="InsertStringCommand" date="Tue Feb 23 20:50:07 EST 2021" starttimestamp="1614131043210" timestamp="363951" timestamp2="363951">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="256" _type="InsertStringCommand" date="Tue Feb 23 20:50:07 EST 2021" starttimestamp="1614131043210" timestamp="364040" timestamp2="364040">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="257" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:07 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="364080" />
  <Command __id="264" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:09 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="365808" />
  <Command __id="267" _type="InsertStringCommand" date="Tue Feb 23 20:50:09 EST 2021" starttimestamp="1614131043210" timestamp="365842" timestamp2="365842">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="269" _type="InsertStringCommand" date="Tue Feb 23 20:50:09 EST 2021" starttimestamp="1614131043210" timestamp="366270" timestamp2="366270">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="271" _type="PauseCommand" date="Tue Feb 23 20:50:11 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="368153">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1883]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="270" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:11 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="368153" />
  <Command __id="273" _type="PauseCommand" date="Tue Feb 23 20:50:13 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="370739">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2586]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="272" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.folding.collapse_all" date="Tue Feb 23 20:50:13 EST 2021" starttimestamp="1614131043210" timestamp="370739" />
  <Command __id="275" _type="PauseCommand" date="Tue Feb 23 20:50:18 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="375337">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4598]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="274" _type="MoveCaretCommand" caretOffset="410" date="Tue Feb 23 20:50:18 EST 2021" docOffset="1818" starttimestamp="1614131043210" timestamp="375337" />
  <Command __id="277" _type="InsertStringCommand" date="Tue Feb 23 20:50:19 EST 2021" starttimestamp="1614131043210" timestamp="376105" timestamp2="376105">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="279" _type="InsertStringCommand" date="Tue Feb 23 20:50:19 EST 2021" starttimestamp="1614131043210" timestamp="376139" timestamp2="376139">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="280" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 20:50:19 EST 2021" starttimestamp="1614131043210" timestamp="376353" />
  <Command __id="282" _type="InsertStringCommand" date="Tue Feb 23 20:50:20 EST 2021" starttimestamp="1614131043210" timestamp="377071" timestamp2="377071">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="283" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:20 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="377111" />
  <Command __id="290" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:20 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="377607" />
  <Command __id="292" _type="InsertStringCommand" date="Tue Feb 23 20:50:21 EST 2021" starttimestamp="1614131043210" timestamp="377823" timestamp2="377823">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="293" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:21 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="377862" />
  <Command __id="298" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:21 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="378269" />
  <Command __id="300" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:50:21 EST 2021" starttimestamp="1614131043210" timestamp="378592" />
  <Command __id="302" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:50:21 EST 2021" starttimestamp="1614131043210" timestamp="378712" />
  <Command __id="304" _type="InsertStringCommand" date="Tue Feb 23 20:50:22 EST 2021" starttimestamp="1614131043210" timestamp="378935" timestamp2="378935">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="305" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:22 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="378976" />
  <Command __id="313" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:22 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="379586" />
  <Command __id="315" _type="PauseCommand" date="Tue Feb 23 20:50:25 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="382645">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3059]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="316" _type="UndoCommand" date="Tue Feb 23 20:50:25 EST 2021" starttimestamp="1614131043210" timestamp="382711" />
  <Command __id="318" _type="PauseCommand" date="Tue Feb 23 20:50:28 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="384870">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2159]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="319" _type="InsertStringCommand" date="Tue Feb 23 20:50:28 EST 2021" starttimestamp="1614131043210" timestamp="384874" timestamp2="384874">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="320" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:28 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="384915" />
  <Command __id="328" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:28 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="385561" />
  <Command __id="330" _type="PauseCommand" date="Tue Feb 23 20:50:31 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="388555">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2994]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="331" _type="InsertStringCommand" date="Tue Feb 23 20:50:31 EST 2021" starttimestamp="1614131043210" timestamp="388560" timestamp2="388560">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="332" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:31 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="388601" />
  <Command __id="337" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:32 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="389034" />
  <Command __id="339" _type="InsertStringCommand" date="Tue Feb 23 20:50:32 EST 2021" starttimestamp="1614131043210" timestamp="389181" timestamp2="389181">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="340" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:32 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="389222" />
  <Command __id="342" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:32 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="389305" />
  <Command __id="344" _type="InsertStringCommand" date="Tue Feb 23 20:50:32 EST 2021" starttimestamp="1614131043210" timestamp="389316" timestamp2="389316">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="345" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:32 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="389357" />
  <Command __id="346" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:32 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="389383" />
  <Command __id="348" _type="InsertStringCommand" date="Tue Feb 23 20:50:32 EST 2021" starttimestamp="1614131043210" timestamp="389455" timestamp2="389455">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="349" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:32 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="389540" />
  <Command __id="350" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:32 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="389565" />
  <Command __id="352" _type="PauseCommand" date="Tue Feb 23 20:50:34 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="391530">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1965]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="353" _type="InsertStringCommand" date="Tue Feb 23 20:50:34 EST 2021" starttimestamp="1614131043210" timestamp="391535" timestamp2="391535">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="355" _type="InsertStringCommand" date="Tue Feb 23 20:50:35 EST 2021" starttimestamp="1614131043210" timestamp="392390" timestamp2="392390">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="357" _type="InsertStringCommand" date="Tue Feb 23 20:50:35 EST 2021" starttimestamp="1614131043210" timestamp="392470" timestamp2="392470">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="358" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:35 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="392561" />
  <Command __id="359" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:35 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="392589" />
  <Command __id="361" _type="InsertStringCommand" date="Tue Feb 23 20:50:35 EST 2021" starttimestamp="1614131043210" timestamp="392609" timestamp2="392609">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="362" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:35 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="392700" />
  <Command __id="363" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:35 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="392724" />
  <Command __id="365" _type="InsertStringCommand" date="Tue Feb 23 20:50:36 EST 2021" starttimestamp="1614131043210" timestamp="393121" timestamp2="393121">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="366" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:36 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="393212" />
  <Command __id="367" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:36 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="393236" />
  <Command __id="369" _type="InsertStringCommand" date="Tue Feb 23 20:50:36 EST 2021" starttimestamp="1614131043210" timestamp="393262" timestamp2="393262">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="371" _type="InsertStringCommand" date="Tue Feb 23 20:50:36 EST 2021" starttimestamp="1614131043210" timestamp="393328" timestamp2="393328">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="372" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:36 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="393369" />
  <Command __id="373" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:36 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="393392" />
  <Command __id="375" _type="InsertStringCommand" date="Tue Feb 23 20:50:36 EST 2021" starttimestamp="1614131043210" timestamp="393404" timestamp2="393404">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="377" _type="InsertStringCommand" date="Tue Feb 23 20:50:36 EST 2021" starttimestamp="1614131043210" timestamp="393503" timestamp2="393503">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="378" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:36 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="393543" />
  <Command __id="379" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:36 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="393568" />
  <Command __id="381" _type="InsertStringCommand" date="Tue Feb 23 20:50:37 EST 2021" starttimestamp="1614131043210" timestamp="394113" timestamp2="394113">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="383" _type="InsertStringCommand" date="Tue Feb 23 20:50:37 EST 2021" starttimestamp="1614131043210" timestamp="394720" timestamp2="394720">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="385" _type="InsertStringCommand" date="Tue Feb 23 20:50:38 EST 2021" starttimestamp="1614131043210" timestamp="394866" timestamp2="394866">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="387" _type="PauseCommand" date="Tue Feb 23 20:50:40 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="397660">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2794]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="386" _type="MoveCaretCommand" caretOffset="434" date="Tue Feb 23 20:50:40 EST 2021" docOffset="1842" starttimestamp="1614131043210" timestamp="397660" />
  <Command __id="388" _type="MoveCaretCommand" caretOffset="447" date="Tue Feb 23 20:50:41 EST 2021" docOffset="1855" starttimestamp="1614131043210" timestamp="398132" />
  <Command __id="390" _type="PauseCommand" date="Tue Feb 23 20:50:44 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="401045">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2913]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="391" _type="InsertStringCommand" date="Tue Feb 23 20:50:44 EST 2021" starttimestamp="1614131043210" timestamp="401050" timestamp2="401050">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="393" _type="InsertStringCommand" date="Tue Feb 23 20:50:44 EST 2021" starttimestamp="1614131043210" timestamp="401126" timestamp2="401126">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="394" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:50:44 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="401162" />
  <Command __id="398" _type="PauseCommand" date="Tue Feb 23 20:50:49 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="406450">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[5093]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="397" _type="ShellCommand" date="Tue Feb 23 20:50:49 EST 2021" starttimestamp="1614131043210" timestamp="406450" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="399" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:50:49 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="406519" />
  <Command __id="401" _type="PauseCommand" date="Tue Feb 23 20:51:58 EST 2021" range="1m-2m" starttimestamp="1614131043210" timestamp="475475">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[68956]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="400" _type="ShellCommand" date="Tue Feb 23 20:51:58 EST 2021" starttimestamp="1614131043210" timestamp="475475" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="402" _type="MoveCaretCommand" caretOffset="451" date="Tue Feb 23 20:51:58 EST 2021" docOffset="1859" starttimestamp="1614131043210" timestamp="475576" />
  <Command __id="404" _type="PauseCommand" date="Tue Feb 23 20:52:01 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="478070">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2494]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="403" _type="MoveCaretCommand" caretOffset="449" date="Tue Feb 23 20:52:01 EST 2021" docOffset="1857" starttimestamp="1614131043210" timestamp="478070" />
  <Command __id="405" _type="SelectTextCommand" caretOffset="451" date="Tue Feb 23 20:52:01 EST 2021" end="451" start="447" starttimestamp="1614131043210" timestamp="478239" />
  <Command __id="407" _type="PauseCommand" date="Tue Feb 23 20:52:11 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="488140">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[9901]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="406" _type="ShellCommand" date="Tue Feb 23 20:52:11 EST 2021" starttimestamp="1614131043210" timestamp="488140" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="409" _type="PauseCommand" date="Tue Feb 23 20:53:37 EST 2021" range="1m-2m" starttimestamp="1614131043210" timestamp="574767">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[86627]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="408" _type="ShellCommand" date="Tue Feb 23 20:53:37 EST 2021" starttimestamp="1614131043210" timestamp="574767" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="410" _type="MoveCaretCommand" caretOffset="451" date="Tue Feb 23 20:53:38 EST 2021" docOffset="1859" starttimestamp="1614131043210" timestamp="574837" />
  <Command __id="412" _type="PauseCommand" date="Tue Feb 23 20:53:39 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="576442">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1605]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="411" _type="SelectTextCommand" caretOffset="447" date="Tue Feb 23 20:53:39 EST 2021" end="451" start="447" starttimestamp="1614131043210" timestamp="576442" />
  <Command __id="414" _type="PauseCommand" date="Tue Feb 23 20:53:41 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="577882">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1440]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="415" _type="InsertStringCommand" date="Tue Feb 23 20:53:41 EST 2021" starttimestamp="1614131043210" timestamp="577888" timestamp2="577888">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="417" _type="InsertStringCommand" date="Tue Feb 23 20:53:41 EST 2021" starttimestamp="1614131043210" timestamp="577929" timestamp2="577929">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="418" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:53:41 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="577970" />
  <Command __id="422" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:53:42 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="579594" />
  <Command __id="426" _type="InsertStringCommand" date="Tue Feb 23 20:53:42 EST 2021" starttimestamp="1614131043210" timestamp="579636" timestamp2="579636">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="428" _type="PauseCommand" date="Tue Feb 23 20:54:01 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="598133">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[18497]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="427" _type="SelectTextCommand" caretOffset="1470" date="Tue Feb 23 20:54:01 EST 2021" end="2394" start="1470" starttimestamp="1614131043210" timestamp="598133" />
  <Command __id="429" _type="MoveCaretCommand" caretOffset="1698" date="Tue Feb 23 20:54:01 EST 2021" docOffset="34984" starttimestamp="1614131043210" timestamp="598451" />
  <Command __id="431" _type="PauseCommand" date="Tue Feb 23 20:54:10 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="607574">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9123]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="430" _type="MoveCaretCommand" caretOffset="448" date="Tue Feb 23 20:54:10 EST 2021" docOffset="1916" starttimestamp="1614131043210" timestamp="607574" />
  <Command __id="433" _type="PauseCommand" date="Tue Feb 23 20:54:19 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="616473">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8899]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="432" _type="MoveCaretCommand" caretOffset="1683" date="Tue Feb 23 20:54:19 EST 2021" docOffset="8428" starttimestamp="1614131043210" timestamp="616473" />
  <Command __id="434" _type="MoveCaretCommand" caretOffset="1477" date="Tue Feb 23 20:54:20 EST 2021" docOffset="8222" starttimestamp="1614131043210" timestamp="616986" />
  <Command __id="437" _type="PauseCommand" date="Tue Feb 23 20:55:03 EST 2021" range="30s-1m" starttimestamp="1614131043210" timestamp="660425">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[43439]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="436" _type="ShellCommand" date="Tue Feb 23 20:55:03 EST 2021" starttimestamp="1614131043210" timestamp="660425" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="439" _type="PauseCommand" date="Tue Feb 23 20:55:06 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="663375">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2950]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="438" _type="FindCommand" caseSensitive="false" date="Tue Feb 23 20:55:06 EST 2021" forward="true" matchWord="false" offset="8481" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614131043210" timestamp="663375" wrapSearch="true">
    <searchString><![CDATA[csvreader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="440" _type="FindCommand" caseSensitive="false" date="Tue Feb 23 20:55:07 EST 2021" forward="true" matchWord="false" offset="680" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614131043210" timestamp="664115" wrapSearch="true">
    <searchString><![CDATA[csvreader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="441" _type="FindCommand" caseSensitive="false" date="Tue Feb 23 20:55:08 EST 2021" forward="true" matchWord="false" offset="1907" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614131043210" timestamp="664877" wrapSearch="true">
    <searchString><![CDATA[csvreader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="442" _type="FindCommand" caseSensitive="false" date="Tue Feb 23 20:55:08 EST 2021" forward="true" matchWord="false" offset="680" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614131043210" timestamp="665626" wrapSearch="true">
    <searchString><![CDATA[csvreader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="444" _type="PauseCommand" date="Tue Feb 23 20:55:12 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="669765">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[4139]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="443" _type="ShellCommand" date="Tue Feb 23 20:55:12 EST 2021" starttimestamp="1614131043210" timestamp="669765" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="446" _type="PauseCommand" date="Tue Feb 23 20:55:16 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="672862">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3097]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="445" _type="ShellCommand" date="Tue Feb 23 20:55:16 EST 2021" starttimestamp="1614131043210" timestamp="672862" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="448" _type="PauseCommand" date="Tue Feb 23 20:55:22 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="679494">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6632]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="447" _type="ShellCommand" date="Tue Feb 23 20:55:22 EST 2021" starttimestamp="1614131043210" timestamp="679494" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="450" _type="PauseCommand" date="Tue Feb 23 20:55:32 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="689428">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9934]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="451" _type="MoveCaretCommand" caretOffset="0" date="Tue Feb 23 20:55:32 EST 2021" docOffset="0" starttimestamp="1614131043210" timestamp="689625" />
  <Command __id="452" _type="MoveCaretCommand" caretOffset="534" date="Tue Feb 23 20:55:33 EST 2021" docOffset="2226" starttimestamp="1614131043210" timestamp="690550" />
  <Command __id="454" _type="ShellCommand" date="Tue Feb 23 20:55:34 EST 2021" starttimestamp="1614131043210" timestamp="691298" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="456" _type="PauseCommand" date="Tue Feb 23 20:55:36 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="693031">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1733]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="455" _type="FindCommand" caseSensitive="false" date="Tue Feb 23 20:55:36 EST 2021" forward="true" matchWord="false" offset="2226" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614131043210" timestamp="693031" wrapSearch="true">
    <searchString><![CDATA[csvreader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="457" _type="FindCommand" caseSensitive="false" date="Tue Feb 23 20:55:36 EST 2021" forward="true" matchWord="false" offset="2226" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614131043210" timestamp="693554" wrapSearch="true">
    <searchString><![CDATA[csvreader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="458" _type="FindCommand" caseSensitive="false" date="Tue Feb 23 20:55:36 EST 2021" forward="true" matchWord="false" offset="2226" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614131043210" timestamp="693787" wrapSearch="true">
    <searchString><![CDATA[csvreader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="460" _type="PauseCommand" date="Tue Feb 23 20:55:38 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="695216">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1429]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="459" _type="FindCommand" caseSensitive="false" date="Tue Feb 23 20:55:38 EST 2021" forward="true" matchWord="false" offset="2226" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614131043210" timestamp="695216" wrapSearch="true">
    <searchString><![CDATA[csvreader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="461" _type="FindCommand" caseSensitive="false" date="Tue Feb 23 20:55:38 EST 2021" forward="true" matchWord="false" offset="2226" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614131043210" timestamp="695378" wrapSearch="true">
    <searchString><![CDATA[csvreader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="462" _type="FindCommand" caseSensitive="false" date="Tue Feb 23 20:55:38 EST 2021" forward="true" matchWord="false" offset="2226" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1614131043210" timestamp="695528" wrapSearch="true">
    <searchString><![CDATA[csvreader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="463" _type="ShellCommand" date="Tue Feb 23 20:55:39 EST 2021" starttimestamp="1614131043210" timestamp="696082" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="464" _type="MoveCaretCommand" caretOffset="805" date="Tue Feb 23 20:55:39 EST 2021" docOffset="2497" starttimestamp="1614131043210" timestamp="696683" />
  <Command __id="468" _type="PauseCommand" date="Tue Feb 23 20:55:48 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="704992">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6253]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="467" _type="ShellCommand" date="Tue Feb 23 20:55:48 EST 2021" starttimestamp="1614131043210" timestamp="704992" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="469" _type="EclipseCommand" commandID="org.eclipse.search.ui.openSearchDialog" date="Tue Feb 23 20:55:48 EST 2021" starttimestamp="1614131043210" timestamp="705067" />
  <Command __id="481" _type="PauseCommand" date="Tue Feb 23 20:56:32 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="749120">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2786]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="480" _type="ShellCommand" date="Tue Feb 23 20:56:32 EST 2021" starttimestamp="1614131043210" timestamp="749120" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="482" _type="MoveCaretCommand" caretOffset="2020" date="Tue Feb 23 20:56:32 EST 2021" docOffset="2191" starttimestamp="1614131043210" timestamp="749205" />
  <DocumentChange __id="208" _type="Delete" date="Tue Feb 23 20:50:01 EST 2021" docASTNodeCount="5872" docActiveCodeLength="33328" docExpressionCount="4059" docLength="35563" endLine="45" length="1" offset="1606" startLine="45" starttimestamp="1614131043210" timestamp="358302">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="210" _type="Insert" date="Tue Feb 23 20:50:01 EST 2021" docASTNodeCount="5872" docActiveCodeLength="33346" docExpressionCount="4059" docLength="35581" length="18" offset="1606" repeat="18" starttimestamp="1614131043210" timestamp="358417" timestamp2="364404">
    <text><![CDATA[estamps = new hahs]]></text>
  </DocumentChange>
  <DocumentChange __id="260" _type="Delete" date="Tue Feb 23 20:50:08 EST 2021" docASTNodeCount="5872" docActiveCodeLength="33344" docExpressionCount="4059" docLength="35579" endLine="45" length="2" offset="1622" repeat="2" startLine="45" starttimestamp="1614131043210" timestamp="365089" timestamp2="365195">
    <text><![CDATA[hs]]></text>
  </DocumentChange>
  <DocumentChange __id="262" _type="Insert" date="Tue Feb 23 20:50:08 EST 2021" docASTNodeCount="5872" docActiveCodeLength="33346" docExpressionCount="4059" docLength="35581" length="2" offset="1622" repeat="2" starttimestamp="1614131043210" timestamp="365328" timestamp2="365435">
    <text><![CDATA[sh]]></text>
  </DocumentChange>
  <DocumentChange __id="265" _type="Replace" date="Tue Feb 23 20:50:09 EST 2021" docASTNodeCount="5878" docActiveCodeLength="33353" docExpressionCount="4061" docLength="35588" endLine="45" insertionLength="9" int_docASTNodeCount="5872" int_docActiveCodeLength="33344" int_docExpressionCount="4059" int_docLength="35579" length="2" offset="1620" startLine="45" starttimestamp="1614131043210" timestamp="365821">
    <deletedText><![CDATA[ha]]></deletedText>
    <insertedText><![CDATA[HashMap<>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="266" _type="Replace" date="Tue Feb 23 20:50:09 EST 2021" docASTNodeCount="5875" docActiveCodeLength="33353" docExpressionCount="4060" docLength="35588" endLine="45" insertionLength="2" int_docASTNodeCount="5872" int_docActiveCodeLength="33351" int_docExpressionCount="4059" int_docLength="35586" length="2" offset="1629" startLine="45" starttimestamp="1614131043210" timestamp="365836">
    <deletedText><![CDATA[sh]]></deletedText>
    <insertedText><![CDATA[()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="268" _type="Insert" date="Tue Feb 23 20:50:09 EST 2021" docASTNodeCount="5876" docActiveCodeLength="33354" docExpressionCount="4061" docLength="35589" length="1" offset="1631" starttimestamp="1614131043210" timestamp="366264">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="276" _type="Insert" date="Tue Feb 23 20:50:19 EST 2021" docASTNodeCount="5877" docActiveCodeLength="33372" docExpressionCount="4061" docLength="35607" length="18" offset="1818" repeat="14" starttimestamp="1614131043210" timestamp="376095" timestamp2="378256">
    <text><![CDATA[
	public void 
	]]></text>
  </DocumentChange>
  <DocumentChange __id="299" _type="Delete" date="Tue Feb 23 20:50:21 EST 2021" docASTNodeCount="5876" docActiveCodeLength="33360" docExpressionCount="4061" docLength="35595" endLine="54" length="12" offset="1821" repeat="2" startLine="54" starttimestamp="1614131043210" timestamp="378588" timestamp2="378708">
    <text><![CDATA[public void ]]></text>
  </DocumentChange>
  <DocumentChange __id="303" _type="Insert" date="Tue Feb 23 20:50:22 EST 2021" docASTNodeCount="5877" docActiveCodeLength="33368" docExpressionCount="4061" docLength="35603" length="8" offset="1821" repeat="8" starttimestamp="1614131043210" timestamp="378930" timestamp2="379577">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <DocumentChange __id="314" _type="Delete" date="Tue Feb 23 20:50:25 EST 2021" docASTNodeCount="5876" docActiveCodeLength="33360" docExpressionCount="4061" docLength="35595" endLine="54" length="8" offset="1821" startLine="54" starttimestamp="1614131043210" timestamp="382645">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <DocumentChange __id="317" _type="Insert" date="Tue Feb 23 20:50:28 EST 2021" docASTNodeCount="5877" docActiveCodeLength="33368" docExpressionCount="4061" docLength="35603" length="8" offset="1821" repeat="8" starttimestamp="1614131043210" timestamp="384870" timestamp2="385554">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <DocumentChange __id="329" _type="Insert" date="Tue Feb 23 20:50:31 EST 2021" docASTNodeCount="5881" docActiveCodeLength="33377" docExpressionCount="4062" docLength="35612" length="9" offset="1829" repeat="9" starttimestamp="1614131043210" timestamp="388555" timestamp2="389450">
    <text><![CDATA[void read]]></text>
  </DocumentChange>
  <DocumentChange __id="351" _type="Insert" date="Tue Feb 23 20:50:34 EST 2021" docASTNodeCount="5881" docActiveCodeLength="33398" docExpressionCount="4062" docLength="35633" length="21" offset="1838" repeat="12" starttimestamp="1614131043210" timestamp="391530" timestamp2="394859">
    <text><![CDATA[Timestamp() {
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="389" _type="Insert" date="Tue Feb 23 20:50:44 EST 2021" docASTNodeCount="5883" docActiveCodeLength="33402" docExpressionCount="4063" docLength="35637" length="4" offset="1855" repeat="4" starttimestamp="1614131043210" timestamp="401045" timestamp2="401357">
    <text><![CDATA[tims]]></text>
  </DocumentChange>
  <DocumentChange __id="413" _type="Replace" date="Tue Feb 23 20:53:41 EST 2021" docASTNodeCount="5883" docActiveCodeLength="33399" docExpressionCount="4063" docLength="35634" endLine="55" insertionLength="1" int_docASTNodeCount="5881" int_docActiveCodeLength="33398" int_docExpressionCount="4062" int_docLength="35633" length="4" offset="1855" startLine="55" starttimestamp="1614131043210" timestamp="577882">
    <deletedText><![CDATA[tims]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="416" _type="Insert" date="Tue Feb 23 20:53:41 EST 2021" docASTNodeCount="5883" docActiveCodeLength="33403" docExpressionCount="4063" docLength="35638" length="4" offset="1856" repeat="4" starttimestamp="1614131043210" timestamp="577924" timestamp2="579032">
    <text><![CDATA[svre]]></text>
  </DocumentChange>
  <DocumentChange __id="423" _type="Replace" date="Tue Feb 23 20:53:42 EST 2021" docASTNodeCount="5883" docActiveCodeLength="33407" docExpressionCount="4063" docLength="35642" endLine="55" insertionLength="9" int_docASTNodeCount="5881" int_docActiveCodeLength="33398" int_docExpressionCount="4062" int_docLength="35633" length="5" offset="1855" startLine="55" starttimestamp="1614131043210" timestamp="579605">
    <deletedText><![CDATA[csvre]]></deletedText>
    <insertedText><![CDATA[CSVReader]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="424" _type="Insert" date="Tue Feb 23 20:53:42 EST 2021" docASTNodeCount="5893" docActiveCodeLength="33450" docExpressionCount="4072" docLength="35685" length="43" offset="638" repeat="2" starttimestamp="1614131043210" timestamp="579625" timestamp2="579630">
    <text><![CDATA[
import au.com.bytecode.opencsv.CSVReader;]]></text>
  </DocumentChange>
  <Command __id="449" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 20:55:32 EST 2021" docASTNodeCount="6305" docActiveCodeLength="36390" docExpressionCount="4229" docLength="36445" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="689428">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import analyzer.MainConsoleUI;
import analyzer.extension.ADifficultyPredictionAndStatusPrinter;
import au.com.bytecode.opencsv.CSVWriter;
import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;
import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import fluorite.util.EHLogReader;

public class AReplayer extends ADifficultyPredictionAndStatusPrinter{
	protected static final String REST_INSESSION = "Rest(In Session)";
	protected static final String REST_ENDSESSION = "Rest(End Session)";
	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";
	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";
	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";
	protected static final String XML_START1 = "<Events startTimestamp=\"";
	protected static final String XML_START2 = "\" logVersion=\"";
	protected static final String XML_VERSION = "1.0.0.202008151525";
	protected static final String XML_START3 = "\">\r\n";
	protected static final String XML_FILE_ENDING = "\r\n</Events>"; 
	protected static final long ONE_SECOND = 1000;
	protected static final long ONE_MIN = 60*1000;
	protected static final long TEN_MIN = 10*ONE_MIN;
	protected static final long FIVE_MIN = 5*ONE_MIN;
	protected static final long HALF_MIN = ONE_MIN/2;
	protected static final long TWO_MIN = 2*ONE_MIN;
	protected static final long DAY = 24*60*ONE_MIN;
	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};
	protected int threadCount = 0;
	protected CountDownLatch latch;
	protected Analyzer analyzer;
	private static final int THREAD_LIM = 3;
	private int count = 0;
	private int currentExceptions = 0; 
	private int totalExceptions = 0;
	private List<List<List<String>>> metrics = null;
	private Map<String, Map<String, List<List<EHICommand>>>> data;
	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};

	public AReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
	}
	
	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			data.put(assignFolder.getName(), new HashMap<>());
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));
				}
			}
		}
		for (String assign : data.keySet()) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					createAssignData(assign, folder);
					createDistributionData(assign, folder);
					count++;
					if (count == data.size()) {
						System.out.println("finished");
						System.exit(0);
					}
				}
			}).start();
		}
	}
	
	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);
			
			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);
			
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						
						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 1; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	protected String getEventType(EHICommand command) {
		if (command instanceof InsertStringCommand || 
			command instanceof CopyCommand ||
			command instanceof Delete ||
			command instanceof Replace || command instanceof PasteCommand) {
			return "Edit";
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return "IO";
		}
		if (command instanceof ExceptionCommand) {
			return "Exception";
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return "Request";
		}
		return null;
	}
	
	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			long[] restTimeSum = new long[REST.length];
			for (String student : data.get(assign).keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] assigns = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		int numThread = 0;
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			numThread += students.length;
		}
		latch = new CountDownLatch(numThread);
		for (int i = 0; i < assigns.length; i++) {
			File assignFolder = assigns[i];
			File[] students = assignFolder.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.isDirectory();
				}
			});
			for (int j = 0; j < students.length; j++) {
				File studentFolder  = students[j];
				File submissionFolder = new File(studentFolder,"Submission attachment(s)");
				if (!submissionFolder.exists()) {
					latch.countDown();
					continue;
				}
				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {
					public boolean accept(File pathname) {
						return pathname.isDirectory();
					}
				})) {
					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());
					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {
						public boolean accept(File pathname) {
							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
						}
					});
					
					Thread thread = new Thread(new Runnable() {
						public void run() {
							if (logs == null) {
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
								return;
							}
							try {
								for (File file : logs) {
									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
									if (commands.size() < 2) {
										continue;
									}
									List<EHICommand> newCommands = new ArrayList<>();
									EHICommand last = null;
									EHICommand cur = null;
									for (EHICommand command : commands) {
										if (cur == null) {
											cur = command;
											newCommands.add(command);
										} else {
											last = cur;
											cur = command;
											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();
											if (rest >= 1*ONE_SECOND) {
												String range = "";
												if (rest < 2*ONE_SECOND) {
													range = "1s-2s";
												} else if (rest < 5*ONE_SECOND) {
													range = "2s-5s";
												} else if (rest < 10*ONE_SECOND) {
													range = "5s-10s";
												} else if (rest < 20*ONE_SECOND) {
													range = "10s-20s";
												} else if (rest < 30*ONE_SECOND) {
													range = "20s-30s";
												} else if (rest < ONE_MIN) {
													range = "30s-1m";
												} else if (rest < TWO_MIN) {
													range = "1m-2m";
												} else if (rest < FIVE_MIN) {
													range = "2m-5m";
												} else if (rest < TEN_MIN) {
													range = "5m-10m";
												} else if (rest < 3*TEN_MIN) {
													range = "10m-30m";
												} else if (rest < 6*TEN_MIN) {
													range = "30m-60m";
												} else {
													range = ">1h";
												}
												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
												rCommnad.setStartTimestamp(last.getStartTimestamp());
												rCommnad.setTimestamp(last.getTimestamp()+1);
												newCommands.add(rCommnad);
											} 
											newCommands.add(command);
										}
									}
									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
									for (EHICommand c : newCommands) {
										logContent += c.persist();
									}
									logContent += XML_FILE_ENDING;
									try {
										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
										if (newLog.exists()) {
											newLog.delete();
										}
										newLog.getParentFile().mkdirs();
										newLog.createNewFile();
										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
										System.out.println("Writing to file " + newLog.getPath());
										writer.write(logContent);
										writer.close();
										System.out.println("Finished writing to file " + newLog.getPath());
									} catch (IOException e) {
										e.printStackTrace();
									}
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}finally {
								// TODO: handle finally clause
								synchronized (this) {
									threadCount--;
								}
								latch.countDown();
							}
						}							
					});
					while(true) {
						if (threadCount > THREAD_LIM) {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
						
						if (threadCount <= THREAD_LIM) {
							synchronized (this) {
								threadCount++;
								thread.start();
								break;
							}
						}
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}
	
	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){
		EHLogReader reader = new EHLogReader();
		File log = new File(path);
		if (!log.exists()) {
			System.out.println("log does not exist:" + path);
			return new ArrayList<EHICommand>();
		}

		if (!path.endsWith(".xml")) {
			System.out.println("log is not in xml format:" + path);
			return new ArrayList<EHICommand>();
		}

		System.out.println("Reading " + path);
		try {
			List<EHICommand> commands = reader.readAll(path);
			sortCommands(commands, 0, commands.size()-1);
			return commands;
		} catch (Exception e) {
			System.out.println("Could not read file" + path + e);
		}
		return new ArrayList<EHICommand>();
	}
	
	protected boolean isException(EHICommand command) {
		String output = "";
		String language = "";
		if (command instanceof EHExceptionCommand) {
			output = command.getDataMap().get("outputString");
		} else {
			output = command.getDataMap().get("exceptionString");
			language = command.getDataMap().get("language");
		}
		for (ExceptionMatcher em : ems) {
			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {
				return true;
			}
		}
		return false;
	}
	
	public String countConsecutiveCommands(String list) {
		char lastChar = ' ';
		char curChar = ' ';
		int count = 1;
		String retVal = "";
		for (int i = 0; i < list.length(); i++) {
			if (i != 0) {
				lastChar = curChar;
			}
			curChar = list.charAt(i);
			if (curChar == lastChar){
				count++;
			} else if (i != 0){
				retVal += lastChar + "" + count;
				count = 1;
			}
		}
		retVal += curChar + "" + count;
		count = 1;
		return retVal;
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		refineLogFiles(projectPath);
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}
	
	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			if (commands == null || commands.size() < 2) {
				nestedCommands.remove(i);
				i--;
			} else if (commands.size() > 2) {
				sortCommands(commands, 0, commands.size()-1);
			}
		}
	}
	
	private void sortCommands(List<EHICommand> commands, int start, int end){
		for(int i = 0; i < commands.size(); i++) {
			if (commands.get(i) == null) {
				commands.remove(i);
				i--;
			}
		}
		EHICommand command = null;
		long cur = 0;
		for(int i = 2; i < commands.size(); i++) {
			command = commands.get(i);
			cur = command.getStartTimestamp()+command.getTimestamp();
			int j = i-1;
			while (j > 1){
				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {
					j--;
				} else {
					break;
				}
			}
			if (j < i-1) {
				commands.remove(i);
				commands.add(j+1, command);
			}
		}
	}

	public List<List<List<String>>> createMetrics(String projectPath) {
		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");
		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);
		metrics = new ArrayList<>();
		String largestFileName = "";
		String secondLargestFileName = "";
		for (int i = 0; i < metricFiles.size(); i++) {
			String aFileName = metricFiles.get(i);
			if (aFileName.compareTo(largestFileName) > 0) {
				secondLargestFileName = largestFileName;
				largestFileName = aFileName;
			} else if (aFileName.compareTo(secondLargestFileName) > 0) {
				secondLargestFileName = aFileName;
			}
		}
		for (int i = 0; i < metricFiles.size(); i++) {
			List<List<String>> metric = new ArrayList<>();
			metrics.add(metric);
			BufferedReader r;
			try {
				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));
				String line=r.readLine();
				while(true){
					line = r.readLine();
					if (line == null) {
						break;
					}
					try {
						Integer.parseInt(line.substring(0, line.indexOf(",")));
					} catch (NumberFormatException e) {
						continue;
					}
					metric.add(Arrays.asList(line.split(","))); 
				}
				r.close();
			} catch (IOException e) {
				e.printStackTrace();
				return null;
			}
		}
		return metrics;
	}

	protected String[] getHeader() {
		String[] header = new String[4*REST.length+5];
		header[0] = "Student";
		header[1] = "Total Time Spent";
		header[2] = "Wall Clock Time";
		for (int i = 0; i < REST.length; i++) {
			String t = getTime(REST[i]);
			header[3+i*4] = "Active Time(" + t + ")";
			header[4+i*4] = "Rest Time(" + t + ")";
			header[5+i*4] = "# of Rests(" + t + ")";
			header[6+i*4] = "Avg. Rest Time(" + t + ")";
		}
		header[header.length-2] = "# of Days";
		header[header.length-1] = "Time Spent Each Day";
		return header;
	}
	
	protected String getTime(long t) {
		long ret = t / ONE_SECOND;
		if (ret < 60) {
			return ret + "s";
		}
		ret /= 60;
		if (ret < 60) {
			return ret + "m";
		}
		double ret2 = ret / 60.0;
		return ret2 + "h";
	}
	
	protected String getTime(double t) {
		double ret = t / ONE_SECOND;
		DecimalFormat df = new DecimalFormat("#.###");
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60;
		if (ret < 60) {
			return df.format(ret);
		}
		ret /= 60.0;
		return df.format(ret);
	}

	public void refineLogFiles(String projectPath){
		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";
		try {
			File logDirectory = new File(logPath);
			if (!logDirectory.exists()) {
				return;
			}
			for (File file : logDirectory.listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getPath().contains(".lck");
				}
			})) {
				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));
				if (xmlFile.exists()) {
					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));
					String lastLine = null;
					String currentLine = null;
					while((currentLine = reader.readLine()) != null) {
						lastLine = currentLine;
					}
					if (lastLine != null && !lastLine.endsWith("</Events>")) {
						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));
						writer.write(XML_FILE_ENDING);
						writer.close();
					}	
					reader.close();
				}
				file.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} 
	}

	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){
		long projectTime = 0;
		for(int k = 0; k < nestedCommands.size(); k++) {
			List<EHICommand> commands = nestedCommands.get(k);
			if (commands.size() == 0) {
				continue;
			}
			int j = 0;
			for(; j < commands.size(); j++) {
				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {
					break;
				}
			}
			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();
			EHICommand command2 = commands.get(commands.size()-1);
			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();
			projectTime += timestamp2 - timestamp1;
		}
		return projectTime;
	}
	
	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {
		long[] restTime = {0,0,0};
		for (int i = 0; i < nestedCommands.size(); i++) {
			List<EHICommand> commands = nestedCommands.get(i);
			EHICommand last = null;
			EHICommand cur = null;
			int k = 0;
			for(; k < commands.size(); k++) {
				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {
					break;
				}
			}
			for(; k < commands.size(); k++) {
				if (cur != null) {
					last = cur;
				}
				cur = commands.get(k);
				if (last != null) {
					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();
					if (diff > time) {
						restTime[0] += diff;
						if (diff < time2) {
							restTime[1]++;
							restTime[2] += diff;
						}
					}
				}
			}
		}
		return restTime;
	}
	
	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {
		long wallClockTime = 0;
		EHICommand c1 = null;
		EHICommand c2 = null;
		if (nestedCommands.size() == 0) {
			return 0;
		}
		for (int j = 0; j < nestedCommands.get(0).size(); j++) {
			c1 = nestedCommands.get(0).get(j);
			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {
				break;
			}
		}
		if (c1 == null) {
			return 0;
		}
		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);
		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();
		return wallClockTime;
	}
	
	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {
		List<String> retVal = new ArrayList<>();
		int days = 1;
		long startTime = 0;
		long endTime = 0;
		List<EHICommand> commands = nestedCommands.get(0);
		EHICommand command = null;
		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();
		List<EHICommand> commands2 = null;
		for (int i = 1; i < commands.size(); i++) {
			command = commands.get(i);
			if (command.getStartTimestamp() != 0) {
				break;
			}
		}
		startTime = command.getStartTimestamp();
		startTime -= startTime % DAY;
		commands = nestedCommands.get(nestedCommands.size()-1);
		endTime = command.getStartTimestamp() + command.getTimestamp();
		endTime = endTime - endTime % DAY + DAY;
		long timeStamp = 0;
		for (int i = 0; i < nestedCommands.size(); i++) {
			commands = nestedCommands.get(i);
			commands2 = new ArrayList<>();
			nestedCommands2.add(commands2);
			for (int j = 0; j < commands.size(); j++) {
				command = commands.get(j);
				timeStamp = command.getStartTimestamp()+command.getTimestamp();
				if (timeStamp == 0) {
					continue;
				}
				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {
					commands2.add(command);
				} else if (timeStamp >= (startTime+DAY)){
					days++;
					startTime = timeStamp - timeStamp % DAY;
					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
					}
					nestedCommands2 = new ArrayList<>();
					commands2 = new ArrayList<>();
					nestedCommands2.add(commands2);
					commands2.add(command);
				}
			}
		}
		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {
			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));
		}
		retVal.add(0,days+"");
		return retVal.toArray(new String[1]);
	}

	protected String convertToHourMinuteSecond(long timeSpent){
		int hour = (int) (timeSpent / 3600000);
		int minute = (int) (timeSpent % 3600000 / 60000);
		int second = (int) (timeSpent % 60000 / 1000);
		return hour + ":" + minute + ":" + second;
	}

	public int getCurrentExceptions() {
		return currentExceptions;
	}

	public int getTotalExceptions() {
		return totalExceptions;
	}

	protected List<EHICommand> readWebCommands(File file){
		if (!file.exists()) {
			return null;
		}
		List<EHICommand> retVal = new ArrayList<>();
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(file));
			String nextLine;
			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");
			Date date;
			String keyword;
			String url;
			WebCommand webCommand;
			while ((nextLine = br.readLine()) != null) {
				try {
					String[] tokens = nextLine.split("\t");
					if (tokens.length >= 3) {
						date = format.parse(tokens[0]);
						keyword = tokens[1];
						url = tokens[2];
						if (keyword.contains("google.com/url?") || keyword.equals(url)) {
							continue;
						}
						webCommand = new WebCommand(keyword, url);
						webCommand.setTimestamp(date.getTime());
						retVal.add(0, webCommand);
					} else {
						System.out.println("Failed to parse WebCommand");
					}
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return retVal;
	}
	
	public List<List<List<String>>> getMetrics() {
		List<List<List<String>>> retval = new ArrayList<>();
		long startTime = 0;
		long endTime = Long.MAX_VALUE;
		if (startTime > endTime) {
			long temp = startTime;
			startTime = endTime;
			endTime = temp;
		} 
		for(int k = 0, m = 0; k < metrics.size(); k++) {
			List<List<String>> metric = metrics.get(k);
			if (metric.size() == 0) {
				continue;
			}
			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {
				continue;
			}
			retval.add(new ArrayList<>());
			for(int l = 0; l < metrics.get(k).size(); l++) {
				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {
					retval.get(m).add(metric.get(l));
				}
			}
			m++;
		}
		return retval;
	}
	
	protected long getLogFileCreationTime(File file) {
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
		try {
			return df.parse(file.getName().substring(3, 27)).getTime();
		} catch (ParseException e) {
			e.printStackTrace();
			return 0;
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="475" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 20:56:21 EST 2021" docASTNodeCount="994" docActiveCodeLength="6641" docExpressionCount="576" docLength="6949" projectName="GraderBasics" starttimestamp="1614131043210" timestamp="738400">
    <filePath><![CDATA[C:\Users\Zhizhou\git\GraderBasics\src\grader\basics\requirements\interpreter\specification\ACSVRequirementsSpecification.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package grader.basics.requirements.interpreter.specification;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

import au.com.bytecode.opencsv.CSVReader;
//import bus.uigen.Message;
import grader.basics.file.FileProxy;

public class ACSVRequirementsSpecification implements CSVRequirementsSpecification {
	public static final String TYPE_NAME = "Type";
	public static final int TYPE_COLUMN = 0;
	public static final int DESCRIPTION_COLUMN = TYPE_COLUMN+1;
	public static final int MAX_SCORE_COLUMN = DESCRIPTION_COLUMN + 1;
	public static final  int TIMEOUT_COLUMN = MAX_SCORE_COLUMN + 1;
	public static final  int INPUT_COLUMN = TIMEOUT_COLUMN + 1;
	public static final  int MODEL_OUTPUT_COLUMN = INPUT_COLUMN + 1;
	public static final int EXTRA_CREDIT_COLUMN = MODEL_OUTPUT_COLUMN + 1;
	public static final  int CHECKER_COLUMN = EXTRA_CREDIT_COLUMN  + 1;
	public static final  int START_CHECKER_ARGUMENTS_COLUMN = CHECKER_COLUMN + 1;
	
	protected int headerRow = 0;
	protected int numRequirements;
	FileProxy specificationSpreadsheet; // w
	
	List<String[]>  table;
	protected boolean valid;
//	protected FrameworkProjectRequirements projectRequirements;
  


	public ACSVRequirementsSpecification(FileProxy aSpecificationSpreadsheet) {
		specificationSpreadsheet = aSpecificationSpreadsheet;	
		init();
	}
	
//	public ACSVRequirementsSpecification(SakaiProjectDatabase aSakaiProjectDatabase) {
//		specificationSpreadsheet = aSakaiProjectDatabase.getAssignmentDataFolder().getRequirementsSpreadsheetFile();
//		init();
//	}
//	
	protected void init() {
		maybeCreateTable();
		headerRow = getHeaderRowNum(table);
		valid = headerRow >= 0;
		makeRequirements();
		

	}
	
	protected void makeRequirements() {
		if (isValid()) {
			numRequirements = table.size() - (headerRow + 1);
			
		}
		
	}
	
	protected void maybeCreateTable() {
		if (table != null)
			return;
		createTable();
		
	}
	
	protected void createTable() {
		
		try {
			InputStream input = specificationSpreadsheet.getInputStream();
			CSVReader csvReader 	=	new CSVReader(new InputStreamReader(input));
		     table = csvReader.readAll();
			csvReader.close();
			input.close();
			
		   
	    
	    
		} catch (Exception e) {
			e.printStackTrace();
		
			
		}
		
	}
	
	
	
	public int getHeaderRowNum(List<String[]> aSheet) {
		 for (int rowNum = 0; rowNum < aSheet.size(); rowNum ++) {
			 String[] aRow = aSheet.get(rowNum);
			 if (aRow[TYPE_COLUMN].equalsIgnoreCase(TYPE_NAME))
				 return rowNum;
		 }
		 return -1;
		
	}
	
	
	
	
	
	public FileProxy getSpecificationSpreadsheet() {
		return specificationSpreadsheet;
	}

	public String getFileName() {
		return specificationSpreadsheet.getMixedCaseAbsoluteName();
	}

	public boolean isValid() {
		return valid;
	}

	public void setValid(boolean newValue) {
		this.valid = newValue;
	}

	public List<String[]> getTable() {
		return table;
	}
	@Override
	public int getNumberOfRequirements() {
		return numRequirements;
	}
	@Override
	public String getArg(int aRequirementNum, int anArgNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		int aColumnNum = START_CHECKER_ARGUMENTS_COLUMN + anArgNum;
		return table.get(aRowNum)[aColumnNum];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have arg " + anArgNum);
			return null;
		}
	}
	public String getType(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[TYPE_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have type ");
			return null;
		}
	}
	
	public String getDescription(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[DESCRIPTION_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have description ");
			return null;
		}
	}
	@Override
	public Double getMaxScore(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return Double.parseDouble(table.get(aRowNum)[MAX_SCORE_COLUMN]);
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have max score");
			return null;
		}
	}
	
	@Override
	public Integer getTimeOut(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		String aTimeOut = table.get(aRowNum)[TIMEOUT_COLUMN];
		if (aTimeOut == null || aTimeOut.isEmpty())
			return null;
		return Integer.parseInt(aTimeOut);
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have timeout");
			return null;
		}
	}
	@Override
	public boolean isExtraCredit(int aRequirementNum) {
		try {
			int aRowNum = headerRow + 1 + aRequirementNum;
			String aSpec = table.get(aRowNum)[EXTRA_CREDIT_COLUMN].replaceAll("\\s+", "");
			return !aSpec.isEmpty();
			
			} catch (Exception e) {
				System.out.println("Requirement " + aRequirementNum + " does not have extra credit");
				return false;
			}
	}
	
	
	@Override
	public boolean isManual(int aRequirementNum) {
		try {
			int aRowNum = headerRow + 1 + aRequirementNum;
			String aSpec = table.get(aRowNum)[CHECKER_COLUMN].replaceAll("\\s+", "");
			return aSpec.isEmpty();
			
			} catch (Exception e) {
				System.out.println("Requirement " + aRequirementNum + " does not have checker column");
				return false;
			}
	}
	
	public static boolean isQuoted(String aString) {
		return ("\"".equals(aString.charAt(0)) && 
			"\"".equals(aString.charAt((aString.length() - 1))));
	}

	public static String trimAndRemoveQuotes(String aString) {
		String aRetVal = aString.trim();
		if (isQuoted(aString)) {
			aRetVal = aRetVal.substring(1, aString.length()-1);
		}
		return aRetVal;
		
	}
	
	public String getInput(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		String aRetVal = table.get(aRowNum)[INPUT_COLUMN];
		return trimAndRemoveQuotes(aRetVal);
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have max score ");
			return null;
		}
	}
	public String getModelOutput(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[MODEL_OUTPUT_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have model output");
			return null;
		}
	}
	public String getChecker(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[CHECKER_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have a function");
			return null;
		}
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="483" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 20:56:47 EST 2021" docASTNodeCount="6305" docActiveCodeLength="36390" docExpressionCount="4229" docLength="36445" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="764780">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.contains("google.com/url?") || keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="486" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 20:56:48 EST 2021" docASTNodeCount="460" docActiveCodeLength="3021" docExpressionCount="293" docLength="3021" projectName="A0" starttimestamp="1614131043210" timestamp="765686">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Sophomore 2st Sem\COMP533\A0\src\MVC\SlaveThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package MVC;¶¶import java.rmi.RemoteException;¶import java.util.ArrayList;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import Bean.AKeyValue;¶import Bean.KeyValue;¶import launcher.MapReduceTracer;¶import partitioner.Partitioner;¶import partitioner.PartitionerFactory;¶import reducer.Reducer;¶import reducer.ReducerFactory;¶import reducer.RemoteReducer;¶¶public class SlaveThread extends MapReduceTracer implements Runnable{¶	private int slaveNum;¶	private List<KeyValue<String,Integer>> slaveKeyValues;	¶	private Model model;¶	private RemoteReducer<String, Integer> clientReducer;¶	private Reducer<String, Integer> reducer;¶	private Partitioner<String, Integer> partitioner;¶	¶	public SlaveThread(int num, Model model) {¶		slaveNum = num;¶		slaveKeyValues = new ArrayList<>();¶		this.model = model;¶	}¶	¶	public void run() {¶		reducer = ReducerFactory.getReducer();¶		partitioner = PartitionerFactory.getPartitioner();¶		try {¶			while(true) {¶				try {¶					traceDequeueRequest(model.getKeyValueQueue());¶					KeyValue<String,Integer> keyValue = model.getKeyValueQueue().take();¶					traceDequeue(keyValue);¶					if (keyValue.getKey() == null && keyValue.getValue() == null) {¶						Map<String, Integer> partiallyReducedMap = new HashMap<>();¶						if (clientReducer == null) {¶							 partiallyReducedMap = reducer.reduce(slaveKeyValues);¶						} else {¶							traceRemoteList(slaveKeyValues);¶							partiallyReducedMap = clientReducer.remoteReduce(slaveKeyValues);¶							traceRemoteResult(partiallyReducedMap);¶						}¶						for (String key: partiallyReducedMap.keySet()) {¶							model.getReductionQueueList().get(partitioner.getPartition(key, partiallyReducedMap.get(key), model.getNumThreads())).add(new AKeyValue<String,Integer>(key,partiallyReducedMap.get(key)));¶						}¶						model.getBarrier().barrier();¶						traceSplitAfterBarrier(slaveNum, slaveKeyValues);¶						Map<String, Integer> fullReducedMap = new HashMap<>();¶						if (clientReducer == null) {¶							 fullReducedMap = reducer.reduce(model.getReductionQueueList().get(slaveNum));¶						} else {¶							traceRemoteList(model.getReductionQueueList().get(slaveNum));¶							fullReducedMap = clientReducer.remoteReduce(model.getReductionQueueList().get(slaveNum));¶							traceRemoteResult(fullReducedMap);¶						}¶						Map<String, Integer> originalMap = model.getResult();¶						originalMap.putAll(fullReducedMap);¶						traceAddedToMap(originalMap, fullReducedMap);¶						slaveKeyValues.clear();¶						model.getJoiner().finish();¶						synchronizedWait();¶					} else {¶						slaveKeyValues.add(keyValue);¶					}¶				} catch (RemoteException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (InterruptedException e) {¶			traceQuit();¶			e.printStackTrace();¶		} ¶	}¶	¶	public void setClientReducer(RemoteReducer<String, Integer> clientReducer) {¶		traceClientAssignment(clientReducer);¶		this.clientReducer = clientReducer;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="488" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 20:56:51 EST 2021" docASTNodeCount="934" docActiveCodeLength="5768" docExpressionCount="625" docLength="5768" projectName="Hermes" starttimestamp="1614131043210" timestamp="768474">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import fluorite.model.EHEventRecorder;

public class PauseCommand extends AbstractCommand implements EHICommand{
	private static final String XML_RANGE = "range";
	private static final String XML_PREV = "prev";
	private static final String XML_NEXT = "next";
	private static final String XML_PAUSE = "pause";
	private static final String XML_PREV_TYPE = "prevType";
	private static final String XML_NEXT_TYPE = "nextType";
	public static final String[] TYPES = {"Edit", "Debug", "Run", "IO", "Exception", "Request", "Web", "Save", "Gained Focus", "Lost Focus", "Terminate", "Difficulty", "Move Caret", "Open File", "Select", "Compile", "Other"}; 
	private String prev, next, range, prevType, nextType;
	private long pause;

	public PauseCommand() {}
	
	public PauseCommand(EHICommand prev, EHICommand next, long pause, String range) {
		this.prev = prev.getCommandType();
		this.next = next.getCommandType();
		this.pause = pause;
		this.range = range;
		prevType = getType(prev);
		nextType = getType(next);
	}
	
	private String getType(EHICommand command) {
		if (command instanceof InsertStringCommand || command instanceof Insert ||
				command instanceof CopyCommand ||
				command instanceof Delete ||
				command instanceof Replace || command instanceof PasteCommand ||
				command instanceof AssistCommand) {
			return TYPES[0];
		}
		if (command instanceof RunCommand && (command.getAttributesMap().get("kind").equals("HitBreakPoint") || command.getAttributesMap().get("type").equals("Debug"))) {
			return TYPES[1];
		}
		if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {
			return TYPES[2];
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return TYPES[3];
		}
		if (command instanceof ExceptionCommand) {
			return TYPES[4];
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return TYPES[5];
		}
		if (command instanceof WebCommand) {
			return TYPES[6];
		}
		if (command instanceof EclipseCommand) {
			String id = command.getAttributesMap().get(EclipseCommand.XML_ID_ATTR).toLowerCase();
			if (id.contains("delete")) {
				return TYPES[0];
			}
			if (id.contains("save")) {
				return TYPES[7];
			}
			if (id.contains("terminate")) {
				return TYPES[10];
			}
			if (id.contains("line_start") || id.contains("line_down") || id.contains("line_up") || id.contains("column")) {
				return TYPES[12];
			}
		}
		if (command instanceof ShellCommand) {
			String type = command.getAttributesMap().get("type").toLowerCase();
			if (type.contains("gained_focus")) {
				return TYPES[8];
			}
			if (type.contains("lost_focus") || type.contains("minimized")) {
				return TYPES[9];
			}
		}
		if (command instanceof DifficultyCommand) {
			return TYPES[11];
		}
		if (command instanceof MoveCaretCommand) {
			return TYPES[12];
		}
		if (command instanceof FileOpenCommand) {
			return TYPES[13];
		}
		if (command instanceof SelectTextCommand) {
			return TYPES[14];
		}
		if (command instanceof CompilationCommand) {
			return TYPES[15];
		}
		return TYPES[16];
	}
	
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_RANGE, range);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());
		dataMap.put(XML_PREV, prev);
		dataMap.put(XML_NEXT, next);
		dataMap.put(XML_PAUSE, pause+"");
		dataMap.put(XML_PREV_TYPE, prevType);
		dataMap.put(XML_NEXT_TYPE, nextType);
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "PauseCommand";
	}

	@Override
	public String getName() {
		return "Pause";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			prev = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			next = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_PAUSE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			pause = Long.parseLong(textNode.getTextContent());
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			range = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_PREV_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			prevType = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			nextType = textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="489" _type="PauseCommand" date="Tue Feb 23 20:56:51 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="768474">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2679]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="490" _type="MoveCaretCommand" caretOffset="525" date="Tue Feb 23 20:56:51 EST 2021" docOffset="763" starttimestamp="1614131043210" timestamp="768609" />
  <Command __id="492" _type="SelectTextCommand" caretOffset="1907" date="Tue Feb 23 20:56:52 EST 2021" end="1907" start="1898" starttimestamp="1614131043210" timestamp="768939" />
  <Command __id="494" _type="PauseCommand" date="Tue Feb 23 20:56:53 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="770370">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1431]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="495" _type="InsertStringCommand" date="Tue Feb 23 20:56:53 EST 2021" starttimestamp="1614131043210" timestamp="770375" timestamp2="770375">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="497" _type="InsertStringCommand" date="Tue Feb 23 20:56:54 EST 2021" starttimestamp="1614131043210" timestamp="770802" timestamp2="770802">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="498" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:56:54 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="770843" />
  <Command __id="501" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:56:54 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="771726" />
  <Command __id="503" _type="InsertStringCommand" date="Tue Feb 23 20:56:54 EST 2021" starttimestamp="1614131043210" timestamp="771740" timestamp2="771740">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="505" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:56:55 EST 2021" starttimestamp="1614131043210" timestamp="772399" />
  <Command __id="507" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:56:55 EST 2021" starttimestamp="1614131043210" timestamp="772703" />
  <Command __id="509" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 20:56:56 EST 2021" starttimestamp="1614131043210" timestamp="772900" />
  <Command __id="511" _type="InsertStringCommand" date="Tue Feb 23 20:56:56 EST 2021" starttimestamp="1614131043210" timestamp="773338" timestamp2="773338">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="513" _type="InsertStringCommand" date="Tue Feb 23 20:56:56 EST 2021" starttimestamp="1614131043210" timestamp="773549" timestamp2="773549">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="514" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:56:56 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="773591" />
  <Command __id="520" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:56:57 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="774681" />
  <Command __id="522" _type="InsertStringCommand" date="Tue Feb 23 20:56:58 EST 2021" starttimestamp="1614131043210" timestamp="774940" timestamp2="774940">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="524" _type="InsertStringCommand" date="Tue Feb 23 20:56:58 EST 2021" starttimestamp="1614131043210" timestamp="775101" timestamp2="775101">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="526" _type="InsertStringCommand" date="Tue Feb 23 20:56:58 EST 2021" starttimestamp="1614131043210" timestamp="775191" timestamp2="775191">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="528" _type="InsertStringCommand" date="Tue Feb 23 20:56:58 EST 2021" starttimestamp="1614131043210" timestamp="775504" timestamp2="775504">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="529" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:56:58 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="775546" />
  <Command __id="533" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:56:59 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="775861" />
  <Command __id="535" _type="InsertStringCommand" date="Tue Feb 23 20:56:59 EST 2021" starttimestamp="1614131043210" timestamp="776194" timestamp2="776194">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="536" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:56:59 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="776236" />
  <Command __id="538" _type="PauseCommand" date="Tue Feb 23 20:57:01 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="777912">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1676]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="540" _type="PauseCommand" date="Tue Feb 23 20:57:02 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="779038">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1126]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="541" _type="ShellCommand" date="Tue Feb 23 20:57:02 EST 2021" starttimestamp="1614131043210" timestamp="779052" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="542" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:02 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="779403" />
  <Command __id="543" _type="ShellCommand" date="Tue Feb 23 20:57:03 EST 2021" starttimestamp="1614131043210" timestamp="780030" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="544" _type="MoveCaretCommand" caretOffset="1920" date="Tue Feb 23 20:57:03 EST 2021" docOffset="1920" starttimestamp="1614131043210" timestamp="780107" />
  <Command __id="546" _type="InsertStringCommand" date="Tue Feb 23 20:57:03 EST 2021" starttimestamp="1614131043210" timestamp="780447" timestamp2="780447">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="547" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:03 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="780486" />
  <Command __id="551" _type="PauseCommand" date="Tue Feb 23 20:57:06 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="783045">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2394]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="550" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:06 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="783045" />
  <Command __id="554" _type="InsertStringCommand" date="Tue Feb 23 20:57:06 EST 2021" starttimestamp="1614131043210" timestamp="783122" timestamp2="783122">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="556" _type="PauseCommand" date="Tue Feb 23 20:57:08 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="784922">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1800]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 20:57:08 EST 2021" starttimestamp="1614131043210" timestamp="784922" />
  <Command __id="557" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 20:57:08 EST 2021" starttimestamp="1614131043210" timestamp="785129" />
  <Command __id="558" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 20:57:08 EST 2021" starttimestamp="1614131043210" timestamp="785305" />
  <Command __id="559" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 20:57:08 EST 2021" starttimestamp="1614131043210" timestamp="785451" />
  <Command __id="560" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 20:57:08 EST 2021" starttimestamp="1614131043210" timestamp="785564" />
  <Command __id="561" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 20:57:09 EST 2021" starttimestamp="1614131043210" timestamp="785976" />
  <Command __id="563" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:57:09 EST 2021" starttimestamp="1614131043210" timestamp="786302" />
  <Command __id="565" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 20:57:09 EST 2021" starttimestamp="1614131043210" timestamp="786746" />
  <Command __id="567" _type="InsertStringCommand" date="Tue Feb 23 20:57:10 EST 2021" starttimestamp="1614131043210" timestamp="787100" timestamp2="787100">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="569" _type="InsertStringCommand" date="Tue Feb 23 20:57:10 EST 2021" starttimestamp="1614131043210" timestamp="787138" timestamp2="787138">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="570" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:10 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="787179" />
  <Command __id="573" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:10 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="787441" />
  <Command __id="575" _type="InsertStringCommand" date="Tue Feb 23 20:57:11 EST 2021" starttimestamp="1614131043210" timestamp="787791" timestamp2="787791">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="576" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:11 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="787832" />
  <Command __id="597" _type="PauseCommand" date="Tue Feb 23 20:57:17 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="794575">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1347]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="596" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:17 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="794575" />
  <Command __id="602" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:17 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="794676" />
  <Command __id="603" _type="InsertStringCommand" date="Tue Feb 23 20:57:17 EST 2021" starttimestamp="1614131043210" timestamp="794679" timestamp2="794679">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="605" _type="PauseCommand" date="Tue Feb 23 20:57:21 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="797897">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3218]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="604" _type="MoveCaretCommand" caretOffset="2008" date="Tue Feb 23 20:57:21 EST 2021" docOffset="2008" starttimestamp="1614131043210" timestamp="797897" />
  <Command __id="607" _type="InsertStringCommand" date="Tue Feb 23 20:57:21 EST 2021" starttimestamp="1614131043210" timestamp="798656" timestamp2="798656">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="608" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 20:57:22 EST 2021" starttimestamp="1614131043210" timestamp="798871" />
  <Command __id="610" _type="InsertStringCommand" date="Tue Feb 23 20:57:22 EST 2021" starttimestamp="1614131043210" timestamp="799441" timestamp2="799441">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="612" _type="InsertStringCommand" date="Tue Feb 23 20:57:23 EST 2021" starttimestamp="1614131043210" timestamp="800050" timestamp2="800050">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="614" _type="InsertStringCommand" date="Tue Feb 23 20:57:23 EST 2021" starttimestamp="1614131043210" timestamp="800091" timestamp2="800091">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="615" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:23 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="800133" />
  <Command __id="618" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:24 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="800931" />
  <Command __id="620" _type="InsertStringCommand" date="Tue Feb 23 20:57:24 EST 2021" starttimestamp="1614131043210" timestamp="800944" timestamp2="800944">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="622" _type="InsertStringCommand" date="Tue Feb 23 20:57:24 EST 2021" starttimestamp="1614131043210" timestamp="801559" timestamp2="801559">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="624" _type="InsertStringCommand" date="Tue Feb 23 20:57:25 EST 2021" starttimestamp="1614131043210" timestamp="802135" timestamp2="802135">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="625" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:25 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="802176" />
  <Command __id="629" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:25 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="802312" />
  <Command __id="631" _type="InsertStringCommand" date="Tue Feb 23 20:57:25 EST 2021" starttimestamp="1614131043210" timestamp="802477" timestamp2="802477">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="632" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:25 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="802518" />
  <Command __id="637" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:57:27 EST 2021" starttimestamp="1614131043210" timestamp="804047" />
  <Command __id="639" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:57:27 EST 2021" starttimestamp="1614131043210" timestamp="804177" />
  <Command __id="641" _type="PauseCommand" date="Tue Feb 23 20:57:28 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="805685">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1508]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="640" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:28 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="805685" />
  <Command __id="491" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 20:56:51 EST 2021" docASTNodeCount="5893" docActiveCodeLength="33450" docExpressionCount="4072" docLength="35685" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="768783">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶"), Diff(INSERT,"import au.com.bytecode.opencsv.CSVReader;¶"), Diff(EQUAL,"import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	"), Diff(INSERT,"private static final String TIMESTAMP = "timestamp for each participant.csv";¶	private Map<String, List<Long>> timestamps = new HashMap<>();¶	"), Diff(EQUAL,"¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	"), Diff(INSERT,"private void readTimestamp() {¶		CSVReader¶	}¶	¶	"), Diff(EQUAL,"public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "timestamp for each participant.csv";
	private Map<String, List<Long>> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	private void readTimestamp() {
		CSVReader
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="493" _type="Insert" date="Tue Feb 23 20:56:53 EST 2021" docASTNodeCount="5896" docActiveCodeLength="33454" docExpressionCount="4073" docLength="35689" length="4" offset="1907" repeat="4" starttimestamp="1614131043210" timestamp="770370" timestamp2="771079">
    <text><![CDATA[ csv]]></text>
  </DocumentChange>
  <DocumentChange __id="502" _type="Replace" date="Tue Feb 23 20:56:54 EST 2021" docASTNodeCount="5896" docActiveCodeLength="33460" docExpressionCount="4073" docLength="35695" endLine="56" insertionLength="9" int_docASTNodeCount="5893" int_docActiveCodeLength="33451" int_docExpressionCount="4072" int_docLength="35686" length="3" offset="1908" startLine="56" starttimestamp="1614131043210" timestamp="771735">
    <deletedText><![CDATA[csv]]></deletedText>
    <insertedText><![CDATA[csvReader]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="504" _type="Delete" date="Tue Feb 23 20:56:55 EST 2021" docASTNodeCount="5893" docActiveCodeLength="33450" docExpressionCount="4072" docLength="35685" endLine="56" length="10" offset="1907" repeat="3" startLine="56" starttimestamp="1614131043210" timestamp="772394" timestamp2="772897">
    <text><![CDATA[ csvReader]]></text>
  </DocumentChange>
  <DocumentChange __id="510" _type="Insert" date="Tue Feb 23 20:56:56 EST 2021" docASTNodeCount="5896" docActiveCodeLength="33454" docExpressionCount="4073" docLength="35689" length="4" offset="1907" repeat="4" starttimestamp="1614131043210" timestamp="773332" timestamp2="773945">
    <text><![CDATA[ csr]]></text>
  </DocumentChange>
  <DocumentChange __id="517" _type="Delete" date="Tue Feb 23 20:56:57 EST 2021" docASTNodeCount="5896" docActiveCodeLength="33452" docExpressionCount="4073" docLength="35687" endLine="56" length="2" offset="1909" repeat="2" startLine="56" starttimestamp="1614131043210" timestamp="774227" timestamp2="774370">
    <text><![CDATA[sr]]></text>
  </DocumentChange>
  <DocumentChange __id="519" _type="Insert" date="Tue Feb 23 20:56:57 EST 2021" docASTNodeCount="5899" docActiveCodeLength="33466" docExpressionCount="4075" docLength="35701" length="14" offset="1909" repeat="14" starttimestamp="1614131043210" timestamp="774415" timestamp2="780651">
    <text><![CDATA[r = new csvrea]]></text>
  </DocumentChange>
  <DocumentChange __id="552" _type="Replace" date="Tue Feb 23 20:57:06 EST 2021" docASTNodeCount="5899" docActiveCodeLength="33471" docExpressionCount="4075" docLength="35706" endLine="56" insertionLength="9" int_docASTNodeCount="5899" int_docActiveCodeLength="33462" int_docExpressionCount="4075" int_docLength="35697" length="4" offset="1917" startLine="56" starttimestamp="1614131043210" timestamp="783053">
    <deletedText><![CDATA[csvr]]></deletedText>
    <insertedText><![CDATA[CSVReader]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="553" _type="Replace" date="Tue Feb 23 20:57:06 EST 2021" docASTNodeCount="5900" docActiveCodeLength="33477" docExpressionCount="4076" docLength="35712" endLine="56" insertionLength="8" int_docASTNodeCount="5899" int_docActiveCodeLength="33469" int_docExpressionCount="4075" int_docLength="35704" length="2" offset="1926" startLine="56" starttimestamp="1614131043210" timestamp="783067">
    <deletedText><![CDATA[ea]]></deletedText>
    <insertedText><![CDATA[(reader)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="562" _type="Delete" date="Tue Feb 23 20:57:09 EST 2021" docASTNodeCount="5899" docActiveCodeLength="33471" docExpressionCount="4075" docLength="35706" endLine="56" length="6" offset="1927" repeat="2" startLine="56" starttimestamp="1614131043210" timestamp="786298" timestamp2="786740">
    <text><![CDATA[reader]]></text>
  </DocumentChange>
  <DocumentChange __id="566" _type="Insert" date="Tue Feb 23 20:57:10 EST 2021" docASTNodeCount="5900" docActiveCodeLength="33480" docExpressionCount="4076" docLength="35715" length="9" offset="1927" repeat="9" starttimestamp="1614131043210" timestamp="787090" timestamp2="789489">
    <text><![CDATA[new inspu]]></text>
  </DocumentChange>
  <DocumentChange __id="581" _type="Delete" date="Tue Feb 23 20:57:13 EST 2021" docASTNodeCount="5900" docActiveCodeLength="33477" docExpressionCount="4076" docLength="35712" endLine="56" length="3" offset="1933" repeat="3" startLine="56" starttimestamp="1614131043210" timestamp="790037" timestamp2="790292">
    <text><![CDATA[spu]]></text>
  </DocumentChange>
  <DocumentChange __id="584" _type="Insert" date="Tue Feb 23 20:57:13 EST 2021" docASTNodeCount="5900" docActiveCodeLength="33480" docExpressionCount="4076" docLength="35715" length="3" offset="1933" repeat="3" starttimestamp="1614131043210" timestamp="790549" timestamp2="790767">
    <text><![CDATA[pus]]></text>
  </DocumentChange>
  <DocumentChange __id="587" _type="Delete" date="Tue Feb 23 20:57:14 EST 2021" docASTNodeCount="5900" docActiveCodeLength="33479" docExpressionCount="4076" docLength="35714" endLine="56" length="1" offset="1935" startLine="56" starttimestamp="1614131043210" timestamp="791107">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="588" _type="Insert" date="Tue Feb 23 20:57:14 EST 2021" docASTNodeCount="5900" docActiveCodeLength="33487" docExpressionCount="4076" docLength="35722" length="8" offset="1935" repeat="8" starttimestamp="1614131043210" timestamp="791188" timestamp2="793228">
    <text><![CDATA[tstreare]]></text>
  </DocumentChange>
  <DocumentChange __id="598" _type="Replace" date="Tue Feb 23 20:57:17 EST 2021" docASTNodeCount="5900" docActiveCodeLength="33503" docExpressionCount="4076" docLength="35738" endLine="56" insertionLength="17" int_docASTNodeCount="5900" int_docActiveCodeLength="33486" int_docExpressionCount="4076" int_docLength="35721" length="1" offset="1931" startLine="56" starttimestamp="1614131043210" timestamp="794588">
    <deletedText><![CDATA[i]]></deletedText>
    <insertedText><![CDATA[InputStreamReader]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="599" _type="Insert" date="Tue Feb 23 20:57:17 EST 2021" docASTNodeCount="5910" docActiveCodeLength="33558" docExpressionCount="4085" docLength="35793" length="55" offset="1379" repeat="2" starttimestamp="1614131043210" timestamp="794606" timestamp2="794615">
    <text><![CDATA[
import jdk.internal.jline.internal.InputStreamReader;]]></text>
  </DocumentChange>
  <DocumentChange __id="601" _type="Replace" date="Tue Feb 23 20:57:17 EST 2021" docASTNodeCount="5913" docActiveCodeLength="33551" docExpressionCount="4087" docLength="35786" endLine="57" insertionLength="4" int_docASTNodeCount="5910" int_docActiveCodeLength="33547" int_docExpressionCount="4085" int_docLength="35782" length="11" offset="2003" startLine="57" starttimestamp="1614131043210" timestamp="794622">
    <deletedText><![CDATA[nputstreare]]></deletedText>
    <insertedText><![CDATA[(in)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="606" _type="Insert" date="Tue Feb 23 20:57:21 EST 2021" docASTNodeCount="5913" docActiveCodeLength="33552" docExpressionCount="4087" docLength="35787" length="1" offset="2008" starttimestamp="1614131043210" timestamp="798647">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="609" _type="Insert" date="Tue Feb 23 20:57:22 EST 2021" docASTNodeCount="5916" docActiveCodeLength="33560" docExpressionCount="4089" docLength="35795" length="8" offset="1949" repeat="5" starttimestamp="1614131043210" timestamp="799431" timestamp2="800315">
    <text><![CDATA[
		file]]></text>
  </DocumentChange>
  <DocumentChange __id="619" _type="Replace" date="Tue Feb 23 20:57:24 EST 2021" docASTNodeCount="5916" docActiveCodeLength="33560" docExpressionCount="4089" docLength="35795" endLine="57" insertionLength="4" int_docASTNodeCount="5913" int_docActiveCodeLength="33556" int_docExpressionCount="4087" int_docLength="35791" length="4" offset="1953" startLine="57" starttimestamp="1614131043210" timestamp="800938">
    <deletedText><![CDATA[file]]></deletedText>
    <insertedText><![CDATA[File]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="621" _type="Insert" date="Tue Feb 23 20:57:24 EST 2021" docASTNodeCount="5918" docActiveCodeLength="33569" docExpressionCount="4091" docLength="35804" length="9" offset="1957" repeat="9" starttimestamp="1614131043210" timestamp="801554" timestamp2="803438">
    <text><![CDATA[ new file]]></text>
  </DocumentChange>
  <DocumentChange __id="636" _type="Delete" date="Tue Feb 23 20:57:27 EST 2021" docASTNodeCount="5916" docActiveCodeLength="33561" docExpressionCount="4089" docLength="35796" endLine="57" length="8" offset="1958" repeat="2" startLine="57" starttimestamp="1614131043210" timestamp="804043" timestamp2="804174">
    <text><![CDATA[new file]]></text>
  </DocumentChange>
  <DocumentChange __id="642" _type="Insert" date="Tue Feb 23 20:57:32 EST 2021" docASTNodeCount="5918" docActiveCodeLength="33565" docExpressionCount="4089" docLength="35800" length="4" offset="1958" repeat="4" starttimestamp="1614131043210" timestamp="809195" timestamp2="809532">
    <text><![CDATA[tims]]></text>
  </DocumentChange>
  <Command __id="643" _type="PauseCommand" date="Tue Feb 23 20:57:32 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="809195">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3510]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="644" _type="InsertStringCommand" date="Tue Feb 23 20:57:32 EST 2021" starttimestamp="1614131043210" timestamp="809200" timestamp2="809200">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="645" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:32 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="809242" />
  <Command __id="647" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:32 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="809311" />
  <Command __id="649" _type="InsertStringCommand" date="Tue Feb 23 20:57:32 EST 2021" starttimestamp="1614131043210" timestamp="809385" timestamp2="809385">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="650" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:32 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="809426" />
  <Command __id="651" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:32 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="809443" />
  <Command __id="653" _type="InsertStringCommand" date="Tue Feb 23 20:57:32 EST 2021" starttimestamp="1614131043210" timestamp="809536" timestamp2="809536">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="654" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:32 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="809629" />
  <Command __id="655" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:32 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="809646" />
  <Command __id="657" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 20:57:33 EST 2021" starttimestamp="1614131043210" timestamp="810204" />
  <Command __id="659" _type="InsertStringCommand" date="Tue Feb 23 20:57:33 EST 2021" starttimestamp="1614131043210" timestamp="810398" timestamp2="810398">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="660" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:33 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="810490" />
  <Command __id="661" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:33 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="810507" />
  <Command __id="663" _type="PauseCommand" date="Tue Feb 23 20:57:35 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="811954">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1447]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="664" _type="InsertStringCommand" date="Tue Feb 23 20:57:35 EST 2021" starttimestamp="1614131043210" timestamp="811959" timestamp2="811959">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="665" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:35 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="812051" />
  <Command __id="666" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:35 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="812071" />
  <Command __id="668" _type="InsertStringCommand" date="Tue Feb 23 20:57:35 EST 2021" starttimestamp="1614131043210" timestamp="812165" timestamp2="812165">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="670" _type="InsertStringCommand" date="Tue Feb 23 20:57:35 EST 2021" starttimestamp="1614131043210" timestamp="812247" timestamp2="812247">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="672" _type="InsertStringCommand" date="Tue Feb 23 20:57:35 EST 2021" starttimestamp="1614131043210" timestamp="812295" timestamp2="812295">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="673" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:35 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="812334" />
  <Command __id="674" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:35 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="812351" />
  <Command __id="676" _type="InsertStringCommand" date="Tue Feb 23 20:57:35 EST 2021" starttimestamp="1614131043210" timestamp="812388" timestamp2="812388">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="677" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:35 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="812482" />
  <Command __id="678" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:35 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="812499" />
  <Command __id="680" _type="InsertStringCommand" date="Tue Feb 23 20:57:36 EST 2021" starttimestamp="1614131043210" timestamp="812821" timestamp2="812821">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="682" _type="InsertStringCommand" date="Tue Feb 23 20:57:36 EST 2021" starttimestamp="1614131043210" timestamp="812945" timestamp2="812945">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="683" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:36 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="813037" />
  <Command __id="684" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:36 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="813054" />
  <Command __id="686" _type="InsertStringCommand" date="Tue Feb 23 20:57:36 EST 2021" starttimestamp="1614131043210" timestamp="813088" timestamp2="813088">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="688" _type="InsertStringCommand" date="Tue Feb 23 20:57:36 EST 2021" starttimestamp="1614131043210" timestamp="813150" timestamp2="813150">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="689" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:36 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="813191" />
  <Command __id="690" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:36 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="813208" />
  <Command __id="692" _type="InsertStringCommand" date="Tue Feb 23 20:57:36 EST 2021" starttimestamp="1614131043210" timestamp="813313" timestamp2="813313">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="694" _type="InsertStringCommand" date="Tue Feb 23 20:57:36 EST 2021" starttimestamp="1614131043210" timestamp="813563" timestamp2="813563">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="696" _type="InsertStringCommand" date="Tue Feb 23 20:57:36 EST 2021" starttimestamp="1614131043210" timestamp="813584" timestamp2="813584">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="698" _type="PauseCommand" date="Tue Feb 23 20:57:39 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="815827">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2243]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="699" _type="InsertStringCommand" date="Tue Feb 23 20:57:39 EST 2021" starttimestamp="1614131043210" timestamp="815832" timestamp2="815832">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="701" _type="InsertStringCommand" date="Tue Feb 23 20:57:39 EST 2021" starttimestamp="1614131043210" timestamp="815867" timestamp2="815867">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="703" _type="InsertStringCommand" date="Tue Feb 23 20:57:39 EST 2021" starttimestamp="1614131043210" timestamp="815949" timestamp2="815949">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="705" _type="InsertStringCommand" date="Tue Feb 23 20:57:39 EST 2021" starttimestamp="1614131043210" timestamp="815980" timestamp2="815980">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="707" _type="InsertStringCommand" date="Tue Feb 23 20:57:39 EST 2021" starttimestamp="1614131043210" timestamp="816596" timestamp2="816596">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="709" _type="InsertStringCommand" date="Tue Feb 23 20:57:39 EST 2021" starttimestamp="1614131043210" timestamp="816668" timestamp2="816668">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="710" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:39 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="816759" />
  <Command __id="713" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:41 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="817794" />
  <Command __id="716" _type="InsertStringCommand" date="Tue Feb 23 20:57:41 EST 2021" starttimestamp="1614131043210" timestamp="817872" timestamp2="817872">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="718" _type="PauseCommand" date="Tue Feb 23 20:57:42 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="819361">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1489]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="717" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Tue Feb 23 20:57:42 EST 2021" starttimestamp="1614131043210" timestamp="819361" />
  <Command __id="719" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Tue Feb 23 20:57:42 EST 2021" starttimestamp="1614131043210" timestamp="819656" />
  <Command __id="721" _type="PauseCommand" date="Tue Feb 23 20:57:43 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="820686">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1030]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="722" _type="InsertStringCommand" date="Tue Feb 23 20:57:43 EST 2021" starttimestamp="1614131043210" timestamp="820694" timestamp2="820694">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="723" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 20:57:44 EST 2021" starttimestamp="1614131043210" timestamp="821165" />
  <Command __id="724" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 20:57:44 EST 2021" starttimestamp="1614131043210" timestamp="821690" />
  <Command __id="726" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:57:45 EST 2021" starttimestamp="1614131043210" timestamp="822019" />
  <Command __id="728" _type="InsertStringCommand" date="Tue Feb 23 20:57:46 EST 2021" starttimestamp="1614131043210" timestamp="822825" timestamp2="822825">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="729" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:46 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="822862" />
  <Command __id="732" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:46 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="823723" />
  <Command __id="734" _type="InsertStringCommand" date="Tue Feb 23 20:57:46 EST 2021" starttimestamp="1614131043210" timestamp="823735" timestamp2="823735">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="736" _type="PauseCommand" date="Tue Feb 23 20:57:48 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="825044">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1309]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="735" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 20:57:48 EST 2021" starttimestamp="1614131043210" timestamp="825044" />
  <Command __id="737" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 20:57:49 EST 2021" starttimestamp="1614131043210" timestamp="825992" />
  <Command __id="738" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Tue Feb 23 20:57:49 EST 2021" starttimestamp="1614131043210" timestamp="826435" />
  <Command __id="739" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Tue Feb 23 20:57:49 EST 2021" starttimestamp="1614131043210" timestamp="826606" />
  <Command __id="740" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Tue Feb 23 20:57:50 EST 2021" starttimestamp="1614131043210" timestamp="827002" />
  <Command __id="742" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Tue Feb 23 20:57:50 EST 2021" starttimestamp="1614131043210" timestamp="827742" />
  <Command __id="744" _type="InsertStringCommand" date="Tue Feb 23 20:57:51 EST 2021" starttimestamp="1614131043210" timestamp="828332" timestamp2="828332">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="746" _type="InsertStringCommand" date="Tue Feb 23 20:57:51 EST 2021" starttimestamp="1614131043210" timestamp="828377" timestamp2="828377">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="747" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:51 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="828426" />
  <Command __id="750" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:52 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="828983" />
  <Command __id="752" _type="InsertStringCommand" date="Tue Feb 23 20:57:52 EST 2021" starttimestamp="1614131043210" timestamp="828996" timestamp2="828996">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="754" _type="InsertStringCommand" date="Tue Feb 23 20:57:52 EST 2021" starttimestamp="1614131043210" timestamp="829247" timestamp2="829247">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="755" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:52 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="829286" />
  <Command __id="760" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:53 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="830138" />
  <Command __id="762" _type="InsertStringCommand" date="Tue Feb 23 20:57:53 EST 2021" starttimestamp="1614131043210" timestamp="830172" timestamp2="830172">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="763" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:53 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="830213" />
  <Command __id="764" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:53 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="830232" />
  <Command __id="766" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:57:54 EST 2021" starttimestamp="1614131043210" timestamp="830918" />
  <Command __id="768" _type="InsertStringCommand" date="Tue Feb 23 20:57:54 EST 2021" starttimestamp="1614131043210" timestamp="831202" timestamp2="831202">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="770" _type="InsertStringCommand" date="Tue Feb 23 20:57:54 EST 2021" starttimestamp="1614131043210" timestamp="831279" timestamp2="831279">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="771" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:54 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="831370" />
  <Command __id="772" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:57:54 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="831391" />
  <Command __id="774" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 20:57:55 EST 2021" starttimestamp="1614131043210" timestamp="831845" />
  <Command __id="776" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 20:57:55 EST 2021" starttimestamp="1614131043210" timestamp="831987" />
  <Command __id="778" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 20:57:55 EST 2021" starttimestamp="1614131043210" timestamp="832107" />
  <Command __id="780" _type="InsertStringCommand" date="Tue Feb 23 20:57:55 EST 2021" starttimestamp="1614131043210" timestamp="832428" timestamp2="832428">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="781" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:57:55 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="832520" />
  <Command __id="783" _type="PauseCommand" date="Tue Feb 23 20:57:59 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="835928">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3408]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="785" _type="PauseCommand" date="Tue Feb 23 20:58:00 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="836985">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[1057]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="784" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:58:00 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="836985" />
  <Command __id="787" _type="PauseCommand" date="Tue Feb 23 20:58:01 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="838407">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1422]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="786" _type="ShellCommand" date="Tue Feb 23 20:58:01 EST 2021" starttimestamp="1614131043210" timestamp="838407" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="789" _type="PauseCommand" date="Tue Feb 23 20:58:26 EST 2021" range="20s-30s" starttimestamp="1614131043210" timestamp="863448">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[25041]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="788" _type="ShellCommand" date="Tue Feb 23 20:58:26 EST 2021" starttimestamp="1614131043210" timestamp="863448" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="790" _type="MoveCaretCommand" caretOffset="2065" date="Tue Feb 23 20:58:26 EST 2021" docOffset="2065" starttimestamp="1614131043210" timestamp="863542" />
  <Command __id="792" _type="InsertStringCommand" date="Tue Feb 23 20:58:27 EST 2021" starttimestamp="1614131043210" timestamp="864328" timestamp2="864328">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="794" _type="InsertStringCommand" date="Tue Feb 23 20:58:28 EST 2021" starttimestamp="1614131043210" timestamp="865115" timestamp2="865115">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="795" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:58:28 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="865158" />
  <Command __id="799" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:58:28 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="865390" />
  <Command __id="801" _type="InsertStringCommand" date="Tue Feb 23 20:58:28 EST 2021" starttimestamp="1614131043210" timestamp="865598" timestamp2="865598">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="802" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:58:28 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="865640" />
  <Command __id="811" _type="PauseCommand" date="Tue Feb 23 20:58:35 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="872257">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[4766]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="810" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:58:35 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="872257" />
  <Command __id="812" _type="MoveCaretCommand" caretOffset="2056" date="Tue Feb 23 20:58:35 EST 2021" docOffset="2056" starttimestamp="1614131043210" timestamp="872329" />
  <Command __id="814" _type="PauseCommand" date="Tue Feb 23 20:58:38 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="875219">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2890]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="813" _type="SelectTextCommand" caretOffset="2063" date="Tue Feb 23 20:58:38 EST 2021" end="2063" start="2027" starttimestamp="1614131043210" timestamp="875219" />
  <Command __id="816" _type="InsertStringCommand" date="Tue Feb 23 20:58:39 EST 2021" starttimestamp="1614131043210" timestamp="875890" timestamp2="875890">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="817" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:58:39 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="875924" />
  <Command __id="821" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:58:39 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="876149" />
  <Command __id="823" _type="InsertStringCommand" date="Tue Feb 23 20:58:39 EST 2021" starttimestamp="1614131043210" timestamp="876328" timestamp2="876328">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="824" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:58:39 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="876369" />
  <Command __id="829" _type="PauseCommand" date="Tue Feb 23 20:58:41 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="877842">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1136]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="656" _type="Delete" date="Tue Feb 23 20:57:33 EST 2021" docASTNodeCount="5918" docActiveCodeLength="33564" docExpressionCount="4089" docLength="35799" endLine="57" length="1" offset="1961" startLine="57" starttimestamp="1614131043210" timestamp="810201">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="658" _type="Insert" date="Tue Feb 23 20:57:33 EST 2021" docASTNodeCount="5917" docActiveCodeLength="33577" docExpressionCount="4090" docLength="35812" length="13" offset="1961" repeat="13" starttimestamp="1614131043210" timestamp="810393" timestamp2="813580">
    <text><![CDATA[estampFile = ]]></text>
  </DocumentChange>
  <DocumentChange __id="697" _type="Insert" date="Tue Feb 23 20:57:39 EST 2021" docASTNodeCount="5921" docActiveCodeLength="33585" docExpressionCount="4091" docLength="35820" length="8" offset="1974" repeat="8" starttimestamp="1614131043210" timestamp="815827" timestamp2="817040">
    <text><![CDATA[new file]]></text>
  </DocumentChange>
  <DocumentChange __id="714" _type="Replace" date="Tue Feb 23 20:57:41 EST 2021" docASTNodeCount="5921" docActiveCodeLength="33587" docExpressionCount="4091" docLength="35822" endLine="57" insertionLength="4" int_docASTNodeCount="5921" int_docActiveCodeLength="33583" int_docExpressionCount="4091" int_docLength="35818" length="2" offset="1978" startLine="57" starttimestamp="1614131043210" timestamp="817802">
    <deletedText><![CDATA[fi]]></deletedText>
    <insertedText><![CDATA[File]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="715" _type="Replace" date="Tue Feb 23 20:57:41 EST 2021" docASTNodeCount="5922" docActiveCodeLength="33595" docExpressionCount="4092" docLength="35830" endLine="57" insertionLength="10" int_docASTNodeCount="5921" int_docActiveCodeLength="33585" int_docExpressionCount="4091" int_docLength="35820" length="2" offset="1982" startLine="57" starttimestamp="1614131043210" timestamp="817817">
    <deletedText><![CDATA[le]]></deletedText>
    <insertedText><![CDATA[(pathname)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="720" _type="Insert" date="Tue Feb 23 20:57:43 EST 2021" docASTNodeCount="5922" docActiveCodeLength="33596" docExpressionCount="4092" docLength="35831" length="1" offset="1992" starttimestamp="1614131043210" timestamp="820686">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="725" _type="Delete" date="Tue Feb 23 20:57:45 EST 2021" docASTNodeCount="5921" docActiveCodeLength="33588" docExpressionCount="4091" docLength="35823" endLine="57" length="8" offset="1983" startLine="57" starttimestamp="1614131043210" timestamp="822012">
    <text><![CDATA[pathname]]></text>
  </DocumentChange>
  <DocumentChange __id="727" _type="Insert" date="Tue Feb 23 20:57:46 EST 2021" docASTNodeCount="5922" docActiveCodeLength="33591" docExpressionCount="4092" docLength="35826" length="3" offset="1983" repeat="3" starttimestamp="1614131043210" timestamp="822815" timestamp2="823072">
    <text><![CDATA[tim]]></text>
  </DocumentChange>
  <DocumentChange __id="733" _type="Replace" date="Tue Feb 23 20:57:46 EST 2021" docASTNodeCount="5922" docActiveCodeLength="33597" docExpressionCount="4092" docLength="35832" endLine="57" insertionLength="9" int_docASTNodeCount="5921" int_docActiveCodeLength="33588" int_docExpressionCount="4091" int_docLength="35823" length="3" offset="1983" startLine="57" starttimestamp="1614131043210" timestamp="823729">
    <deletedText><![CDATA[tim]]></deletedText>
    <insertedText><![CDATA[TIMESTAMP]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="741" _type="Delete" date="Tue Feb 23 20:57:50 EST 2021" docASTNodeCount="5921" docActiveCodeLength="33595" docExpressionCount="4091" docLength="35830" endLine="58" length="2" offset="2049" startLine="58" starttimestamp="1614131043210" timestamp="827738">
    <text><![CDATA[in]]></text>
  </DocumentChange>
  <DocumentChange __id="743" _type="Insert" date="Tue Feb 23 20:57:51 EST 2021" docASTNodeCount="5922" docActiveCodeLength="33599" docExpressionCount="4092" docLength="35834" length="4" offset="2049" repeat="4" starttimestamp="1614131043210" timestamp="828324" timestamp2="828597">
    <text><![CDATA[tims]]></text>
  </DocumentChange>
  <DocumentChange __id="751" _type="Replace" date="Tue Feb 23 20:57:52 EST 2021" docASTNodeCount="5922" docActiveCodeLength="33608" docExpressionCount="4092" docLength="35843" endLine="58" insertionLength="13" int_docASTNodeCount="5921" int_docActiveCodeLength="33595" int_docExpressionCount="4091" int_docLength="35830" length="4" offset="2049" startLine="58" starttimestamp="1614131043210" timestamp="828989">
    <deletedText><![CDATA[tims]]></deletedText>
    <insertedText><![CDATA[timestampFile]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="753" _type="Insert" date="Tue Feb 23 20:57:52 EST 2021" docASTNodeCount="5924" docActiveCodeLength="33614" docExpressionCount="4094" docLength="35849" length="6" offset="2062" repeat="6" starttimestamp="1614131043210" timestamp="829241" timestamp2="830166">
    <text><![CDATA[.getin]]></text>
  </DocumentChange>
  <DocumentChange __id="765" _type="Delete" date="Tue Feb 23 20:57:54 EST 2021" docASTNodeCount="5924" docActiveCodeLength="33609" docExpressionCount="4093" docLength="35844" endLine="58" length="5" offset="2063" startLine="58" starttimestamp="1614131043210" timestamp="830913">
    <text><![CDATA[getin]]></text>
  </DocumentChange>
  <DocumentChange __id="767" _type="Insert" date="Tue Feb 23 20:57:54 EST 2021" docASTNodeCount="5924" docActiveCodeLength="33611" docExpressionCount="4094" docLength="35846" length="2" offset="2063" repeat="2" starttimestamp="1614131043210" timestamp="831197" timestamp2="831273">
    <text><![CDATA[in]]></text>
  </DocumentChange>
  <DocumentChange __id="773" _type="Delete" date="Tue Feb 23 20:57:55 EST 2021" docASTNodeCount="5922" docActiveCodeLength="33608" docExpressionCount="4092" docLength="35843" endLine="58" length="3" offset="2062" repeat="3" startLine="58" starttimestamp="1614131043210" timestamp="831842" timestamp2="832104">
    <text><![CDATA[.in]]></text>
  </DocumentChange>
  <DocumentChange __id="779" _type="Insert" date="Tue Feb 23 20:57:55 EST 2021" docASTNodeCount="5924" docActiveCodeLength="33609" docExpressionCount="4093" docLength="35844" length="1" offset="2062" starttimestamp="1614131043210" timestamp="832423">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="782" _type="Delete" date="Tue Feb 23 20:57:59 EST 2021" docASTNodeCount="5922" docActiveCodeLength="33608" docExpressionCount="4092" docLength="35843" endLine="58" length="1" offset="2062" startLine="58" starttimestamp="1614131043210" timestamp="835928">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="791" _type="Insert" date="Tue Feb 23 20:58:27 EST 2021" docASTNodeCount="5926" docActiveCodeLength="33619" docExpressionCount="4094" docLength="35854" length="11" offset="2065" repeat="8" starttimestamp="1614131043210" timestamp="864319" timestamp2="866284">
    <text><![CDATA[
		new csr]]></text>
  </DocumentChange>
  <DocumentChange __id="805" _type="Delete" date="Tue Feb 23 20:58:30 EST 2021" docASTNodeCount="5926" docActiveCodeLength="33618" docExpressionCount="4094" docLength="35853" endLine="59" length="1" offset="2075" startLine="59" starttimestamp="1614131043210" timestamp="866790">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="806" _type="Insert" date="Tue Feb 23 20:58:30 EST 2021" docASTNodeCount="5926" docActiveCodeLength="33622" docExpressionCount="4094" docLength="35857" length="4" offset="2075" repeat="4" starttimestamp="1614131043210" timestamp="866876" timestamp2="867491">
    <text><![CDATA[vrea]]></text>
  </DocumentChange>
  <DocumentChange __id="815" _type="Replace" date="Tue Feb 23 20:58:39 EST 2021" docASTNodeCount="5923" docActiveCodeLength="33587" docExpressionCount="4092" docLength="35822" endLine="58" insertionLength="1" int_docASTNodeCount="5922" int_docActiveCodeLength="33586" int_docExpressionCount="4091" int_docLength="35821" length="36" offset="2027" startLine="58" starttimestamp="1614131043210" timestamp="875880">
    <deletedText><![CDATA[new InputStreamReader(timestampFile)]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="818" _type="Insert" date="Tue Feb 23 20:58:39 EST 2021" docASTNodeCount="5925" docActiveCodeLength="33597" docExpressionCount="4093" docLength="35832" length="10" offset="2028" repeat="10" starttimestamp="1614131043210" timestamp="876063" timestamp2="877992">
    <text><![CDATA[ew filerea]]></text>
  </DocumentChange>
  <DocumentChange __id="834" _type="Replace" date="Tue Feb 23 20:58:47 EST 2021" docASTNodeCount="5925" docActiveCodeLength="33606" docExpressionCount="4093" docLength="35841" endLine="58" insertionLength="10" int_docASTNodeCount="5925" int_docActiveCodeLength="33596" int_docExpressionCount="4093" int_docLength="35831" length="1" offset="2031" startLine="58" starttimestamp="1614131043210" timestamp="884001">
    <deletedText><![CDATA[f]]></deletedText>
    <insertedText><![CDATA[FileReader]]></insertedText>
  </DocumentChange>
  <Command __id="833" _type="PauseCommand" date="Tue Feb 23 20:58:47 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="883990">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[5998]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="832" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:58:47 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="883990" />
  <Command __id="838" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:58:47 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="884093" />
  <Command __id="839" _type="InsertStringCommand" date="Tue Feb 23 20:58:47 EST 2021" starttimestamp="1614131043210" timestamp="884095" timestamp2="884095">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="841" _type="PauseCommand" date="Tue Feb 23 20:58:49 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="886109">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2014]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="840" _type="MoveCaretCommand" caretOffset="2073" date="Tue Feb 23 20:58:49 EST 2021" docOffset="2073" starttimestamp="1614131043210" timestamp="886109" />
  <Command __id="842" _type="SelectTextCommand" caretOffset="2074" date="Tue Feb 23 20:58:49 EST 2021" end="2074" start="2070" starttimestamp="1614131043210" timestamp="886280" />
  <Command __id="844" _type="PauseCommand" date="Tue Feb 23 20:58:50 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="887512">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1232]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="845" _type="InsertStringCommand" date="Tue Feb 23 20:58:50 EST 2021" starttimestamp="1614131043210" timestamp="887521" timestamp2="887521">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="847" _type="InsertStringCommand" date="Tue Feb 23 20:58:50 EST 2021" starttimestamp="1614131043210" timestamp="887531" timestamp2="887531">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="848" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:58:50 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="887573" />
  <Command __id="850" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:58:51 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="888249" />
  <Command __id="852" _type="InsertStringCommand" date="Tue Feb 23 20:58:51 EST 2021" starttimestamp="1614131043210" timestamp="888262" timestamp2="888262">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="853" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 20:58:52 EST 2021" starttimestamp="1614131043210" timestamp="889100" />
  <Command __id="855" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:58:53 EST 2021" starttimestamp="1614131043210" timestamp="889854" />
  <Command __id="857" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 20:58:53 EST 2021" starttimestamp="1614131043210" timestamp="890013" />
  <Command __id="859" _type="PauseCommand" date="Tue Feb 23 20:58:57 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="894590">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4577]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="858" _type="ShellCommand" date="Tue Feb 23 20:58:57 EST 2021" starttimestamp="1614131043210" timestamp="894590" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="860" _type="ShellCommand" date="Tue Feb 23 20:58:57 EST 2021" starttimestamp="1614131043210" timestamp="894685" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="874" _type="PauseCommand" date="Tue Feb 23 20:58:59 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="896525">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1691]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="873" _type="MoveCaretCommand" caretOffset="2050" date="Tue Feb 23 20:58:59 EST 2021" docOffset="2050" starttimestamp="1614131043210" timestamp="896525" />
  <Command __id="875" _type="SelectTextCommand" caretOffset="2059" date="Tue Feb 23 20:58:59 EST 2021" end="2059" start="2050" starttimestamp="1614131043210" timestamp="896690" />
  <Command __id="876" _type="MoveCaretCommand" caretOffset="2050" date="Tue Feb 23 20:59:00 EST 2021" docOffset="2050" starttimestamp="1614131043210" timestamp="896830" />
  <Command __id="877" _type="MoveCaretCommand" caretOffset="2047" date="Tue Feb 23 20:59:00 EST 2021" docOffset="2047" starttimestamp="1614131043210" timestamp="897145" />
  <Command __id="878" _type="SelectTextCommand" caretOffset="2049" date="Tue Feb 23 20:59:00 EST 2021" end="2049" start="2045" starttimestamp="1614131043210" timestamp="897307" />
  <Command __id="879" _type="SelectTextCommand" caretOffset="2063" date="Tue Feb 23 20:59:00 EST 2021" end="2063" start="2018" starttimestamp="1614131043210" timestamp="897439" />
  <Command __id="881" _type="CutCommand" date="Tue Feb 23 20:59:01 EST 2021" starttimestamp="1614131043210" timestamp="897807" />
  <Command __id="882" _type="MoveCaretCommand" caretOffset="2045" date="Tue Feb 23 20:59:01 EST 2021" docOffset="2045" starttimestamp="1614131043210" timestamp="898051" />
  <Command __id="883" _type="MoveCaretCommand" caretOffset="2025" date="Tue Feb 23 20:59:01 EST 2021" docOffset="2025" starttimestamp="1614131043210" timestamp="898481" />
  <Command __id="885" _type="InsertStringCommand" date="Tue Feb 23 20:59:01 EST 2021" starttimestamp="1614131043210" timestamp="898707" timestamp2="898707">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="887" _type="PasteCommand" date="Tue Feb 23 20:59:02 EST 2021" starttimestamp="1614131043210" timestamp="898884" />
  <Command __id="889" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 23 20:59:02 EST 2021" starttimestamp="1614131043210" timestamp="899223" />
  <Command __id="890" _type="MoveCaretCommand" caretOffset="2175" date="Tue Feb 23 20:59:03 EST 2021" docOffset="2175" starttimestamp="1614131043210" timestamp="899908" />
  <Command __id="891" _type="MoveCaretCommand" caretOffset="2136" date="Tue Feb 23 20:59:03 EST 2021" docOffset="2136" starttimestamp="1614131043210" timestamp="900543" />
  <Command __id="893" _type="InsertStringCommand" date="Tue Feb 23 20:59:04 EST 2021" starttimestamp="1614131043210" timestamp="901215" timestamp2="901215">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="895" _type="PauseCommand" date="Tue Feb 23 20:59:06 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="902910">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1695]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="896" _type="InsertStringCommand" date="Tue Feb 23 20:59:06 EST 2021" starttimestamp="1614131043210" timestamp="902914" timestamp2="902914">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="897" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:59:06 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="902956" />
  <Command __id="899" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:59:06 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="903724" />
  <Command __id="901" _type="InsertStringCommand" date="Tue Feb 23 20:59:06 EST 2021" starttimestamp="1614131043210" timestamp="903736" timestamp2="903736">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="902" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:59:06 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="903788" />
  <Command __id="907" _type="PauseCommand" date="Tue Feb 23 20:59:12 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="909461">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[4710]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="906" _type="ShellCommand" date="Tue Feb 23 20:59:12 EST 2021" starttimestamp="1614131043210" timestamp="909461" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="908" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:59:12 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="909526" />
  <Command __id="910" _type="PauseCommand" date="Tue Feb 23 20:59:16 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="913134">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3608]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="909" _type="ShellCommand" date="Tue Feb 23 20:59:16 EST 2021" starttimestamp="1614131043210" timestamp="913134" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="912" _type="PauseCommand" date="Tue Feb 23 20:59:19 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="916249">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3115]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="911" _type="ShellCommand" date="Tue Feb 23 20:59:19 EST 2021" starttimestamp="1614131043210" timestamp="916249" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="914" _type="PauseCommand" date="Tue Feb 23 20:59:35 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="932473">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16224]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="913" _type="ShellCommand" date="Tue Feb 23 20:59:35 EST 2021" starttimestamp="1614131043210" timestamp="932473" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="916" _type="PauseCommand" date="Tue Feb 23 20:59:36 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="933683">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1210]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="915" _type="MoveCaretCommand" caretOffset="2147" date="Tue Feb 23 20:59:36 EST 2021" docOffset="2147" starttimestamp="1614131043210" timestamp="933683" />
  <Command __id="918" _type="PauseCommand" date="Tue Feb 23 20:59:38 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="935308">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1625]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="917" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 20:59:38 EST 2021" starttimestamp="1614131043210" timestamp="935308" />
  <Command __id="919" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 20:59:38 EST 2021" starttimestamp="1614131043210" timestamp="935617" />
  <Command __id="920" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 20:59:39 EST 2021" starttimestamp="1614131043210" timestamp="936145" />
  <Command __id="921" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 20:59:39 EST 2021" starttimestamp="1614131043210" timestamp="936414" />
  <Command __id="923" _type="PauseCommand" date="Tue Feb 23 20:59:46 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="943175">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6761]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="922" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 20:59:46 EST 2021" starttimestamp="1614131043210" timestamp="943175" />
  <Command __id="925" _type="PauseCommand" date="Tue Feb 23 20:59:48 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="944814">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1639]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="926" _type="InsertStringCommand" date="Tue Feb 23 20:59:48 EST 2021" starttimestamp="1614131043210" timestamp="944821" timestamp2="944821">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="927" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 20:59:48 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="944860" />
  <Command __id="931" _type="PauseCommand" date="Tue Feb 23 20:59:59 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="956699">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[11536]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="930" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 20:59:59 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="956699" />
  <Command __id="933" _type="InsertStringCommand" date="Tue Feb 23 20:59:59 EST 2021" starttimestamp="1614131043210" timestamp="956715" timestamp2="956715">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="935" _type="PauseCommand" date="Tue Feb 23 21:00:01 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="958268">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1553]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="936" _type="InsertStringCommand" date="Tue Feb 23 21:00:01 EST 2021" starttimestamp="1614131043210" timestamp="958274" timestamp2="958274">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="937" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineStart" date="Tue Feb 23 21:00:02 EST 2021" starttimestamp="1614131043210" timestamp="959064" />
  <DocumentChange __id="835" _type="Insert" date="Tue Feb 23 20:58:47 EST 2021" docASTNodeCount="5931" docActiveCodeLength="33634" docExpressionCount="4098" docLength="35869" length="28" offset="104" repeat="2" starttimestamp="1614131043210" timestamp="884016" timestamp2="884025">
    <text><![CDATA[
import java.io.FileReader;]]></text>
  </DocumentChange>
  <DocumentChange __id="837" _type="Replace" date="Tue Feb 23 20:58:47 EST 2021" docASTNodeCount="5932" docActiveCodeLength="33634" docExpressionCount="4099" docLength="35869" endLine="59" insertionLength="6" int_docASTNodeCount="5931" int_docActiveCodeLength="33628" int_docExpressionCount="4098" int_docLength="35863" length="6" offset="2069" startLine="59" starttimestamp="1614131043210" timestamp="884033">
    <deletedText><![CDATA[ilerea]]></deletedText>
    <insertedText><![CDATA[(file)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="843" _type="Replace" date="Tue Feb 23 20:58:50 EST 2021" docASTNodeCount="5932" docActiveCodeLength="33631" docExpressionCount="4099" docLength="35866" endLine="59" insertionLength="1" int_docASTNodeCount="5931" int_docActiveCodeLength="33630" int_docExpressionCount="4098" int_docLength="35865" length="4" offset="2070" startLine="59" starttimestamp="1614131043210" timestamp="887512">
    <deletedText><![CDATA[file]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="846" _type="Insert" date="Tue Feb 23 20:58:50 EST 2021" docASTNodeCount="5932" docActiveCodeLength="33633" docExpressionCount="4099" docLength="35868" length="2" offset="2071" repeat="2" starttimestamp="1614131043210" timestamp="887526" timestamp2="887687">
    <text><![CDATA[im]]></text>
  </DocumentChange>
  <DocumentChange __id="851" _type="Replace" date="Tue Feb 23 20:58:51 EST 2021" docASTNodeCount="5932" docActiveCodeLength="33643" docExpressionCount="4099" docLength="35878" endLine="59" insertionLength="13" int_docASTNodeCount="5931" int_docActiveCodeLength="33630" int_docExpressionCount="4098" int_docLength="35865" length="3" offset="2070" startLine="59" starttimestamp="1614131043210" timestamp="888257">
    <deletedText><![CDATA[tim]]></deletedText>
    <insertedText><![CDATA[timestampFile]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="854" _type="Delete" date="Tue Feb 23 20:58:53 EST 2021" docASTNodeCount="5928" docActiveCodeLength="33633" docExpressionCount="4097" docLength="35868" endLine="60" length="10" offset="2090" repeat="2" startLine="60" starttimestamp="1614131043210" timestamp="889850" timestamp2="890010">
    <text><![CDATA[new csvrea]]></text>
  </DocumentChange>
  <DocumentChange __id="861" _type="Delete" date="Tue Feb 23 20:58:57 EST 2021" docASTNodeCount="5916" docActiveCodeLength="33573" docExpressionCount="4090" docLength="35808" endLine="59" length="60" offset="2026" startLine="59" starttimestamp="1614131043210" timestamp="894762">
    <text><![CDATA[CSVReader cr = new CSVReader(new FileReader(timestampFile));]]></text>
  </DocumentChange>
  <DocumentChange __id="862" _type="Insert" date="Tue Feb 23 20:58:57 EST 2021" docASTNodeCount="5940" docActiveCodeLength="33717" docExpressionCount="4102" docLength="35986" length="178" offset="2026" repeat="9" starttimestamp="1614131043210" timestamp="894768" timestamp2="894827">
    <text><![CDATA[try {
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="871" _type="Insert" date="Tue Feb 23 20:58:58 EST 2021" docASTNodeCount="5946" docActiveCodeLength="33756" docExpressionCount="4107" docLength="36025" length="39" offset="104" repeat="2" starttimestamp="1614131043210" timestamp="894831" timestamp2="894834">
    <text><![CDATA[
import java.io.FileNotFoundException;]]></text>
  </DocumentChange>
  <DocumentChange __id="880" _type="Delete" date="Tue Feb 23 20:59:01 EST 2021" docASTNodeCount="5937" docActiveCodeLength="33711" docExpressionCount="4102" docLength="35980" endLine="60" length="45" offset="2018" startLine="59" starttimestamp="1614131043210" timestamp="897794">
    <text><![CDATA[		File timestampFile = new File(TIMESTAMP);
]]></text>
  </DocumentChange>
  <DocumentChange __id="884" _type="Insert" date="Tue Feb 23 20:59:01 EST 2021" docASTNodeCount="5937" docActiveCodeLength="33716" docExpressionCount="4102" docLength="35985" length="5" offset="2025" starttimestamp="1614131043210" timestamp="898697">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="886" _type="Replace" date="Tue Feb 23 20:59:02 EST 2021" docASTNodeCount="5946" docActiveCodeLength="33759" docExpressionCount="4107" docLength="36028" endLine="60" insertionLength="46" int_docASTNodeCount="5937" int_docActiveCodeLength="33713" int_docExpressionCount="4102" int_docLength="35982" length="3" offset="2027" startLine="60" starttimestamp="1614131043210" timestamp="898876">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			File timestampFile = new File(TIMESTAMP);
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="888" _type="Delete" date="Tue Feb 23 20:59:02 EST 2021" docASTNodeCount="5946" docActiveCodeLength="33757" docExpressionCount="4107" docLength="36026" endLine="62" length="2" offset="2073" startLine="61" starttimestamp="1614131043210" timestamp="899221">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="892" _type="Insert" date="Tue Feb 23 20:59:04 EST 2021" docASTNodeCount="5948" docActiveCodeLength="33764" docExpressionCount="4108" docLength="36033" length="7" offset="2136" repeat="3" starttimestamp="1614131043210" timestamp="901207" timestamp2="903527">
    <text><![CDATA[
			cr]]></text>
  </DocumentChange>
  <DocumentChange __id="900" _type="Replace" date="Tue Feb 23 20:59:06 EST 2021" docASTNodeCount="5946" docActiveCodeLength="33765" docExpressionCount="4107" docLength="36034" endLine="62" insertionLength="3" int_docASTNodeCount="5946" int_docActiveCodeLength="33762" int_docExpressionCount="4107" int_docLength="36031" length="2" offset="2141" startLine="62" starttimestamp="1614131043210" timestamp="903731">
    <deletedText><![CDATA[cr]]></deletedText>
    <insertedText><![CDATA[cr.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="903" _type="Insert" date="Tue Feb 23 20:59:07 EST 2021" docASTNodeCount="5950" docActiveCodeLength="33768" docExpressionCount="4110" docLength="36037" length="3" offset="2144" repeat="3" starttimestamp="1614131043210" timestamp="904622" timestamp2="904751">
    <text><![CDATA[rea]]></text>
  </DocumentChange>
  <DocumentChange __id="924" _type="Insert" date="Tue Feb 23 20:59:48 EST 2021" docASTNodeCount="5950" docActiveCodeLength="33769" docExpressionCount="4110" docLength="36038" length="1" offset="2147" starttimestamp="1614131043210" timestamp="944814">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="928" _type="Delete" date="Tue Feb 23 20:59:48 EST 2021" docASTNodeCount="5950" docActiveCodeLength="33768" docExpressionCount="4110" docLength="36037" endLine="62" length="1" offset="2147" startLine="62" starttimestamp="1614131043210" timestamp="945103">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="929" _type="Insert" date="Tue Feb 23 20:59:48 EST 2021" docASTNodeCount="5950" docActiveCodeLength="33769" docExpressionCount="4110" docLength="36038" length="1" offset="2147" starttimestamp="1614131043210" timestamp="945163">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="932" _type="Replace" date="Tue Feb 23 20:59:59 EST 2021" docASTNodeCount="5950" docActiveCodeLength="33774" docExpressionCount="4110" docLength="36043" endLine="62" insertionLength="9" int_docASTNodeCount="5946" int_docActiveCodeLength="33765" int_docExpressionCount="4107" int_docLength="36034" length="4" offset="2144" startLine="62" starttimestamp="1614131043210" timestamp="956707">
    <deletedText><![CDATA[read]]></deletedText>
    <insertedText><![CDATA[readAll()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="934" _type="Insert" date="Tue Feb 23 21:00:01 EST 2021" docASTNodeCount="5950" docActiveCodeLength="33775" docExpressionCount="4110" docLength="36044" length="1" offset="2153" starttimestamp="1614131043210" timestamp="958268">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="938" _type="Insert" date="Tue Feb 23 21:00:04 EST 2021" docASTNodeCount="5950" docActiveCodeLength="33779" docExpressionCount="4110" docLength="36048" length="4" offset="2141" repeat="4" starttimestamp="1614131043210" timestamp="961192" timestamp2="961603">
    <text><![CDATA[List]]></text>
  </DocumentChange>
  <DocumentChange __id="947" _type="Replace" date="Tue Feb 23 21:00:05 EST 2021" docASTNodeCount="5957" docActiveCodeLength="33782" docExpressionCount="4112" docLength="36051" endLine="62" insertionLength="7" int_docASTNodeCount="5950" int_docActiveCodeLength="33775" int_docExpressionCount="4110" int_docLength="36044" length="4" offset="2141" startLine="62" starttimestamp="1614131043210" timestamp="962225">
    <deletedText><![CDATA[List]]></deletedText>
    <insertedText><![CDATA[List<E>]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="949" _type="Replace" date="Tue Feb 23 21:00:06 EST 2021" docASTNodeCount="5957" docActiveCodeLength="33782" docExpressionCount="4112" docLength="36051" endLine="62" insertionLength="1" int_docASTNodeCount="5955" int_docActiveCodeLength="33781" int_docExpressionCount="4111" int_docLength="36050" length="1" offset="2146" startLine="62" starttimestamp="1614131043210" timestamp="962847">
    <deletedText><![CDATA[E]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <Command __id="939" _type="PauseCommand" date="Tue Feb 23 21:00:04 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="961192">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2128]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="940" _type="InsertStringCommand" date="Tue Feb 23 21:00:04 EST 2021" starttimestamp="1614131043210" timestamp="961197" timestamp2="961197">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="942" _type="InsertStringCommand" date="Tue Feb 23 21:00:04 EST 2021" starttimestamp="1614131043210" timestamp="961396" timestamp2="961396">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="943" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:00:04 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="961440" />
  <Command __id="946" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:00:05 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="962218" />
  <Command __id="948" _type="InsertStringCommand" date="Tue Feb 23 21:00:05 EST 2021" starttimestamp="1614131043210" timestamp="962252" timestamp2="962252">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="950" _type="InsertStringCommand" date="Tue Feb 23 21:00:06 EST 2021" starttimestamp="1614131043210" timestamp="962853" timestamp2="962853">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="951" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:00:06 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="962940" />
  <Command __id="954" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:00:06 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="963319" />
  <Command __id="956" _type="InsertStringCommand" date="Tue Feb 23 21:00:06 EST 2021" starttimestamp="1614131043210" timestamp="963332" timestamp2="963332">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="958" _type="InsertStringCommand" date="Tue Feb 23 21:00:07 EST 2021" starttimestamp="1614131043210" timestamp="963863" timestamp2="963863">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="959" _type="InsertStringCommand" date="Tue Feb 23 21:00:07 EST 2021" starttimestamp="1614131043210" timestamp="963916" timestamp2="963916">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="960" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:00:07 EST 2021" starttimestamp="1614131043210" timestamp="964394" />
  <Command __id="962" _type="InsertStringCommand" date="Tue Feb 23 21:00:07 EST 2021" starttimestamp="1614131043210" timestamp="964675" timestamp2="964675">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="964" _type="PauseCommand" date="Tue Feb 23 21:00:10 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="967683">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3008]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="965" _type="InsertStringCommand" date="Tue Feb 23 21:00:10 EST 2021" starttimestamp="1614131043210" timestamp="967687" timestamp2="967687">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="966" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:00:10 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="967780" />
  <Command __id="969" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:00:11 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="968022" />
  <Command __id="971" _type="InsertStringCommand" date="Tue Feb 23 21:00:11 EST 2021" starttimestamp="1614131043210" timestamp="968088" timestamp2="968088">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="973" _type="InsertStringCommand" date="Tue Feb 23 21:00:11 EST 2021" starttimestamp="1614131043210" timestamp="968160" timestamp2="968160">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="974" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:00:11 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="968202" />
  <Command __id="975" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:00:11 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="968219" />
  <Command __id="977" _type="InsertStringCommand" date="Tue Feb 23 21:00:11 EST 2021" starttimestamp="1614131043210" timestamp="968291" timestamp2="968291">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="978" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:00:11 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="968384" />
  <Command __id="979" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:00:11 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="968401" />
  <Command __id="981" _type="InsertStringCommand" date="Tue Feb 23 21:00:11 EST 2021" starttimestamp="1614131043210" timestamp="968464" timestamp2="968464">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="983" _type="InsertStringCommand" date="Tue Feb 23 21:00:11 EST 2021" starttimestamp="1614131043210" timestamp="968663" timestamp2="968663">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="985" _type="InsertStringCommand" date="Tue Feb 23 21:00:11 EST 2021" starttimestamp="1614131043210" timestamp="968765" timestamp2="968765">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="987" _type="PauseCommand" date="Tue Feb 23 21:00:13 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="970437">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1672]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="986" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:00:13 EST 2021" starttimestamp="1614131043210" timestamp="970437" />
  <Command __id="989" _type="PauseCommand" date="Tue Feb 23 21:00:20 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="977523">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7086]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="988" _type="ShellCommand" date="Tue Feb 23 21:00:20 EST 2021" starttimestamp="1614131043210" timestamp="977523" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="990" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:00:20 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="977585" />
  <Command __id="991" _type="ShellCommand" date="Tue Feb 23 21:00:20 EST 2021" starttimestamp="1614131043210" timestamp="977645" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1000" _type="MoveCaretCommand" caretOffset="2281" date="Tue Feb 23 21:00:21 EST 2021" docOffset="2281" starttimestamp="1614131043210" timestamp="978417" />
  <Command __id="1002" _type="PauseCommand" date="Tue Feb 23 21:00:23 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="980759">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2342]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1001" _type="MoveCaretCommand" caretOffset="2178" date="Tue Feb 23 21:00:23 EST 2021" docOffset="2178" starttimestamp="1614131043210" timestamp="980759" />
  <Command __id="1004" _type="PauseCommand" date="Tue Feb 23 21:00:26 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="983160">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2401]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1005" _type="InsertStringCommand" date="Tue Feb 23 21:00:26 EST 2021" starttimestamp="1614131043210" timestamp="983169" timestamp2="983169">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1007" _type="InsertStringCommand" date="Tue Feb 23 21:00:26 EST 2021" starttimestamp="1614131043210" timestamp="983456" timestamp2="983456">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1008" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:00:26 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="983499" />
  <Command __id="1013" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:00:27 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="983952" />
  <Command __id="1015" _type="InsertStringCommand" date="Tue Feb 23 21:00:27 EST 2021" starttimestamp="1614131043210" timestamp="983977" timestamp2="983977">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1017" _type="InsertStringCommand" date="Tue Feb 23 21:00:27 EST 2021" starttimestamp="1614131043210" timestamp="984424" timestamp2="984424">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1019" _type="InsertStringCommand" date="Tue Feb 23 21:00:27 EST 2021" starttimestamp="1614131043210" timestamp="984461" timestamp2="984461">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1020" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:00:27 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="984504" />
  <Command __id="1021" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:00:27 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="984787" />
  <Command __id="1023" _type="InsertStringCommand" date="Tue Feb 23 21:00:28 EST 2021" starttimestamp="1614131043210" timestamp="984798" timestamp2="984798">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1038" _type="PauseCommand" date="Tue Feb 23 21:00:31 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="988305">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1115]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1037" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:00:31 EST 2021" starttimestamp="1614131043210" timestamp="988305" />
  <Command __id="1039" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:00:31 EST 2021" starttimestamp="1614131043210" timestamp="988343" />
  <Command __id="1040" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:00:32 EST 2021" starttimestamp="1614131043210" timestamp="988995" />
  <Command __id="1042" _type="PauseCommand" date="Tue Feb 23 21:00:35 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="991901">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2906]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1043" _type="MoveCaretCommand" caretOffset="1580" date="Tue Feb 23 21:00:35 EST 2021" docOffset="1877" starttimestamp="1614131043210" timestamp="992076" />
  <Command __id="1045" _type="PauseCommand" date="Tue Feb 23 21:00:37 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="994261">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2185]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1044" _type="SelectTextCommand" caretOffset="1569" date="Tue Feb 23 21:00:37 EST 2021" end="1569" start="1518" starttimestamp="1614131043210" timestamp="994261" />
  <Command __id="1048" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:00:38 EST 2021" starttimestamp="1614131043210" timestamp="994918" />
  <Command __id="1050" _type="PauseCommand" date="Tue Feb 23 21:00:42 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="998893">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3975]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1049" _type="MoveCaretCommand" caretOffset="631" date="Tue Feb 23 21:00:42 EST 2021" docOffset="928" starttimestamp="1614131043210" timestamp="998893" />
  <Command __id="1052" _type="PauseCommand" date="Tue Feb 23 21:00:45 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1001851">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2958]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1051" _type="MoveCaretCommand" caretOffset="602" date="Tue Feb 23 21:00:45 EST 2021" docOffset="899" starttimestamp="1614131043210" timestamp="1001851" />
  <Command __id="1054" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:00:45 EST 2021" starttimestamp="1614131043210" timestamp="1002488" />
  <Command __id="1056" _type="PauseCommand" date="Tue Feb 23 21:00:47 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1004102">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1614]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1055" _type="MoveCaretCommand" caretOffset="820" date="Tue Feb 23 21:00:47 EST 2021" docOffset="1117" starttimestamp="1614131043210" timestamp="1004102" />
  <Command __id="1058" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:00:48 EST 2021" starttimestamp="1614131043210" timestamp="1005045" />
  <Command __id="1060" _type="PauseCommand" date="Tue Feb 23 21:00:53 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1010343">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5297]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1059" _type="MoveCaretCommand" caretOffset="1103" date="Tue Feb 23 21:00:53 EST 2021" docOffset="1400" starttimestamp="1614131043210" timestamp="1010342" />
  <Command __id="1062" _type="PauseCommand" date="Tue Feb 23 21:00:55 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1012552">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2210]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1063" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:00:55 EST 2021" starttimestamp="1614131043210" timestamp="1012570" />
  <Command __id="1065" _type="PauseCommand" date="Tue Feb 23 21:01:00 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1017604">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5034]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1066" _type="MoveCaretCommand" caretOffset="2208" date="Tue Feb 23 21:01:00 EST 2021" docOffset="2208" starttimestamp="1614131043210" timestamp="1017743" />
  <Command __id="1068" _type="MoveCaretCommand" caretOffset="1101" date="Tue Feb 23 21:01:01 EST 2021" docOffset="1398" starttimestamp="1614131043210" timestamp="1018484" />
  <Command __id="1070" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:01:02 EST 2021" starttimestamp="1614131043210" timestamp="1019150" />
  <Command __id="1072" _type="PauseCommand" date="Tue Feb 23 21:01:04 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1021785">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2635]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1071" _type="MoveCaretCommand" caretOffset="1041" date="Tue Feb 23 21:01:04 EST 2021" docOffset="1338" starttimestamp="1614131043210" timestamp="1021785" />
  <Command __id="1073" _type="MoveCaretCommand" caretOffset="1137" date="Tue Feb 23 21:01:05 EST 2021" docOffset="1434" starttimestamp="1614131043210" timestamp="1022254" />
  <Command __id="1075" _type="PauseCommand" date="Tue Feb 23 21:01:06 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1023547">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1293]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1074" _type="MoveCaretCommand" caretOffset="1144" date="Tue Feb 23 21:01:06 EST 2021" docOffset="1441" starttimestamp="1614131043210" timestamp="1023547" />
  <Command __id="1076" _type="MoveCaretCommand" caretOffset="1087" date="Tue Feb 23 21:01:07 EST 2021" docOffset="1384" starttimestamp="1614131043210" timestamp="1023917" />
  <DocumentChange __id="952" _type="Insert" date="Tue Feb 23 21:00:06 EST 2021" docASTNodeCount="5957" docActiveCodeLength="33784" docExpressionCount="4112" docLength="36053" length="2" offset="2147" repeat="2" starttimestamp="1614131043210" timestamp="963129" timestamp2="963146">
    <text><![CDATA[tr]]></text>
  </DocumentChange>
  <DocumentChange __id="955" _type="Replace" date="Tue Feb 23 21:00:06 EST 2021" docASTNodeCount="5957" docActiveCodeLength="33787" docExpressionCount="4112" docLength="36056" endLine="62" insertionLength="6" int_docASTNodeCount="5955" int_docActiveCodeLength="33781" int_docExpressionCount="4111" int_docLength="36050" length="3" offset="2146" startLine="62" starttimestamp="1614131043210" timestamp="963326">
    <deletedText><![CDATA[str]]></deletedText>
    <insertedText><![CDATA[String]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="957" _type="Insert" date="Tue Feb 23 21:00:07 EST 2021" docASTNodeCount="5958" docActiveCodeLength="33789" docExpressionCount="4112" docLength="36058" length="2" offset="2152" starttimestamp="1614131043210" timestamp="963858">
    <text><![CDATA[[]]]></text>
  </DocumentChange>
  <DocumentChange __id="961" _type="Insert" date="Tue Feb 23 21:00:07 EST 2021" docASTNodeCount="5958" docActiveCodeLength="33790" docExpressionCount="4112" docLength="36059" length="1" offset="2155" starttimestamp="1614131043210" timestamp="964669">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="963" _type="Insert" date="Tue Feb 23 21:00:10 EST 2021" docASTNodeCount="5958" docActiveCodeLength="33799" docExpressionCount="4113" docLength="36068" length="9" offset="2156" repeat="9" starttimestamp="1614131043210" timestamp="967683" timestamp2="968761">
    <text><![CDATA[tokens = ]]></text>
  </DocumentChange>
  <DocumentChange __id="992" _type="Insert" date="Tue Feb 23 21:00:20 EST 2021" docASTNodeCount="5968" docActiveCodeLength="33858" docExpressionCount="4118" docLength="36161" length="93" offset="2286" repeat="8" starttimestamp="1614131043210" timestamp="977667" timestamp2="977693">
    <text><![CDATA[ catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="1003" _type="Insert" date="Tue Feb 23 21:00:26 EST 2021" docASTNodeCount="5970" docActiveCodeLength="33868" docExpressionCount="4119" docLength="36171" length="10" offset="2178" repeat="6" starttimestamp="1614131043210" timestamp="983160" timestamp2="983789">
    <text><![CDATA[
			sysou]]></text>
  </DocumentChange>
  <DocumentChange __id="1014" _type="Replace" date="Tue Feb 23 21:00:27 EST 2021" docASTNodeCount="5974" docActiveCodeLength="33884" docExpressionCount="4123" docLength="36187" endLine="63" insertionLength="21" int_docASTNodeCount="5968" int_docActiveCodeLength="33863" int_docExpressionCount="4118" int_docLength="36166" length="5" offset="2183" startLine="63" starttimestamp="1614131043210" timestamp="983969">
    <deletedText><![CDATA[sysou]]></deletedText>
    <insertedText><![CDATA[System.out.println();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1016" _type="Insert" date="Tue Feb 23 21:00:27 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33886" docExpressionCount="4124" docLength="36189" length="2" offset="2202" repeat="2" starttimestamp="1614131043210" timestamp="984421" timestamp2="984459">
    <text><![CDATA[to]]></text>
  </DocumentChange>
  <DocumentChange __id="1022" _type="Replace" date="Tue Feb 23 21:00:28 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33907" docExpressionCount="4124" docLength="36210" endLine="63" insertionLength="23" int_docASTNodeCount="5974" int_docActiveCodeLength="33884" int_docExpressionCount="4123" int_docLength="36187" length="2" offset="2202" startLine="63" starttimestamp="1614131043210" timestamp="984793">
    <deletedText><![CDATA[to]]></deletedText>
    <insertedText><![CDATA[totalCorrectPredictions]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1024" _type="Replace" date="Tue Feb 23 21:00:29 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33886" docExpressionCount="4124" docLength="36189" endLine="63" insertionLength="2" int_docASTNodeCount="5974" int_docActiveCodeLength="33884" int_docExpressionCount="4123" int_docLength="36187" length="23" offset="2202" startLine="63" starttimestamp="1614131043210" timestamp="986006">
    <deletedText><![CDATA[totalCorrectPredictions]]></deletedText>
    <insertedText><![CDATA[to]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1026" _type="Delete" date="Tue Feb 23 21:00:29 EST 2021" docASTNodeCount="5974" docActiveCodeLength="33884" docExpressionCount="4123" docLength="36187" endLine="63" length="2" offset="2202" startLine="63" starttimestamp="1614131043210" timestamp="986011">
    <text><![CDATA[to]]></text>
  </DocumentChange>
  <DocumentChange __id="1028" _type="Insert" date="Tue Feb 23 21:00:29 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33888" docExpressionCount="4124" docLength="36191" length="4" offset="2202" repeat="4" starttimestamp="1614131043210" timestamp="986535" timestamp2="986811">
    <text><![CDATA[toke]]></text>
  </DocumentChange>
  <DocumentChange __id="1035" _type="Replace" date="Tue Feb 23 21:00:30 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33890" docExpressionCount="4124" docLength="36193" endLine="63" insertionLength="6" int_docASTNodeCount="5974" int_docActiveCodeLength="33884" int_docExpressionCount="4123" int_docLength="36187" length="4" offset="2202" startLine="63" starttimestamp="1614131043210" timestamp="987184">
    <deletedText><![CDATA[toke]]></deletedText>
    <insertedText><![CDATA[tokens]]></insertedText>
  </DocumentChange>
  <Command __id="1041" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:00:35 EST 2021" docASTNodeCount="142" docActiveCodeLength="1079" docExpressionCount="84" docLength="2779" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="991901">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";
	
	public static void main(String[] args) {
//		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
//		replayer = new AExperimentalReplayer(analyzer);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);
//		System.out.println(s1.equals(s2));
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
		Date d = new Date(1379180409552L+4869423L);
		System.out.println(d);
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <DocumentChange __id="1046" _type="Insert" date="Tue Feb 23 21:00:38 EST 2021" docASTNodeCount="131" docActiveCodeLength="1034" docExpressionCount="77" docLength="2781" length="2" offset="1802" starttimestamp="1614131043210" timestamp="994901">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1047" _type="Insert" date="Tue Feb 23 21:00:38 EST 2021" docASTNodeCount="124" docActiveCodeLength="1010" docExpressionCount="71" docLength="2783" length="2" offset="1851" starttimestamp="1614131043210" timestamp="994902">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1053" _type="Delete" date="Tue Feb 23 21:00:45 EST 2021" docASTNodeCount="130" docActiveCodeLength="1040" docExpressionCount="75" docLength="2781" endLine="25" length="2" offset="884" startLine="25" starttimestamp="1614131043210" timestamp="1002461">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1057" _type="Delete" date="Tue Feb 23 21:00:48 EST 2021" docASTNodeCount="137" docActiveCodeLength="1089" docExpressionCount="80" docLength="2779" endLine="30" length="2" offset="1104" startLine="30" starttimestamp="1614131043210" timestamp="1005030">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1061" _type="Delete" date="Tue Feb 23 21:00:55 EST 2021" docASTNodeCount="142" docActiveCodeLength="1152" docExpressionCount="84" docLength="2777" endLine="35" length="2" offset="1386" startLine="35" starttimestamp="1614131043210" timestamp="1012552">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1064" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:01:00 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33890" docExpressionCount="4124" docLength="36193" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1017604">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶"), Diff(INSERT,"import java.io.FileNotFoundException;¶import java.io.FileReader;¶"), Diff(EQUAL,"import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;"), Diff(INSERT,"¶import jdk.internal.jline.internal.InputStreamReader;"), Diff(EQUAL,"¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "timestamp for each participant.csv";¶	private Map<String, List<Long>> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	private void readTimestamp() {¶		"), Diff(DELETE,"CSVReader"), Diff(INSERT,"try {¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		"), Diff(EQUAL,"¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "timestamp for each participant.csv";
	private Map<String, List<Long>> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	private void readTimestamp() {
		try {
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			List<String[]> tokens = cr.readAll();
			System.out.println(tokens);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <Command __id="1067" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:01:01 EST 2021" docASTNodeCount="142" docActiveCodeLength="1152" docExpressionCount="84" docLength="2777" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1018336">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶"), Diff(DELETE,"//"), Diff(EQUAL,"		analyzer = new AnAnalyzer();¶"), Diff(INSERT,""), Diff(EQUAL,"//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		replayer = new AExperimentalReplayer(analyzer);¶"), Diff(INSERT,""), Diff(EQUAL,"//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶"), Diff(DELETE,"//"), Diff(EQUAL,"		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶"), Diff(INSERT,""), Diff(EQUAL,"//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶"), Diff(INSERT,"//"), Diff(EQUAL,"		Date d = new Date(1379180409552L+4869423L);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);
//		System.out.println(s1.equals(s2));
//		analyzer.addAnalyzerListener(replayer);	
		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
//		Date d = new Date(1379180409552L+4869423L);
//		System.out.println(d);
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <DocumentChange __id="1069" _type="Insert" date="Tue Feb 23 21:01:02 EST 2021" docASTNodeCount="137" docActiveCodeLength="1089" docExpressionCount="80" docLength="2779" length="2" offset="1386" starttimestamp="1614131043210" timestamp="1019134">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1077" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:01:08 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33890" docExpressionCount="4124" docLength="36193" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1025004">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "timestamp for each participant.csv";¶	private Map<String, List<Long>> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	private void readTimestamp() {¶		try {¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1078" _type="PauseCommand" date="Tue Feb 23 21:01:08 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1025004">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1087]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1079" _type="MoveCaretCommand" caretOffset="2208" date="Tue Feb 23 21:01:08 EST 2021" docOffset="2208" starttimestamp="1614131043210" timestamp="1025155" />
  <Command __id="1080" _type="MoveCaretCommand" caretOffset="1989" date="Tue Feb 23 21:01:09 EST 2021" docOffset="1989" starttimestamp="1614131043210" timestamp="1025951" />
  <Command __id="1081" _type="SelectTextCommand" caretOffset="1993" date="Tue Feb 23 21:01:09 EST 2021" end="1993" start="1986" starttimestamp="1614131043210" timestamp="1026108" />
  <Command __id="1083" _type="InsertStringCommand" date="Tue Feb 23 21:01:09 EST 2021" starttimestamp="1614131043210" timestamp="1026774" timestamp2="1026774">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1084" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:01:10 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1026830" />
  <Command __id="1091" _type="PauseCommand" date="Tue Feb 23 21:01:12 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1029022">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1820]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1092" _type="MoveCaretCommand" caretOffset="1087" date="Tue Feb 23 21:01:12 EST 2021" docOffset="1384" starttimestamp="1614131043210" timestamp="1029160" />
  <Command __id="1094" _type="PauseCommand" date="Tue Feb 23 21:01:14 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1031206">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2046]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1093" _type="MoveCaretCommand" caretOffset="856" date="Tue Feb 23 21:01:14 EST 2021" docOffset="1153" starttimestamp="1614131043210" timestamp="1031206" />
  <Command __id="1096" _type="PauseCommand" date="Tue Feb 23 21:01:17 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1034259">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3053]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1095" _type="SelectTextCommand" caretOffset="862" date="Tue Feb 23 21:01:17 EST 2021" end="928" start="862" starttimestamp="1614131043210" timestamp="1034259" />
  <Command __id="1097" _type="CopyCommand" date="Tue Feb 23 21:01:17 EST 2021" starttimestamp="1614131043210" timestamp="1034575" />
  <Command __id="1098" _type="MoveCaretCommand" caretOffset="856" date="Tue Feb 23 21:01:18 EST 2021" docOffset="1153" starttimestamp="1614131043210" timestamp="1034975" />
  <Command __id="1099" _type="MoveCaretCommand" caretOffset="1041" date="Tue Feb 23 21:01:18 EST 2021" docOffset="1338" starttimestamp="1614131043210" timestamp="1035383" />
  <Command __id="1100" _type="MoveCaretCommand" caretOffset="856" date="Tue Feb 23 21:01:19 EST 2021" docOffset="1153" starttimestamp="1614131043210" timestamp="1035939" />
  <Command __id="1103" _type="PasteCommand" date="Tue Feb 23 21:01:19 EST 2021" starttimestamp="1614131043210" timestamp="1036330" />
  <Command __id="1105" _type="PauseCommand" date="Tue Feb 23 21:01:21 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1038300">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1970]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1104" _type="SelectTextCommand" caretOffset="872" date="Tue Feb 23 21:01:21 EST 2021" end="872" start="860" starttimestamp="1614131043210" timestamp="1038300" />
  <Command __id="1107" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:01:22 EST 2021" starttimestamp="1614131043210" timestamp="1039417" />
  <Command __id="1109" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:01:23 EST 2021" starttimestamp="1614131043210" timestamp="1039806" />
  <Command __id="1111" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:01:23 EST 2021" starttimestamp="1614131043210" timestamp="1039937" />
  <Command __id="1113" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:01:23 EST 2021" starttimestamp="1614131043210" timestamp="1040209" />
  <Command __id="1115" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:01:23 EST 2021" starttimestamp="1614131043210" timestamp="1040456" />
  <Command __id="1117" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:01:23 EST 2021" starttimestamp="1614131043210" timestamp="1040765" />
  <Command __id="1119" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:01:24 EST 2021" starttimestamp="1614131043210" timestamp="1041171" />
  <Command __id="1121" _type="PauseCommand" date="Tue Feb 23 21:01:26 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1042923">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1752]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1122" _type="MoveCaretCommand" caretOffset="1992" date="Tue Feb 23 21:01:26 EST 2021" docOffset="1992" starttimestamp="1614131043210" timestamp="1043089" />
  <Command __id="1123" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:01:27 EST 2021" starttimestamp="1614131043210" timestamp="1043974" />
  <Command __id="1124" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:01:27 EST 2021" starttimestamp="1614131043210" timestamp="1043983" />
  <Command __id="1125" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:01:27 EST 2021" starttimestamp="1614131043210" timestamp="1044102" />
  <Command __id="1127" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:01:28 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1045091" />
  <Command __id="1129" _type="UndoCommand" date="Tue Feb 23 21:01:29 EST 2021" starttimestamp="1614131043210" timestamp="1045859" />
  <Command __id="1131" _type="PauseCommand" date="Tue Feb 23 21:01:30 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1047621">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1762]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1130" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:01:30 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1047621" />
  <Command __id="1133" _type="RedoCommand" date="Tue Feb 23 21:01:31 EST 2021" starttimestamp="1614131043210" timestamp="1048473" />
  <Command __id="1135" _type="PauseCommand" date="Tue Feb 23 21:01:32 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1049645">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RedoCommand]]></prev>
    <pause><![CDATA[1172]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1134" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:01:32 EST 2021" starttimestamp="1614131043210" timestamp="1049645" />
  <Command __id="1137" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:01:33 EST 2021" starttimestamp="1614131043210" timestamp="1049995" />
  <Command __id="1139" _type="PauseCommand" date="Tue Feb 23 21:01:34 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1051613">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1618]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1138" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:01:34 EST 2021" starttimestamp="1614131043210" timestamp="1051613" />
  <Command __id="1140" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:01:34 EST 2021" starttimestamp="1614131043210" timestamp="1051701" />
  <Command __id="1141" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:01:35 EST 2021" starttimestamp="1614131043210" timestamp="1051817" />
  <Command __id="1143" _type="MoveCaretCommand" caretOffset="894" date="Tue Feb 23 21:01:35 EST 2021" docOffset="1191" starttimestamp="1614131043210" timestamp="1052371" />
  <Command __id="1145" _type="InsertStringCommand" date="Tue Feb 23 21:01:36 EST 2021" starttimestamp="1614131043210" timestamp="1053271" timestamp2="1053271">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1146" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:01:36 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1053314" />
  <Command __id="1151" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:01:37 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1054538" />
  <Command __id="1153" _type="InsertStringCommand" date="Tue Feb 23 21:01:37 EST 2021" starttimestamp="1614131043210" timestamp="1054629" timestamp2="1054629">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1154" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:01:37 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1054675" />
  <Command __id="1155" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:01:37 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1054688" />
  <Command __id="1157" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:01:38 EST 2021" starttimestamp="1614131043210" timestamp="1054929" />
  <Command __id="1159" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:01:38 EST 2021" starttimestamp="1614131043210" timestamp="1055030" />
  <Command __id="1161" _type="InsertStringCommand" date="Tue Feb 23 21:01:38 EST 2021" starttimestamp="1614131043210" timestamp="1055174" timestamp2="1055174">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1163" _type="InsertStringCommand" date="Tue Feb 23 21:01:38 EST 2021" starttimestamp="1614131043210" timestamp="1055243" timestamp2="1055243">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1165" _type="InsertStringCommand" date="Tue Feb 23 21:01:38 EST 2021" starttimestamp="1614131043210" timestamp="1055315" timestamp2="1055315">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1166" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:01:38 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1055411" />
  <Command __id="1167" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:01:39 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1055968" />
  <Command __id="1169" _type="InsertStringCommand" date="Tue Feb 23 21:01:39 EST 2021" starttimestamp="1614131043210" timestamp="1055977" timestamp2="1055977">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1171" _type="PauseCommand" date="Tue Feb 23 21:01:40 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1057168">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1191]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1170" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:01:40 EST 2021" starttimestamp="1614131043210" timestamp="1057168" />
  <Command __id="1172" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:01:40 EST 2021" starttimestamp="1614131043210" timestamp="1057258" />
  <Command __id="1173" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:01:40 EST 2021" starttimestamp="1614131043210" timestamp="1057384" />
  <Command __id="1175" _type="PauseCommand" date="Tue Feb 23 21:01:41 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1058707">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1323]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1176" _type="MoveCaretCommand" caretOffset="1992" date="Tue Feb 23 21:01:42 EST 2021" docOffset="1992" starttimestamp="1614131043210" timestamp="1058829" />
  <Command __id="1178" _type="PauseCommand" date="Tue Feb 23 21:01:44 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1061056">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2227]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1177" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Tue Feb 23 21:01:44 EST 2021" starttimestamp="1614131043210" timestamp="1061056" />
  <Command __id="1179" _type="BreakPointCommand" date="Tue Feb 23 21:01:44 EST 2021" lineNumber="64" starttimestamp="1614131043210" timestamp="1061062" type="BreakPointAdded" />
  <Command __id="1185" _type="PauseCommand" date="Tue Feb 23 21:01:47 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1064606">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1047]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1184" _type="RunCommand" date="Tue Feb 23 21:01:47 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1064606" type="Run" />
  <Command __id="1186" _type="RunCommand" date="Tue Feb 23 21:01:47 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1064607" type="Run" />
  <Command __id="1187" _type="RunCommand" date="Tue Feb 23 21:01:48 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1064844" type="Run" />
  <Command __id="1188" _type="RunCommand" date="Tue Feb 23 21:01:48 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1064891" type="Run" />
  <Command __id="1189" _type="RunCommand" date="Tue Feb 23 21:01:48 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1065143" type="Run" />
  <Command __id="1190" _type="RunCommand" date="Tue Feb 23 21:01:49 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1065918" type="Run" />
  <Command __id="1191" _type="ExceptionCommand" date="Tue Feb 23 21:01:49 EST 2021" starttimestamp="1614131043210" timestamp="1066428" type="Exception">
    <exceptionString><![CDATA[java.io.FileNotFoundException: timestamp for each participant.csv (系统找不到指定的文件。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at logAnalyzer.AExperimentalReplayer.readTimestamp(AExperimentalReplayer.java:62)
	at logAnalyzer.Driver.main(Driver.java:32)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1193" _type="PauseCommand" date="Tue Feb 23 21:01:54 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1071256">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[4827]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1192" _type="ShellCommand" date="Tue Feb 23 21:01:54 EST 2021" starttimestamp="1614131043210" timestamp="1071255" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1195" _type="PauseCommand" date="Tue Feb 23 21:02:07 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="1084293">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13038]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1194" _type="ShellCommand" date="Tue Feb 23 21:02:07 EST 2021" starttimestamp="1614131043210" timestamp="1084293" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1197" _type="MoveCaretCommand" caretOffset="1992" date="Tue Feb 23 21:02:07 EST 2021" docOffset="1992" starttimestamp="1614131043210" timestamp="1084603" />
  <Command __id="1199" _type="PauseCommand" date="Tue Feb 23 21:02:09 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1086306">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1703]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1198" _type="MoveCaretCommand" caretOffset="1697" date="Tue Feb 23 21:02:09 EST 2021" docOffset="1697" starttimestamp="1614131043210" timestamp="1086306" />
  <Command __id="1201" _type="PasteCommand" date="Tue Feb 23 21:02:09 EST 2021" starttimestamp="1614131043210" timestamp="1086751" />
  <Command __id="1223" _type="PauseCommand" date="Tue Feb 23 21:02:21 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1098752">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[4359]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1222" _type="RunCommand" date="Tue Feb 23 21:02:21 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1098752" type="Run" />
  <Command __id="1231" _type="PauseCommand" date="Tue Feb 23 21:02:33 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1110467">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[8049]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1230" _type="RunCommand" date="Tue Feb 23 21:02:33 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1110467" type="Run" />
  <Command __id="1233" _type="PauseCommand" date="Tue Feb 23 21:02:36 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1112934">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2467]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1232" _type="ShellCommand" date="Tue Feb 23 21:02:36 EST 2021" starttimestamp="1614131043210" timestamp="1112934" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1234" _type="MoveCaretCommand" caretOffset="2256" date="Tue Feb 23 21:02:36 EST 2021" docOffset="2256" starttimestamp="1614131043210" timestamp="1113033" />
  <Command __id="1236" _type="PauseCommand" date="Tue Feb 23 21:02:37 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1114365">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1332]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1235" _type="MoveCaretCommand" caretOffset="2238" date="Tue Feb 23 21:02:37 EST 2021" docOffset="2238" starttimestamp="1614131043210" timestamp="1114365" />
  <Command __id="1238" _type="PauseCommand" date="Tue Feb 23 21:02:38 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1115442">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1077]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1237" _type="ShellCommand" date="Tue Feb 23 21:02:38 EST 2021" starttimestamp="1614131043210" timestamp="1115442" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1244" _type="PauseCommand" date="Tue Feb 23 21:02:53 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1130495">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[4546]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1243" _type="RunCommand" date="Tue Feb 23 21:02:53 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1130495" type="Run" />
  <Command __id="1245" _type="RunCommand" date="Tue Feb 23 21:02:54 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1130996" type="Run" />
  <Command __id="1247" _type="PauseCommand" date="Tue Feb 23 21:02:56 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1132806">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1810]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1246" _type="MoveCaretCommand" caretOffset="2206" date="Tue Feb 23 21:02:56 EST 2021" docOffset="2206" starttimestamp="1614131043210" timestamp="1132806" />
  <Command __id="1249" _type="PauseCommand" date="Tue Feb 23 21:02:57 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1133984">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1178]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1248" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:02:57 EST 2021" starttimestamp="1614131043210" timestamp="1133984" />
  <Command __id="1250" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:02:57 EST 2021" starttimestamp="1614131043210" timestamp="1134200" />
  <Command __id="1252" _type="InsertStringCommand" date="Tue Feb 23 21:02:57 EST 2021" starttimestamp="1614131043210" timestamp="1134359" timestamp2="1134359">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1082" _type="Replace" date="Tue Feb 23 21:01:09 EST 2021" docASTNodeCount="5974" docActiveCodeLength="33884" docExpressionCount="4124" docLength="36187" endLine="58" insertionLength="1" int_docASTNodeCount="5974" int_docActiveCodeLength="33883" int_docExpressionCount="4124" int_docLength="36186" length="7" offset="1986" startLine="58" starttimestamp="1614131043210" timestamp="1026766">
    <deletedText><![CDATA[private]]></deletedText>
    <insertedText><![CDATA[p]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1085" _type="Insert" date="Tue Feb 23 21:01:10 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33889" docExpressionCount="4124" docLength="36192" length="5" offset="1987" repeat="5" starttimestamp="1614131043210" timestamp="1027013" timestamp2="1027202">
    <text><![CDATA[ublic]]></text>
  </DocumentChange>
  <Command __id="1090" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:01:12 EST 2021" docASTNodeCount="137" docActiveCodeLength="1089" docExpressionCount="80" docLength="2779" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1029022">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶"), Diff(INSERT,"//"), Diff(EQUAL,"		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);
//		System.out.println(s1.equals(s2));
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
//		Date d = new Date(1379180409552L+4869423L);
//		System.out.println(d);
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <DocumentChange __id="1101" _type="Insert" date="Tue Feb 23 21:01:19 EST 2021" docASTNodeCount="137" docActiveCodeLength="1093" docExpressionCount="80" docLength="2783" length="4" offset="1153" starttimestamp="1614131043210" timestamp="1036140">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="1102" _type="Replace" date="Tue Feb 23 21:01:19 EST 2021" docASTNodeCount="150" docActiveCodeLength="1159" docExpressionCount="89" docLength="2849" endLine="31" insertionLength="68" int_docASTNodeCount="137" int_docActiveCodeLength="1091" int_docExpressionCount="80" int_docLength="2781" length="2" offset="1155" startLine="31" starttimestamp="1614131043210" timestamp="1036324">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1106" _type="Delete" date="Tue Feb 23 21:01:22 EST 2021" docASTNodeCount="146" docActiveCodeLength="1147" docExpressionCount="87" docLength="2837" endLine="31" length="12" offset="1157" startLine="31" starttimestamp="1614131043210" timestamp="1038962">
    <text><![CDATA[String s1 = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1108" _type="Delete" date="Tue Feb 23 21:01:23 EST 2021" docASTNodeCount="145" docActiveCodeLength="1127" docExpressionCount="86" docLength="2817" endLine="31" length="20" offset="1191" repeat="6" startLine="31" starttimestamp="1614131043210" timestamp="1039802" timestamp2="1041167">
    <text><![CDATA[readWebContent(url);]]></text>
  </DocumentChange>
  <Command __id="1120" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:01:26 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33889" docExpressionCount="4124" docLength="36192" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1042923">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "timestamp for each participant.csv";¶	private Map<String, List<Long>> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	p"), Diff(DELETE,"rivate"), Diff(INSERT,"ublic"), Diff(EQUAL," void readTimestamp() {¶		try {¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "timestamp for each participant.csv";
	private Map<String, List<Long>> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			List<String[]> tokens = cr.readAll();
			System.out.println(tokens);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="1126" _type="Insert" date="Tue Feb 23 21:01:28 EST 2021" docASTNodeCount="5974" docActiveCodeLength="33890" docExpressionCount="4124" docLength="36193" length="1" offset="1992" starttimestamp="1614131043210" timestamp="1045031">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1128" _type="Delete" date="Tue Feb 23 21:01:29 EST 2021" docASTNodeCount="5974" docActiveCodeLength="33884" docExpressionCount="4124" docLength="36187" endLine="58" length="6" offset="1987" startLine="58" starttimestamp="1614131043210" timestamp="1045853">
    <text><![CDATA[ublicr]]></text>
  </DocumentChange>
  <DocumentChange __id="1132" _type="Insert" date="Tue Feb 23 21:01:31 EST 2021" docASTNodeCount="5974" docActiveCodeLength="33890" docExpressionCount="4124" docLength="36193" length="6" offset="1987" starttimestamp="1614131043210" timestamp="1048469">
    <text><![CDATA[ublicr]]></text>
  </DocumentChange>
  <DocumentChange __id="1136" _type="Delete" date="Tue Feb 23 21:01:33 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33889" docExpressionCount="4124" docLength="36192" endLine="58" length="1" offset="1992" startLine="58" starttimestamp="1614131043210" timestamp="1049992">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <Command __id="1142" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:01:35 EST 2021" docASTNodeCount="145" docActiveCodeLength="1127" docExpressionCount="86" docLength="2817" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1052220">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶"), Diff(INSERT,"		((AExperimentalReplayer)replayer).¶"), Diff(EQUAL,"//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		((AExperimentalReplayer)replayer).
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);
//		System.out.println(s1.equals(s2));
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
//		Date d = new Date(1379180409552L+4869423L);
//		System.out.println(d);
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <DocumentChange __id="1144" _type="Insert" date="Tue Feb 23 21:01:36 EST 2021" docASTNodeCount="147" docActiveCodeLength="1133" docExpressionCount="88" docLength="2823" length="6" offset="1191" repeat="6" starttimestamp="1614131043210" timestamp="1053265" timestamp2="1054625">
    <text><![CDATA[readpu]]></text>
  </DocumentChange>
  <DocumentChange __id="1156" _type="Delete" date="Tue Feb 23 21:01:38 EST 2021" docASTNodeCount="147" docActiveCodeLength="1131" docExpressionCount="88" docLength="2821" endLine="31" length="2" offset="1195" repeat="2" startLine="31" starttimestamp="1614131043210" timestamp="1054926" timestamp2="1055027">
    <text><![CDATA[pu]]></text>
  </DocumentChange>
  <DocumentChange __id="1160" _type="Insert" date="Tue Feb 23 21:01:38 EST 2021" docASTNodeCount="147" docActiveCodeLength="1134" docExpressionCount="88" docLength="2824" length="3" offset="1195" repeat="3" starttimestamp="1614131043210" timestamp="1055169" timestamp2="1055310">
    <text><![CDATA[tim]]></text>
  </DocumentChange>
  <DocumentChange __id="1168" _type="Replace" date="Tue Feb 23 21:01:39 EST 2021" docASTNodeCount="145" docActiveCodeLength="1143" docExpressionCount="86" docLength="2833" endLine="31" insertionLength="16" int_docASTNodeCount="145" int_docActiveCodeLength="1127" int_docExpressionCount="86" int_docLength="2817" length="7" offset="1191" startLine="31" starttimestamp="1614131043210" timestamp="1055969">
    <deletedText><![CDATA[readtim]]></deletedText>
    <insertedText><![CDATA[readTimestamp();]]></insertedText>
  </DocumentChange>
  <Command __id="1174" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:01:41 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33889" docExpressionCount="4124" docLength="36192" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1058707">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "timestamp for each participant.csv";¶	private Map<String, List<Long>> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="1180" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:01:45 EST 2021" docASTNodeCount="145" docActiveCodeLength="1143" docExpressionCount="86" docLength="2833" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1062718">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		((AExperimentalReplayer)replayer)."), Diff(INSERT,"readTimestamp();"), Diff(EQUAL,"¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		((AExperimentalReplayer)replayer).readTimestamp();
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);
//		System.out.println(s1.equals(s2));
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
//		Date d = new Date(1379180409552L+4869423L);
//		System.out.println(d);
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <Command __id="1196" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:02:07 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33889" docExpressionCount="4124" docLength="36192" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1084454">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "timestamp for each participant.csv";¶	private Map<String, List<Long>> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1200" _type="Insert" date="Tue Feb 23 21:02:09 EST 2021" docASTNodeCount="5975" docActiveCodeLength="33918" docExpressionCount="4124" docLength="36221" length="29" offset="1697" repeat="3" starttimestamp="1614131043210" timestamp="1086747" timestamp2="1088136">
    <text><![CDATA[C:\\Users\\Zhizhou\\Desktop\\]]></text>
  </DocumentChange>
  <DocumentChange __id="1251" _type="Insert" date="Tue Feb 23 21:02:57 EST 2021" docASTNodeCount="5977" docActiveCodeLength="33925" docExpressionCount="4125" docLength="36228" length="7" offset="2164" repeat="3" starttimestamp="1614131043210" timestamp="1134352" timestamp2="1136400">
    <text><![CDATA[
			cr]]></text>
  </DocumentChange>
  <DocumentChange __id="1259" _type="Replace" date="Tue Feb 23 21:02:59 EST 2021" docASTNodeCount="5977" docActiveCodeLength="33926" docExpressionCount="4126" docLength="36229" endLine="62" insertionLength="3" int_docASTNodeCount="5975" int_docActiveCodeLength="33923" int_docExpressionCount="4124" int_docLength="36226" length="2" offset="2169" startLine="62" starttimestamp="1614131043210" timestamp="1136446">
    <deletedText><![CDATA[cr]]></deletedText>
    <insertedText><![CDATA[cr.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1262" _type="Insert" date="Tue Feb 23 21:03:00 EST 2021" docASTNodeCount="5979" docActiveCodeLength="33932" docExpressionCount="4127" docLength="36235" length="6" offset="2172" repeat="6" starttimestamp="1614131043210" timestamp="1137047" timestamp2="1137724">
    <text><![CDATA[readne]]></text>
  </DocumentChange>
  <Command __id="1254" _type="PauseCommand" date="Tue Feb 23 21:02:59 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1136107">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1748]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1255" _type="InsertStringCommand" date="Tue Feb 23 21:02:59 EST 2021" starttimestamp="1614131043210" timestamp="1136111" timestamp2="1136111">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1256" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:02:59 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1136154" />
  <Command __id="1258" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:02:59 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1136438" />
  <Command __id="1260" _type="InsertStringCommand" date="Tue Feb 23 21:02:59 EST 2021" starttimestamp="1614131043210" timestamp="1136451" timestamp2="1136451">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1261" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:02:59 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1136502" />
  <Command __id="1268" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:03:01 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1138282" />
  <Command __id="1270" _type="InsertStringCommand" date="Tue Feb 23 21:03:01 EST 2021" starttimestamp="1614131043210" timestamp="1138300" timestamp2="1138300">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1272" _type="InsertStringCommand" date="Tue Feb 23 21:03:01 EST 2021" starttimestamp="1614131043210" timestamp="1138515" timestamp2="1138515">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1273" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:03:02 EST 2021" starttimestamp="1614131043210" timestamp="1139373" />
  <Command __id="1274" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:03:02 EST 2021" starttimestamp="1614131043210" timestamp="1139461" />
  <Command __id="1275" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:03:02 EST 2021" starttimestamp="1614131043210" timestamp="1139592" />
  <Command __id="1276" _type="RunCommand" date="Tue Feb 23 21:03:02 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1139713" type="Run" />
  <Command __id="1277" _type="RunCommand" date="Tue Feb 23 21:03:02 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1139713" type="Run" />
  <Command __id="1286" _type="PauseCommand" date="Tue Feb 23 21:03:16 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="1153371">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[10721]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1285" _type="RunCommand" date="Tue Feb 23 21:03:16 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1153371" type="Run" />
  <Command __id="1288" _type="PauseCommand" date="Tue Feb 23 21:03:24 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1161528">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[8157]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1287" _type="MoveCaretCommand" caretOffset="2183" date="Tue Feb 23 21:03:24 EST 2021" docOffset="2183" starttimestamp="1614131043210" timestamp="1161528" />
  <Command __id="1289" _type="MoveCaretCommand" caretOffset="2225" date="Tue Feb 23 21:03:25 EST 2021" docOffset="2225" starttimestamp="1614131043210" timestamp="1161959" />
  <Command __id="1291" _type="PauseCommand" date="Tue Feb 23 21:03:29 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1166167">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4208]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1290" _type="SelectTextCommand" caretOffset="2169" date="Tue Feb 23 21:03:29 EST 2021" end="2183" start="2169" starttimestamp="1614131043210" timestamp="1166167" />
  <Command __id="1292" _type="MoveCaretCommand" caretOffset="2169" date="Tue Feb 23 21:03:29 EST 2021" docOffset="2169" starttimestamp="1614131043210" timestamp="1166555" />
  <Command __id="1294" _type="PauseCommand" date="Tue Feb 23 21:03:37 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1174266">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7711]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1293" _type="MoveCaretCommand" caretOffset="2188" date="Tue Feb 23 21:03:37 EST 2021" docOffset="2188" starttimestamp="1614131043210" timestamp="1174266" />
  <Command __id="1295" _type="MoveCaretCommand" caretOffset="2183" date="Tue Feb 23 21:03:38 EST 2021" docOffset="2183" starttimestamp="1614131043210" timestamp="1174823" />
  <Command __id="1297" _type="InsertStringCommand" date="Tue Feb 23 21:03:39 EST 2021" starttimestamp="1614131043210" timestamp="1175798" timestamp2="1175798">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1299" _type="PauseCommand" date="Tue Feb 23 21:03:42 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1179341">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3543]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1300" _type="InsertStringCommand" date="Tue Feb 23 21:03:42 EST 2021" starttimestamp="1614131043210" timestamp="1179346" timestamp2="1179346">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1301" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:03:42 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1179388" />
  <Command __id="1307" _type="PauseCommand" date="Tue Feb 23 21:03:44 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1181283">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1591]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1306" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:03:44 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1181283" />
  <Command __id="1309" _type="InsertStringCommand" date="Tue Feb 23 21:03:44 EST 2021" starttimestamp="1614131043210" timestamp="1181313" timestamp2="1181313">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1311" _type="PauseCommand" date="Tue Feb 23 21:03:46 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1182855">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1542]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="1312" _type="UndoCommand" date="Tue Feb 23 21:03:46 EST 2021" starttimestamp="1614131043210" timestamp="1182875" />
  <Command __id="1314" _type="InsertStringCommand" date="Tue Feb 23 21:03:46 EST 2021" starttimestamp="1614131043210" timestamp="1183735" timestamp2="1183735">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1316" _type="InsertStringCommand" date="Tue Feb 23 21:03:46 EST 2021" starttimestamp="1614131043210" timestamp="1183768" timestamp2="1183768">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1317" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:03:47 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1183812" />
  <Command __id="1322" _type="PauseCommand" date="Tue Feb 23 21:03:48 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1185532">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1506]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1321" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:03:48 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1185532" />
  <Command __id="1324" _type="InsertStringCommand" date="Tue Feb 23 21:03:48 EST 2021" starttimestamp="1614131043210" timestamp="1185600" timestamp2="1185600">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1326" _type="PauseCommand" date="Tue Feb 23 21:03:49 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1186699">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1099]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="1327" _type="InsertStringCommand" date="Tue Feb 23 21:03:49 EST 2021" starttimestamp="1614131043210" timestamp="1186705" timestamp2="1186705">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1328" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:03:49 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1186743" />
  <Command __id="1330" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:03:50 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1187013" />
  <Command __id="1332" _type="InsertStringCommand" date="Tue Feb 23 21:03:50 EST 2021" starttimestamp="1614131043210" timestamp="1187027" timestamp2="1187027">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1333" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:03:50 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1187077" />
  <Command __id="1339" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:03:51 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1188787" />
  <Command __id="1341" _type="InsertStringCommand" date="Tue Feb 23 21:03:52 EST 2021" starttimestamp="1614131043210" timestamp="1188800" timestamp2="1188800">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1343" _type="PauseCommand" date="Tue Feb 23 21:03:56 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1193603">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4803]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1344" _type="InsertStringCommand" date="Tue Feb 23 21:03:56 EST 2021" starttimestamp="1614131043210" timestamp="1193605" timestamp2="1193605">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1346" _type="PauseCommand" date="Tue Feb 23 21:03:57 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1194677">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1072]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1347" _type="InsertStringCommand" date="Tue Feb 23 21:03:57 EST 2021" starttimestamp="1614131043210" timestamp="1194679" timestamp2="1194679">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="1349" _type="InsertStringCommand" date="Tue Feb 23 21:03:58 EST 2021" starttimestamp="1614131043210" timestamp="1194801" timestamp2="1194801">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1351" _type="InsertStringCommand" date="Tue Feb 23 21:03:58 EST 2021" starttimestamp="1614131043210" timestamp="1194927" timestamp2="1194927">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1353" _type="InsertStringCommand" date="Tue Feb 23 21:03:58 EST 2021" starttimestamp="1614131043210" timestamp="1195290" timestamp2="1195290">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1354" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:03:58 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1195333" />
  <Command __id="1359" _type="PauseCommand" date="Tue Feb 23 21:03:59 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1196752">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1016]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1358" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:03:59 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1196752" />
  <Command __id="1360" _type="MoveCaretCommand" caretOffset="2278" date="Tue Feb 23 21:04:00 EST 2021" docOffset="2278" starttimestamp="1614131043210" timestamp="1196854" />
  <Command __id="1362" _type="PauseCommand" date="Tue Feb 23 21:04:10 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="1207384">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10530]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1361" _type="SelectTextCommand" caretOffset="2216" date="Tue Feb 23 21:04:10 EST 2021" end="2216" start="2208" starttimestamp="1614131043210" timestamp="1207384" />
  <Command __id="1363" _type="MoveCaretCommand" caretOffset="2210" date="Tue Feb 23 21:04:11 EST 2021" docOffset="2210" starttimestamp="1614131043210" timestamp="1207822" />
  <Command __id="1364" _type="MoveCaretCommand" caretOffset="2225" date="Tue Feb 23 21:04:11 EST 2021" docOffset="2225" starttimestamp="1614131043210" timestamp="1208280" />
  <Command __id="1366" _type="PauseCommand" date="Tue Feb 23 21:04:14 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1211183">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2903]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1365" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:04:14 EST 2021" starttimestamp="1614131043210" timestamp="1211183" />
  <Command __id="1367" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:04:14 EST 2021" starttimestamp="1614131043210" timestamp="1211435" />
  <Command __id="1368" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:04:14 EST 2021" starttimestamp="1614131043210" timestamp="1211752" />
  <Command __id="1370" _type="InsertStringCommand" date="Tue Feb 23 21:04:15 EST 2021" starttimestamp="1614131043210" timestamp="1211945" timestamp2="1211945">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1372" _type="PauseCommand" date="Tue Feb 23 21:04:16 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1213588">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1643]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1373" _type="InsertStringCommand" date="Tue Feb 23 21:04:16 EST 2021" starttimestamp="1614131043210" timestamp="1213592" timestamp2="1213592">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1375" _type="InsertStringCommand" date="Tue Feb 23 21:04:17 EST 2021" starttimestamp="1614131043210" timestamp="1213824" timestamp2="1213824">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1376" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:04:17 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1213868" />
  <Command __id="1381" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:17 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1214645" />
  <Command __id="1383" _type="InsertStringCommand" date="Tue Feb 23 21:04:17 EST 2021" starttimestamp="1614131043210" timestamp="1214660" timestamp2="1214660">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1385" _type="InsertStringCommand" date="Tue Feb 23 21:04:17 EST 2021" starttimestamp="1614131043210" timestamp="1214669" timestamp2="1214669">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="1387" _type="InsertStringCommand" date="Tue Feb 23 21:04:18 EST 2021" starttimestamp="1614131043210" timestamp="1215122" timestamp2="1215122">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1389" _type="InsertStringCommand" date="Tue Feb 23 21:04:19 EST 2021" starttimestamp="1614131043210" timestamp="1215822" timestamp2="1215822">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1391" _type="InsertStringCommand" date="Tue Feb 23 21:04:19 EST 2021" starttimestamp="1614131043210" timestamp="1215850" timestamp2="1215850">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1392" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:04:19 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1215893" />
  <Command __id="1394" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:19 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1216012" />
  <Command __id="1396" _type="InsertStringCommand" date="Tue Feb 23 21:04:19 EST 2021" starttimestamp="1614131043210" timestamp="1216091" timestamp2="1216091">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1398" _type="InsertStringCommand" date="Tue Feb 23 21:04:19 EST 2021" starttimestamp="1614131043210" timestamp="1216133" timestamp2="1216133">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1399" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:04:19 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1216176" />
  <Command __id="1400" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:19 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1216194" />
  <Command __id="1402" _type="InsertStringCommand" date="Tue Feb 23 21:04:19 EST 2021" starttimestamp="1614131043210" timestamp="1216760" timestamp2="1216760">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1404" _type="InsertStringCommand" date="Tue Feb 23 21:04:20 EST 2021" starttimestamp="1614131043210" timestamp="1216877" timestamp2="1216877">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1406" _type="InsertStringCommand" date="Tue Feb 23 21:04:20 EST 2021" starttimestamp="1614131043210" timestamp="1216990" timestamp2="1216990">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1408" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:04:20 EST 2021" starttimestamp="1614131043210" timestamp="1217716" />
  <Command __id="1410" _type="PauseCommand" date="Tue Feb 23 21:04:22 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1218934">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1218]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1411" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:04:22 EST 2021" starttimestamp="1614131043210" timestamp="1218936" />
  <Command __id="1413" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:04:22 EST 2021" starttimestamp="1614131043210" timestamp="1219074" />
  <Command __id="1415" _type="InsertStringCommand" date="Tue Feb 23 21:04:22 EST 2021" starttimestamp="1614131043210" timestamp="1219588" timestamp2="1219588">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1417" _type="PauseCommand" date="Tue Feb 23 21:04:24 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1221754">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2166]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1416" _type="MoveCaretCommand" caretOffset="2215" date="Tue Feb 23 21:04:24 EST 2021" docOffset="2215" starttimestamp="1614131043210" timestamp="1221754" />
  <Command __id="1419" _type="InsertStringCommand" date="Tue Feb 23 21:04:25 EST 2021" starttimestamp="1614131043210" timestamp="1222267" timestamp2="1222267">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1421" _type="InsertStringCommand" date="Tue Feb 23 21:04:25 EST 2021" starttimestamp="1614131043210" timestamp="1222366" timestamp2="1222366">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1422" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:04:25 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1222408" />
  <Command __id="1424" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:26 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1222956" />
  <Command __id="1426" _type="InsertStringCommand" date="Tue Feb 23 21:04:26 EST 2021" starttimestamp="1614131043210" timestamp="1222968" timestamp2="1222968">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1428" _type="InsertStringCommand" date="Tue Feb 23 21:04:26 EST 2021" starttimestamp="1614131043210" timestamp="1223055" timestamp2="1223055">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1430" _type="InsertStringCommand" date="Tue Feb 23 21:04:26 EST 2021" starttimestamp="1614131043210" timestamp="1223225" timestamp2="1223225">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1432" _type="InsertStringCommand" date="Tue Feb 23 21:04:26 EST 2021" starttimestamp="1614131043210" timestamp="1223314" timestamp2="1223314">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1433" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:04:26 EST 2021" starttimestamp="1614131043210" timestamp="1223782" />
  <Command __id="1434" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:04:27 EST 2021" starttimestamp="1614131043210" timestamp="1224247" />
  <Command __id="1436" _type="InsertStringCommand" date="Tue Feb 23 21:04:27 EST 2021" starttimestamp="1614131043210" timestamp="1224725" timestamp2="1224725">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1438" _type="InsertStringCommand" date="Tue Feb 23 21:04:28 EST 2021" starttimestamp="1614131043210" timestamp="1224905" timestamp2="1224905">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1440" _type="InsertStringCommand" date="Tue Feb 23 21:04:28 EST 2021" starttimestamp="1614131043210" timestamp="1224998" timestamp2="1224998">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1442" _type="InsertStringCommand" date="Tue Feb 23 21:04:28 EST 2021" starttimestamp="1614131043210" timestamp="1225228" timestamp2="1225228">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1443" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:04:28 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1225271" />
  <DocumentChange __id="1269" _type="Replace" date="Tue Feb 23 21:03:01 EST 2021" docASTNodeCount="5979" docActiveCodeLength="33936" docExpressionCount="4127" docLength="36239" endLine="62" insertionLength="10" int_docASTNodeCount="5977" int_docActiveCodeLength="33926" int_docExpressionCount="4126" int_docLength="36229" length="6" offset="2172" startLine="62" starttimestamp="1614131043210" timestamp="1138289">
    <deletedText><![CDATA[readne]]></deletedText>
    <insertedText><![CDATA[readNext()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1271" _type="Insert" date="Tue Feb 23 21:03:01 EST 2021" docASTNodeCount="5979" docActiveCodeLength="33937" docExpressionCount="4127" docLength="36240" length="1" offset="2182" starttimestamp="1614131043210" timestamp="1138511">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1296" _type="Insert" date="Tue Feb 23 21:03:38 EST 2021" docASTNodeCount="5979" docActiveCodeLength="33942" docExpressionCount="4127" docLength="36245" length="5" offset="2183" starttimestamp="1614131043210" timestamp="1175788">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="1298" _type="Insert" date="Tue Feb 23 21:03:42 EST 2021" docASTNodeCount="5979" docActiveCodeLength="33947" docExpressionCount="4127" docLength="36250" length="5" offset="2188" repeat="5" starttimestamp="1614131043210" timestamp="1179341" timestamp2="1179692">
    <text><![CDATA[while]]></text>
  </DocumentChange>
  <DocumentChange __id="1308" _type="Replace" date="Tue Feb 23 21:03:44 EST 2021" docASTNodeCount="5995" docActiveCodeLength="34026" docExpressionCount="4137" docLength="36329" endLine="63" insertionLength="84" int_docASTNodeCount="5979" int_docActiveCodeLength="33942" int_docExpressionCount="4127" int_docLength="36245" length="5" offset="2188" startLine="63" starttimestamp="1614131043210" timestamp="1181304">
    <deletedText><![CDATA[while]]></deletedText>
    <insertedText><![CDATA[while (en.hasMoreElements()) {
				type type = (type) en.nextElement();
				
			}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1310" _type="Replace" date="Tue Feb 23 21:03:46 EST 2021" docASTNodeCount="5979" docActiveCodeLength="33947" docExpressionCount="4127" docLength="36250" endLine="66" insertionLength="5" int_docASTNodeCount="5979" int_docActiveCodeLength="33942" int_docExpressionCount="4127" int_docLength="36245" length="84" offset="2188" startLine="63" starttimestamp="1614131043210" timestamp="1182855">
    <deletedText><![CDATA[while (en.hasMoreElements()) {
				type type = (type) en.nextElement();
				
			}]]></deletedText>
    <insertedText><![CDATA[while]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1313" _type="Replace" date="Tue Feb 23 21:03:46 EST 2021" docASTNodeCount="5981" docActiveCodeLength="33943" docExpressionCount="4128" docLength="36246" endLine="63" insertionLength="1" int_docASTNodeCount="5979" int_docActiveCodeLength="33942" int_docExpressionCount="4127" int_docLength="36245" length="5" offset="2188" startLine="63" starttimestamp="1614131043210" timestamp="1183731">
    <deletedText><![CDATA[while]]></deletedText>
    <insertedText><![CDATA[w]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1315" _type="Insert" date="Tue Feb 23 21:03:46 EST 2021" docASTNodeCount="5979" docActiveCodeLength="33947" docExpressionCount="4127" docLength="36250" length="4" offset="2189" repeat="4" starttimestamp="1614131043210" timestamp="1183765" timestamp2="1184026">
    <text><![CDATA[hile]]></text>
  </DocumentChange>
  <DocumentChange __id="1323" _type="Replace" date="Tue Feb 23 21:03:48 EST 2021" docASTNodeCount="5982" docActiveCodeLength="33986" docExpressionCount="4128" docLength="36289" endLine="63" insertionLength="44" int_docASTNodeCount="5979" int_docActiveCodeLength="33942" int_docExpressionCount="4127" int_docLength="36245" length="5" offset="2188" startLine="63" starttimestamp="1614131043210" timestamp="1185557">
    <deletedText><![CDATA[while]]></deletedText>
    <insertedText><![CDATA[while (firstCommandAfterStart) {
				
			}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1325" _type="Replace" date="Tue Feb 23 21:03:49 EST 2021" docASTNodeCount="5982" docActiveCodeLength="33965" docExpressionCount="4128" docLength="36268" endLine="63" insertionLength="1" int_docASTNodeCount="5982" int_docActiveCodeLength="33964" int_docExpressionCount="4128" int_docLength="36267" length="22" offset="2195" startLine="63" starttimestamp="1614131043210" timestamp="1186699">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1329" _type="Insert" date="Tue Feb 23 21:03:50 EST 2021" docASTNodeCount="5982" docActiveCodeLength="33966" docExpressionCount="4128" docLength="36269" length="1" offset="2196" starttimestamp="1614131043210" timestamp="1186952">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1331" _type="Replace" date="Tue Feb 23 21:03:50 EST 2021" docASTNodeCount="5984" docActiveCodeLength="33967" docExpressionCount="4129" docLength="36270" endLine="63" insertionLength="3" int_docASTNodeCount="5982" int_docActiveCodeLength="33964" int_docExpressionCount="4128" int_docLength="36267" length="2" offset="2195" startLine="63" starttimestamp="1614131043210" timestamp="1187021">
    <deletedText><![CDATA[cr]]></deletedText>
    <insertedText><![CDATA[cr.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1334" _type="Insert" date="Tue Feb 23 21:03:50 EST 2021" docASTNodeCount="5984" docActiveCodeLength="33972" docExpressionCount="4130" docLength="36275" length="5" offset="2198" repeat="5" starttimestamp="1614131043210" timestamp="1187481" timestamp2="1188379">
    <text><![CDATA[reane]]></text>
  </DocumentChange>
  <DocumentChange __id="1340" _type="Replace" date="Tue Feb 23 21:03:52 EST 2021" docASTNodeCount="5984" docActiveCodeLength="33977" docExpressionCount="4130" docLength="36280" endLine="63" insertionLength="10" int_docASTNodeCount="5984" int_docActiveCodeLength="33967" int_docExpressionCount="4129" int_docLength="36270" length="5" offset="2198" startLine="63" starttimestamp="1614131043210" timestamp="1188794">
    <deletedText><![CDATA[reane]]></deletedText>
    <insertedText><![CDATA[readNext()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1342" _type="Insert" date="Tue Feb 23 21:03:56 EST 2021" docASTNodeCount="5986" docActiveCodeLength="33985" docExpressionCount="4132" docLength="36288" length="8" offset="2208" repeat="8" starttimestamp="1614131043210" timestamp="1193603" timestamp2="1195736">
    <text><![CDATA[ != null]]></text>
  </DocumentChange>
  <DocumentChange __id="1369" _type="Insert" date="Tue Feb 23 21:04:15 EST 2021" docASTNodeCount="5988" docActiveCodeLength="33996" docExpressionCount="4133" docLength="36299" length="11" offset="2183" repeat="7" starttimestamp="1614131043210" timestamp="1211938" timestamp2="1214087">
    <text><![CDATA[
			String]]></text>
  </DocumentChange>
  <DocumentChange __id="1382" _type="Replace" date="Tue Feb 23 21:04:17 EST 2021" docASTNodeCount="5988" docActiveCodeLength="33997" docExpressionCount="4133" docLength="36300" endLine="63" insertionLength="7" int_docASTNodeCount="5986" int_docActiveCodeLength="33990" int_docExpressionCount="4132" int_docLength="36293" length="6" offset="2188" startLine="63" starttimestamp="1614131043210" timestamp="1214652">
    <deletedText><![CDATA[String]]></deletedText>
    <insertedText><![CDATA[String[]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1384" _type="Insert" date="Tue Feb 23 21:04:17 EST 2021" docASTNodeCount="5992" docActiveCodeLength="34007" docExpressionCount="4134" docLength="36310" length="10" offset="2195" repeat="10" starttimestamp="1614131043210" timestamp="1214664" timestamp2="1216987">
    <text><![CDATA[] token = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1407" _type="Delete" date="Tue Feb 23 21:04:20 EST 2021" docASTNodeCount="5992" docActiveCodeLength="34004" docExpressionCount="4134" docLength="36307" endLine="63" length="3" offset="2202" repeat="3" startLine="63" starttimestamp="1614131043210" timestamp="1217714" timestamp2="1219071">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1414" _type="Insert" date="Tue Feb 23 21:04:22 EST 2021" docASTNodeCount="5992" docActiveCodeLength="34005" docExpressionCount="4134" docLength="36308" length="1" offset="2202" starttimestamp="1614131043210" timestamp="1219584">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1418" _type="Insert" date="Tue Feb 23 21:04:25 EST 2021" docASTNodeCount="5992" docActiveCodeLength="34008" docExpressionCount="4134" docLength="36311" length="3" offset="2215" repeat="3" starttimestamp="1614131043210" timestamp="1222261" timestamp2="1222536">
    <text><![CDATA[tok]]></text>
  </DocumentChange>
  <DocumentChange __id="1425" _type="Replace" date="Tue Feb 23 21:04:26 EST 2021" docASTNodeCount="5992" docActiveCodeLength="34010" docExpressionCount="4134" docLength="36313" endLine="64" insertionLength="5" int_docASTNodeCount="5992" int_docActiveCodeLength="34005" int_docExpressionCount="4134" int_docLength="36308" length="3" offset="2215" startLine="64" starttimestamp="1614131043210" timestamp="1222962">
    <deletedText><![CDATA[tok]]></deletedText>
    <insertedText><![CDATA[token]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1427" _type="Insert" date="Tue Feb 23 21:04:26 EST 2021" docASTNodeCount="5994" docActiveCodeLength="34013" docExpressionCount="4136" docLength="36316" length="3" offset="2220" repeat="3" starttimestamp="1614131043210" timestamp="1223051" timestamp2="1223310">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1435" _type="Insert" date="Tue Feb 23 21:04:27 EST 2021" docASTNodeCount="5995" docActiveCodeLength="34020" docExpressionCount="4137" docLength="36323" length="7" offset="2202" repeat="7" starttimestamp="1614131043210" timestamp="1224721" timestamp2="1225647">
    <text><![CDATA[ = null]]></text>
  </DocumentChange>
  <Command __id="1448" _type="PauseCommand" date="Tue Feb 23 21:04:31 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1228089">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2442]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1447" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:31 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1228089" />
  <Command __id="1449" _type="MoveCaretCommand" caretOffset="2223" date="Tue Feb 23 21:04:31 EST 2021" docOffset="2223" starttimestamp="1614131043210" timestamp="1228187" />
  <Command __id="1450" _type="MoveCaretCommand" caretOffset="2222" date="Tue Feb 23 21:04:31 EST 2021" docOffset="2222" starttimestamp="1614131043210" timestamp="1228742" />
  <Command __id="1452" _type="InsertStringCommand" date="Tue Feb 23 21:04:32 EST 2021" starttimestamp="1614131043210" timestamp="1229447" timestamp2="1229447">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1454" _type="PauseCommand" date="Tue Feb 23 21:04:34 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1230920">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1473]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1453" _type="MoveCaretCommand" caretOffset="2243" date="Tue Feb 23 21:04:34 EST 2021" docOffset="2243" starttimestamp="1614131043210" timestamp="1230920" />
  <Command __id="1456" _type="PauseCommand" date="Tue Feb 23 21:04:35 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1232035">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1115]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1457" _type="InsertStringCommand" date="Tue Feb 23 21:04:35 EST 2021" starttimestamp="1614131043210" timestamp="1232043" timestamp2="1232043">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1459" _type="PauseCommand" date="Tue Feb 23 21:04:36 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1233734">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1691]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1458" _type="MoveCaretCommand" caretOffset="2262" date="Tue Feb 23 21:04:36 EST 2021" docOffset="2262" starttimestamp="1614131043210" timestamp="1233734" />
  <Command __id="1461" _type="PauseCommand" date="Tue Feb 23 21:04:42 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1239235">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5501]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1462" _type="InsertStringCommand" date="Tue Feb 23 21:04:42 EST 2021" starttimestamp="1614131043210" timestamp="1239239" timestamp2="1239239">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1463" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:04:42 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1239283" />
  <Command __id="1467" _type="PauseCommand" date="Tue Feb 23 21:04:43 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1240640">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1183]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1469" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:45 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1241950" />
  <Command __id="1471" _type="InsertStringCommand" date="Tue Feb 23 21:04:45 EST 2021" starttimestamp="1614131043210" timestamp="1241962" timestamp2="1241962">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1473" _type="InsertStringCommand" date="Tue Feb 23 21:04:45 EST 2021" starttimestamp="1614131043210" timestamp="1242192" timestamp2="1242192">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1474" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:04:45 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1242237" />
  <Command __id="1477" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:45 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1242698" />
  <Command __id="1479" _type="InsertStringCommand" date="Tue Feb 23 21:04:46 EST 2021" starttimestamp="1614131043210" timestamp="1242823" timestamp2="1242823">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1480" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:04:46 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1242867" />
  <Command __id="1481" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:46 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1242884" />
  <Command __id="1483" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:04:46 EST 2021" starttimestamp="1614131043210" timestamp="1243399" />
  <Command __id="1485" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:04:46 EST 2021" starttimestamp="1614131043210" timestamp="1243541" />
  <Command __id="1487" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:04:46 EST 2021" starttimestamp="1614131043210" timestamp="1243644" />
  <Command __id="1489" _type="InsertStringCommand" date="Tue Feb 23 21:04:47 EST 2021" starttimestamp="1614131043210" timestamp="1243896" timestamp2="1243896">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1491" _type="InsertStringCommand" date="Tue Feb 23 21:04:47 EST 2021" starttimestamp="1614131043210" timestamp="1243958" timestamp2="1243958">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1492" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:04:47 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1244001" />
  <Command __id="1493" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:47 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1244781" />
  <Command __id="1495" _type="InsertStringCommand" date="Tue Feb 23 21:04:48 EST 2021" starttimestamp="1614131043210" timestamp="1244853" timestamp2="1244853">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1497" _type="PauseCommand" date="Tue Feb 23 21:04:49 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1246382">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1529]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="1498" _type="InsertStringCommand" date="Tue Feb 23 21:04:49 EST 2021" starttimestamp="1614131043210" timestamp="1246388" timestamp2="1246388">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1500" _type="InsertStringCommand" date="Tue Feb 23 21:04:49 EST 2021" starttimestamp="1614131043210" timestamp="1246426" timestamp2="1246426">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1501" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:04:49 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1246469" />
  <Command __id="1503" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:50 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1246823" />
  <Command __id="1505" _type="InsertStringCommand" date="Tue Feb 23 21:04:50 EST 2021" starttimestamp="1614131043210" timestamp="1246837" timestamp2="1246837">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1507" _type="InsertStringCommand" date="Tue Feb 23 21:04:50 EST 2021" starttimestamp="1614131043210" timestamp="1247255" timestamp2="1247255">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1509" _type="InsertStringCommand" date="Tue Feb 23 21:04:51 EST 2021" starttimestamp="1614131043210" timestamp="1247860" timestamp2="1247860">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="1510" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:04:51 EST 2021" starttimestamp="1614131043210" timestamp="1248383" />
  <Command __id="1511" _type="ShellCommand" date="Tue Feb 23 21:04:52 EST 2021" starttimestamp="1614131043210" timestamp="1248891" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1512" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:04:52 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1248927" />
  <Command __id="1514" _type="PauseCommand" date="Tue Feb 23 21:07:19 EST 2021" range="2m-5m" starttimestamp="1614131043210" timestamp="1395944">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[147017]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1513" _type="ShellCommand" date="Tue Feb 23 21:07:19 EST 2021" starttimestamp="1614131043210" timestamp="1395944" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1515" _type="SelectTextCommand" caretOffset="2287" date="Tue Feb 23 21:07:20 EST 2021" end="2293" start="2287" starttimestamp="1614131043210" timestamp="1396832" />
  <Command __id="1516" _type="MoveCaretCommand" caretOffset="2288" date="Tue Feb 23 21:07:20 EST 2021" docOffset="2288" starttimestamp="1614131043210" timestamp="1397119" />
  <Command __id="1517" _type="MoveCaretCommand" caretOffset="2288" date="Tue Feb 23 21:07:20 EST 2021" docOffset="2288" starttimestamp="1614131043210" timestamp="1397303" />
  <Command __id="1519" _type="PauseCommand" date="Tue Feb 23 21:07:21 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1398307">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1004]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1518" _type="MoveCaretCommand" caretOffset="2288" date="Tue Feb 23 21:07:21 EST 2021" docOffset="2288" starttimestamp="1614131043210" timestamp="1398307" />
  <Command __id="1520" _type="SelectTextCommand" caretOffset="2292" date="Tue Feb 23 21:07:21 EST 2021" end="2292" start="2287" starttimestamp="1614131043210" timestamp="1398486" />
  <Command __id="1522" _type="PauseCommand" date="Tue Feb 23 21:07:23 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1399898">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1412]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1521" _type="MoveCaretCommand" caretOffset="2293" date="Tue Feb 23 21:07:23 EST 2021" docOffset="2293" starttimestamp="1614131043210" timestamp="1399898" />
  <Command __id="1524" _type="InsertStringCommand" date="Tue Feb 23 21:07:23 EST 2021" starttimestamp="1614131043210" timestamp="1400545" timestamp2="1400545">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1525" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:07:24 EST 2021" starttimestamp="1614131043210" timestamp="1401313" />
  <Command __id="1526" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:07:24 EST 2021" starttimestamp="1614131043210" timestamp="1401540" />
  <Command __id="1528" _type="InsertStringCommand" date="Tue Feb 23 21:07:24 EST 2021" starttimestamp="1614131043210" timestamp="1401669" timestamp2="1401669">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1530" _type="PauseCommand" date="Tue Feb 23 21:07:27 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1404012">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2343]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1531" _type="InsertStringCommand" date="Tue Feb 23 21:07:27 EST 2021" starttimestamp="1614131043210" timestamp="1404016" timestamp2="1404016">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1532" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:07:27 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1404059" />
  <Command __id="1537" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:07:27 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1404459" />
  <Command __id="1539" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:07:28 EST 2021" starttimestamp="1614131043210" timestamp="1405392" />
  <Command __id="1540" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:07:29 EST 2021" starttimestamp="1614131043210" timestamp="1406197" />
  <Command __id="1541" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:07:29 EST 2021" starttimestamp="1614131043210" timestamp="1406375" />
  <Command __id="1542" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:07:29 EST 2021" starttimestamp="1614131043210" timestamp="1406505" />
  <Command __id="1543" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:07:29 EST 2021" starttimestamp="1614131043210" timestamp="1406637" />
  <Command __id="1544" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:07:30 EST 2021" starttimestamp="1614131043210" timestamp="1406964" />
  <Command __id="1545" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:07:30 EST 2021" starttimestamp="1614131043210" timestamp="1407090" />
  <Command __id="1547" _type="InsertStringCommand" date="Tue Feb 23 21:07:30 EST 2021" starttimestamp="1614131043210" timestamp="1407783" timestamp2="1407783">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1549" _type="InsertStringCommand" date="Tue Feb 23 21:07:31 EST 2021" starttimestamp="1614131043210" timestamp="1408540" timestamp2="1408540">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1550" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:07:31 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1408583" />
  <Command __id="1558" _type="PauseCommand" date="Tue Feb 23 21:07:33 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1410470">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1153]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1557" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:07:33 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1410470" />
  <Command __id="1560" _type="InsertStringCommand" date="Tue Feb 23 21:07:33 EST 2021" starttimestamp="1614131043210" timestamp="1410485" timestamp2="1410485">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1562" _type="PauseCommand" date="Tue Feb 23 21:07:34 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1411694">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1209]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1563" _type="InsertStringCommand" date="Tue Feb 23 21:07:34 EST 2021" starttimestamp="1614131043210" timestamp="1411700" timestamp2="1411700">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1565" _type="PauseCommand" date="Tue Feb 23 21:07:36 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1413014">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1314]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1566" _type="InsertStringCommand" date="Tue Feb 23 21:07:36 EST 2021" starttimestamp="1614131043210" timestamp="1413018" timestamp2="1413018">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1567" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:07:36 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1413060" />
  <Command __id="1569" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:07:37 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1413877" />
  <Command __id="1571" _type="InsertStringCommand" date="Tue Feb 23 21:07:37 EST 2021" starttimestamp="1614131043210" timestamp="1414165" timestamp2="1414165">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1573" _type="InsertStringCommand" date="Tue Feb 23 21:07:37 EST 2021" starttimestamp="1614131043210" timestamp="1414298" timestamp2="1414298">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1575" _type="InsertStringCommand" date="Tue Feb 23 21:07:37 EST 2021" starttimestamp="1614131043210" timestamp="1414391" timestamp2="1414391">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1577" _type="InsertStringCommand" date="Tue Feb 23 21:07:38 EST 2021" starttimestamp="1614131043210" timestamp="1414981" timestamp2="1414981">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1578" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:07:38 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1415023" />
  <Command __id="1581" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:07:38 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1415246" />
  <Command __id="1583" _type="InsertStringCommand" date="Tue Feb 23 21:07:38 EST 2021" starttimestamp="1614131043210" timestamp="1415255" timestamp2="1415255">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1584" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:07:38 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1415298" />
  <Command __id="1589" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:07:39 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1416227" />
  <Command __id="1591" _type="InsertStringCommand" date="Tue Feb 23 21:07:39 EST 2021" starttimestamp="1614131043210" timestamp="1416555" timestamp2="1416555">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1592" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:07:39 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1416597" />
  <Command __id="1599" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:07:42 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1419481" />
  <Command __id="1601" _type="InsertStringCommand" date="Tue Feb 23 21:07:42 EST 2021" starttimestamp="1614131043210" timestamp="1419496" timestamp2="1419496">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1603" _type="PauseCommand" date="Tue Feb 23 21:07:43 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1420695">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1199]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1604" _type="InsertStringCommand" date="Tue Feb 23 21:07:43 EST 2021" starttimestamp="1614131043210" timestamp="1420699" timestamp2="1420699">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1605" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:07:44 EST 2021" starttimestamp="1614131043210" timestamp="1421249" />
  <Command __id="1607" _type="InsertStringCommand" date="Tue Feb 23 21:07:44 EST 2021" starttimestamp="1614131043210" timestamp="1421622" timestamp2="1421622">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="1451" _type="Insert" date="Tue Feb 23 21:04:32 EST 2021" docASTNodeCount="5997" docActiveCodeLength="34021" docExpressionCount="4138" docLength="36324" length="1" offset="2222" starttimestamp="1614131043210" timestamp="1229428">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <DocumentChange __id="1455" _type="Insert" date="Tue Feb 23 21:04:35 EST 2021" docASTNodeCount="5996" docActiveCodeLength="34022" docExpressionCount="4138" docLength="36325" length="1" offset="2243" starttimestamp="1614131043210" timestamp="1232035">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="1460" _type="Insert" date="Tue Feb 23 21:04:42 EST 2021" docASTNodeCount="5998" docActiveCodeLength="34027" docExpressionCount="4139" docLength="36330" length="5" offset="2262" repeat="5" starttimestamp="1614131043210" timestamp="1239235" timestamp2="1241252">
    <text><![CDATA[timss]]></text>
  </DocumentChange>
  <DocumentChange __id="1470" _type="Replace" date="Tue Feb 23 21:04:45 EST 2021" docASTNodeCount="5998" docActiveCodeLength="34032" docExpressionCount="4139" docLength="36335" endLine="65" insertionLength="10" int_docASTNodeCount="5996" int_docActiveCodeLength="34022" int_docExpressionCount="4138" int_docLength="36325" length="5" offset="2262" startLine="65" starttimestamp="1614131043210" timestamp="1241958">
    <deletedText><![CDATA[timss]]></deletedText>
    <insertedText><![CDATA[timestamps]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1472" _type="Insert" date="Tue Feb 23 21:04:45 EST 2021" docASTNodeCount="6000" docActiveCodeLength="34036" docExpressionCount="4141" docLength="36339" length="4" offset="2272" repeat="4" starttimestamp="1614131043210" timestamp="1242189" timestamp2="1242820">
    <text><![CDATA[.add]]></text>
  </DocumentChange>
  <DocumentChange __id="1482" _type="Delete" date="Tue Feb 23 21:04:46 EST 2021" docASTNodeCount="5996" docActiveCodeLength="34033" docExpressionCount="4138" docLength="36336" endLine="65" length="3" offset="2273" repeat="3" startLine="65" starttimestamp="1614131043210" timestamp="1243397" timestamp2="1243643">
    <text><![CDATA[add]]></text>
  </DocumentChange>
  <DocumentChange __id="1488" _type="Insert" date="Tue Feb 23 21:04:47 EST 2021" docASTNodeCount="6000" docActiveCodeLength="34035" docExpressionCount="4141" docLength="36338" length="2" offset="2273" repeat="2" starttimestamp="1614131043210" timestamp="1243893" timestamp2="1243955">
    <text><![CDATA[pu]]></text>
  </DocumentChange>
  <DocumentChange __id="1494" _type="Replace" date="Tue Feb 23 21:04:47 EST 2021" docASTNodeCount="6002" docActiveCodeLength="34048" docExpressionCount="4143" docLength="36351" endLine="65" insertionLength="15" int_docASTNodeCount="5996" int_docActiveCodeLength="34033" int_docExpressionCount="4138" int_docLength="36336" length="2" offset="2273" startLine="65" starttimestamp="1614131043210" timestamp="1244789">
    <deletedText><![CDATA[pu]]></deletedText>
    <insertedText><![CDATA[put(key, value)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1496" _type="Replace" date="Tue Feb 23 21:04:49 EST 2021" docASTNodeCount="6002" docActiveCodeLength="34046" docExpressionCount="4143" docLength="36349" endLine="65" insertionLength="1" int_docASTNodeCount="6001" int_docActiveCodeLength="34045" int_docExpressionCount="4142" int_docLength="36348" length="3" offset="2277" startLine="65" starttimestamp="1614131043210" timestamp="1246382">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1499" _type="Insert" date="Tue Feb 23 21:04:49 EST 2021" docASTNodeCount="6002" docActiveCodeLength="34048" docExpressionCount="4143" docLength="36351" length="2" offset="2278" repeat="2" starttimestamp="1614131043210" timestamp="1246425" timestamp2="1246595">
    <text><![CDATA[ok]]></text>
  </DocumentChange>
  <DocumentChange __id="1504" _type="Replace" date="Tue Feb 23 21:04:50 EST 2021" docASTNodeCount="6002" docActiveCodeLength="34050" docExpressionCount="4143" docLength="36353" endLine="65" insertionLength="5" int_docASTNodeCount="6001" int_docActiveCodeLength="34045" int_docExpressionCount="4142" int_docLength="36348" length="3" offset="2277" startLine="65" starttimestamp="1614131043210" timestamp="1246831">
    <deletedText><![CDATA[tok]]></deletedText>
    <insertedText><![CDATA[token]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1506" _type="Insert" date="Tue Feb 23 21:04:50 EST 2021" docASTNodeCount="6004" docActiveCodeLength="34053" docExpressionCount="4145" docLength="36356" length="3" offset="2282" repeat="2" starttimestamp="1614131043210" timestamp="1247251" timestamp2="1247856">
    <text><![CDATA[[0]]]></text>
  </DocumentChange>
  <DocumentChange __id="1523" _type="Insert" date="Tue Feb 23 21:07:23 EST 2021" docASTNodeCount="6004" docActiveCodeLength="34054" docExpressionCount="4145" docLength="36357" length="1" offset="2293" starttimestamp="1614131043210" timestamp="1400538">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1527" _type="Insert" date="Tue Feb 23 21:07:24 EST 2021" docASTNodeCount="6004" docActiveCodeLength="34060" docExpressionCount="4145" docLength="36363" length="6" offset="2256" starttimestamp="1614131043210" timestamp="1401659">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="1529" _type="Insert" date="Tue Feb 23 21:07:27 EST 2021" docASTNodeCount="6007" docActiveCodeLength="34065" docExpressionCount="4145" docLength="36368" length="5" offset="2262" repeat="5" starttimestamp="1614131043210" timestamp="1404012" timestamp2="1404452">
    <text><![CDATA[long ]]></text>
  </DocumentChange>
  <DocumentChange __id="1538" _type="Delete" date="Tue Feb 23 21:07:28 EST 2021" docASTNodeCount="6004" docActiveCodeLength="34060" docExpressionCount="4145" docLength="36363" endLine="65" length="5" offset="2262" startLine="65" starttimestamp="1614131043210" timestamp="1405389">
    <text><![CDATA[long ]]></text>
  </DocumentChange>
  <DocumentChange __id="1546" _type="Insert" date="Tue Feb 23 21:07:30 EST 2021" docASTNodeCount="6007" docActiveCodeLength="34072" docExpressionCount="4147" docLength="36375" length="12" offset="2053" repeat="8" starttimestamp="1614131043210" timestamp="1407774" timestamp2="1409317">
    <text><![CDATA[
			datefor]]></text>
  </DocumentChange>
  <DocumentChange __id="1559" _type="Replace" date="Tue Feb 23 21:07:33 EST 2021" docASTNodeCount="6007" docActiveCodeLength="34075" docExpressionCount="4147" docLength="36378" endLine="60" insertionLength="10" int_docASTNodeCount="6004" int_docActiveCodeLength="34065" int_docExpressionCount="4145" int_docLength="36368" length="7" offset="2058" startLine="60" starttimestamp="1614131043210" timestamp="1410478">
    <deletedText><![CDATA[datefor]]></deletedText>
    <insertedText><![CDATA[DateFormat]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1561" _type="Insert" date="Tue Feb 23 21:07:34 EST 2021" docASTNodeCount="6010" docActiveCodeLength="34085" docExpressionCount="4148" docLength="36388" length="10" offset="2068" repeat="10" starttimestamp="1614131043210" timestamp="1411694" timestamp2="1415251">
    <text><![CDATA[ df = ne e]]></text>
  </DocumentChange>
  <DocumentChange __id="1585" _type="Delete" date="Tue Feb 23 21:07:38 EST 2021" docASTNodeCount="6010" docActiveCodeLength="34083" docExpressionCount="4148" docLength="36386" endLine="60" length="2" offset="2076" repeat="2" startLine="60" starttimestamp="1614131043210" timestamp="1415710" timestamp2="1415864">
    <text><![CDATA[ e]]></text>
  </DocumentChange>
  <DocumentChange __id="1587" _type="Insert" date="Tue Feb 23 21:07:39 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34092" docExpressionCount="4149" docLength="36395" length="9" offset="2076" repeat="9" starttimestamp="1614131043210" timestamp="1416031" timestamp2="1418639">
    <text><![CDATA[w datefor]]></text>
  </DocumentChange>
  <DocumentChange __id="1600" _type="Replace" date="Tue Feb 23 21:07:42 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34095" docExpressionCount="4149" docLength="36398" endLine="60" insertionLength="10" int_docASTNodeCount="6010" int_docActiveCodeLength="34085" int_docExpressionCount="4149" int_docLength="36388" length="7" offset="2078" startLine="60" starttimestamp="1614131043210" timestamp="1419489">
    <deletedText><![CDATA[datefor]]></deletedText>
    <insertedText><![CDATA[DateFormat]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1602" _type="Insert" date="Tue Feb 23 21:07:43 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34098" docExpressionCount="4149" docLength="36401" length="3" offset="2088" repeat="2" starttimestamp="1614131043210" timestamp="1420695" timestamp2="1421616">
    <text><![CDATA[();]]></text>
  </DocumentChange>
  <DocumentChange __id="1611" _type="Replace" date="Tue Feb 23 21:07:48 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34089" docExpressionCount="4149" docLength="36392" endLine="60" insertionLength="1" int_docASTNodeCount="6010" int_docActiveCodeLength="34088" int_docExpressionCount="4149" int_docLength="36391" length="10" offset="2058" startLine="60" starttimestamp="1614131043210" timestamp="1425040">
    <deletedText><![CDATA[DateFormat]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <Command __id="1609" _type="PauseCommand" date="Tue Feb 23 21:07:47 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1424178">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2556]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1608" _type="MoveCaretCommand" caretOffset="2063" date="Tue Feb 23 21:07:47 EST 2021" docOffset="2063" starttimestamp="1614131043210" timestamp="1424178" />
  <Command __id="1610" _type="SelectTextCommand" caretOffset="2068" date="Tue Feb 23 21:07:47 EST 2021" end="2068" start="2058" starttimestamp="1614131043210" timestamp="1424342" />
  <Command __id="1612" _type="InsertStringCommand" date="Tue Feb 23 21:07:48 EST 2021" starttimestamp="1614131043210" timestamp="1425047" timestamp2="1425047">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1614" _type="InsertStringCommand" date="Tue Feb 23 21:07:48 EST 2021" starttimestamp="1614131043210" timestamp="1425078" timestamp2="1425078">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1615" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:07:48 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1425121" />
  <Command __id="1622" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:07:50 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1427260" />
  <Command __id="1624" _type="InsertStringCommand" date="Tue Feb 23 21:07:50 EST 2021" starttimestamp="1614131043210" timestamp="1427275" timestamp2="1427275">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1626" _type="PauseCommand" date="Tue Feb 23 21:07:52 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1429072">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1797]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1625" _type="MoveCaretCommand" caretOffset="2089" date="Tue Feb 23 21:07:52 EST 2021" docOffset="2089" starttimestamp="1614131043210" timestamp="1429072" />
  <Command __id="1627" _type="SelectTextCommand" caretOffset="2094" date="Tue Feb 23 21:07:52 EST 2021" end="2094" start="2084" starttimestamp="1614131043210" timestamp="1429220" />
  <Command __id="1629" _type="InsertStringCommand" date="Tue Feb 23 21:07:53 EST 2021" starttimestamp="1614131043210" timestamp="1429819" timestamp2="1429819">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1631" _type="InsertStringCommand" date="Tue Feb 23 21:07:53 EST 2021" starttimestamp="1614131043210" timestamp="1429859" timestamp2="1429859">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1633" _type="InsertStringCommand" date="Tue Feb 23 21:07:53 EST 2021" starttimestamp="1614131043210" timestamp="1429906" timestamp2="1429906">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1634" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:07:53 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1429944" />
  <Command __id="1641" _type="PauseCommand" date="Tue Feb 23 21:07:57 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1433868">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[3075]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1640" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:07:57 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1433868" />
  <Command __id="1644" _type="InsertStringCommand" date="Tue Feb 23 21:07:57 EST 2021" starttimestamp="1614131043210" timestamp="1433905" timestamp2="1433905">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1646" _type="PauseCommand" date="Tue Feb 23 21:07:58 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1435290">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1385]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1647" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 23 21:07:58 EST 2021" starttimestamp="1614131043210" timestamp="1435296" />
  <Command __id="1648" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:07:58 EST 2021" starttimestamp="1614131043210" timestamp="1435773" />
  <Command __id="1650" _type="PauseCommand" date="Tue Feb 23 21:08:02 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1438926">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3153]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1651" _type="InsertStringCommand" date="Tue Feb 23 21:08:02 EST 2021" starttimestamp="1614131043210" timestamp="1438930" timestamp2="1438930">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="1653" _type="PauseCommand" date="Tue Feb 23 21:08:05 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1442018">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3088]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1654" _type="InsertStringCommand" date="Tue Feb 23 21:08:05 EST 2021" starttimestamp="1614131043210" timestamp="1442020" timestamp2="1442020">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1656" _type="InsertStringCommand" date="Tue Feb 23 21:08:05 EST 2021" starttimestamp="1614131043210" timestamp="1442150" timestamp2="1442150">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1658" _type="PauseCommand" date="Tue Feb 23 21:08:08 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1444824">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2674]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1659" _type="InsertStringCommand" date="Tue Feb 23 21:08:08 EST 2021" starttimestamp="1614131043210" timestamp="1444825" timestamp2="1444825">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="1661" _type="PauseCommand" date="Tue Feb 23 21:08:10 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1446895">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2070]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1662" _type="InsertStringCommand" date="Tue Feb 23 21:08:10 EST 2021" starttimestamp="1614131043210" timestamp="1446897" timestamp2="1446897">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1664" _type="InsertStringCommand" date="Tue Feb 23 21:08:10 EST 2021" starttimestamp="1614131043210" timestamp="1447028" timestamp2="1447028">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1666" _type="PauseCommand" date="Tue Feb 23 21:08:11 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1448708">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1680]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1665" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:08:11 EST 2021" starttimestamp="1614131043210" timestamp="1448708" />
  <Command __id="1667" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:08:12 EST 2021" starttimestamp="1614131043210" timestamp="1448858" />
  <Command __id="1668" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:08:12 EST 2021" starttimestamp="1614131043210" timestamp="1449015" />
  <Command __id="1670" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:08:12 EST 2021" starttimestamp="1614131043210" timestamp="1449429" />
  <Command __id="1672" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:08:12 EST 2021" starttimestamp="1614131043210" timestamp="1449556" />
  <Command __id="1674" _type="InsertStringCommand" date="Tue Feb 23 21:08:13 EST 2021" starttimestamp="1614131043210" timestamp="1450088" timestamp2="1450088">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1676" _type="InsertStringCommand" date="Tue Feb 23 21:08:13 EST 2021" starttimestamp="1614131043210" timestamp="1450197" timestamp2="1450197">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="1678" _type="PauseCommand" date="Tue Feb 23 21:08:29 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="1466635">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[16438]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1677" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:08:29 EST 2021" starttimestamp="1614131043210" timestamp="1466635" />
  <Command __id="1680" _type="PauseCommand" date="Tue Feb 23 21:08:33 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1469892">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3257]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1679" _type="ShellCommand" date="Tue Feb 23 21:08:33 EST 2021" starttimestamp="1614131043210" timestamp="1469892" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1681" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:08:33 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1469923" />
  <Command __id="1683" _type="PauseCommand" date="Tue Feb 23 21:08:37 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1474061">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[4138]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1682" _type="ShellCommand" date="Tue Feb 23 21:08:37 EST 2021" starttimestamp="1614131043210" timestamp="1474061" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1684" _type="MoveCaretCommand" caretOffset="2110" date="Tue Feb 23 21:08:37 EST 2021" docOffset="2110" starttimestamp="1614131043210" timestamp="1474147" />
  <Command __id="1686" _type="InsertStringCommand" date="Tue Feb 23 21:08:38 EST 2021" starttimestamp="1614131043210" timestamp="1475010" timestamp2="1475010">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1688" _type="InsertStringCommand" date="Tue Feb 23 21:08:39 EST 2021" starttimestamp="1614131043210" timestamp="1475852" timestamp2="1475852">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1689" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:08:39 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1475895" />
  <Command __id="1694" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:08:39 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1476291" />
  <Command __id="1696" _type="PauseCommand" date="Tue Feb 23 21:08:40 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1477574">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1283]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1697" _type="InsertStringCommand" date="Tue Feb 23 21:08:40 EST 2021" starttimestamp="1614131043210" timestamp="1477578" timestamp2="1477578">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1698" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:08:40 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1477621" />
  <Command __id="1700" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:08:41 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1477841" />
  <Command __id="1702" _type="InsertStringCommand" date="Tue Feb 23 21:08:41 EST 2021" starttimestamp="1614131043210" timestamp="1477970" timestamp2="1477970">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1704" _type="InsertStringCommand" date="Tue Feb 23 21:08:41 EST 2021" starttimestamp="1614131043210" timestamp="1478020" timestamp2="1478020">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1705" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:08:41 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1478063" />
  <Command __id="1706" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:08:41 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1478080" />
  <Command __id="1708" _type="InsertStringCommand" date="Tue Feb 23 21:08:41 EST 2021" starttimestamp="1614131043210" timestamp="1478179" timestamp2="1478179">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1709" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:08:41 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1478273" />
  <Command __id="1710" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:08:41 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1478289" />
  <Command __id="1712" _type="InsertStringCommand" date="Tue Feb 23 21:08:41 EST 2021" starttimestamp="1614131043210" timestamp="1478447" timestamp2="1478447">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1714" _type="InsertStringCommand" date="Tue Feb 23 21:08:41 EST 2021" starttimestamp="1614131043210" timestamp="1478531" timestamp2="1478531">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1716" _type="InsertStringCommand" date="Tue Feb 23 21:08:41 EST 2021" starttimestamp="1614131043210" timestamp="1478590" timestamp2="1478590">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1718" _type="InsertStringCommand" date="Tue Feb 23 21:08:41 EST 2021" starttimestamp="1614131043210" timestamp="1478683" timestamp2="1478683">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1720" _type="InsertStringCommand" date="Tue Feb 23 21:08:41 EST 2021" starttimestamp="1614131043210" timestamp="1478774" timestamp2="1478774">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1722" _type="InsertStringCommand" date="Tue Feb 23 21:08:42 EST 2021" starttimestamp="1614131043210" timestamp="1478996" timestamp2="1478996">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1724" _type="InsertStringCommand" date="Tue Feb 23 21:08:42 EST 2021" starttimestamp="1614131043210" timestamp="1479168" timestamp2="1479168">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1726" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:08:42 EST 2021" starttimestamp="1614131043210" timestamp="1479377" />
  <Command __id="1728" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:08:42 EST 2021" starttimestamp="1614131043210" timestamp="1479506" />
  <Command __id="1730" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:08:42 EST 2021" starttimestamp="1614131043210" timestamp="1479622" />
  <Command __id="1732" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:08:42 EST 2021" starttimestamp="1614131043210" timestamp="1479743" />
  <Command __id="1734" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:08:43 EST 2021" starttimestamp="1614131043210" timestamp="1479859" />
  <Command __id="1736" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:08:43 EST 2021" starttimestamp="1614131043210" timestamp="1479991" />
  <Command __id="1738" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:08:43 EST 2021" starttimestamp="1614131043210" timestamp="1480117" />
  <Command __id="1740" _type="InsertStringCommand" date="Tue Feb 23 21:08:43 EST 2021" starttimestamp="1614131043210" timestamp="1480390" timestamp2="1480390">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="1742" _type="InsertStringCommand" date="Tue Feb 23 21:08:43 EST 2021" starttimestamp="1614131043210" timestamp="1480543" timestamp2="1480543">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1744" _type="InsertStringCommand" date="Tue Feb 23 21:08:43 EST 2021" starttimestamp="1614131043210" timestamp="1480617" timestamp2="1480617">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1746" _type="InsertStringCommand" date="Tue Feb 23 21:08:43 EST 2021" starttimestamp="1614131043210" timestamp="1480693" timestamp2="1480693">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1747" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:08:43 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1480786" />
  <Command __id="1748" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:08:44 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1480804" />
  <Command __id="1750" _type="InsertStringCommand" date="Tue Feb 23 21:08:44 EST 2021" starttimestamp="1614131043210" timestamp="1480867" timestamp2="1480867">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1752" _type="InsertStringCommand" date="Tue Feb 23 21:08:44 EST 2021" starttimestamp="1614131043210" timestamp="1481189" timestamp2="1481189">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1754" _type="InsertStringCommand" date="Tue Feb 23 21:08:44 EST 2021" starttimestamp="1614131043210" timestamp="1481284" timestamp2="1481284">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1756" _type="PauseCommand" date="Tue Feb 23 21:08:48 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1485456">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4172]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1757" _type="InsertStringCommand" date="Tue Feb 23 21:08:48 EST 2021" starttimestamp="1614131043210" timestamp="1485461" timestamp2="1485461">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1758" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:08:48 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1485554" />
  <Command __id="1760" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:08:48 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1485766" />
  <Command __id="1762" _type="InsertStringCommand" date="Tue Feb 23 21:08:48 EST 2021" starttimestamp="1614131043210" timestamp="1485781" timestamp2="1485781">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1763" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:08:49 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1485832" />
  <Command __id="1770" _type="PauseCommand" date="Tue Feb 23 21:08:52 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1489074">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2361]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1778" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:08:54 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1490842" />
  <Command __id="1780" _type="InsertStringCommand" date="Tue Feb 23 21:08:54 EST 2021" starttimestamp="1614131043210" timestamp="1490920" timestamp2="1490920">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1782" _type="PauseCommand" date="Tue Feb 23 21:08:59 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1496220">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5300]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1781" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:08:59 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1496220" />
  <Command __id="1783" _type="MoveCaretCommand" caretOffset="2135" date="Tue Feb 23 21:08:59 EST 2021" docOffset="2135" starttimestamp="1614131043210" timestamp="1496294" />
  <Command __id="1784" _type="SelectTextCommand" caretOffset="2140" date="Tue Feb 23 21:08:59 EST 2021" end="2140" start="2135" starttimestamp="1614131043210" timestamp="1496433" />
  <Command __id="1785" _type="SelectTextCommand" caretOffset="2150" date="Tue Feb 23 21:08:59 EST 2021" end="2150" start="2112" starttimestamp="1614131043210" timestamp="1496577" />
  <Command __id="1787" _type="CutCommand" date="Tue Feb 23 21:08:59 EST 2021" starttimestamp="1614131043210" timestamp="1496784" />
  <Command __id="1788" _type="MoveCaretCommand" caretOffset="2319" date="Tue Feb 23 21:09:00 EST 2021" docOffset="2319" starttimestamp="1614131043210" timestamp="1497540" />
  <Command __id="1790" _type="PasteCommand" date="Tue Feb 23 21:09:01 EST 2021" starttimestamp="1614131043210" timestamp="1497795" />
  <DocumentChange __id="1613" _type="Insert" date="Tue Feb 23 21:07:48 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34096" docExpressionCount="4149" docLength="36399" length="7" offset="2059" repeat="7" starttimestamp="1614131043210" timestamp="1425073" timestamp2="1426283">
    <text><![CDATA[impleda]]></text>
  </DocumentChange>
  <DocumentChange __id="1623" _type="Replace" date="Tue Feb 23 21:07:50 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34104" docExpressionCount="4149" docLength="36407" endLine="60" insertionLength="16" int_docASTNodeCount="6010" int_docActiveCodeLength="34088" int_docExpressionCount="4149" int_docLength="36391" length="8" offset="2058" startLine="60" starttimestamp="1614131043210" timestamp="1427267">
    <deletedText><![CDATA[simpleda]]></deletedText>
    <insertedText><![CDATA[SimpleDateFormat]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1628" _type="Replace" date="Tue Feb 23 21:07:53 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34095" docExpressionCount="4149" docLength="36398" endLine="60" insertionLength="1" int_docASTNodeCount="5918" int_docActiveCodeLength="34094" int_docExpressionCount="4092" int_docLength="36397" length="10" offset="2084" startLine="60" starttimestamp="1614131043210" timestamp="1429810">
    <deletedText><![CDATA[DateFormat]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1630" _type="Insert" date="Tue Feb 23 21:07:53 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34102" docExpressionCount="4149" docLength="36405" length="7" offset="2085" repeat="7" starttimestamp="1614131043210" timestamp="1429851" timestamp2="1430793">
    <text><![CDATA[impleda]]></text>
  </DocumentChange>
  <DocumentChange __id="1642" _type="Replace" date="Tue Feb 23 21:07:57 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34115" docExpressionCount="4149" docLength="36418" endLine="60" insertionLength="16" int_docASTNodeCount="6012" int_docActiveCodeLength="34099" int_docExpressionCount="4149" int_docLength="36402" length="3" offset="2084" startLine="60" starttimestamp="1614131043210" timestamp="1433875">
    <deletedText><![CDATA[sim]]></deletedText>
    <insertedText><![CDATA[SimpleDateFormat]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1643" _type="Delete" date="Tue Feb 23 21:07:57 EST 2021" docASTNodeCount="6012" docActiveCodeLength="34110" docExpressionCount="4149" docLength="36413" endLine="60" length="5" offset="2100" repeat="2" startLine="60" starttimestamp="1614131043210" timestamp="1433884" timestamp2="1435290">
    <text><![CDATA[pleda]]></text>
  </DocumentChange>
  <DocumentChange __id="1649" _type="Insert" date="Tue Feb 23 21:08:02 EST 2021" docASTNodeCount="6013" docActiveCodeLength="34112" docExpressionCount="4150" docLength="36415" length="2" offset="2101" starttimestamp="1614131043210" timestamp="1438926">
    <text><![CDATA[""]]></text>
  </DocumentChange>
  <DocumentChange __id="1652" _type="Insert" date="Tue Feb 23 21:08:05 EST 2021" docASTNodeCount="6013" docActiveCodeLength="34114" docExpressionCount="4150" docLength="36417" length="2" offset="2102" repeat="2" starttimestamp="1614131043210" timestamp="1442018" timestamp2="1442148">
    <text><![CDATA[hh]]></text>
  </DocumentChange>
  <DocumentChange __id="1657" _type="Insert" date="Tue Feb 23 21:08:08 EST 2021" docASTNodeCount="6013" docActiveCodeLength="34115" docExpressionCount="4150" docLength="36418" length="1" offset="2104" starttimestamp="1614131043210" timestamp="1444824">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <DocumentChange __id="1660" _type="Insert" date="Tue Feb 23 21:08:10 EST 2021" docASTNodeCount="6013" docActiveCodeLength="34117" docExpressionCount="4150" docLength="36420" length="2" offset="2105" repeat="2" starttimestamp="1614131043210" timestamp="1446895" timestamp2="1447027">
    <text><![CDATA[mm]]></text>
  </DocumentChange>
  <DocumentChange __id="1669" _type="Delete" date="Tue Feb 23 21:08:12 EST 2021" docASTNodeCount="6013" docActiveCodeLength="34115" docExpressionCount="4150" docLength="36418" endLine="60" length="2" offset="2102" repeat="2" startLine="60" starttimestamp="1614131043210" timestamp="1449427" timestamp2="1449554">
    <text><![CDATA[hh]]></text>
  </DocumentChange>
  <DocumentChange __id="1673" _type="Insert" date="Tue Feb 23 21:08:13 EST 2021" docASTNodeCount="6013" docActiveCodeLength="34117" docExpressionCount="4150" docLength="36420" length="2" offset="2102" repeat="2" starttimestamp="1614131043210" timestamp="1450086" timestamp2="1450196">
    <text><![CDATA[HH]]></text>
  </DocumentChange>
  <DocumentChange __id="1685" _type="Insert" date="Tue Feb 23 21:08:38 EST 2021" docASTNodeCount="6016" docActiveCodeLength="34139" docExpressionCount="4152" docLength="36442" length="22" offset="2110" repeat="18" starttimestamp="1614131043210" timestamp="1475002" timestamp2="1479164">
    <text><![CDATA[
			long starttime = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1725" _type="Delete" date="Tue Feb 23 21:08:42 EST 2021" docASTNodeCount="6017" docActiveCodeLength="34132" docExpressionCount="4151" docLength="36435" endLine="61" length="7" offset="2125" repeat="7" startLine="61" starttimestamp="1614131043210" timestamp="1479374" timestamp2="1480115">
    <text><![CDATA[time = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1739" _type="Insert" date="Tue Feb 23 21:08:43 EST 2021" docASTNodeCount="6016" docActiveCodeLength="34139" docExpressionCount="4152" docLength="36442" length="7" offset="2125" repeat="7" starttimestamp="1614131043210" timestamp="1480386" timestamp2="1481279">
    <text><![CDATA[Time = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1755" _type="Insert" date="Tue Feb 23 21:08:48 EST 2021" docASTNodeCount="6018" docActiveCodeLength="34141" docExpressionCount="4152" docLength="36444" length="2" offset="2132" repeat="2" starttimestamp="1614131043210" timestamp="1485456" timestamp2="1485756">
    <text><![CDATA[df]]></text>
  </DocumentChange>
  <DocumentChange __id="1761" _type="Replace" date="Tue Feb 23 21:08:48 EST 2021" docASTNodeCount="6018" docActiveCodeLength="34142" docExpressionCount="4154" docLength="36445" endLine="61" insertionLength="3" int_docASTNodeCount="6016" int_docActiveCodeLength="34139" int_docExpressionCount="4152" int_docLength="36442" length="2" offset="2132" startLine="61" starttimestamp="1614131043210" timestamp="1485774">
    <deletedText><![CDATA[df]]></deletedText>
    <insertedText><![CDATA[df.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1764" _type="Insert" date="Tue Feb 23 21:08:49 EST 2021" docASTNodeCount="6020" docActiveCodeLength="34147" docExpressionCount="4154" docLength="36450" length="5" offset="2135" repeat="5" starttimestamp="1614131043210" timestamp="1486277" timestamp2="1486713">
    <text><![CDATA[forma]]></text>
  </DocumentChange>
  <DocumentChange __id="1769" _type="Delete" date="Tue Feb 23 21:08:52 EST 2021" docASTNodeCount="6018" docActiveCodeLength="34142" docExpressionCount="4154" docLength="36445" endLine="61" length="5" offset="2135" repeat="5" startLine="61" starttimestamp="1614131043210" timestamp="1489074" timestamp2="1489970">
    <text><![CDATA[forma]]></text>
  </DocumentChange>
  <DocumentChange __id="1775" _type="Insert" date="Tue Feb 23 21:08:53 EST 2021" docASTNodeCount="6020" docActiveCodeLength="34145" docExpressionCount="4154" docLength="36448" length="3" offset="2135" repeat="3" starttimestamp="1614131043210" timestamp="1490188" timestamp2="1490336">
    <text><![CDATA[par]]></text>
  </DocumentChange>
  <DocumentChange __id="1779" _type="Replace" date="Tue Feb 23 21:08:54 EST 2021" docASTNodeCount="6021" docActiveCodeLength="34155" docExpressionCount="4155" docLength="36458" endLine="61" insertionLength="13" int_docASTNodeCount="6018" int_docActiveCodeLength="34142" int_docExpressionCount="4154" int_docLength="36445" length="3" offset="2135" startLine="61" starttimestamp="1614131043210" timestamp="1490850">
    <deletedText><![CDATA[par]]></deletedText>
    <insertedText><![CDATA[parse(source)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1786" _type="Delete" date="Tue Feb 23 21:08:59 EST 2021" docASTNodeCount="6013" docActiveCodeLength="34117" docExpressionCount="4150" docLength="36420" endLine="62" length="38" offset="2112" startLine="61" starttimestamp="1614131043210" timestamp="1496760">
    <text><![CDATA[			long startTime = df.parse(source)
]]></text>
  </DocumentChange>
  <DocumentChange __id="1789" _type="Replace" date="Tue Feb 23 21:09:00 EST 2021" docASTNodeCount="6021" docActiveCodeLength="34152" docExpressionCount="4155" docLength="36455" endLine="66" insertionLength="39" int_docASTNodeCount="6013" int_docActiveCodeLength="34113" int_docExpressionCount="4150" int_docLength="36416" length="4" offset="2315" startLine="66" starttimestamp="1614131043210" timestamp="1497787">
    <deletedText><![CDATA[				]]></deletedText>
    <insertedText><![CDATA[				long startTime = df.parse(source)
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1794" _type="Replace" date="Tue Feb 23 21:09:03 EST 2021" docASTNodeCount="6021" docActiveCodeLength="34147" docExpressionCount="4155" docLength="36450" endLine="66" insertionLength="1" int_docASTNodeCount="6020" int_docActiveCodeLength="34146" int_docExpressionCount="4154" int_docLength="36449" length="6" offset="2345" startLine="66" starttimestamp="1614131043210" timestamp="1499952">
    <deletedText><![CDATA[source]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <Command __id="1792" _type="PauseCommand" date="Tue Feb 23 21:09:02 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1499076">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1281]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1791" _type="MoveCaretCommand" caretOffset="2350" date="Tue Feb 23 21:09:02 EST 2021" docOffset="2350" starttimestamp="1614131043210" timestamp="1499076" />
  <Command __id="1793" _type="SelectTextCommand" caretOffset="2351" date="Tue Feb 23 21:09:02 EST 2021" end="2351" start="2345" starttimestamp="1614131043210" timestamp="1499236" />
  <Command __id="1795" _type="InsertStringCommand" date="Tue Feb 23 21:09:03 EST 2021" starttimestamp="1614131043210" timestamp="1499959" timestamp2="1499959">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1797" _type="InsertStringCommand" date="Tue Feb 23 21:09:03 EST 2021" starttimestamp="1614131043210" timestamp="1499977" timestamp2="1499977">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1799" _type="InsertStringCommand" date="Tue Feb 23 21:09:03 EST 2021" starttimestamp="1614131043210" timestamp="1500021" timestamp2="1500021">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1800" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:03 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1500062" />
  <Command __id="1802" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:03 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1500304" />
  <Command __id="1804" _type="InsertStringCommand" date="Tue Feb 23 21:09:03 EST 2021" starttimestamp="1614131043210" timestamp="1500320" timestamp2="1500320">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1806" _type="InsertStringCommand" date="Tue Feb 23 21:09:04 EST 2021" starttimestamp="1614131043210" timestamp="1501065" timestamp2="1501065">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1808" _type="InsertStringCommand" date="Tue Feb 23 21:09:04 EST 2021" starttimestamp="1614131043210" timestamp="1501246" timestamp2="1501246">
    <data><![CDATA[4]]></data>
  </Command>
  <Command __id="1810" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 23 21:09:05 EST 2021" starttimestamp="1614131043210" timestamp="1502234" />
  <Command __id="1812" _type="PauseCommand" date="Tue Feb 23 21:09:07 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1503919">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1685]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1813" _type="InsertStringCommand" date="Tue Feb 23 21:09:07 EST 2021" starttimestamp="1614131043210" timestamp="1503924" timestamp2="1503924">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="1814" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:09:07 EST 2021" starttimestamp="1614131043210" timestamp="1504321" />
  <Command __id="1816" _type="PauseCommand" date="Tue Feb 23 21:09:09 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1506105">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1784]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1817" _type="InsertStringCommand" date="Tue Feb 23 21:09:09 EST 2021" starttimestamp="1614131043210" timestamp="1506111" timestamp2="1506111">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1818" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:09 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1506151" />
  <Command __id="1820" _type="PauseCommand" date="Tue Feb 23 21:09:10 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1507376">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1225]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1819" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:10 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1507376" />
  <Command __id="1822" _type="InsertStringCommand" date="Tue Feb 23 21:09:10 EST 2021" starttimestamp="1614131043210" timestamp="1507388" timestamp2="1507388">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1824" _type="InsertStringCommand" date="Tue Feb 23 21:09:10 EST 2021" starttimestamp="1614131043210" timestamp="1507614" timestamp2="1507614">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1826" _type="InsertStringCommand" date="Tue Feb 23 21:09:11 EST 2021" starttimestamp="1614131043210" timestamp="1508370" timestamp2="1508370">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1828" _type="InsertStringCommand" date="Tue Feb 23 21:09:12 EST 2021" starttimestamp="1614131043210" timestamp="1509071" timestamp2="1509071">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1829" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:12 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1509112" />
  <Command __id="1834" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:13 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1509828" />
  <Command __id="1836" _type="InsertStringCommand" date="Tue Feb 23 21:09:13 EST 2021" starttimestamp="1614131043210" timestamp="1510449" timestamp2="1510449">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1837" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:13 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1510465" />
  <Command __id="1839" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:13 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1510640" />
  <Command __id="1841" _type="InsertStringCommand" date="Tue Feb 23 21:09:13 EST 2021" starttimestamp="1614131043210" timestamp="1510769" timestamp2="1510769">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1842" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:14 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1510812" />
  <Command __id="1843" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:14 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1510829" />
  <Command __id="1845" _type="InsertStringCommand" date="Tue Feb 23 21:09:14 EST 2021" starttimestamp="1614131043210" timestamp="1510852" timestamp2="1510852">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1846" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:14 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1510944" />
  <Command __id="1847" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:14 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1510961" />
  <Command __id="1849" _type="InsertStringCommand" date="Tue Feb 23 21:09:14 EST 2021" starttimestamp="1614131043210" timestamp="1511054" timestamp2="1511054">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1850" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:14 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1511147" />
  <Command __id="1851" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:14 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1511164" />
  <Command __id="1853" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:09:14 EST 2021" starttimestamp="1614131043210" timestamp="1511526" />
  <Command __id="1855" _type="InsertStringCommand" date="Tue Feb 23 21:09:14 EST 2021" starttimestamp="1614131043210" timestamp="1511754" timestamp2="1511754">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1857" _type="InsertStringCommand" date="Tue Feb 23 21:09:15 EST 2021" starttimestamp="1614131043210" timestamp="1511835" timestamp2="1511835">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1858" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:15 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1511877" />
  <Command __id="1859" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:15 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1511894" />
  <Command __id="1861" _type="InsertStringCommand" date="Tue Feb 23 21:09:15 EST 2021" starttimestamp="1614131043210" timestamp="1511908" timestamp2="1511908">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1862" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:15 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1512002" />
  <Command __id="1863" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:15 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1512018" />
  <Command __id="1865" _type="InsertStringCommand" date="Tue Feb 23 21:09:15 EST 2021" starttimestamp="1614131043210" timestamp="1512313" timestamp2="1512313">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="1867" _type="InsertStringCommand" date="Tue Feb 23 21:09:15 EST 2021" starttimestamp="1614131043210" timestamp="1512422" timestamp2="1512422">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1869" _type="InsertStringCommand" date="Tue Feb 23 21:09:15 EST 2021" starttimestamp="1614131043210" timestamp="1512499" timestamp2="1512499">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1871" _type="InsertStringCommand" date="Tue Feb 23 21:09:15 EST 2021" starttimestamp="1614131043210" timestamp="1512535" timestamp2="1512535">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1872" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:15 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1512628" />
  <Command __id="1873" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:15 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1512646" />
  <Command __id="1875" _type="InsertStringCommand" date="Tue Feb 23 21:09:15 EST 2021" starttimestamp="1614131043210" timestamp="1512656" timestamp2="1512656">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1877" _type="InsertStringCommand" date="Tue Feb 23 21:09:16 EST 2021" starttimestamp="1614131043210" timestamp="1512795" timestamp2="1512795">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1879" _type="InsertStringCommand" date="Tue Feb 23 21:09:16 EST 2021" starttimestamp="1614131043210" timestamp="1512886" timestamp2="1512886">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1881" _type="InsertStringCommand" date="Tue Feb 23 21:09:16 EST 2021" starttimestamp="1614131043210" timestamp="1513266" timestamp2="1513266">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1883" _type="InsertStringCommand" date="Tue Feb 23 21:09:16 EST 2021" starttimestamp="1614131043210" timestamp="1513356" timestamp2="1513356">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1884" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:16 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1513398" />
  <Command __id="1885" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:16 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1513544" />
  <Command __id="1887" _type="InsertStringCommand" date="Tue Feb 23 21:09:16 EST 2021" starttimestamp="1614131043210" timestamp="1513563" timestamp2="1513563">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1888" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:16 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1513614" />
  <Command __id="1892" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:17 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1514299" />
  <Command __id="1894" _type="InsertStringCommand" date="Tue Feb 23 21:09:17 EST 2021" starttimestamp="1614131043210" timestamp="1514373" timestamp2="1514373">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1896" _type="PauseCommand" date="Tue Feb 23 21:09:18 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1515404">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1031]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="1897" _type="InsertStringCommand" date="Tue Feb 23 21:09:18 EST 2021" starttimestamp="1614131043210" timestamp="1515411" timestamp2="1515411">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1899" _type="InsertStringCommand" date="Tue Feb 23 21:09:18 EST 2021" starttimestamp="1614131043210" timestamp="1515492" timestamp2="1515492">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1900" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:18 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1515533" />
  <Command __id="1902" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:19 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1515880" />
  <Command __id="1904" _type="InsertStringCommand" date="Tue Feb 23 21:09:19 EST 2021" starttimestamp="1614131043210" timestamp="1515894" timestamp2="1515894">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1906" _type="InsertStringCommand" date="Tue Feb 23 21:09:19 EST 2021" starttimestamp="1614131043210" timestamp="1516312" timestamp2="1516312">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1908" _type="InsertStringCommand" date="Tue Feb 23 21:09:19 EST 2021" starttimestamp="1614131043210" timestamp="1516554" timestamp2="1516554">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="1909" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:09:20 EST 2021" starttimestamp="1614131043210" timestamp="1517493" />
  <Command __id="1911" _type="InsertStringCommand" date="Tue Feb 23 21:09:21 EST 2021" starttimestamp="1614131043210" timestamp="1518070" timestamp2="1518070">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1912" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:21 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1518110" />
  <Command __id="1919" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:22 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1519011" />
  <Command __id="1921" _type="InsertStringCommand" date="Tue Feb 23 21:09:22 EST 2021" starttimestamp="1614131043210" timestamp="1519026" timestamp2="1519026">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1923" _type="InsertStringCommand" date="Tue Feb 23 21:09:22 EST 2021" starttimestamp="1614131043210" timestamp="1519505" timestamp2="1519505">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1924" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:09:23 EST 2021" starttimestamp="1614131043210" timestamp="1520214" />
  <Command __id="1926" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 23 21:09:23 EST 2021" starttimestamp="1614131043210" timestamp="1520416" />
  <Command __id="1927" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:09:24 EST 2021" starttimestamp="1614131043210" timestamp="1521317" />
  <Command __id="1928" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:09:25 EST 2021" starttimestamp="1614131043210" timestamp="1522043" />
  <Command __id="1929" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:09:25 EST 2021" starttimestamp="1614131043210" timestamp="1522609" />
  <Command __id="1930" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:09:26 EST 2021" starttimestamp="1614131043210" timestamp="1522916" />
  <Command __id="1932" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:09:26 EST 2021" starttimestamp="1614131043210" timestamp="1523453" />
  <Command __id="1934" _type="PauseCommand" date="Tue Feb 23 21:09:29 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1525863">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2410]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1933" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:09:29 EST 2021" starttimestamp="1614131043210" timestamp="1525863" />
  <Command __id="1935" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:09:29 EST 2021" starttimestamp="1614131043210" timestamp="1526144" />
  <Command __id="1937" _type="PauseCommand" date="Tue Feb 23 21:09:34 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1531544">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5400]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1938" _type="InsertStringCommand" date="Tue Feb 23 21:09:34 EST 2021" starttimestamp="1614131043210" timestamp="1531553" timestamp2="1531553">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1940" _type="PauseCommand" date="Tue Feb 23 21:09:36 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1533056">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1503]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1941" _type="InsertStringCommand" date="Tue Feb 23 21:09:36 EST 2021" starttimestamp="1614131043210" timestamp="1533060" timestamp2="1533060">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1942" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:36 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1533103" />
  <Command __id="1947" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:36 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1533716" />
  <Command __id="1948" _type="InsertStringCommand" date="Tue Feb 23 21:09:37 EST 2021" starttimestamp="1614131043210" timestamp="1533791" timestamp2="1533791">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="1950" _type="InsertStringCommand" date="Tue Feb 23 21:09:37 EST 2021" starttimestamp="1614131043210" timestamp="1533924" timestamp2="1533924">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1952" _type="PauseCommand" date="Tue Feb 23 21:09:39 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1535861">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1937]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1953" _type="InsertStringCommand" date="Tue Feb 23 21:09:39 EST 2021" starttimestamp="1614131043210" timestamp="1535866" timestamp2="1535866">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1954" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:39 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1535908" />
  <Command __id="1956" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:39 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1536372" />
  <Command __id="1958" _type="InsertStringCommand" date="Tue Feb 23 21:09:39 EST 2021" starttimestamp="1614131043210" timestamp="1536458" timestamp2="1536458">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1959" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:39 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1536500" />
  <Command __id="1960" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:39 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1536519" />
  <Command __id="1962" _type="InsertStringCommand" date="Tue Feb 23 21:09:39 EST 2021" starttimestamp="1614131043210" timestamp="1536584" timestamp2="1536584">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1963" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:39 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1536677" />
  <Command __id="1964" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:39 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1536694" />
  <Command __id="1966" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:09:40 EST 2021" starttimestamp="1614131043210" timestamp="1536962" />
  <Command __id="1968" _type="InsertStringCommand" date="Tue Feb 23 21:09:40 EST 2021" starttimestamp="1614131043210" timestamp="1537006" timestamp2="1537006">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1970" _type="InsertStringCommand" date="Tue Feb 23 21:09:40 EST 2021" starttimestamp="1614131043210" timestamp="1537075" timestamp2="1537075">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1971" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:40 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1537169" />
  <Command __id="1972" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:40 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1537186" />
  <Command __id="1974" _type="InsertStringCommand" date="Tue Feb 23 21:09:40 EST 2021" starttimestamp="1614131043210" timestamp="1537206" timestamp2="1537206">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1976" _type="InsertStringCommand" date="Tue Feb 23 21:09:40 EST 2021" starttimestamp="1614131043210" timestamp="1537345" timestamp2="1537345">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1978" _type="InsertStringCommand" date="Tue Feb 23 21:09:40 EST 2021" starttimestamp="1614131043210" timestamp="1537441" timestamp2="1537441">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1796" _type="Insert" date="Tue Feb 23 21:09:03 EST 2021" docASTNodeCount="6021" docActiveCodeLength="34150" docExpressionCount="4155" docLength="36453" length="3" offset="2346" repeat="3" starttimestamp="1614131043210" timestamp="1499971" timestamp2="1500183">
    <text><![CDATA[oke]]></text>
  </DocumentChange>
  <DocumentChange __id="1803" _type="Replace" date="Tue Feb 23 21:09:03 EST 2021" docASTNodeCount="6021" docActiveCodeLength="34151" docExpressionCount="4155" docLength="36454" endLine="66" insertionLength="5" int_docASTNodeCount="6020" int_docActiveCodeLength="34146" int_docExpressionCount="4154" int_docLength="36449" length="4" offset="2345" startLine="66" starttimestamp="1614131043210" timestamp="1500312">
    <deletedText><![CDATA[toke]]></deletedText>
    <insertedText><![CDATA[token]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1805" _type="Insert" date="Tue Feb 23 21:09:04 EST 2021" docASTNodeCount="6023" docActiveCodeLength="34154" docExpressionCount="4157" docLength="36457" length="3" offset="2350" repeat="2" starttimestamp="1614131043210" timestamp="1501061" timestamp2="1501241">
    <text><![CDATA[[4]]]></text>
  </DocumentChange>
  <DocumentChange __id="1809" _type="Delete" date="Tue Feb 23 21:09:05 EST 2021" docASTNodeCount="5964" docActiveCodeLength="34153" docExpressionCount="4120" docLength="36456" endLine="66" length="1" offset="2352" startLine="66" starttimestamp="1614131043210" timestamp="1502226">
    <text><![CDATA[]]]></text>
  </DocumentChange>
  <DocumentChange __id="1811" _type="Insert" date="Tue Feb 23 21:09:07 EST 2021" docASTNodeCount="6023" docActiveCodeLength="34154" docExpressionCount="4157" docLength="36457" length="1" offset="2352" starttimestamp="1614131043210" timestamp="1503919">
    <text><![CDATA[]]]></text>
  </DocumentChange>
  <DocumentChange __id="1815" _type="Insert" date="Tue Feb 23 21:09:09 EST 2021" docASTNodeCount="6029" docActiveCodeLength="34181" docExpressionCount="4160" docLength="36484" length="27" offset="2354" repeat="14" starttimestamp="1614131043210" timestamp="1506105" timestamp2="1511049">
    <text><![CDATA[.getTime();
				long start]]></text>
  </DocumentChange>
  <DocumentChange __id="1852" _type="Delete" date="Tue Feb 23 21:09:14 EST 2021" docASTNodeCount="6028" docActiveCodeLength="34176" docExpressionCount="4159" docLength="36479" endLine="67" length="5" offset="2376" startLine="67" starttimestamp="1614131043210" timestamp="1511522">
    <text><![CDATA[start]]></text>
  </DocumentChange>
  <DocumentChange __id="1854" _type="Insert" date="Tue Feb 23 21:09:14 EST 2021" docASTNodeCount="6030" docActiveCodeLength="34188" docExpressionCount="4161" docLength="36491" length="12" offset="2376" repeat="12" starttimestamp="1614131043210" timestamp="1511750" timestamp2="1513351">
    <text><![CDATA[endTime = df]]></text>
  </DocumentChange>
  <DocumentChange __id="1886" _type="Replace" date="Tue Feb 23 21:09:16 EST 2021" docASTNodeCount="6030" docActiveCodeLength="34189" docExpressionCount="4162" docLength="36492" endLine="67" insertionLength="3" int_docASTNodeCount="6028" int_docActiveCodeLength="34186" int_docExpressionCount="4160" int_docLength="36489" length="2" offset="2386" startLine="67" starttimestamp="1614131043210" timestamp="1513550">
    <deletedText><![CDATA[df]]></deletedText>
    <insertedText><![CDATA[df.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1889" _type="Insert" date="Tue Feb 23 21:09:17 EST 2021" docASTNodeCount="6032" docActiveCodeLength="34192" docExpressionCount="4163" docLength="36495" length="3" offset="2389" repeat="3" starttimestamp="1614131043210" timestamp="1513983" timestamp2="1514161">
    <text><![CDATA[par]]></text>
  </DocumentChange>
  <DocumentChange __id="1893" _type="Replace" date="Tue Feb 23 21:09:17 EST 2021" docASTNodeCount="6033" docActiveCodeLength="34202" docExpressionCount="4164" docLength="36505" endLine="67" insertionLength="13" int_docASTNodeCount="6030" int_docActiveCodeLength="34189" int_docExpressionCount="4162" int_docLength="36492" length="3" offset="2389" startLine="67" starttimestamp="1614131043210" timestamp="1514307">
    <deletedText><![CDATA[par]]></deletedText>
    <insertedText><![CDATA[parse(source)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1895" _type="Replace" date="Tue Feb 23 21:09:18 EST 2021" docASTNodeCount="6033" docActiveCodeLength="34197" docExpressionCount="4164" docLength="36500" endLine="67" insertionLength="1" int_docASTNodeCount="6032" int_docActiveCodeLength="34196" int_docExpressionCount="4163" int_docLength="36499" length="6" offset="2395" startLine="67" starttimestamp="1614131043210" timestamp="1515404">
    <deletedText><![CDATA[source]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1898" _type="Insert" date="Tue Feb 23 21:09:18 EST 2021" docASTNodeCount="6033" docActiveCodeLength="34199" docExpressionCount="4164" docLength="36502" length="2" offset="2396" repeat="2" starttimestamp="1614131043210" timestamp="1515489" timestamp2="1515659">
    <text><![CDATA[ok]]></text>
  </DocumentChange>
  <DocumentChange __id="1903" _type="Replace" date="Tue Feb 23 21:09:19 EST 2021" docASTNodeCount="6033" docActiveCodeLength="34201" docExpressionCount="4164" docLength="36504" endLine="67" insertionLength="5" int_docASTNodeCount="6032" int_docActiveCodeLength="34196" int_docExpressionCount="4163" int_docLength="36499" length="3" offset="2395" startLine="67" starttimestamp="1614131043210" timestamp="1515888">
    <deletedText><![CDATA[tok]]></deletedText>
    <insertedText><![CDATA[token]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1905" _type="Insert" date="Tue Feb 23 21:09:19 EST 2021" docASTNodeCount="6035" docActiveCodeLength="34204" docExpressionCount="4166" docLength="36507" length="3" offset="2400" repeat="2" starttimestamp="1614131043210" timestamp="1516307" timestamp2="1516549">
    <text><![CDATA[[5]]]></text>
  </DocumentChange>
  <DocumentChange __id="1910" _type="Insert" date="Tue Feb 23 21:09:21 EST 2021" docASTNodeCount="6037" docActiveCodeLength="34211" docExpressionCount="4168" docLength="36514" length="7" offset="2404" repeat="7" starttimestamp="1614131043210" timestamp="1518064" timestamp2="1518773">
    <text><![CDATA[.gettim]]></text>
  </DocumentChange>
  <DocumentChange __id="1920" _type="Replace" date="Tue Feb 23 21:09:22 EST 2021" docASTNodeCount="6037" docActiveCodeLength="34214" docExpressionCount="4168" docLength="36517" endLine="67" insertionLength="9" int_docASTNodeCount="6035" int_docActiveCodeLength="34205" int_docExpressionCount="4167" int_docLength="36508" length="6" offset="2405" startLine="67" starttimestamp="1614131043210" timestamp="1519017">
    <deletedText><![CDATA[gettim]]></deletedText>
    <insertedText><![CDATA[getTime()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1922" _type="Insert" date="Tue Feb 23 21:09:22 EST 2021" docASTNodeCount="6037" docActiveCodeLength="34215" docExpressionCount="4168" docLength="36518" length="1" offset="2414" starttimestamp="1614131043210" timestamp="1519498">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1925" _type="Delete" date="Tue Feb 23 21:09:23 EST 2021" docASTNodeCount="6037" docActiveCodeLength="34213" docExpressionCount="4168" docLength="36516" endLine="69" length="2" offset="2417" startLine="68" starttimestamp="1614131043210" timestamp="1520412">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="1931" _type="Delete" date="Tue Feb 23 21:09:26 EST 2021" docASTNodeCount="6037" docActiveCodeLength="34208" docExpressionCount="4168" docLength="36511" endLine="68" length="5" offset="2446" startLine="68" starttimestamp="1614131043210" timestamp="1523450">
    <text><![CDATA[value]]></text>
  </DocumentChange>
  <DocumentChange __id="1936" _type="Insert" date="Tue Feb 23 21:09:34 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34225" docExpressionCount="4169" docLength="36528" length="17" offset="2415" repeat="11" starttimestamp="1614131043210" timestamp="1531544" timestamp2="1536580">
    <text><![CDATA[
				long[] tims]]></text>
  </DocumentChange>
  <DocumentChange __id="1965" _type="Delete" date="Tue Feb 23 21:09:40 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34224" docExpressionCount="4169" docLength="36527" endLine="68" length="1" offset="2431" startLine="68" starttimestamp="1614131043210" timestamp="1536959">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1967" _type="Insert" date="Tue Feb 23 21:09:40 EST 2021" docASTNodeCount="6041" docActiveCodeLength="34229" docExpressionCount="4169" docLength="36532" length="5" offset="2431" repeat="5" starttimestamp="1614131043210" timestamp="1537001" timestamp2="1537437">
    <text><![CDATA[es = ]]></text>
  </DocumentChange>
  <DocumentChange __id="1979" _type="Insert" date="Tue Feb 23 21:09:43 EST 2021" docASTNodeCount="6044" docActiveCodeLength="34239" docExpressionCount="4171" docLength="36542" length="10" offset="2436" repeat="10" starttimestamp="1614131043210" timestamp="1539957" timestamp2="1542901">
    <text><![CDATA[{startim};]]></text>
  </DocumentChange>
  <Command __id="1980" _type="PauseCommand" date="Tue Feb 23 21:09:43 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1539957">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2516]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1981" _type="InsertStringCommand" date="Tue Feb 23 21:09:43 EST 2021" starttimestamp="1614131043210" timestamp="1539964" timestamp2="1539964">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="1983" _type="InsertStringCommand" date="Tue Feb 23 21:09:43 EST 2021" starttimestamp="1614131043210" timestamp="1540042" timestamp2="1540042">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="1985" _type="InsertStringCommand" date="Tue Feb 23 21:09:43 EST 2021" starttimestamp="1614131043210" timestamp="1540730" timestamp2="1540730">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1986" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:09:44 EST 2021" starttimestamp="1614131043210" timestamp="1541372" />
  <Command __id="1987" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:09:44 EST 2021" starttimestamp="1614131043210" timestamp="1541554" />
  <Command __id="1989" _type="InsertStringCommand" date="Tue Feb 23 21:09:45 EST 2021" starttimestamp="1614131043210" timestamp="1542211" timestamp2="1542211">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1990" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:45 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1542301" />
  <Command __id="1997" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:46 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1543144" />
  <Command __id="1999" _type="InsertStringCommand" date="Tue Feb 23 21:09:46 EST 2021" starttimestamp="1614131043210" timestamp="1543159" timestamp2="1543159">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2001" _type="InsertStringCommand" date="Tue Feb 23 21:09:46 EST 2021" starttimestamp="1614131043210" timestamp="1543376" timestamp2="1543376">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="2003" _type="InsertStringCommand" date="Tue Feb 23 21:09:46 EST 2021" starttimestamp="1614131043210" timestamp="1543433" timestamp2="1543433">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2005" _type="InsertStringCommand" date="Tue Feb 23 21:09:47 EST 2021" starttimestamp="1614131043210" timestamp="1543811" timestamp2="1543811">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2006" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:47 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1543853" />
  <Command __id="2012" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:47 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1544523" />
  <Command __id="2014" _type="InsertStringCommand" date="Tue Feb 23 21:09:47 EST 2021" starttimestamp="1614131043210" timestamp="1544537" timestamp2="1544537">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2016" _type="PauseCommand" date="Tue Feb 23 21:09:49 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1546251">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1714]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2015" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:09:49 EST 2021" starttimestamp="1614131043210" timestamp="1546251" />
  <Command __id="2017" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:09:49 EST 2021" starttimestamp="1614131043210" timestamp="1546510" />
  <Command __id="2018" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:09:49 EST 2021" starttimestamp="1614131043210" timestamp="1546650" />
  <Command __id="2020" _type="InsertStringCommand" date="Tue Feb 23 21:09:50 EST 2021" starttimestamp="1614131043210" timestamp="1547345" timestamp2="1547345">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2022" _type="InsertStringCommand" date="Tue Feb 23 21:09:50 EST 2021" starttimestamp="1614131043210" timestamp="1547381" timestamp2="1547381">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2023" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:09:50 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1547423" />
  <Command __id="2027" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:09:50 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1547760" />
  <Command __id="2028" _type="InsertStringCommand" date="Tue Feb 23 21:09:50 EST 2021" starttimestamp="1614131043210" timestamp="1547763" timestamp2="1547763">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2030" _type="PauseCommand" date="Tue Feb 23 21:10:06 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="1563519">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[15756]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2029" _type="SelectTextCommand" caretOffset="1795" date="Tue Feb 23 21:10:06 EST 2021" end="1795" start="1785" starttimestamp="1614131043210" timestamp="1563519" />
  <Command __id="2032" _type="PauseCommand" date="Tue Feb 23 21:10:07 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1564541">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1022]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2033" _type="InsertStringCommand" date="Tue Feb 23 21:10:07 EST 2021" starttimestamp="1614131043210" timestamp="1564549" timestamp2="1564549">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2034" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:10:07 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1564583" />
  <Command __id="2040" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:10:09 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1566531" />
  <Command __id="2042" _type="InsertStringCommand" date="Tue Feb 23 21:10:09 EST 2021" starttimestamp="1614131043210" timestamp="1566552" timestamp2="1566552">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="2044" _type="InsertStringCommand" date="Tue Feb 23 21:10:09 EST 2021" starttimestamp="1614131043210" timestamp="1566563" timestamp2="1566563">
    <data><![CDATA[]]]></data>
  </Command>
  <Command __id="2046" _type="PauseCommand" date="Tue Feb 23 21:10:10 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1567773">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1210]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2045" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:10:10 EST 2021" starttimestamp="1614131043210" timestamp="1567773" />
  <Command __id="2047" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:10:11 EST 2021" starttimestamp="1614131043210" timestamp="1568346" />
  <Command __id="2049" _type="PauseCommand" date="Tue Feb 23 21:10:18 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1575192">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6846]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2048" _type="MoveCaretCommand" caretOffset="2487" date="Tue Feb 23 21:10:18 EST 2021" docOffset="2487" starttimestamp="1614131043210" timestamp="1575192" />
  <Command __id="2051" _type="PauseCommand" date="Tue Feb 23 21:10:21 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1577897">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2705]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2050" _type="MoveCaretCommand" caretOffset="2418" date="Tue Feb 23 21:10:21 EST 2021" docOffset="2418" starttimestamp="1614131043210" timestamp="1577897" />
  <Command __id="2053" _type="PauseCommand" date="Tue Feb 23 21:10:22 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1579118">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1221]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2052" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:10:22 EST 2021" starttimestamp="1614131043210" timestamp="1579118" />
  <Command __id="2055" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deleteNextWord" date="Tue Feb 23 21:10:22 EST 2021" starttimestamp="1614131043210" timestamp="1579378" />
  <Command __id="2057" _type="PauseCommand" date="Tue Feb 23 21:10:23 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1580493">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1115]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2058" _type="InsertStringCommand" date="Tue Feb 23 21:10:23 EST 2021" starttimestamp="1614131043210" timestamp="1580501" timestamp2="1580501">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2060" _type="InsertStringCommand" date="Tue Feb 23 21:10:24 EST 2021" starttimestamp="1614131043210" timestamp="1580937" timestamp2="1580937">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2061" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:10:24 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1580976" />
  <Command __id="2064" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:10:25 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1582092" />
  <Command __id="2065" _type="SelectTextCommand" caretOffset="2422" date="Tue Feb 23 21:10:25 EST 2021" end="2423" start="2422" starttimestamp="1614131043210" timestamp="1582181" />
  <Command __id="2067" _type="PauseCommand" date="Tue Feb 23 21:10:31 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1588175">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5994]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2066" _type="ShellCommand" date="Tue Feb 23 21:10:31 EST 2021" starttimestamp="1614131043210" timestamp="1588175" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2068" _type="ShellCommand" date="Tue Feb 23 21:10:31 EST 2021" starttimestamp="1614131043210" timestamp="1588274" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2080" _type="PauseCommand" date="Tue Feb 23 21:10:33 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1590656">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2318]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2079" _type="MoveCaretCommand" caretOffset="2531" date="Tue Feb 23 21:10:33 EST 2021" docOffset="2531" starttimestamp="1614131043210" timestamp="1590656" />
  <Command __id="2082" _type="PauseCommand" date="Tue Feb 23 21:10:36 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1592811">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2155]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2081" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:10:36 EST 2021" starttimestamp="1614131043210" timestamp="1592811" />
  <Command __id="2083" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:10:36 EST 2021" starttimestamp="1614131043210" timestamp="1592952" />
  <Command __id="2084" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:10:36 EST 2021" starttimestamp="1614131043210" timestamp="1593082" />
  <Command __id="2085" _type="RunCommand" date="Tue Feb 23 21:10:36 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1593173" type="Run" />
  <Command __id="2086" _type="RunCommand" date="Tue Feb 23 21:10:36 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1593173" type="Run" />
  <Command __id="2088" _type="PauseCommand" date="Tue Feb 23 21:10:37 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1594352">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1179]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2087" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Feb 23 21:10:37 EST 2021" starttimestamp="1614131043210" timestamp="1594352" />
  <Command __id="2089" _type="RunCommand" date="Tue Feb 23 21:10:37 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1594392" type="Debug" />
  <Command __id="2090" _type="RunCommand" date="Tue Feb 23 21:10:37 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="1594392" type="Debug" />
  <Command __id="2091" _type="RunCommand" date="Tue Feb 23 21:10:37 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1594392" type="Run" />
  <Command __id="2093" _type="PauseCommand" date="Tue Feb 23 21:11:09 EST 2021" range="30s-1m" starttimestamp="1614131043210" timestamp="1625939">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[31547]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2092" _type="MoveCaretCommand" caretOffset="3810" date="Tue Feb 23 21:11:09 EST 2021" docOffset="4051" starttimestamp="1614131043210" timestamp="1625939" />
  <Command __id="2095" _type="PauseCommand" date="Tue Feb 23 21:11:23 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="1640588">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14649]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2094" _type="MoveCaretCommand" caretOffset="4333" date="Tue Feb 23 21:11:23 EST 2021" docOffset="4574" starttimestamp="1614131043210" timestamp="1640588" />
  <Command __id="2097" _type="PauseCommand" date="Tue Feb 23 21:11:36 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="1653750">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13162]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2098" _type="InsertStringCommand" date="Tue Feb 23 21:11:36 EST 2021" starttimestamp="1614131043210" timestamp="1653761" timestamp2="1653761">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2100" _type="PauseCommand" date="Tue Feb 23 21:11:38 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1655599">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1838]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2101" _type="InsertStringCommand" date="Tue Feb 23 21:11:38 EST 2021" starttimestamp="1614131043210" timestamp="1655612" timestamp2="1655612">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2102" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:11:38 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1655644" />
  <Command __id="2113" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:11:40 EST 2021" starttimestamp="1614131043210" timestamp="1657669" />
  <Command __id="2114" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:11:41 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1658153" />
  <Command __id="2116" _type="PauseCommand" date="Tue Feb 23 21:12:02 EST 2021" range="20s-30s" starttimestamp="1614131043210" timestamp="1679489">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[21336]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2115" _type="MoveCaretCommand" caretOffset="2445" date="Tue Feb 23 21:12:02 EST 2021" docOffset="2445" starttimestamp="1614131043210" timestamp="1679489" />
  <Command __id="2118" _type="PauseCommand" date="Tue Feb 23 21:12:04 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1681441">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1952]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2119" _type="InsertStringCommand" date="Tue Feb 23 21:12:04 EST 2021" starttimestamp="1614131043210" timestamp="1681451" timestamp2="1681451">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2121" _type="PauseCommand" date="Tue Feb 23 21:12:05 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1682452">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1001]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2122" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 23 21:12:05 EST 2021" starttimestamp="1614131043210" timestamp="1682455" />
  <Command __id="2123" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:12:05 EST 2021" starttimestamp="1614131043210" timestamp="1682719" />
  <Command __id="2124" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:12:06 EST 2021" starttimestamp="1614131043210" timestamp="1682975" />
  <Command __id="2125" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:12:06 EST 2021" starttimestamp="1614131043210" timestamp="1683356" />
  <Command __id="2126" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:12:06 EST 2021" starttimestamp="1614131043210" timestamp="1683646" />
  <Command __id="2128" _type="InsertStringCommand" date="Tue Feb 23 21:12:06 EST 2021" starttimestamp="1614131043210" timestamp="1683772" timestamp2="1683772">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2130" _type="InsertStringCommand" date="Tue Feb 23 21:12:07 EST 2021" starttimestamp="1614131043210" timestamp="1684469" timestamp2="1684469">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2131" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:12:07 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1684512" />
  <Command __id="2133" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:12:07 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1684702" />
  <Command __id="2135" _type="InsertStringCommand" date="Tue Feb 23 21:12:07 EST 2021" starttimestamp="1614131043210" timestamp="1684771" timestamp2="1684771">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2137" _type="InsertStringCommand" date="Tue Feb 23 21:12:08 EST 2021" starttimestamp="1614131043210" timestamp="1685455" timestamp2="1685455">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2138" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:12:08 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1685491" />
  <Command __id="2143" _type="PauseCommand" date="Tue Feb 23 21:12:14 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1691390">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[5567]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2142" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:12:14 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1691390" />
  <Command __id="2145" _type="InsertStringCommand" date="Tue Feb 23 21:12:14 EST 2021" starttimestamp="1614131043210" timestamp="1691405" timestamp2="1691405">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2147" _type="PauseCommand" date="Tue Feb 23 21:12:15 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1692643">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1238]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2148" _type="InsertStringCommand" date="Tue Feb 23 21:12:15 EST 2021" starttimestamp="1614131043210" timestamp="1692645" timestamp2="1692645">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2150" _type="InsertStringCommand" date="Tue Feb 23 21:12:16 EST 2021" starttimestamp="1614131043210" timestamp="1692886" timestamp2="1692886">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="2152" _type="InsertStringCommand" date="Tue Feb 23 21:12:16 EST 2021" starttimestamp="1614131043210" timestamp="1693479" timestamp2="1693479">
    <data><![CDATA[=]]></data>
  </Command>
  <DocumentChange __id="1998" _type="Replace" date="Tue Feb 23 21:09:46 EST 2021" docASTNodeCount="6044" docActiveCodeLength="34241" docExpressionCount="4171" docLength="36544" endLine="68" insertionLength="9" int_docASTNodeCount="6043" int_docActiveCodeLength="34232" int_docExpressionCount="4170" int_docLength="36535" length="7" offset="2437" startLine="68" starttimestamp="1614131043210" timestamp="1543152">
    <deletedText><![CDATA[startim]]></deletedText>
    <insertedText><![CDATA[startTime]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2000" _type="Insert" date="Tue Feb 23 21:09:46 EST 2021" docASTNodeCount="6045" docActiveCodeLength="34249" docExpressionCount="4172" docLength="36552" length="8" offset="2446" repeat="8" starttimestamp="1614131043210" timestamp="1543372" timestamp2="1544335">
    <text><![CDATA[, endtim]]></text>
  </DocumentChange>
  <DocumentChange __id="2013" _type="Replace" date="Tue Feb 23 21:09:47 EST 2021" docASTNodeCount="6045" docActiveCodeLength="34250" docExpressionCount="4172" docLength="36553" endLine="68" insertionLength="7" int_docASTNodeCount="6044" int_docActiveCodeLength="34243" int_docExpressionCount="4171" int_docLength="36546" length="6" offset="2448" startLine="68" starttimestamp="1614131043210" timestamp="1544531">
    <deletedText><![CDATA[endtim]]></deletedText>
    <insertedText><![CDATA[endTime]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2019" _type="Insert" date="Tue Feb 23 21:09:50 EST 2021" docASTNodeCount="6045" docActiveCodeLength="34255" docExpressionCount="4172" docLength="36558" length="5" offset="2488" repeat="5" starttimestamp="1614131043210" timestamp="1547340" timestamp2="1547594">
    <text><![CDATA[times]]></text>
  </DocumentChange>
  <DocumentChange __id="2031" _type="Replace" date="Tue Feb 23 21:10:07 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34246" docExpressionCount="4171" docLength="36549" endLine="49" insertionLength="1" int_docASTNodeCount="6028" int_docActiveCodeLength="34245" int_docExpressionCount="4165" int_docLength="36548" length="10" offset="1785" startLine="49" starttimestamp="1614131043210" timestamp="1564541">
    <deletedText><![CDATA[List<Long>]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2035" _type="Insert" date="Tue Feb 23 21:10:07 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34247" docExpressionCount="4171" docLength="36550" length="1" offset="1786" starttimestamp="1614131043210" timestamp="1564786">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2036" _type="Delete" date="Tue Feb 23 21:10:08 EST 2021" docASTNodeCount="6042" docActiveCodeLength="34246" docExpressionCount="4171" docLength="36549" endLine="49" length="1" offset="1786" startLine="49" starttimestamp="1614131043210" timestamp="1565179">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="2037" _type="Insert" date="Tue Feb 23 21:10:08 EST 2021" docASTNodeCount="6028" docActiveCodeLength="34249" docExpressionCount="4165" docLength="36552" length="3" offset="1786" repeat="3" starttimestamp="1614131043210" timestamp="1565369" timestamp2="1565538">
    <text><![CDATA[ong]]></text>
  </DocumentChange>
  <DocumentChange __id="2041" _type="Replace" date="Tue Feb 23 21:10:09 EST 2021" docASTNodeCount="6028" docActiveCodeLength="34250" docExpressionCount="4165" docLength="36553" endLine="49" insertionLength="5" int_docASTNodeCount="6028" int_docActiveCodeLength="34245" int_docExpressionCount="4165" int_docLength="36548" length="4" offset="1785" startLine="49" starttimestamp="1614131043210" timestamp="1566542">
    <deletedText><![CDATA[long]]></deletedText>
    <insertedText><![CDATA[Long[]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2043" _type="Insert" date="Tue Feb 23 21:10:09 EST 2021" docASTNodeCount="6043" docActiveCodeLength="34251" docExpressionCount="4171" docLength="36554" length="1" offset="1790" starttimestamp="1614131043210" timestamp="1566556">
    <text><![CDATA[]]]></text>
  </DocumentChange>
  <DocumentChange __id="2054" _type="Delete" date="Tue Feb 23 21:10:22 EST 2021" docASTNodeCount="6043" docActiveCodeLength="34247" docExpressionCount="4171" docLength="36550" endLine="68" length="4" offset="2417" startLine="68" starttimestamp="1614131043210" timestamp="1579374">
    <text><![CDATA[long]]></text>
  </DocumentChange>
  <DocumentChange __id="2056" _type="Insert" date="Tue Feb 23 21:10:23 EST 2021" docASTNodeCount="6044" docActiveCodeLength="34251" docExpressionCount="4172" docLength="36554" length="4" offset="2417" repeat="4" starttimestamp="1614131043210" timestamp="1580493" timestamp2="1581132">
    <text><![CDATA[Long]]></text>
  </DocumentChange>
  <DocumentChange __id="2069" _type="Insert" date="Tue Feb 23 21:10:31 EST 2021" docASTNodeCount="6054" docActiveCodeLength="34313" docExpressionCount="4177" docLength="36650" length="96" offset="2772" repeat="8" starttimestamp="1614131043210" timestamp="1588296" timestamp2="1588332">
    <text><![CDATA[ catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="2077" _type="Insert" date="Tue Feb 23 21:10:31 EST 2021" docASTNodeCount="6060" docActiveCodeLength="34347" docExpressionCount="4182" docLength="36684" length="34" offset="352" repeat="2" starttimestamp="1614131043210" timestamp="1588335" timestamp2="1588338">
    <text><![CDATA[
import java.text.ParseException;]]></text>
  </DocumentChange>
  <DocumentChange __id="2096" _type="Insert" date="Tue Feb 23 21:11:36 EST 2021" docASTNodeCount="6062" docActiveCodeLength="34366" docExpressionCount="4183" docLength="36703" length="19" offset="4574" repeat="11" starttimestamp="1614131043210" timestamp="1653750" timestamp2="1656951">
    <text><![CDATA[
							dateformat]]></text>
  </DocumentChange>
  <DocumentChange __id="2112" _type="Delete" date="Tue Feb 23 21:11:40 EST 2021" docASTNodeCount="6060" docActiveCodeLength="34356" docExpressionCount="4182" docLength="36693" endLine="134" length="10" offset="4583" startLine="134" starttimestamp="1614131043210" timestamp="1657666">
    <text><![CDATA[dateformat]]></text>
  </DocumentChange>
  <DocumentChange __id="2117" _type="Insert" date="Tue Feb 23 21:12:04 EST 2021" docASTNodeCount="6060" docActiveCodeLength="34362" docExpressionCount="4182" docLength="36699" length="6" offset="2445" starttimestamp="1614131043210" timestamp="1681441">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="2120" _type="Delete" date="Tue Feb 23 21:12:05 EST 2021" docASTNodeCount="6060" docActiveCodeLength="34356" docExpressionCount="4182" docLength="36693" endLine="70" length="6" offset="2447" startLine="69" starttimestamp="1614131043210" timestamp="1682452">
    <text><![CDATA[				
]]></text>
  </DocumentChange>
  <DocumentChange __id="2127" _type="Insert" date="Tue Feb 23 21:12:06 EST 2021" docASTNodeCount="6060" docActiveCodeLength="34364" docExpressionCount="4182" docLength="36701" length="8" offset="2395" repeat="3" starttimestamp="1614131043210" timestamp="1683763" timestamp2="1684667">
    <text><![CDATA[
				if]]></text>
  </DocumentChange>
  <DocumentChange __id="2134" _type="Replace" date="Tue Feb 23 21:12:07 EST 2021" docASTNodeCount="6063" docActiveCodeLength="34405" docExpressionCount="4183" docLength="36742" endLine="68" insertionLength="43" int_docASTNodeCount="6060" int_docActiveCodeLength="34362" int_docExpressionCount="4182" int_docLength="36699" length="2" offset="2401" startLine="68" starttimestamp="1614131043210" timestamp="1684727">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
					
				}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2136" _type="Replace" date="Tue Feb 23 21:12:08 EST 2021" docASTNodeCount="6063" docActiveCodeLength="34384" docExpressionCount="4183" docLength="36721" endLine="68" insertionLength="1" int_docASTNodeCount="6063" int_docActiveCodeLength="34383" int_docExpressionCount="4183" int_docLength="36720" length="22" offset="2405" startLine="68" starttimestamp="1614131043210" timestamp="1685447">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2139" _type="Insert" date="Tue Feb 23 21:12:08 EST 2021" docASTNodeCount="6063" docActiveCodeLength="34387" docExpressionCount="4183" docLength="36724" length="3" offset="2406" repeat="3" starttimestamp="1614131043210" timestamp="1685685" timestamp2="1685823">
    <text><![CDATA[tar]]></text>
  </DocumentChange>
  <DocumentChange __id="2144" _type="Replace" date="Tue Feb 23 21:12:14 EST 2021" docASTNodeCount="6063" docActiveCodeLength="34392" docExpressionCount="4183" docLength="36729" endLine="68" insertionLength="9" int_docASTNodeCount="6063" int_docActiveCodeLength="34383" int_docExpressionCount="4183" int_docLength="36720" length="4" offset="2405" startLine="68" starttimestamp="1614131043210" timestamp="1691398">
    <deletedText><![CDATA[star]]></deletedText>
    <insertedText><![CDATA[startTime]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2146" _type="Insert" date="Tue Feb 23 21:12:15 EST 2021" docASTNodeCount="5970" docActiveCodeLength="34395" docExpressionCount="4126" docLength="36732" length="3" offset="2414" repeat="3" starttimestamp="1614131043210" timestamp="1692643" timestamp2="1693477">
    <text><![CDATA[ <=]]></text>
  </DocumentChange>
  <Command __id="2154" _type="PauseCommand" date="Tue Feb 23 21:12:17 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1694775">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1296]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="2153" _type="Delete" date="Tue Feb 23 21:12:17 EST 2021" docASTNodeCount="5970" docActiveCodeLength="34394" docExpressionCount="4126" docLength="36731" endLine="68" length="1" offset="2416" startLine="68" starttimestamp="1614131043210" timestamp="1694775">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="2155" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:12:17 EST 2021" starttimestamp="1614131043210" timestamp="1694779" />
  <Command __id="2157" _type="InsertStringCommand" date="Tue Feb 23 21:12:18 EST 2021" starttimestamp="1614131043210" timestamp="1694925" timestamp2="1694925">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2159" _type="PauseCommand" date="Tue Feb 23 21:12:19 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1696649">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1724]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2160" _type="InsertStringCommand" date="Tue Feb 23 21:12:19 EST 2021" starttimestamp="1614131043210" timestamp="1696651" timestamp2="1696651">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="2162" _type="InsertStringCommand" date="Tue Feb 23 21:12:19 EST 2021" starttimestamp="1614131043210" timestamp="1696788" timestamp2="1696788">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2164" _type="PauseCommand" date="Tue Feb 23 21:12:21 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1697928">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1140]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2165" _type="InsertStringCommand" date="Tue Feb 23 21:12:21 EST 2021" starttimestamp="1614131043210" timestamp="1697930" timestamp2="1697930">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2167" _type="PauseCommand" date="Tue Feb 23 21:12:22 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1699529">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1599]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2168" _type="InsertStringCommand" date="Tue Feb 23 21:12:22 EST 2021" starttimestamp="1614131043210" timestamp="1699531" timestamp2="1699531">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="2170" _type="InsertStringCommand" date="Tue Feb 23 21:12:22 EST 2021" starttimestamp="1614131043210" timestamp="1699789" timestamp2="1699789">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="2172" _type="InsertStringCommand" date="Tue Feb 23 21:12:23 EST 2021" starttimestamp="1614131043210" timestamp="1700524" timestamp2="1700524">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2174" _type="InsertStringCommand" date="Tue Feb 23 21:12:23 EST 2021" starttimestamp="1614131043210" timestamp="1700675" timestamp2="1700675">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2176" _type="PauseCommand" date="Tue Feb 23 21:12:25 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1701892">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1217]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2177" _type="InsertStringCommand" date="Tue Feb 23 21:12:25 EST 2021" starttimestamp="1614131043210" timestamp="1701893" timestamp2="1701893">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2179" _type="InsertStringCommand" date="Tue Feb 23 21:12:25 EST 2021" starttimestamp="1614131043210" timestamp="1702133" timestamp2="1702133">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="2181" _type="InsertStringCommand" date="Tue Feb 23 21:12:25 EST 2021" starttimestamp="1614131043210" timestamp="1702274" timestamp2="1702274">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2183" _type="InsertStringCommand" date="Tue Feb 23 21:12:25 EST 2021" starttimestamp="1614131043210" timestamp="1702440" timestamp2="1702440">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2185" _type="InsertStringCommand" date="Tue Feb 23 21:12:25 EST 2021" starttimestamp="1614131043210" timestamp="1702578" timestamp2="1702578">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2186" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:12:26 EST 2021" starttimestamp="1614131043210" timestamp="1703325" />
  <Command __id="2188" _type="PauseCommand" date="Tue Feb 23 21:12:33 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1710479">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7154]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2189" _type="InsertStringCommand" date="Tue Feb 23 21:12:33 EST 2021" starttimestamp="1614131043210" timestamp="1710484" timestamp2="1710484">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2190" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:12:33 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1710525" />
  <Command __id="2194" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:12:34 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1711098" />
  <Command __id="2196" _type="InsertStringCommand" date="Tue Feb 23 21:12:34 EST 2021" starttimestamp="1614131043210" timestamp="1711111" timestamp2="1711111">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2198" _type="InsertStringCommand" date="Tue Feb 23 21:12:35 EST 2021" starttimestamp="1614131043210" timestamp="1711835" timestamp2="1711835">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2200" _type="InsertStringCommand" date="Tue Feb 23 21:12:35 EST 2021" starttimestamp="1614131043210" timestamp="1712070" timestamp2="1712070">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="2202" _type="InsertStringCommand" date="Tue Feb 23 21:12:35 EST 2021" starttimestamp="1614131043210" timestamp="1712223" timestamp2="1712223">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2204" _type="InsertStringCommand" date="Tue Feb 23 21:12:35 EST 2021" starttimestamp="1614131043210" timestamp="1712337" timestamp2="1712337">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2206" _type="InsertStringCommand" date="Tue Feb 23 21:12:36 EST 2021" starttimestamp="1614131043210" timestamp="1713089" timestamp2="1713089">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="2208" _type="InsertStringCommand" date="Tue Feb 23 21:12:36 EST 2021" starttimestamp="1614131043210" timestamp="1713179" timestamp2="1713179">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2210" _type="InsertStringCommand" date="Tue Feb 23 21:12:37 EST 2021" starttimestamp="1614131043210" timestamp="1713868" timestamp2="1713868">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2212" _type="InsertStringCommand" date="Tue Feb 23 21:12:37 EST 2021" starttimestamp="1614131043210" timestamp="1714072" timestamp2="1714072">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="2214" _type="InsertStringCommand" date="Tue Feb 23 21:12:37 EST 2021" starttimestamp="1614131043210" timestamp="1714263" timestamp2="1714263">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="2216" _type="InsertStringCommand" date="Tue Feb 23 21:12:37 EST 2021" starttimestamp="1614131043210" timestamp="1714577" timestamp2="1714577">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2218" _type="InsertStringCommand" date="Tue Feb 23 21:12:37 EST 2021" starttimestamp="1614131043210" timestamp="1714708" timestamp2="1714708">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2220" _type="InsertStringCommand" date="Tue Feb 23 21:12:38 EST 2021" starttimestamp="1614131043210" timestamp="1715675" timestamp2="1715675">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2222" _type="InsertStringCommand" date="Tue Feb 23 21:12:39 EST 2021" starttimestamp="1614131043210" timestamp="1715870" timestamp2="1715870">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="2224" _type="InsertStringCommand" date="Tue Feb 23 21:12:39 EST 2021" starttimestamp="1614131043210" timestamp="1715971" timestamp2="1715971">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2226" _type="InsertStringCommand" date="Tue Feb 23 21:12:39 EST 2021" starttimestamp="1614131043210" timestamp="1716114" timestamp2="1716114">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2228" _type="InsertStringCommand" date="Tue Feb 23 21:12:39 EST 2021" starttimestamp="1614131043210" timestamp="1716215" timestamp2="1716215">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2230" _type="InsertStringCommand" date="Tue Feb 23 21:12:39 EST 2021" starttimestamp="1614131043210" timestamp="1716737" timestamp2="1716737">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2231" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:12:40 EST 2021" starttimestamp="1614131043210" timestamp="1717216" />
  <Command __id="2232" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:12:40 EST 2021" starttimestamp="1614131043210" timestamp="1717323" />
  <Command __id="2233" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:12:41 EST 2021" starttimestamp="1614131043210" timestamp="1718042" />
  <Command __id="2235" _type="InsertStringCommand" date="Tue Feb 23 21:12:41 EST 2021" starttimestamp="1614131043210" timestamp="1718238" timestamp2="1718238">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2237" _type="InsertStringCommand" date="Tue Feb 23 21:12:42 EST 2021" starttimestamp="1614131043210" timestamp="1719092" timestamp2="1719092">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2238" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:12:42 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1719135" />
  <Command __id="2240" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:12:42 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1719330" />
  <Command __id="2242" _type="InsertStringCommand" date="Tue Feb 23 21:12:42 EST 2021" starttimestamp="1614131043210" timestamp="1719402" timestamp2="1719402">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2244" _type="InsertStringCommand" date="Tue Feb 23 21:12:42 EST 2021" starttimestamp="1614131043210" timestamp="1719609" timestamp2="1719609">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2245" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:12:42 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1719644" />
  <Command __id="2253" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:12:44 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1720888" />
  <Command __id="2255" _type="InsertStringCommand" date="Tue Feb 23 21:12:44 EST 2021" starttimestamp="1614131043210" timestamp="1720902" timestamp2="1720902">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2257" _type="InsertStringCommand" date="Tue Feb 23 21:12:44 EST 2021" starttimestamp="1614131043210" timestamp="1721416" timestamp2="1721416">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2259" _type="InsertStringCommand" date="Tue Feb 23 21:12:44 EST 2021" starttimestamp="1614131043210" timestamp="1721761" timestamp2="1721761">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2261" _type="InsertStringCommand" date="Tue Feb 23 21:12:45 EST 2021" starttimestamp="1614131043210" timestamp="1721848" timestamp2="1721848">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2263" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:12:46 EST 2021" starttimestamp="1614131043210" timestamp="1722800" />
  <Command __id="2265" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:12:46 EST 2021" starttimestamp="1614131043210" timestamp="1722942" />
  <Command __id="2267" _type="InsertStringCommand" date="Tue Feb 23 21:12:46 EST 2021" starttimestamp="1614131043210" timestamp="1723777" timestamp2="1723777">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="2269" _type="InsertStringCommand" date="Tue Feb 23 21:12:47 EST 2021" starttimestamp="1614131043210" timestamp="1724312" timestamp2="1724312">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2271" _type="PauseCommand" date="Tue Feb 23 21:12:49 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1726639">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2327]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2270" _type="SelectTextCommand" caretOffset="2401" date="Tue Feb 23 21:12:49 EST 2021" end="2472" start="2401" starttimestamp="1614131043210" timestamp="1726639" />
  <Command __id="2272" _type="CopyCommand" date="Tue Feb 23 21:12:49 EST 2021" starttimestamp="1614131043210" timestamp="1726788" />
  <Command __id="2273" _type="SelectTextCommand" caretOffset="2528" date="Tue Feb 23 21:12:50 EST 2021" end="2559" start="2528" starttimestamp="1614131043210" timestamp="1727740" />
  <Command __id="2275" _type="PasteCommand" date="Tue Feb 23 21:12:51 EST 2021" starttimestamp="1614131043210" timestamp="1727890" />
  <Command __id="2276" _type="MoveCaretCommand" caretOffset="2536" date="Tue Feb 23 21:12:51 EST 2021" docOffset="2536" starttimestamp="1614131043210" timestamp="1728527" />
  <Command __id="2277" _type="SelectTextCommand" caretOffset="2541" date="Tue Feb 23 21:12:51 EST 2021" end="2541" start="2532" starttimestamp="1614131043210" timestamp="1728681" />
  <Command __id="2279" _type="PauseCommand" date="Tue Feb 23 21:12:55 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1732547">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3866]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2278" _type="MoveCaretCommand" caretOffset="2487" date="Tue Feb 23 21:12:55 EST 2021" docOffset="2487" starttimestamp="1614131043210" timestamp="1732547" />
  <Command __id="2280" _type="SelectTextCommand" caretOffset="2490" date="Tue Feb 23 21:12:55 EST 2021" end="2490" start="2483" starttimestamp="1614131043210" timestamp="1732700" />
  <Command __id="2281" _type="CopyCommand" date="Tue Feb 23 21:12:56 EST 2021" starttimestamp="1614131043210" timestamp="1732824" />
  <Command __id="2282" _type="MoveCaretCommand" caretOffset="2537" date="Tue Feb 23 21:12:56 EST 2021" docOffset="2537" starttimestamp="1614131043210" timestamp="1733143" />
  <Command __id="2283" _type="SelectTextCommand" caretOffset="2541" date="Tue Feb 23 21:12:56 EST 2021" end="2541" start="2532" starttimestamp="1614131043210" timestamp="1733277" />
  <Command __id="2285" _type="PasteCommand" date="Tue Feb 23 21:12:56 EST 2021" starttimestamp="1614131043210" timestamp="1733356" />
  <Command __id="2286" _type="MoveCaretCommand" caretOffset="2567" date="Tue Feb 23 21:12:56 EST 2021" docOffset="2567" starttimestamp="1614131043210" timestamp="1733734" />
  <Command __id="2287" _type="SelectTextCommand" caretOffset="2573" date="Tue Feb 23 21:12:57 EST 2021" end="2573" start="2564" starttimestamp="1614131043210" timestamp="1733875" />
  <Command __id="2289" _type="PasteCommand" date="Tue Feb 23 21:12:57 EST 2021" starttimestamp="1614131043210" timestamp="1733901" />
  <Command __id="2290" _type="MoveCaretCommand" caretOffset="2546" date="Tue Feb 23 21:12:57 EST 2021" docOffset="2546" starttimestamp="1614131043210" timestamp="1734189" />
  <Command __id="2292" _type="PauseCommand" date="Tue Feb 23 21:13:11 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="1748085">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13896]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2291" _type="ShellCommand" date="Tue Feb 23 21:13:11 EST 2021" starttimestamp="1614131043210" timestamp="1748085" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2294" _type="PauseCommand" date="Tue Feb 23 21:13:32 EST 2021" range="20s-30s" starttimestamp="1614131043210" timestamp="1768869">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[20784]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2293" _type="ShellCommand" date="Tue Feb 23 21:13:32 EST 2021" starttimestamp="1614131043210" timestamp="1768869" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2295" _type="MoveCaretCommand" caretOffset="3579" date="Tue Feb 23 21:13:32 EST 2021" docOffset="3671" starttimestamp="1614131043210" timestamp="1768956" />
  <Command __id="2297" _type="PauseCommand" date="Tue Feb 23 21:14:12 EST 2021" range="30s-1m" starttimestamp="1614131043210" timestamp="1808805">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[39849]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2296" _type="MoveCaretCommand" caretOffset="4354" date="Tue Feb 23 21:14:12 EST 2021" docOffset="4595" starttimestamp="1614131043210" timestamp="1808805" />
  <Command __id="2299" _type="PauseCommand" date="Tue Feb 23 21:14:47 EST 2021" range="30s-1m" starttimestamp="1614131043210" timestamp="1844145">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[35340]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2298" _type="MoveCaretCommand" caretOffset="4952" date="Tue Feb 23 21:14:47 EST 2021" docOffset="5141" starttimestamp="1614131043210" timestamp="1844145" />
  <Command __id="2301" _type="PauseCommand" date="Tue Feb 23 21:15:08 EST 2021" range="20s-30s" starttimestamp="1614131043210" timestamp="1864907">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[20762]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2300" _type="MoveCaretCommand" caretOffset="4535" date="Tue Feb 23 21:15:08 EST 2021" docOffset="4724" starttimestamp="1614131043210" timestamp="1864907" />
  <Command __id="2302" _type="MoveCaretCommand" caretOffset="4534" date="Tue Feb 23 21:15:08 EST 2021" docOffset="4723" starttimestamp="1614131043210" timestamp="1865443" />
  <Command __id="2304" _type="PauseCommand" date="Tue Feb 23 21:15:18 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="1875648">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10205]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2305" _type="InsertStringCommand" date="Tue Feb 23 21:15:18 EST 2021" starttimestamp="1614131043210" timestamp="1875655" timestamp2="1875655">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2307" _type="InsertStringCommand" date="Tue Feb 23 21:15:19 EST 2021" starttimestamp="1614131043210" timestamp="1875943" timestamp2="1875943">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="2309" _type="InsertStringCommand" date="Tue Feb 23 21:15:19 EST 2021" starttimestamp="1614131043210" timestamp="1876086" timestamp2="1876086">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2311" _type="PauseCommand" date="Tue Feb 23 21:15:20 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1877755">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1669]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2312" _type="InsertStringCommand" date="Tue Feb 23 21:15:20 EST 2021" starttimestamp="1614131043210" timestamp="1877761" timestamp2="1877761">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2314" _type="InsertStringCommand" date="Tue Feb 23 21:15:21 EST 2021" starttimestamp="1614131043210" timestamp="1877908" timestamp2="1877908">
    <data><![CDATA[4]]></data>
  </Command>
  <Command __id="2316" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:21 EST 2021" starttimestamp="1614131043210" timestamp="1878354" />
  <Command __id="2318" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:21 EST 2021" starttimestamp="1614131043210" timestamp="1878513" />
  <Command __id="2320" _type="PauseCommand" date="Tue Feb 23 21:15:25 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1882567">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4054]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2321" _type="InsertStringCommand" date="Tue Feb 23 21:15:25 EST 2021" starttimestamp="1614131043210" timestamp="1882573" timestamp2="1882573">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2323" _type="InsertStringCommand" date="Tue Feb 23 21:15:25 EST 2021" starttimestamp="1614131043210" timestamp="1882653" timestamp2="1882653">
    <data><![CDATA[4]]></data>
  </Command>
  <Command __id="2325" _type="PauseCommand" date="Tue Feb 23 21:15:27 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1884114">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1461]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2326" _type="InsertStringCommand" date="Tue Feb 23 21:15:27 EST 2021" starttimestamp="1614131043210" timestamp="1884120" timestamp2="1884120">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2328" _type="InsertStringCommand" date="Tue Feb 23 21:15:27 EST 2021" starttimestamp="1614131043210" timestamp="1884436" timestamp2="1884436">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="2330" _type="PauseCommand" date="Tue Feb 23 21:15:28 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1885500">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1064]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2331" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:28 EST 2021" starttimestamp="1614131043210" timestamp="1885502" />
  <Command __id="2333" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:28 EST 2021" starttimestamp="1614131043210" timestamp="1885643" />
  <Command __id="2335" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:28 EST 2021" starttimestamp="1614131043210" timestamp="1885788" />
  <Command __id="2337" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:29 EST 2021" starttimestamp="1614131043210" timestamp="1885926" />
  <Command __id="2339" _type="InsertStringCommand" date="Tue Feb 23 21:15:29 EST 2021" starttimestamp="1614131043210" timestamp="1886560" timestamp2="1886560">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2341" _type="InsertStringCommand" date="Tue Feb 23 21:15:30 EST 2021" starttimestamp="1614131043210" timestamp="1886915" timestamp2="1886915">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2343" _type="InsertStringCommand" date="Tue Feb 23 21:15:30 EST 2021" starttimestamp="1614131043210" timestamp="1887080" timestamp2="1887080">
    <data><![CDATA[4]]></data>
  </Command>
  <Command __id="2345" _type="InsertStringCommand" date="Tue Feb 23 21:15:30 EST 2021" starttimestamp="1614131043210" timestamp="1887696" timestamp2="1887696">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2347" _type="InsertStringCommand" date="Tue Feb 23 21:15:31 EST 2021" starttimestamp="1614131043210" timestamp="1887923" timestamp2="1887923">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="2349" _type="InsertStringCommand" date="Tue Feb 23 21:15:31 EST 2021" starttimestamp="1614131043210" timestamp="1888137" timestamp2="1888137">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2351" _type="InsertStringCommand" date="Tue Feb 23 21:15:31 EST 2021" starttimestamp="1614131043210" timestamp="1888281" timestamp2="1888281">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2353" _type="InsertStringCommand" date="Tue Feb 23 21:15:31 EST 2021" starttimestamp="1614131043210" timestamp="1888432" timestamp2="1888432">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2355" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:32 EST 2021" starttimestamp="1614131043210" timestamp="1889109" />
  <Command __id="2357" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:32 EST 2021" starttimestamp="1614131043210" timestamp="1889254" />
  <Command __id="2359" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:32 EST 2021" starttimestamp="1614131043210" timestamp="1889390" />
  <Command __id="2361" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:32 EST 2021" starttimestamp="1614131043210" timestamp="1889508" />
  <Command __id="2363" _type="InsertStringCommand" date="Tue Feb 23 21:15:33 EST 2021" starttimestamp="1614131043210" timestamp="1889920" timestamp2="1889920">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="2365" _type="InsertStringCommand" date="Tue Feb 23 21:15:33 EST 2021" starttimestamp="1614131043210" timestamp="1890313" timestamp2="1890313">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="2367" _type="InsertStringCommand" date="Tue Feb 23 21:15:33 EST 2021" starttimestamp="1614131043210" timestamp="1890470" timestamp2="1890470">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2369" _type="InsertStringCommand" date="Tue Feb 23 21:15:33 EST 2021" starttimestamp="1614131043210" timestamp="1890624" timestamp2="1890624">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2371" _type="PauseCommand" date="Tue Feb 23 21:15:34 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1891662">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1038]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2372" _type="InsertStringCommand" date="Tue Feb 23 21:15:34 EST 2021" starttimestamp="1614131043210" timestamp="1891665" timestamp2="1891665">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2374" _type="InsertStringCommand" date="Tue Feb 23 21:15:35 EST 2021" starttimestamp="1614131043210" timestamp="1891880" timestamp2="1891880">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="2376" _type="InsertStringCommand" date="Tue Feb 23 21:15:35 EST 2021" starttimestamp="1614131043210" timestamp="1891981" timestamp2="1891981">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2378" _type="InsertStringCommand" date="Tue Feb 23 21:15:35 EST 2021" starttimestamp="1614131043210" timestamp="1892122" timestamp2="1892122">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2380" _type="InsertStringCommand" date="Tue Feb 23 21:15:35 EST 2021" starttimestamp="1614131043210" timestamp="1892250" timestamp2="1892250">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2381" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:15:36 EST 2021" starttimestamp="1614131043210" timestamp="1893018" />
  <Command __id="2383" _type="InsertStringCommand" date="Tue Feb 23 21:15:37 EST 2021" starttimestamp="1614131043210" timestamp="1893879" timestamp2="1893879">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2385" _type="PauseCommand" date="Tue Feb 23 21:15:38 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1895255">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1376]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2386" _type="InsertStringCommand" date="Tue Feb 23 21:15:38 EST 2021" starttimestamp="1614131043210" timestamp="1895262" timestamp2="1895262">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2388" _type="InsertStringCommand" date="Tue Feb 23 21:15:38 EST 2021" starttimestamp="1614131043210" timestamp="1895485" timestamp2="1895485">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="2156" _type="Insert" date="Tue Feb 23 21:12:18 EST 2021" docASTNodeCount="6068" docActiveCodeLength="34407" docExpressionCount="4188" docLength="36744" length="13" offset="2416" repeat="13" starttimestamp="1614131043210" timestamp="1694914" timestamp2="1702576">
    <text><![CDATA[ 10*3600*1000]]></text>
  </DocumentChange>
  <DocumentChange __id="2187" _type="Insert" date="Tue Feb 23 21:12:33 EST 2021" docASTNodeCount="5917" docActiveCodeLength="34411" docExpressionCount="4094" docLength="36748" length="4" offset="2439" repeat="4" starttimestamp="1614131043210" timestamp="1710479" timestamp2="1710801">
    <text><![CDATA[star]]></text>
  </DocumentChange>
  <DocumentChange __id="2195" _type="Replace" date="Tue Feb 23 21:12:34 EST 2021" docASTNodeCount="5917" docActiveCodeLength="34416" docExpressionCount="4094" docLength="36753" endLine="69" insertionLength="9" int_docASTNodeCount="6068" int_docActiveCodeLength="34407" int_docExpressionCount="4188" int_docLength="36744" length="4" offset="2439" startLine="69" starttimestamp="1614131043210" timestamp="1711106">
    <deletedText><![CDATA[star]]></deletedText>
    <insertedText><![CDATA[startTime]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2197" _type="Insert" date="Tue Feb 23 21:12:35 EST 2021" docASTNodeCount="6075" docActiveCodeLength="34433" docExpressionCount="4194" docLength="36770" length="17" offset="2448" repeat="17" starttimestamp="1614131043210" timestamp="1711830" timestamp2="1716731">
    <text><![CDATA[ += 12*3600*1000;]]></text>
  </DocumentChange>
  <DocumentChange __id="2234" _type="Insert" date="Tue Feb 23 21:12:41 EST 2021" docASTNodeCount="6075" docActiveCodeLength="34441" docExpressionCount="4194" docLength="36778" length="8" offset="2522" repeat="3" starttimestamp="1614131043210" timestamp="1718229" timestamp2="1719296">
    <text><![CDATA[
				if]]></text>
  </DocumentChange>
  <DocumentChange __id="2241" _type="Replace" date="Tue Feb 23 21:12:42 EST 2021" docASTNodeCount="6078" docActiveCodeLength="34482" docExpressionCount="4195" docLength="36819" endLine="72" insertionLength="43" int_docASTNodeCount="6075" int_docActiveCodeLength="34439" int_docExpressionCount="4194" int_docLength="36776" length="2" offset="2528" startLine="72" starttimestamp="1614131043210" timestamp="1719355">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
					
				}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2243" _type="Replace" date="Tue Feb 23 21:12:42 EST 2021" docASTNodeCount="6078" docActiveCodeLength="34461" docExpressionCount="4195" docLength="36798" endLine="72" insertionLength="1" int_docASTNodeCount="6078" int_docActiveCodeLength="34460" int_docExpressionCount="4195" int_docLength="36797" length="22" offset="2532" startLine="72" starttimestamp="1614131043210" timestamp="1719600">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2246" _type="Delete" date="Tue Feb 23 21:12:43 EST 2021" docASTNodeCount="6078" docActiveCodeLength="34460" docExpressionCount="4195" docLength="36797" endLine="72" length="1" offset="2532" startLine="72" starttimestamp="1614131043210" timestamp="1720137">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="2247" _type="Insert" date="Tue Feb 23 21:12:43 EST 2021" docASTNodeCount="6078" docActiveCodeLength="34466" docExpressionCount="4195" docLength="36803" length="6" offset="2532" repeat="6" starttimestamp="1614131043210" timestamp="1720247" timestamp2="1720725">
    <text><![CDATA[endtim]]></text>
  </DocumentChange>
  <DocumentChange __id="2254" _type="Replace" date="Tue Feb 23 21:12:44 EST 2021" docASTNodeCount="6078" docActiveCodeLength="34467" docExpressionCount="4195" docLength="36804" endLine="72" insertionLength="7" int_docASTNodeCount="6078" int_docActiveCodeLength="34460" int_docExpressionCount="4195" int_docLength="36797" length="6" offset="2532" startLine="72" starttimestamp="1614131043210" timestamp="1720896">
    <deletedText><![CDATA[endtim]]></deletedText>
    <insertedText><![CDATA[endTime]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2256" _type="Insert" date="Tue Feb 23 21:12:44 EST 2021" docASTNodeCount="6080" docActiveCodeLength="34470" docExpressionCount="4197" docLength="36807" length="3" offset="2539" repeat="3" starttimestamp="1614131043210" timestamp="1721413" timestamp2="1721847">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <DocumentChange __id="2262" _type="Delete" date="Tue Feb 23 21:12:46 EST 2021" docASTNodeCount="6078" docActiveCodeLength="34468" docExpressionCount="4195" docLength="36805" endLine="72" length="2" offset="2540" repeat="2" startLine="72" starttimestamp="1614131043210" timestamp="1722797" timestamp2="1722940">
    <text><![CDATA[= ]]></text>
  </DocumentChange>
  <DocumentChange __id="2266" _type="Insert" date="Tue Feb 23 21:12:46 EST 2021" docASTNodeCount="5997" docActiveCodeLength="34470" docExpressionCount="4147" docLength="36807" length="2" offset="2540" repeat="2" starttimestamp="1614131043210" timestamp="1723775" timestamp2="1724309">
    <text><![CDATA[< ]]></text>
  </DocumentChange>
  <DocumentChange __id="2274" _type="Replace" date="Tue Feb 23 21:12:51 EST 2021" docASTNodeCount="6090" docActiveCodeLength="34510" docExpressionCount="4206" docLength="36847" endLine="74" insertionLength="75" int_docASTNodeCount="6075" int_docActiveCodeLength="34435" int_docExpressionCount="4194" int_docLength="36772" length="35" offset="2524" startLine="72" starttimestamp="1614131043210" timestamp="1727877">
    <deletedText><![CDATA[				if (endTime < ) {
					
				}]]></deletedText>
    <insertedText><![CDATA[				if (startTime < 10*3600*1000) {
					startTime += 12*3600*1000;
				}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2284" _type="Replace" date="Tue Feb 23 21:12:56 EST 2021" docASTNodeCount="6090" docActiveCodeLength="34508" docExpressionCount="4206" docLength="36845" endLine="72" insertionLength="7" int_docASTNodeCount="6088" int_docActiveCodeLength="34501" int_docExpressionCount="4204" int_docLength="36838" length="9" offset="2532" startLine="72" starttimestamp="1614131043210" timestamp="1733349">
    <deletedText><![CDATA[startTime]]></deletedText>
    <insertedText><![CDATA[endTime]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2288" _type="Replace" date="Tue Feb 23 21:12:57 EST 2021" docASTNodeCount="6090" docActiveCodeLength="34506" docExpressionCount="4206" docLength="36843" endLine="73" insertionLength="12" int_docASTNodeCount="5997" int_docActiveCodeLength="34494" int_docExpressionCount="4147" int_docLength="36831" length="14" offset="2559" startLine="73" starttimestamp="1614131043210" timestamp="1733895">
    <deletedText><![CDATA[					startTime]]></deletedText>
    <insertedText><![CDATA[					endTime]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2303" _type="Insert" date="Tue Feb 23 21:15:18 EST 2021" docASTNodeCount="6092" docActiveCodeLength="34511" docExpressionCount="4208" docLength="36848" length="5" offset="4723" repeat="5" starttimestamp="1614131043210" timestamp="1875648" timestamp2="1877902">
    <text><![CDATA[ / 24]]></text>
  </DocumentChange>
  <DocumentChange __id="2315" _type="Delete" date="Tue Feb 23 21:15:21 EST 2021" docASTNodeCount="5755" docActiveCodeLength="34509" docExpressionCount="3976" docLength="36846" endLine="139" length="2" offset="4726" repeat="2" startLine="139" starttimestamp="1614131043210" timestamp="1878352" timestamp2="1878510">
    <text><![CDATA[24]]></text>
  </DocumentChange>
  <DocumentChange __id="2319" _type="Insert" date="Tue Feb 23 21:15:25 EST 2021" docASTNodeCount="6094" docActiveCodeLength="34513" docExpressionCount="4210" docLength="36850" length="4" offset="4726" repeat="4" starttimestamp="1614131043210" timestamp="1882567" timestamp2="1884430">
    <text><![CDATA[24*1]]></text>
  </DocumentChange>
  <DocumentChange __id="2329" _type="Delete" date="Tue Feb 23 21:15:28 EST 2021" docASTNodeCount="5755" docActiveCodeLength="34509" docExpressionCount="3976" docLength="36846" endLine="139" length="4" offset="4726" repeat="4" startLine="139" starttimestamp="1614131043210" timestamp="1885500" timestamp2="1885924">
    <text><![CDATA[24*1]]></text>
  </DocumentChange>
  <DocumentChange __id="2338" _type="Insert" date="Tue Feb 23 21:15:29 EST 2021" docASTNodeCount="6095" docActiveCodeLength="34518" docExpressionCount="4211" docLength="36855" length="9" offset="4726" repeat="8" starttimestamp="1614131043210" timestamp="1886556" timestamp2="1888429">
    <text><![CDATA[(24*1000)]]></text>
  </DocumentChange>
  <DocumentChange __id="2354" _type="Delete" date="Tue Feb 23 21:15:32 EST 2021" docASTNodeCount="5755" docActiveCodeLength="34514" docExpressionCount="3976" docLength="36851" endLine="139" length="4" offset="4730" repeat="4" startLine="139" starttimestamp="1614131043210" timestamp="1889106" timestamp2="1889504">
    <text><![CDATA[1000]]></text>
  </DocumentChange>
  <DocumentChange __id="2362" _type="Insert" date="Tue Feb 23 21:15:33 EST 2021" docASTNodeCount="6096" docActiveCodeLength="34523" docExpressionCount="4212" docLength="36860" length="9" offset="4730" repeat="9" starttimestamp="1614131043210" timestamp="1889919" timestamp2="1892248">
    <text><![CDATA[3600*1000]]></text>
  </DocumentChange>
  <DocumentChange __id="2382" _type="Insert" date="Tue Feb 23 21:15:37 EST 2021" docASTNodeCount="5755" docActiveCodeLength="34526" docExpressionCount="3976" docLength="36863" length="3" offset="4740" repeat="3" starttimestamp="1614131043210" timestamp="1893871" timestamp2="1895478">
    <text><![CDATA[ * ]]></text>
  </DocumentChange>
  <Command __id="2390" _type="PauseCommand" date="Tue Feb 23 21:15:41 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1898766">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3281]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2391" _type="InsertStringCommand" date="Tue Feb 23 21:15:41 EST 2021" starttimestamp="1614131043210" timestamp="1898771" timestamp2="1898771">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2393" _type="InsertStringCommand" date="Tue Feb 23 21:15:42 EST 2021" starttimestamp="1614131043210" timestamp="1899656" timestamp2="1899656">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2395" _type="InsertStringCommand" date="Tue Feb 23 21:15:42 EST 2021" starttimestamp="1614131043210" timestamp="1899768" timestamp2="1899768">
    <data><![CDATA[4]]></data>
  </Command>
  <Command __id="2397" _type="InsertStringCommand" date="Tue Feb 23 21:15:43 EST 2021" starttimestamp="1614131043210" timestamp="1900618" timestamp2="1900618">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2399" _type="InsertStringCommand" date="Tue Feb 23 21:15:44 EST 2021" starttimestamp="1614131043210" timestamp="1900864" timestamp2="1900864">
    <data><![CDATA[3]]></data>
  </Command>
  <Command __id="2401" _type="InsertStringCommand" date="Tue Feb 23 21:15:44 EST 2021" starttimestamp="1614131043210" timestamp="1901033" timestamp2="1901033">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="2403" _type="InsertStringCommand" date="Tue Feb 23 21:15:44 EST 2021" starttimestamp="1614131043210" timestamp="1901337" timestamp2="1901337">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2405" _type="InsertStringCommand" date="Tue Feb 23 21:15:44 EST 2021" starttimestamp="1614131043210" timestamp="1901494" timestamp2="1901494">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2407" _type="PauseCommand" date="Tue Feb 23 21:15:45 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1902645">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1151]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2408" _type="InsertStringCommand" date="Tue Feb 23 21:15:45 EST 2021" starttimestamp="1614131043210" timestamp="1902649" timestamp2="1902649">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2410" _type="InsertStringCommand" date="Tue Feb 23 21:15:46 EST 2021" starttimestamp="1614131043210" timestamp="1903062" timestamp2="1903062">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="2412" _type="InsertStringCommand" date="Tue Feb 23 21:15:46 EST 2021" starttimestamp="1614131043210" timestamp="1903328" timestamp2="1903328">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2414" _type="InsertStringCommand" date="Tue Feb 23 21:15:46 EST 2021" starttimestamp="1614131043210" timestamp="1903465" timestamp2="1903465">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2416" _type="InsertStringCommand" date="Tue Feb 23 21:15:46 EST 2021" starttimestamp="1614131043210" timestamp="1903631" timestamp2="1903631">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2417" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:15:47 EST 2021" starttimestamp="1614131043210" timestamp="1904331" />
  <Command __id="2419" _type="InsertStringCommand" date="Tue Feb 23 21:15:47 EST 2021" starttimestamp="1614131043210" timestamp="1904528" timestamp2="1904528">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2421" _type="PauseCommand" date="Tue Feb 23 21:15:49 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1905847">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1319]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2422" _type="InsertStringCommand" date="Tue Feb 23 21:15:49 EST 2021" starttimestamp="1614131043210" timestamp="1905854" timestamp2="1905854">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2424" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:15:49 EST 2021" starttimestamp="1614131043210" timestamp="1906758" />
  <Command __id="2426" _type="InsertStringCommand" date="Tue Feb 23 21:15:50 EST 2021" starttimestamp="1614131043210" timestamp="1907156" timestamp2="1907156">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="2428" _type="InsertStringCommand" date="Tue Feb 23 21:15:50 EST 2021" starttimestamp="1614131043210" timestamp="1907282" timestamp2="1907282">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2430" _type="PauseCommand" date="Tue Feb 23 21:15:55 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1912659">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5377]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2431" _type="InsertStringCommand" date="Tue Feb 23 21:15:55 EST 2021" starttimestamp="1614131043210" timestamp="1912670" timestamp2="1912670">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2432" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:15:55 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1912707" />
  <Command __id="2435" _type="PauseCommand" date="Tue Feb 23 21:15:57 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1914036">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1103]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2436" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:15:57 EST 2021" starttimestamp="1614131043210" timestamp="1914040" />
  <Command __id="2437" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:15:57 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1914573" />
  <Command __id="2439" _type="PauseCommand" date="Tue Feb 23 21:16:00 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1917038">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2465]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2440" _type="InsertStringCommand" date="Tue Feb 23 21:16:00 EST 2021" starttimestamp="1614131043210" timestamp="1917044" timestamp2="1917044">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2441" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:16:00 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1917086" />
  <Command __id="2445" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:16:01 EST 2021" starttimestamp="1614131043210" timestamp="1918130" />
  <Command __id="2453" _type="PauseCommand" date="Tue Feb 23 21:16:04 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1921187">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1706]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2452" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:16:04 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1921187" />
  <Command __id="2455" _type="InsertStringCommand" date="Tue Feb 23 21:16:04 EST 2021" starttimestamp="1614131043210" timestamp="1921211" timestamp2="1921211">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2457" _type="InsertStringCommand" date="Tue Feb 23 21:16:04 EST 2021" starttimestamp="1614131043210" timestamp="1921611" timestamp2="1921611">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2458" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:16:04 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1921651" />
  <Command __id="2462" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:16:05 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1922409" />
  <Command __id="2464" _type="InsertStringCommand" date="Tue Feb 23 21:16:05 EST 2021" starttimestamp="1614131043210" timestamp="1922488" timestamp2="1922488">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2466" _type="PauseCommand" date="Tue Feb 23 21:16:06 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1923682">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1194]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2467" _type="InsertStringCommand" date="Tue Feb 23 21:16:06 EST 2021" starttimestamp="1614131043210" timestamp="1923692" timestamp2="1923692">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2468" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:16:06 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1923776" />
  <Command __id="2478" _type="PauseCommand" date="Tue Feb 23 21:16:12 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1928965">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2810]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2477" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:16:12 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1928965" />
  <Command __id="2480" _type="InsertStringCommand" date="Tue Feb 23 21:16:12 EST 2021" starttimestamp="1614131043210" timestamp="1928979" timestamp2="1928979">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2482" _type="InsertStringCommand" date="Tue Feb 23 21:16:12 EST 2021" starttimestamp="1614131043210" timestamp="1929419" timestamp2="1929419">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2483" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:16:12 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1929507" />
  <Command __id="2489" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:16:14 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1931208" />
  <Command __id="2491" _type="InsertStringCommand" date="Tue Feb 23 21:16:14 EST 2021" starttimestamp="1614131043210" timestamp="1931227" timestamp2="1931227">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2493" _type="PauseCommand" date="Tue Feb 23 21:16:16 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1933280">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2053]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2492" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:16:16 EST 2021" starttimestamp="1614131043210" timestamp="1933280" />
  <Command __id="2494" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:16:16 EST 2021" starttimestamp="1614131043210" timestamp="1933592" />
  <Command __id="2496" _type="PauseCommand" date="Tue Feb 23 21:16:19 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1935986">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2394]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2495" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:16:19 EST 2021" starttimestamp="1614131043210" timestamp="1935986" />
  <DocumentChange __id="2389" _type="Insert" date="Tue Feb 23 21:15:41 EST 2021" docASTNodeCount="5755" docActiveCodeLength="34542" docExpressionCount="3976" docLength="36879" length="16" offset="4743" repeat="15" starttimestamp="1614131043210" timestamp="1898766" timestamp2="1905847">
    <text><![CDATA[(24*3600*1000) *]]></text>
  </DocumentChange>
  <DocumentChange __id="2423" _type="Delete" date="Tue Feb 23 21:15:49 EST 2021" docASTNodeCount="6102" docActiveCodeLength="34541" docExpressionCount="4218" docLength="36878" endLine="139" length="1" offset="4758" startLine="139" starttimestamp="1614131043210" timestamp="1906755">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <DocumentChange __id="2425" _type="Insert" date="Tue Feb 23 21:15:50 EST 2021" docASTNodeCount="6102" docActiveCodeLength="34543" docExpressionCount="4218" docLength="36880" length="2" offset="4758" repeat="2" starttimestamp="1614131043210" timestamp="1907149" timestamp2="1907275">
    <text><![CDATA[+ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2429" _type="Insert" date="Tue Feb 23 21:15:55 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34545" docExpressionCount="4220" docLength="36882" length="2" offset="4760" repeat="2" starttimestamp="1614131043210" timestamp="1912659" timestamp2="1912933">
    <text><![CDATA[st]]></text>
  </DocumentChange>
  <DocumentChange __id="2434" _type="Delete" date="Tue Feb 23 21:15:57 EST 2021" docASTNodeCount="6102" docActiveCodeLength="34543" docExpressionCount="4218" docLength="36880" endLine="139" length="2" offset="4760" startLine="139" starttimestamp="1614131043210" timestamp="1914036">
    <text><![CDATA[st]]></text>
  </DocumentChange>
  <DocumentChange __id="2438" _type="Insert" date="Tue Feb 23 21:16:00 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34546" docExpressionCount="4220" docLength="36883" length="3" offset="4760" repeat="3" starttimestamp="1614131043210" timestamp="1917038" timestamp2="1917318">
    <text><![CDATA[map]]></text>
  </DocumentChange>
  <DocumentChange __id="2444" _type="Delete" date="Tue Feb 23 21:16:01 EST 2021" docASTNodeCount="6102" docActiveCodeLength="34543" docExpressionCount="4218" docLength="36880" endLine="139" length="3" offset="4760" startLine="139" starttimestamp="1614131043210" timestamp="1918126">
    <text><![CDATA[map]]></text>
  </DocumentChange>
  <DocumentChange __id="2446" _type="Insert" date="Tue Feb 23 21:16:02 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34549" docExpressionCount="4220" docLength="36886" length="6" offset="4760" repeat="6" starttimestamp="1614131043210" timestamp="1918920" timestamp2="1919481">
    <text><![CDATA[timest]]></text>
  </DocumentChange>
  <DocumentChange __id="2454" _type="Replace" date="Tue Feb 23 21:16:04 EST 2021" docASTNodeCount="6104" docActiveCodeLength="34553" docExpressionCount="4220" docLength="36890" endLine="139" insertionLength="10" int_docASTNodeCount="6102" int_docActiveCodeLength="34543" int_docExpressionCount="4218" int_docLength="36880" length="6" offset="4760" startLine="139" starttimestamp="1614131043210" timestamp="1921204">
    <deletedText><![CDATA[timest]]></deletedText>
    <insertedText><![CDATA[timestamps]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2456" _type="Insert" date="Tue Feb 23 21:16:04 EST 2021" docASTNodeCount="6106" docActiveCodeLength="34557" docExpressionCount="4222" docLength="36894" length="4" offset="4770" repeat="4" starttimestamp="1614131043210" timestamp="1921605" timestamp2="1922023">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="2463" _type="Replace" date="Tue Feb 23 21:16:05 EST 2021" docASTNodeCount="6107" docActiveCodeLength="34562" docExpressionCount="4223" docLength="36899" endLine="139" insertionLength="8" int_docASTNodeCount="6106" int_docActiveCodeLength="34554" int_docExpressionCount="4221" int_docLength="36891" length="3" offset="4771" startLine="139" starttimestamp="1614131043210" timestamp="1922417">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2465" _type="Replace" date="Tue Feb 23 21:16:06 EST 2021" docASTNodeCount="6107" docActiveCodeLength="34560" docExpressionCount="4223" docLength="36897" endLine="139" insertionLength="1" int_docASTNodeCount="6106" int_docActiveCodeLength="34559" int_docExpressionCount="4222" int_docLength="36896" length="3" offset="4775" startLine="139" starttimestamp="1614131043210" timestamp="1923682">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2469" _type="Insert" date="Tue Feb 23 21:16:07 EST 2021" docASTNodeCount="6107" docActiveCodeLength="34561" docExpressionCount="4223" docLength="36898" length="1" offset="4776" starttimestamp="1614131043210" timestamp="1923964">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2470" _type="Delete" date="Tue Feb 23 21:16:07 EST 2021" docASTNodeCount="6107" docActiveCodeLength="34560" docExpressionCount="4223" docLength="36897" endLine="139" length="1" offset="4776" startLine="139" starttimestamp="1614131043210" timestamp="1924335">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <DocumentChange __id="2471" _type="Insert" date="Tue Feb 23 21:16:07 EST 2021" docASTNodeCount="6107" docActiveCodeLength="34566" docExpressionCount="4223" docLength="36903" length="6" offset="4776" repeat="6" starttimestamp="1614131043210" timestamp="1924419" timestamp2="1926155">
    <text><![CDATA[tudent]]></text>
  </DocumentChange>
  <DocumentChange __id="2479" _type="Replace" date="Tue Feb 23 21:16:12 EST 2021" docASTNodeCount="6107" docActiveCodeLength="34572" docExpressionCount="4223" docLength="36909" endLine="139" insertionLength="13" int_docASTNodeCount="6106" int_docActiveCodeLength="34559" int_docExpressionCount="4222" int_docLength="36896" length="7" offset="4775" startLine="139" starttimestamp="1614131043210" timestamp="1928973">
    <deletedText><![CDATA[student]]></deletedText>
    <insertedText><![CDATA[studentFolder]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2481" _type="Insert" date="Tue Feb 23 21:16:12 EST 2021" docASTNodeCount="6109" docActiveCodeLength="34578" docExpressionCount="4225" docLength="36915" length="6" offset="4788" repeat="6" starttimestamp="1614131043210" timestamp="1929412" timestamp2="1930545">
    <text><![CDATA[.getna]]></text>
  </DocumentChange>
  <DocumentChange __id="2490" _type="Replace" date="Tue Feb 23 21:16:14 EST 2021" docASTNodeCount="6109" docActiveCodeLength="34582" docExpressionCount="4225" docLength="36919" endLine="139" insertionLength="9" int_docASTNodeCount="6109" int_docActiveCodeLength="34573" int_docExpressionCount="4224" int_docLength="36910" length="5" offset="4789" startLine="139" starttimestamp="1614131043210" timestamp="1931216">
    <deletedText><![CDATA[getna]]></deletedText>
    <insertedText><![CDATA[getName()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2499" _type="Delete" date="Tue Feb 23 21:16:26 EST 2021" docASTNodeCount="6090" docActiveCodeLength="34506" docExpressionCount="4206" docLength="36843" endLine="139" length="76" offset="4723" startLine="139" starttimestamp="1614131043210" timestamp="1942846">
    <text><![CDATA[ / (24*3600*1000) * (24*3600*1000) + timestamps.get(studentFolder.getName())]]></text>
  </DocumentChange>
  <DocumentChange __id="2502" _type="Insert" date="Tue Feb 23 21:16:27 EST 2021" docASTNodeCount="6090" docActiveCodeLength="34517" docExpressionCount="4206" docLength="36854" length="11" offset="4664" repeat="3" starttimestamp="1614131043210" timestamp="1944376" timestamp2="1945273">
    <text><![CDATA[
							if]]></text>
  </DocumentChange>
  <DocumentChange __id="2509" _type="Replace" date="Tue Feb 23 21:16:28 EST 2021" docASTNodeCount="6093" docActiveCodeLength="34564" docExpressionCount="4207" docLength="36901" endLine="139" insertionLength="49" int_docASTNodeCount="6090" int_docActiveCodeLength="34515" int_docExpressionCount="4206" int_docLength="36852" length="2" offset="4673" startLine="139" starttimestamp="1614131043210" timestamp="1945309">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
								
							}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2511" _type="Replace" date="Tue Feb 23 21:16:29 EST 2021" docASTNodeCount="6093" docActiveCodeLength="34543" docExpressionCount="4207" docLength="36880" endLine="139" insertionLength="1" int_docASTNodeCount="6093" int_docActiveCodeLength="34542" int_docExpressionCount="4207" int_docLength="36879" length="22" offset="4677" startLine="139" starttimestamp="1614131043210" timestamp="1945805">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2514" _type="Insert" date="Tue Feb 23 21:16:29 EST 2021" docASTNodeCount="6093" docActiveCodeLength="34546" docExpressionCount="4207" docLength="36883" length="3" offset="4678" repeat="3" starttimestamp="1614131043210" timestamp="1946050" timestamp2="1946206">
    <text><![CDATA[tud]]></text>
  </DocumentChange>
  <DocumentChange __id="2518" _type="Replace" date="Tue Feb 23 21:16:29 EST 2021" docASTNodeCount="6093" docActiveCodeLength="34555" docExpressionCount="4207" docLength="36892" endLine="139" insertionLength="13" int_docASTNodeCount="6093" int_docActiveCodeLength="34542" int_docExpressionCount="4207" int_docLength="36879" length="4" offset="4677" startLine="139" starttimestamp="1614131043210" timestamp="1946473">
    <deletedText><![CDATA[stud]]></deletedText>
    <insertedText><![CDATA[studentFolder]]></insertedText>
  </DocumentChange>
  <Command __id="2498" _type="PauseCommand" date="Tue Feb 23 21:16:25 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="1942656">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6670]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2497" _type="SelectTextCommand" caretOffset="4610" date="Tue Feb 23 21:16:25 EST 2021" end="4610" start="4534" starttimestamp="1614131043210" timestamp="1942656" />
  <Command __id="2500" _type="CutCommand" date="Tue Feb 23 21:16:26 EST 2021" starttimestamp="1614131043210" timestamp="1942882" />
  <Command __id="2501" _type="MoveCaretCommand" caretOffset="4475" date="Tue Feb 23 21:16:26 EST 2021" docOffset="4664" starttimestamp="1614131043210" timestamp="1943436" />
  <Command __id="2503" _type="InsertStringCommand" date="Tue Feb 23 21:16:27 EST 2021" starttimestamp="1614131043210" timestamp="1944392" timestamp2="1944392">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2505" _type="InsertStringCommand" date="Tue Feb 23 21:16:28 EST 2021" starttimestamp="1614131043210" timestamp="1945070" timestamp2="1945070">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2506" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:16:28 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1945111" />
  <Command __id="2508" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:16:28 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1945283" />
  <Command __id="2510" _type="InsertStringCommand" date="Tue Feb 23 21:16:28 EST 2021" starttimestamp="1614131043210" timestamp="1945354" timestamp2="1945354">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2512" _type="InsertStringCommand" date="Tue Feb 23 21:16:29 EST 2021" starttimestamp="1614131043210" timestamp="1945813" timestamp2="1945813">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2513" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:16:29 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1945848" />
  <Command __id="2517" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:16:29 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1946465" />
  <Command __id="2519" _type="InsertStringCommand" date="Tue Feb 23 21:16:29 EST 2021" starttimestamp="1614131043210" timestamp="1946479" timestamp2="1946479">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2521" _type="InsertStringCommand" date="Tue Feb 23 21:16:30 EST 2021" starttimestamp="1614131043210" timestamp="1947231" timestamp2="1947231">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2522" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:16:30 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1947273" />
  <Command __id="2528" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:16:31 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1948085" />
  <Command __id="2530" _type="InsertStringCommand" date="Tue Feb 23 21:16:31 EST 2021" starttimestamp="1614131043210" timestamp="1948099" timestamp2="1948099">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2532" _type="PauseCommand" date="Tue Feb 23 21:16:32 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1949176">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1077]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2531" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:16:32 EST 2021" starttimestamp="1614131043210" timestamp="1949176" />
  <Command __id="2533" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:16:32 EST 2021" starttimestamp="1614131043210" timestamp="1949338" />
  <Command __id="2534" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:16:32 EST 2021" starttimestamp="1614131043210" timestamp="1949469" />
  <Command __id="2535" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:16:32 EST 2021" starttimestamp="1614131043210" timestamp="1949608" />
  <Command __id="2536" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:16:32 EST 2021" starttimestamp="1614131043210" timestamp="1949738" />
  <Command __id="2537" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:16:33 EST 2021" starttimestamp="1614131043210" timestamp="1949884" />
  <Command __id="2538" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:16:33 EST 2021" starttimestamp="1614131043210" timestamp="1950049" />
  <Command __id="2539" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Tue Feb 23 21:16:33 EST 2021" starttimestamp="1614131043210" timestamp="1950619" />
  <Command __id="2541" _type="PauseCommand" date="Tue Feb 23 21:16:35 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1951984">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1365]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2542" _type="InsertStringCommand" date="Tue Feb 23 21:16:35 EST 2021" starttimestamp="1614131043210" timestamp="1951987" timestamp2="1951987">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2544" _type="InsertStringCommand" date="Tue Feb 23 21:16:35 EST 2021" starttimestamp="1614131043210" timestamp="1952029" timestamp2="1952029">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2545" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:16:35 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1952072" />
  <Command __id="2551" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:16:36 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1952877" />
  <Command __id="2553" _type="InsertStringCommand" date="Tue Feb 23 21:16:36 EST 2021" starttimestamp="1614131043210" timestamp="1952890" timestamp2="1952890">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2555" _type="InsertStringCommand" date="Tue Feb 23 21:16:36 EST 2021" starttimestamp="1614131043210" timestamp="1953162" timestamp2="1953162">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2556" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:16:36 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1953205" />
  <Command __id="2562" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:16:37 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1954317" />
  <Command __id="2564" _type="InsertStringCommand" date="Tue Feb 23 21:16:37 EST 2021" starttimestamp="1614131043210" timestamp="1954395" timestamp2="1954395">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2566" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:16:38 EST 2021" starttimestamp="1614131043210" timestamp="1954949" />
  <Command __id="2568" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 23 21:16:38 EST 2021" starttimestamp="1614131043210" timestamp="1955250" />
  <Command __id="2569" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:16:38 EST 2021" starttimestamp="1614131043210" timestamp="1955640" />
  <Command __id="2570" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:16:39 EST 2021" starttimestamp="1614131043210" timestamp="1955932" />
  <Command __id="2572" _type="InsertStringCommand" date="Tue Feb 23 21:16:40 EST 2021" starttimestamp="1614131043210" timestamp="1956859" timestamp2="1956859">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="2573" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:16:40 EST 2021" starttimestamp="1614131043210" timestamp="1957653" />
  <Command __id="2575" _type="PauseCommand" date="Tue Feb 23 21:16:44 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1961066">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3413]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2574" _type="SelectTextCommand" caretOffset="4484" date="Tue Feb 23 21:16:44 EST 2021" end="4558" start="4484" starttimestamp="1614131043210" timestamp="1961066" />
  <Command __id="2577" _type="PauseCommand" date="Tue Feb 23 21:16:46 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1963062">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1996]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2578" _type="CutCommand" date="Tue Feb 23 21:16:46 EST 2021" starttimestamp="1614131043210" timestamp="1963080" />
  <Command __id="2579" _type="MoveCaretCommand" caretOffset="4553" date="Tue Feb 23 21:16:47 EST 2021" docOffset="4742" starttimestamp="1614131043210" timestamp="1963806" />
  <Command __id="2581" _type="PauseCommand" date="Tue Feb 23 21:16:48 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1965235">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1429]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2582" _type="PasteCommand" date="Tue Feb 23 21:16:48 EST 2021" starttimestamp="1614131043210" timestamp="1965245" />
  <Command __id="2584" _type="UndoCommand" date="Tue Feb 23 21:16:49 EST 2021" starttimestamp="1614131043210" timestamp="1966224" />
  <Command __id="2585" _type="MoveCaretCommand" caretOffset="4553" date="Tue Feb 23 21:16:50 EST 2021" docOffset="4742" starttimestamp="1614131043210" timestamp="1966952" />
  <Command __id="2587" _type="PasteCommand" date="Tue Feb 23 21:16:50 EST 2021" starttimestamp="1614131043210" timestamp="1967754" />
  <Command __id="2589" _type="PauseCommand" date="Tue Feb 23 21:16:52 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1968836">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1082]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2590" _type="UndoCommand" date="Tue Feb 23 21:16:52 EST 2021" starttimestamp="1614131043210" timestamp="1968848" />
  <Command __id="2592" _type="UndoCommand" date="Tue Feb 23 21:16:52 EST 2021" starttimestamp="1614131043210" timestamp="1969391" />
  <Command __id="2594" _type="PauseCommand" date="Tue Feb 23 21:16:53 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1970744">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1353]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2593" _type="MoveCaretCommand" caretOffset="4558" date="Tue Feb 23 21:16:53 EST 2021" docOffset="4747" starttimestamp="1614131043210" timestamp="1970744" />
  <Command __id="2596" _type="PauseCommand" date="Tue Feb 23 21:16:56 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1972868">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2124]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2595" _type="SelectTextCommand" caretOffset="4558" date="Tue Feb 23 21:16:56 EST 2021" end="4558" start="4484" starttimestamp="1614131043210" timestamp="1972868" />
  <Command __id="2598" _type="CutCommand" date="Tue Feb 23 21:16:56 EST 2021" starttimestamp="1614131043210" timestamp="1973054" />
  <Command __id="2599" _type="MoveCaretCommand" caretOffset="4553" date="Tue Feb 23 21:16:56 EST 2021" docOffset="4742" starttimestamp="1614131043210" timestamp="1973543" />
  <Command __id="2601" _type="PasteCommand" date="Tue Feb 23 21:16:57 EST 2021" starttimestamp="1614131043210" timestamp="1973898" />
  <Command __id="2603" _type="PauseCommand" date="Tue Feb 23 21:16:58 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1975635">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1737]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2602" _type="MoveCaretCommand" caretOffset="4562" date="Tue Feb 23 21:16:58 EST 2021" docOffset="4751" starttimestamp="1614131043210" timestamp="1975635" />
  <Command __id="2604" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineStart" date="Tue Feb 23 21:16:59 EST 2021" starttimestamp="1614131043210" timestamp="1976109" />
  <Command __id="2606" _type="InsertStringCommand" date="Tue Feb 23 21:16:59 EST 2021" starttimestamp="1614131043210" timestamp="1976181" timestamp2="1976181">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="2607" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:17:00 EST 2021" starttimestamp="1614131043210" timestamp="1976966" />
  <Command __id="2608" _type="InsertStringCommand" date="Tue Feb 23 21:17:00 EST 2021" starttimestamp="1614131043210" timestamp="1977728" timestamp2="1977728">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="2610" _type="InsertStringCommand" date="Tue Feb 23 21:17:01 EST 2021" starttimestamp="1614131043210" timestamp="1978359" timestamp2="1978359">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2611" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:01 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1978400" />
  <Command __id="2615" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:02 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1979026" />
  <Command __id="2617" _type="InsertStringCommand" date="Tue Feb 23 21:17:02 EST 2021" starttimestamp="1614131043210" timestamp="1979041" timestamp2="1979041">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2619" _type="InsertStringCommand" date="Tue Feb 23 21:17:02 EST 2021" starttimestamp="1614131043210" timestamp="1979433" timestamp2="1979433">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2621" _type="PauseCommand" date="Tue Feb 23 21:17:04 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1981594">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2161]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2622" _type="InsertStringCommand" date="Tue Feb 23 21:17:04 EST 2021" starttimestamp="1614131043210" timestamp="1981601" timestamp2="1981601">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2624" _type="InsertStringCommand" date="Tue Feb 23 21:17:04 EST 2021" starttimestamp="1614131043210" timestamp="1981727" timestamp2="1981727">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2626" _type="InsertStringCommand" date="Tue Feb 23 21:17:05 EST 2021" starttimestamp="1614131043210" timestamp="1982036" timestamp2="1982036">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2627" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:05 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1982078" />
  <Command __id="2631" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:05 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1982511" />
  <Command __id="2633" _type="InsertStringCommand" date="Tue Feb 23 21:17:05 EST 2021" starttimestamp="1614131043210" timestamp="1982524" timestamp2="1982524">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2635" _type="InsertStringCommand" date="Tue Feb 23 21:17:06 EST 2021" starttimestamp="1614131043210" timestamp="1983237" timestamp2="1983237">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2637" _type="PauseCommand" date="Tue Feb 23 21:17:07 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1984320">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1083]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2638" _type="InsertStringCommand" date="Tue Feb 23 21:17:07 EST 2021" starttimestamp="1614131043210" timestamp="1984325" timestamp2="1984325">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="2640" _type="InsertStringCommand" date="Tue Feb 23 21:17:07 EST 2021" starttimestamp="1614131043210" timestamp="1984416" timestamp2="1984416">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2642" _type="PauseCommand" date="Tue Feb 23 21:17:08 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1985417">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1001]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2643" _type="InsertStringCommand" date="Tue Feb 23 21:17:08 EST 2021" starttimestamp="1614131043210" timestamp="1985421" timestamp2="1985421">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2644" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:08 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1985464" />
  <Command __id="2648" _type="PauseCommand" date="Tue Feb 23 21:17:09 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1986780">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1100]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2647" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:09 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1986780" />
  <Command __id="2650" _type="InsertStringCommand" date="Tue Feb 23 21:17:10 EST 2021" starttimestamp="1614131043210" timestamp="1986795" timestamp2="1986795">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2520" _type="Insert" date="Tue Feb 23 21:16:30 EST 2021" docASTNodeCount="6095" docActiveCodeLength="34561" docExpressionCount="4209" docLength="36898" length="6" offset="4690" repeat="6" starttimestamp="1614131043210" timestamp="1947229" timestamp2="1947920">
    <text><![CDATA[.getna]]></text>
  </DocumentChange>
  <DocumentChange __id="2529" _type="Replace" date="Tue Feb 23 21:16:31 EST 2021" docASTNodeCount="6095" docActiveCodeLength="34565" docExpressionCount="4209" docLength="36902" endLine="139" insertionLength="9" int_docASTNodeCount="6095" int_docActiveCodeLength="34556" int_docExpressionCount="4208" int_docLength="36893" length="5" offset="4691" startLine="139" starttimestamp="1614131043210" timestamp="1948093">
    <deletedText><![CDATA[getna]]></deletedText>
    <insertedText><![CDATA[getName()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2540" _type="Insert" date="Tue Feb 23 21:16:35 EST 2021" docASTNodeCount="6095" docActiveCodeLength="34572" docExpressionCount="4209" docLength="36909" length="7" offset="4677" repeat="7" starttimestamp="1614131043210" timestamp="1951984" timestamp2="1952518">
    <text><![CDATA[timesta]]></text>
  </DocumentChange>
  <DocumentChange __id="2552" _type="Replace" date="Tue Feb 23 21:16:36 EST 2021" docASTNodeCount="6095" docActiveCodeLength="34575" docExpressionCount="4209" docLength="36912" endLine="139" insertionLength="10" int_docASTNodeCount="6095" int_docActiveCodeLength="34565" int_docExpressionCount="4209" int_docLength="36902" length="7" offset="4677" startLine="139" starttimestamp="1614131043210" timestamp="1952884">
    <deletedText><![CDATA[timesta]]></deletedText>
    <insertedText><![CDATA[timestamps]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2554" _type="Insert" date="Tue Feb 23 21:16:36 EST 2021" docASTNodeCount="6097" docActiveCodeLength="34581" docExpressionCount="4211" docLength="36918" length="6" offset="4687" repeat="6" starttimestamp="1614131043210" timestamp="1953160" timestamp2="1953958">
    <text><![CDATA[.conta]]></text>
  </DocumentChange>
  <DocumentChange __id="2563" _type="Replace" date="Tue Feb 23 21:16:37 EST 2021" docASTNodeCount="6098" docActiveCodeLength="34592" docExpressionCount="4212" docLength="36929" endLine="139" insertionLength="16" int_docASTNodeCount="6097" int_docActiveCodeLength="34576" int_docExpressionCount="4211" int_docLength="36913" length="5" offset="4688" startLine="139" starttimestamp="1614131043210" timestamp="1954325">
    <deletedText><![CDATA[conta]]></deletedText>
    <insertedText><![CDATA[containsKey(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2565" _type="Delete" date="Tue Feb 23 21:16:38 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34588" docExpressionCount="3874" docLength="36925" endLine="139" length="4" offset="4700" repeat="2" startLine="139" starttimestamp="1614131043210" timestamp="1954944" timestamp2="1955239">
    <text><![CDATA[key)]]></text>
  </DocumentChange>
  <DocumentChange __id="2571" _type="Insert" date="Tue Feb 23 21:16:40 EST 2021" docASTNodeCount="6098" docActiveCodeLength="34589" docExpressionCount="4212" docLength="36926" length="1" offset="4722" starttimestamp="1614131043210" timestamp="1956854">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="2576" _type="Delete" date="Tue Feb 23 21:16:46 EST 2021" docASTNodeCount="6090" docActiveCodeLength="34515" docExpressionCount="4206" docLength="36852" endLine="141" length="74" offset="4673" startLine="139" starttimestamp="1614131043210" timestamp="1963062">
    <text><![CDATA[if (timestamps.containsKey(studentFolder.getName())) {
								
							}]]></text>
  </DocumentChange>
  <DocumentChange __id="2580" _type="Replace" date="Tue Feb 23 21:16:48 EST 2021" docASTNodeCount="6098" docActiveCodeLength="34582" docExpressionCount="4212" docLength="36919" endLine="141" insertionLength="74" int_docASTNodeCount="6090" int_docActiveCodeLength="34508" int_docExpressionCount="4206" int_docLength="36845" length="7" offset="4735" startLine="141" starttimestamp="1614131043210" timestamp="1965235">
    <deletedText><![CDATA[							]]></deletedText>
    <insertedText><![CDATA[if (timestamps.containsKey(studentFolder.getName())) {
								
							}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2583" _type="Replace" date="Tue Feb 23 21:16:49 EST 2021" docASTNodeCount="6090" docActiveCodeLength="34515" docExpressionCount="4206" docLength="36852" endLine="143" insertionLength="7" int_docASTNodeCount="6090" int_docActiveCodeLength="34508" int_docExpressionCount="4206" int_docLength="36845" length="74" offset="4735" startLine="141" starttimestamp="1614131043210" timestamp="1966203">
    <deletedText><![CDATA[if (timestamps.containsKey(studentFolder.getName())) {
								
							}]]></deletedText>
    <insertedText><![CDATA[							]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2586" _type="Replace" date="Tue Feb 23 21:16:50 EST 2021" docASTNodeCount="6098" docActiveCodeLength="34582" docExpressionCount="4212" docLength="36919" endLine="141" insertionLength="74" int_docASTNodeCount="6090" int_docActiveCodeLength="34508" int_docExpressionCount="4206" int_docLength="36845" length="7" offset="4735" startLine="141" starttimestamp="1614131043210" timestamp="1967743">
    <deletedText><![CDATA[							]]></deletedText>
    <insertedText><![CDATA[if (timestamps.containsKey(studentFolder.getName())) {
								
							}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2588" _type="Replace" date="Tue Feb 23 21:16:52 EST 2021" docASTNodeCount="6090" docActiveCodeLength="34515" docExpressionCount="4206" docLength="36852" endLine="143" insertionLength="7" int_docASTNodeCount="6090" int_docActiveCodeLength="34508" int_docExpressionCount="4206" int_docLength="36845" length="74" offset="4735" startLine="141" starttimestamp="1614131043210" timestamp="1968836">
    <deletedText><![CDATA[if (timestamps.containsKey(studentFolder.getName())) {
								
							}]]></deletedText>
    <insertedText><![CDATA[							]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2591" _type="Insert" date="Tue Feb 23 21:16:52 EST 2021" docASTNodeCount="6098" docActiveCodeLength="34589" docExpressionCount="4212" docLength="36926" length="74" offset="4673" starttimestamp="1614131043210" timestamp="1969387">
    <text><![CDATA[if (timestamps.containsKey(studentFolder.getName())) {
								
							}]]></text>
  </DocumentChange>
  <DocumentChange __id="2597" _type="Delete" date="Tue Feb 23 21:16:56 EST 2021" docASTNodeCount="6090" docActiveCodeLength="34515" docExpressionCount="4206" docLength="36852" endLine="141" length="74" offset="4673" startLine="139" starttimestamp="1614131043210" timestamp="1973035">
    <text><![CDATA[if (timestamps.containsKey(studentFolder.getName())) {
								
							}]]></text>
  </DocumentChange>
  <DocumentChange __id="2600" _type="Replace" date="Tue Feb 23 21:16:57 EST 2021" docASTNodeCount="6098" docActiveCodeLength="34582" docExpressionCount="4212" docLength="36919" endLine="141" insertionLength="74" int_docASTNodeCount="6090" int_docActiveCodeLength="34508" int_docExpressionCount="4206" int_docLength="36845" length="7" offset="4735" startLine="141" starttimestamp="1614131043210" timestamp="1973887">
    <deletedText><![CDATA[							]]></deletedText>
    <insertedText><![CDATA[if (timestamps.containsKey(studentFolder.getName())) {
								
							}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2605" _type="Insert" date="Tue Feb 23 21:16:59 EST 2021" docASTNodeCount="6098" docActiveCodeLength="34589" docExpressionCount="4212" docLength="36926" length="7" offset="4735" starttimestamp="1614131043210" timestamp="1976179">
    <text><![CDATA[							]]></text>
  </DocumentChange>
  <DocumentChange __id="2609" _type="Insert" date="Tue Feb 23 21:17:01 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34593" docExpressionCount="3874" docLength="36930" length="4" offset="4806" repeat="4" starttimestamp="1614131043210" timestamp="1978354" timestamp2="1978712">
    <text><![CDATA[star]]></text>
  </DocumentChange>
  <DocumentChange __id="2616" _type="Replace" date="Tue Feb 23 21:17:02 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34603" docExpressionCount="3874" docLength="36940" endLine="142" insertionLength="14" int_docASTNodeCount="6098" int_docActiveCodeLength="34589" int_docExpressionCount="4212" int_docLength="36926" length="4" offset="4806" startLine="142" starttimestamp="1614131043210" timestamp="1979034">
    <deletedText><![CDATA[star]]></deletedText>
    <insertedText><![CDATA[startTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2618" _type="Insert" date="Tue Feb 23 21:17:02 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34604" docExpressionCount="3874" docLength="36941" length="1" offset="4820" starttimestamp="1614131043210" timestamp="1979428">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="2620" _type="Insert" date="Tue Feb 23 21:17:04 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34610" docExpressionCount="3874" docLength="36947" length="6" offset="4821" repeat="6" starttimestamp="1614131043210" timestamp="1981594" timestamp2="1982360">
    <text><![CDATA[= star]]></text>
  </DocumentChange>
  <DocumentChange __id="2632" _type="Replace" date="Tue Feb 23 21:17:05 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34620" docExpressionCount="3874" docLength="36957" endLine="142" insertionLength="14" int_docASTNodeCount="5583" int_docActiveCodeLength="34606" int_docExpressionCount="3874" int_docLength="36943" length="4" offset="4823" startLine="142" starttimestamp="1614131043210" timestamp="1982519">
    <deletedText><![CDATA[star]]></deletedText>
    <insertedText><![CDATA[startTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2634" _type="Insert" date="Tue Feb 23 21:17:06 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34626" docExpressionCount="3874" docLength="36963" length="6" offset="4837" repeat="6" starttimestamp="1614131043210" timestamp="1983232" timestamp2="1985680">
    <text><![CDATA[ / day]]></text>
  </DocumentChange>
  <DocumentChange __id="2649" _type="Replace" date="Tue Feb 23 21:17:09 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34626" docExpressionCount="3874" docLength="36963" endLine="142" insertionLength="3" int_docASTNodeCount="5583" int_docActiveCodeLength="34623" int_docExpressionCount="3874" int_docLength="36960" length="3" offset="4840" startLine="142" starttimestamp="1614131043210" timestamp="1986789">
    <deletedText><![CDATA[day]]></deletedText>
    <insertedText><![CDATA[DAY]]></insertedText>
  </DocumentChange>
  <Command __id="2652" _type="PauseCommand" date="Tue Feb 23 21:17:11 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1988702">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1907]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2653" _type="SelectTextCommand" caretOffset="1148" date="Tue Feb 23 21:17:12 EST 2021" end="1148" start="1145" starttimestamp="1614131043210" timestamp="1988884" />
  <Command __id="2655" _type="PauseCommand" date="Tue Feb 23 21:17:16 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1993547">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4663]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2656" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Tue Feb 23 21:17:16 EST 2021" starttimestamp="1614131043210" timestamp="1993605" />
  <Command __id="2657" _type="MoveCaretCommand" caretOffset="4841" date="Tue Feb 23 21:17:16 EST 2021" docOffset="4841" starttimestamp="1614131043210" timestamp="1993705" />
  <Command __id="2659" _type="PauseCommand" date="Tue Feb 23 21:17:18 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="1995269">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1564]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2658" _type="MoveCaretCommand" caretOffset="4843" date="Tue Feb 23 21:17:18 EST 2021" docOffset="4843" starttimestamp="1614131043210" timestamp="1995269" />
  <Command __id="2661" _type="InsertStringCommand" date="Tue Feb 23 21:17:18 EST 2021" starttimestamp="1614131043210" timestamp="1995528" timestamp2="1995528">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2663" _type="InsertStringCommand" date="Tue Feb 23 21:17:19 EST 2021" starttimestamp="1614131043210" timestamp="1996151" timestamp2="1996151">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2665" _type="InsertStringCommand" date="Tue Feb 23 21:17:19 EST 2021" starttimestamp="1614131043210" timestamp="1996265" timestamp2="1996265">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2667" _type="InsertStringCommand" date="Tue Feb 23 21:17:19 EST 2021" starttimestamp="1614131043210" timestamp="1996432" timestamp2="1996432">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2668" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:19 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="1996474" />
  <Command __id="2671" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:20 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="1997053" />
  <Command __id="2673" _type="InsertStringCommand" date="Tue Feb 23 21:17:20 EST 2021" starttimestamp="1614131043210" timestamp="1997067" timestamp2="1997067">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2675" _type="PauseCommand" date="Tue Feb 23 21:17:22 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="1999134">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2067]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2676" _type="InsertStringCommand" date="Tue Feb 23 21:17:22 EST 2021" starttimestamp="1614131043210" timestamp="1999139" timestamp2="1999139">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2678" _type="InsertStringCommand" date="Tue Feb 23 21:17:22 EST 2021" starttimestamp="1614131043210" timestamp="1999469" timestamp2="1999469">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="2680" _type="InsertStringCommand" date="Tue Feb 23 21:17:22 EST 2021" starttimestamp="1614131043210" timestamp="1999544" timestamp2="1999544">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2682" _type="PauseCommand" date="Tue Feb 23 21:17:24 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2001238">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1694]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2683" _type="InsertStringCommand" date="Tue Feb 23 21:17:24 EST 2021" starttimestamp="1614131043210" timestamp="2001243" timestamp2="2001243">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2684" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:24 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2001285" />
  <Command __id="2688" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:17:25 EST 2021" starttimestamp="1614131043210" timestamp="2002155" />
  <Command __id="2690" _type="PauseCommand" date="Tue Feb 23 21:17:26 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2003214">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1059]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2697" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:27 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2003891" />
  <Command __id="2699" _type="InsertStringCommand" date="Tue Feb 23 21:17:27 EST 2021" starttimestamp="1614131043210" timestamp="2003999" timestamp2="2003999">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2700" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:27 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2004041" />
  <Command __id="2702" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:17:27 EST 2021" starttimestamp="1614131043210" timestamp="2004527" />
  <Command __id="2710" _type="PauseCommand" date="Tue Feb 23 21:17:29 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2006440">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1093]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2709" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:29 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2006440" />
  <Command __id="2712" _type="InsertStringCommand" date="Tue Feb 23 21:17:29 EST 2021" starttimestamp="1614131043210" timestamp="2006455" timestamp2="2006455">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2714" _type="PauseCommand" date="Tue Feb 23 21:17:30 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2007547">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1092]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2715" _type="InsertStringCommand" date="Tue Feb 23 21:17:30 EST 2021" starttimestamp="1614131043210" timestamp="2007552" timestamp2="2007552">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2716" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:30 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2007594" />
  <Command __id="2718" _type="PauseCommand" date="Tue Feb 23 21:17:32 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2009140">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1546]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2721" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:32 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2009566" />
  <Command __id="2723" _type="InsertStringCommand" date="Tue Feb 23 21:17:32 EST 2021" starttimestamp="1614131043210" timestamp="2009646" timestamp2="2009646">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2725" _type="PauseCommand" date="Tue Feb 23 21:17:34 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2011091">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1445]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2726" _type="InsertStringCommand" date="Tue Feb 23 21:17:34 EST 2021" starttimestamp="1614131043210" timestamp="2011100" timestamp2="2011100">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2727" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:34 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2011184" />
  <Command __id="2733" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:35 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2012650" />
  <Command __id="2735" _type="InsertStringCommand" date="Tue Feb 23 21:17:35 EST 2021" starttimestamp="1614131043210" timestamp="2012665" timestamp2="2012665">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2737" _type="InsertStringCommand" date="Tue Feb 23 21:17:36 EST 2021" starttimestamp="1614131043210" timestamp="2012903" timestamp2="2012903">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2738" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:36 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2012995" />
  <Command __id="2742" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:37 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2013965" />
  <Command __id="2744" _type="InsertStringCommand" date="Tue Feb 23 21:17:37 EST 2021" starttimestamp="1614131043210" timestamp="2013984" timestamp2="2013984">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2746" _type="PauseCommand" date="Tue Feb 23 21:17:38 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2015323">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1339]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2747" _type="UndoCommand" date="Tue Feb 23 21:17:38 EST 2021" starttimestamp="1614131043210" timestamp="2015349" />
  <Command __id="2749" _type="InsertStringCommand" date="Tue Feb 23 21:17:38 EST 2021" starttimestamp="1614131043210" timestamp="2015630" timestamp2="2015630">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2750" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:38 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2015715" />
  <Command __id="2755" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:39 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2016229" />
  <Command __id="2757" _type="InsertStringCommand" date="Tue Feb 23 21:17:39 EST 2021" starttimestamp="1614131043210" timestamp="2016249" timestamp2="2016249">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2758" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:17:40 EST 2021" starttimestamp="1614131043210" timestamp="2017225" />
  <Command __id="2760" _type="PauseCommand" date="Tue Feb 23 21:17:42 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2019186">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1961]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2761" _type="InsertStringCommand" date="Tue Feb 23 21:17:42 EST 2021" starttimestamp="1614131043210" timestamp="2019192" timestamp2="2019192">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="2763" _type="PauseCommand" date="Tue Feb 23 21:17:44 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2021018">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1826]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2764" _type="InsertStringCommand" date="Tue Feb 23 21:17:44 EST 2021" starttimestamp="1614131043210" timestamp="2021024" timestamp2="2021024">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="2651" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:17:11 EST 2021" docASTNodeCount="6305" docActiveCodeLength="36390" docExpressionCount="4229" docLength="36445" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1988702">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.contains("google.com/url?") || keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2654" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:17:16 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34626" docExpressionCount="3874" docLength="36963" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="1993547">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶"), Diff(INSERT,"import java.text.ParseException;¶"), Diff(EQUAL,"import java.text.SimpleDateFormat;¶"), Diff(DELETE,""), Diff(EQUAL,"import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = ""), Diff(INSERT,"C:\\Users\\Zhizhou\\Desktop\\"), Diff(EQUAL,"timestamp for each participant.csv";¶	private Map<String, "), Diff(DELETE,"List<"), Diff(EQUAL,"Long"), Diff(DELETE,">"), Diff(INSERT,"[]"), Diff(EQUAL,"> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			"), Diff(INSERT,"SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			"), Diff(EQUAL,"File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			"), Diff(INSERT,"cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 10*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 10*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶			"), Diff(EQUAL,"List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		"), Diff(INSERT,"} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		"), Diff(EQUAL,"}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							"), Diff(INSERT,"¶							"), Diff(EQUAL,"long startTimestamp = getLogFileCreationTime(file);¶							"), Diff(INSERT,"if (timestamps.containsKey(studentFolder.getName())) {¶								startTimestamp = startTimestamp / DAY¶							}¶							"), Diff(EQUAL,"List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";
	private Map<String, Long[]> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			SimpleDateFormat df = new SimpleDateFormat("HH:mm");
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			cr.readNext();
			String[] token = null;
			while ((token = cr.readNext()) != null) {
				long startTime = df.parse(token[4]).getTime();
				if (startTime < 10*3600*1000) {
					startTime += 12*3600*1000;
				}
				long endTime = df.parse(token[5]).getTime();
				if (endTime < 10*3600*1000) {
					endTime += 12*3600*1000;
				}
				Long[] times = {startTime, endTime};
				timestamps.put(token[0], times);
			}
			List<String[]> tokens = cr.readAll();
			System.out.println(tokens);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							
							long startTimestamp = getLogFileCreationTime(file);
							if (timestamps.containsKey(studentFolder.getName())) {
								startTimestamp = startTimestamp / DAY
							}
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="2660" _type="Insert" date="Tue Feb 23 21:17:18 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34632" docExpressionCount="3874" docLength="36969" length="6" offset="4843" repeat="6" starttimestamp="1614131043210" timestamp="1995523" timestamp2="1996702">
    <text><![CDATA[ * day]]></text>
  </DocumentChange>
  <DocumentChange __id="2672" _type="Replace" date="Tue Feb 23 21:17:20 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34632" docExpressionCount="3874" docLength="36969" endLine="142" insertionLength="3" int_docASTNodeCount="5583" int_docActiveCodeLength="34629" int_docExpressionCount="3874" int_docLength="36966" length="3" offset="4846" startLine="142" starttimestamp="1614131043210" timestamp="1997062">
    <deletedText><![CDATA[day]]></deletedText>
    <insertedText><![CDATA[DAY]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2674" _type="Insert" date="Tue Feb 23 21:17:22 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34638" docExpressionCount="3874" docLength="36975" length="6" offset="4849" repeat="6" starttimestamp="1614131043210" timestamp="1999134" timestamp2="2001564">
    <text><![CDATA[ + std]]></text>
  </DocumentChange>
  <DocumentChange __id="2687" _type="Delete" date="Tue Feb 23 21:17:25 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34635" docExpressionCount="3874" docLength="36972" endLine="142" length="3" offset="4852" startLine="142" starttimestamp="1614131043210" timestamp="2002150">
    <text><![CDATA[std]]></text>
  </DocumentChange>
  <DocumentChange __id="2689" _type="Insert" date="Tue Feb 23 21:17:26 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34643" docExpressionCount="3874" docLength="36980" length="8" offset="4852" repeat="8" starttimestamp="1614131043210" timestamp="2003214" timestamp2="2003994">
    <text><![CDATA[timnesta]]></text>
  </DocumentChange>
  <DocumentChange __id="2701" _type="Delete" date="Tue Feb 23 21:17:27 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34635" docExpressionCount="3874" docLength="36972" endLine="142" length="8" offset="4852" startLine="142" starttimestamp="1614131043210" timestamp="2004524">
    <text><![CDATA[timnesta]]></text>
  </DocumentChange>
  <DocumentChange __id="2703" _type="Insert" date="Tue Feb 23 21:17:27 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34641" docExpressionCount="3874" docLength="36978" length="6" offset="4852" repeat="6" starttimestamp="1614131043210" timestamp="2004777" timestamp2="2005347">
    <text><![CDATA[timest]]></text>
  </DocumentChange>
  <DocumentChange __id="2711" _type="Replace" date="Tue Feb 23 21:17:29 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34645" docExpressionCount="3874" docLength="36982" endLine="142" insertionLength="10" int_docASTNodeCount="5583" int_docActiveCodeLength="34635" int_docExpressionCount="3874" int_docLength="36972" length="6" offset="4852" startLine="142" starttimestamp="1614131043210" timestamp="2006449">
    <deletedText><![CDATA[timest]]></deletedText>
    <insertedText><![CDATA[timestamps]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2713" _type="Insert" date="Tue Feb 23 21:17:30 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34649" docExpressionCount="3874" docLength="36986" length="4" offset="4862" repeat="4" starttimestamp="1614131043210" timestamp="2007547" timestamp2="2009370">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="2722" _type="Replace" date="Tue Feb 23 21:17:32 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34654" docExpressionCount="3874" docLength="36991" endLine="142" insertionLength="8" int_docASTNodeCount="5583" int_docActiveCodeLength="34646" int_docExpressionCount="3874" int_docLength="36983" length="3" offset="4863" startLine="142" starttimestamp="1614131043210" timestamp="2009575">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[get(key)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2724" _type="Replace" date="Tue Feb 23 21:17:34 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34652" docExpressionCount="3874" docLength="36989" endLine="142" insertionLength="1" int_docASTNodeCount="5583" int_docActiveCodeLength="34651" int_docExpressionCount="3874" int_docLength="36988" length="3" offset="4867" startLine="142" starttimestamp="1614131043210" timestamp="2011091">
    <deletedText><![CDATA[key]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2728" _type="Insert" date="Tue Feb 23 21:17:34 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34654" docExpressionCount="3874" docLength="36991" length="2" offset="4868" repeat="2" starttimestamp="1614131043210" timestamp="2011415" timestamp2="2011431">
    <text><![CDATA[td]]></text>
  </DocumentChange>
  <DocumentChange __id="2730" _type="Delete" date="Tue Feb 23 21:17:35 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34653" docExpressionCount="3874" docLength="36990" endLine="142" length="1" offset="4869" startLine="142" starttimestamp="1614131043210" timestamp="2012033">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2731" _type="Insert" date="Tue Feb 23 21:17:35 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34655" docExpressionCount="3874" docLength="36992" length="2" offset="4869" repeat="2" starttimestamp="1614131043210" timestamp="2012198" timestamp2="2012276">
    <text><![CDATA[ud]]></text>
  </DocumentChange>
  <DocumentChange __id="2734" _type="Replace" date="Tue Feb 23 21:17:35 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34664" docExpressionCount="3874" docLength="37001" endLine="142" insertionLength="13" int_docASTNodeCount="5583" int_docActiveCodeLength="34651" int_docExpressionCount="3874" int_docLength="36988" length="4" offset="4867" startLine="142" starttimestamp="1614131043210" timestamp="2012657">
    <deletedText><![CDATA[stud]]></deletedText>
    <insertedText><![CDATA[studentFolder]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2736" _type="Insert" date="Tue Feb 23 21:17:36 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34668" docExpressionCount="3874" docLength="37005" length="4" offset="4880" repeat="4" starttimestamp="1614131043210" timestamp="2012901" timestamp2="2013401">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="2743" _type="Replace" date="Tue Feb 23 21:17:37 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34682" docExpressionCount="3874" docLength="37019" endLine="142" insertionLength="17" int_docASTNodeCount="6095" int_docActiveCodeLength="34665" int_docExpressionCount="4213" int_docLength="37002" length="3" offset="4881" startLine="142" starttimestamp="1614131043210" timestamp="2013974">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[getAbsoluteFile()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2745" _type="Replace" date="Tue Feb 23 21:17:38 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34668" docExpressionCount="3874" docLength="37005" endLine="142" insertionLength="3" int_docASTNodeCount="6095" int_docActiveCodeLength="34665" int_docExpressionCount="4213" int_docLength="37002" length="17" offset="4881" startLine="142" starttimestamp="1614131043210" timestamp="2015323">
    <deletedText><![CDATA[getAbsoluteFile()]]></deletedText>
    <insertedText><![CDATA[get]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2748" _type="Replace" date="Tue Feb 23 21:17:38 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34666" docExpressionCount="3874" docLength="37003" endLine="142" insertionLength="1" int_docASTNodeCount="6095" int_docActiveCodeLength="34665" int_docExpressionCount="4213" int_docLength="37002" length="3" offset="4881" startLine="142" starttimestamp="1614131043210" timestamp="2015621">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[g]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2751" _type="Insert" date="Tue Feb 23 21:17:39 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34670" docExpressionCount="3874" docLength="37007" length="4" offset="4882" repeat="4" starttimestamp="1614131043210" timestamp="2015806" timestamp2="2016076">
    <text><![CDATA[etna]]></text>
  </DocumentChange>
  <DocumentChange __id="2756" _type="Replace" date="Tue Feb 23 21:17:39 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34674" docExpressionCount="3874" docLength="37011" endLine="142" insertionLength="9" int_docASTNodeCount="6095" int_docActiveCodeLength="34665" int_docExpressionCount="4213" int_docLength="37002" length="5" offset="4881" startLine="142" starttimestamp="1614131043210" timestamp="2016238">
    <deletedText><![CDATA[getna]]></deletedText>
    <insertedText><![CDATA[getName()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2759" _type="Insert" date="Tue Feb 23 21:17:42 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34677" docExpressionCount="3874" docLength="37014" length="3" offset="4891" repeat="2" starttimestamp="1614131043210" timestamp="2019186" timestamp2="2021018">
    <text><![CDATA[[0]]]></text>
  </DocumentChange>
  <Command __id="2766" _type="PauseCommand" date="Tue Feb 23 21:17:45 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2022526">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1502]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2765" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:17:45 EST 2021" starttimestamp="1614131043210" timestamp="2022526" />
  <Command __id="2768" _type="InsertStringCommand" date="Tue Feb 23 21:17:46 EST 2021" starttimestamp="1614131043210" timestamp="2023167" timestamp2="2023167">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2770" _type="PauseCommand" date="Tue Feb 23 21:17:51 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2028514">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5347]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2769" _type="MoveCaretCommand" caretOffset="4673" date="Tue Feb 23 21:17:51 EST 2021" docOffset="4673" starttimestamp="1614131043210" timestamp="2028514" />
  <Command __id="2771" _type="MoveCaretCommand" caretOffset="4733" date="Tue Feb 23 21:17:52 EST 2021" docOffset="4733" starttimestamp="1614131043210" timestamp="2029184" />
  <Command __id="2773" _type="InsertStringCommand" date="Tue Feb 23 21:17:53 EST 2021" starttimestamp="1614131043210" timestamp="2029896" timestamp2="2029896">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2775" _type="InsertStringCommand" date="Tue Feb 23 21:17:53 EST 2021" starttimestamp="1614131043210" timestamp="2030301" timestamp2="2030301">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2776" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:53 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2030344" />
  <Command __id="2781" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:54 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2030875" />
  <Command __id="2783" _type="InsertStringCommand" date="Tue Feb 23 21:17:54 EST 2021" starttimestamp="1614131043210" timestamp="2031330" timestamp2="2031330">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2784" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:54 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2031373" />
  <Command __id="2786" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:54 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2031554" />
  <Command __id="2788" _type="InsertStringCommand" date="Tue Feb 23 21:17:55 EST 2021" starttimestamp="1614131043210" timestamp="2031885" timestamp2="2031885">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2789" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:55 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2031926" />
  <Command __id="2790" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:55 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2031956" />
  <Command __id="2792" _type="InsertStringCommand" date="Tue Feb 23 21:17:55 EST 2021" starttimestamp="1614131043210" timestamp="2032654" timestamp2="2032654">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2794" _type="InsertStringCommand" date="Tue Feb 23 21:17:56 EST 2021" starttimestamp="1614131043210" timestamp="2032798" timestamp2="2032798">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2796" _type="InsertStringCommand" date="Tue Feb 23 21:17:56 EST 2021" starttimestamp="1614131043210" timestamp="2032874" timestamp2="2032874">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2798" _type="InsertStringCommand" date="Tue Feb 23 21:17:56 EST 2021" starttimestamp="1614131043210" timestamp="2032893" timestamp2="2032893">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2799" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:56 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2032986" />
  <Command __id="2800" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:56 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2033008" />
  <Command __id="2802" _type="InsertStringCommand" date="Tue Feb 23 21:17:56 EST 2021" starttimestamp="1614131043210" timestamp="2033174" timestamp2="2033174">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2803" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:56 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2033267" />
  <Command __id="2804" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:56 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2033288" />
  <Command __id="2806" _type="InsertStringCommand" date="Tue Feb 23 21:17:56 EST 2021" starttimestamp="1614131043210" timestamp="2033642" timestamp2="2033642">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2807" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:56 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2033735" />
  <Command __id="2808" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:56 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2033758" />
  <Command __id="2810" _type="InsertStringCommand" date="Tue Feb 23 21:17:57 EST 2021" starttimestamp="1614131043210" timestamp="2034015" timestamp2="2034015">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2812" _type="InsertStringCommand" date="Tue Feb 23 21:17:57 EST 2021" starttimestamp="1614131043210" timestamp="2034103" timestamp2="2034103">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2814" _type="InsertStringCommand" date="Tue Feb 23 21:17:57 EST 2021" starttimestamp="1614131043210" timestamp="2034191" timestamp2="2034191">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2815" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:57 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2034285" />
  <Command __id="2816" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:17:57 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2034307" />
  <Command __id="2818" _type="InsertStringCommand" date="Tue Feb 23 21:17:57 EST 2021" starttimestamp="1614131043210" timestamp="2034341" timestamp2="2034341">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2820" _type="InsertStringCommand" date="Tue Feb 23 21:17:57 EST 2021" starttimestamp="1614131043210" timestamp="2034544" timestamp2="2034544">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2822" _type="InsertStringCommand" date="Tue Feb 23 21:17:57 EST 2021" starttimestamp="1614131043210" timestamp="2034614" timestamp2="2034614">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2824" _type="InsertStringCommand" date="Tue Feb 23 21:17:58 EST 2021" starttimestamp="1614131043210" timestamp="2035493" timestamp2="2035493">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2825" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:17:58 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2035584" />
  <Command __id="2830" _type="PauseCommand" date="Tue Feb 23 21:18:00 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2037038">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1166]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2829" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:18:00 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2037038" />
  <Command __id="2832" _type="InsertStringCommand" date="Tue Feb 23 21:18:00 EST 2021" starttimestamp="1614131043210" timestamp="2037052" timestamp2="2037052">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2834" _type="InsertStringCommand" date="Tue Feb 23 21:18:00 EST 2021" starttimestamp="1614131043210" timestamp="2037515" timestamp2="2037515">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2835" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:18:00 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2037556" />
  <Command __id="2838" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:18:01 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2038083" />
  <Command __id="2840" _type="InsertStringCommand" date="Tue Feb 23 21:18:01 EST 2021" starttimestamp="1614131043210" timestamp="2038097" timestamp2="2038097">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2842" _type="InsertStringCommand" date="Tue Feb 23 21:18:01 EST 2021" starttimestamp="1614131043210" timestamp="2038426" timestamp2="2038426">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2844" _type="PauseCommand" date="Tue Feb 23 21:18:03 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2040134">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1708]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2843" _type="MoveCaretCommand" caretOffset="4865" date="Tue Feb 23 21:18:03 EST 2021" docOffset="4865" starttimestamp="1614131043210" timestamp="2040134" />
  <Command __id="2845" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Tue Feb 23 21:18:04 EST 2021" starttimestamp="1614131043210" timestamp="2040872" />
  <Command __id="2847" _type="InsertStringCommand" date="Tue Feb 23 21:18:04 EST 2021" starttimestamp="1614131043210" timestamp="2041041" timestamp2="2041041">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2849" _type="InsertStringCommand" date="Tue Feb 23 21:18:04 EST 2021" starttimestamp="1614131043210" timestamp="2041627" timestamp2="2041627">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2850" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:18:04 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2041670" />
  <Command __id="2858" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:18:06 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2043397" />
  <Command __id="2860" _type="InsertStringCommand" date="Tue Feb 23 21:18:06 EST 2021" starttimestamp="1614131043210" timestamp="2043411" timestamp2="2043411">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2862" _type="PauseCommand" date="Tue Feb 23 21:18:07 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2044424">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1013]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2863" _type="InsertStringCommand" date="Tue Feb 23 21:18:07 EST 2021" starttimestamp="1614131043210" timestamp="2044429" timestamp2="2044429">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2865" _type="InsertStringCommand" date="Tue Feb 23 21:18:07 EST 2021" starttimestamp="1614131043210" timestamp="2044584" timestamp2="2044584">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2867" _type="InsertStringCommand" date="Tue Feb 23 21:18:07 EST 2021" starttimestamp="1614131043210" timestamp="2044681" timestamp2="2044681">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2869" _type="PauseCommand" date="Tue Feb 23 21:18:15 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2052119">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[7438]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2868" _type="SelectTextCommand" caretOffset="4939" date="Tue Feb 23 21:18:15 EST 2021" end="4939" start="4867" starttimestamp="1614131043210" timestamp="2052119" />
  <Command __id="2870" _type="CopyCommand" date="Tue Feb 23 21:18:15 EST 2021" starttimestamp="1614131043210" timestamp="2052312" />
  <Command __id="2871" _type="MoveCaretCommand" caretOffset="4964" date="Tue Feb 23 21:18:15 EST 2021" docOffset="4964" starttimestamp="1614131043210" timestamp="2052652" />
  <Command __id="2873" _type="PasteCommand" date="Tue Feb 23 21:18:16 EST 2021" starttimestamp="1614131043210" timestamp="2052846" />
  <Command __id="2875" _type="PauseCommand" date="Tue Feb 23 21:18:17 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2054290">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1444]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2874" _type="MoveCaretCommand" caretOffset="5033" date="Tue Feb 23 21:18:17 EST 2021" docOffset="5033" starttimestamp="1614131043210" timestamp="2054290" />
  <Command __id="2877" _type="PauseCommand" date="Tue Feb 23 21:18:18 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2055432">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1142]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2878" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 23 21:18:18 EST 2021" starttimestamp="1614131043210" timestamp="2055436" />
  <Command __id="2880" _type="InsertStringCommand" date="Tue Feb 23 21:18:18 EST 2021" starttimestamp="1614131043210" timestamp="2055486" timestamp2="2055486">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="2882" _type="PauseCommand" date="Tue Feb 23 21:18:19 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2056654">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1168]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2881" _type="MoveCaretCommand" caretOffset="5046" date="Tue Feb 23 21:18:19 EST 2021" docOffset="5046" starttimestamp="1614131043210" timestamp="2056654" />
  <Command __id="2884" _type="PauseCommand" date="Tue Feb 23 21:18:35 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2072218">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15564]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2883" _type="MoveCaretCommand" caretOffset="5385" date="Tue Feb 23 21:18:35 EST 2021" docOffset="5385" starttimestamp="1614131043210" timestamp="2072218" />
  <Command __id="2886" _type="PauseCommand" date="Tue Feb 23 21:18:37 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2073801">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1583]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2885" _type="SelectTextCommand" caretOffset="9545" date="Tue Feb 23 21:18:37 EST 2021" end="9545" start="9517" starttimestamp="1614131043210" timestamp="2073801" />
  <Command __id="2888" _type="PauseCommand" date="Tue Feb 23 21:18:50 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2087490">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[13689]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2887" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Tue Feb 23 21:18:50 EST 2021" starttimestamp="1614131043210" timestamp="2087490" />
  <Command __id="2890" _type="PauseCommand" date="Tue Feb 23 21:19:02 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2099023">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[11533]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2889" _type="SelectTextCommand" caretOffset="5318" date="Tue Feb 23 21:19:02 EST 2021" end="5454" start="5318" starttimestamp="1614131043210" timestamp="2099023" />
  <Command __id="2894" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:19:02 EST 2021" starttimestamp="1614131043210" timestamp="2099759" />
  <Command __id="2895" _type="MoveCaretCommand" caretOffset="5460" date="Tue Feb 23 21:19:03 EST 2021" docOffset="5460" starttimestamp="1614131043210" timestamp="2100393" />
  <Command __id="2897" _type="PauseCommand" date="Tue Feb 23 21:19:13 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2110427">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10034]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2896" _type="MoveCaretCommand" caretOffset="5413" date="Tue Feb 23 21:19:13 EST 2021" docOffset="5413" starttimestamp="1614131043210" timestamp="2110427" />
  <Command __id="2899" _type="PauseCommand" date="Tue Feb 23 21:19:39 EST 2021" range="20s-30s" starttimestamp="1614131043210" timestamp="2136596">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[26169]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2898" _type="MoveCaretCommand" caretOffset="5643" date="Tue Feb 23 21:19:39 EST 2021" docOffset="5643" starttimestamp="1614131043210" timestamp="2136596" />
  <Command __id="2901" _type="InsertStringCommand" date="Tue Feb 23 21:19:40 EST 2021" starttimestamp="1614131043210" timestamp="2137576" timestamp2="2137576">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2903" _type="InsertStringCommand" date="Tue Feb 23 21:19:41 EST 2021" starttimestamp="1614131043210" timestamp="2137864" timestamp2="2137864">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2904" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:19:41 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2137906" />
  <Command __id="2906" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:19:41 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2138078" />
  <Command __id="2908" _type="InsertStringCommand" date="Tue Feb 23 21:19:41 EST 2021" starttimestamp="1614131043210" timestamp="2138157" timestamp2="2138157">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2910" _type="PauseCommand" date="Tue Feb 23 21:19:42 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2139416">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1259]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="2911" _type="InsertStringCommand" date="Tue Feb 23 21:19:42 EST 2021" starttimestamp="1614131043210" timestamp="2139424" timestamp2="2139424">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2912" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:19:42 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2139460" />
  <Command __id="2916" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:19:43 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2140107" />
  <Command __id="2918" _type="InsertStringCommand" date="Tue Feb 23 21:19:43 EST 2021" starttimestamp="1614131043210" timestamp="2140121" timestamp2="2140121">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2920" _type="InsertStringCommand" date="Tue Feb 23 21:19:43 EST 2021" starttimestamp="1614131043210" timestamp="2140352" timestamp2="2140352">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2921" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:19:43 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2140395" />
  <Command __id="2928" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:19:45 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2142333" />
  <Command __id="2930" _type="InsertStringCommand" date="Tue Feb 23 21:19:45 EST 2021" starttimestamp="1614131043210" timestamp="2142347" timestamp2="2142347">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2767" _type="Insert" date="Tue Feb 23 21:17:46 EST 2021" docASTNodeCount="6115" docActiveCodeLength="34678" docExpressionCount="4228" docLength="37015" length="1" offset="4894" starttimestamp="1614131043210" timestamp="2023160">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2772" _type="Insert" date="Tue Feb 23 21:17:53 EST 2021" docASTNodeCount="6121" docActiveCodeLength="34711" docExpressionCount="4230" docLength="37048" length="33" offset="4733" repeat="25" starttimestamp="1614131043210" timestamp="2029889" timestamp2="2035872">
    <text><![CDATA[
							long endTimestamp = long]]></text>
  </DocumentChange>
  <DocumentChange __id="2831" _type="Replace" date="Tue Feb 23 21:18:00 EST 2021" docASTNodeCount="6120" docActiveCodeLength="34711" docExpressionCount="4230" docLength="37048" endLine="141" insertionLength="4" int_docASTNodeCount="6119" int_docActiveCodeLength="34707" int_docExpressionCount="4229" int_docLength="37044" length="4" offset="4762" startLine="141" starttimestamp="1614131043210" timestamp="2037046">
    <deletedText><![CDATA[long]]></deletedText>
    <insertedText><![CDATA[Long]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2833" _type="Insert" date="Tue Feb 23 21:18:00 EST 2021" docASTNodeCount="6122" docActiveCodeLength="34714" docExpressionCount="4232" docLength="37051" length="3" offset="4766" repeat="3" starttimestamp="1614131043210" timestamp="2037510" timestamp2="2037926">
    <text><![CDATA[.ma]]></text>
  </DocumentChange>
  <DocumentChange __id="2839" _type="Replace" date="Tue Feb 23 21:18:01 EST 2021" docASTNodeCount="6122" docActiveCodeLength="34721" docExpressionCount="4232" docLength="37058" endLine="141" insertionLength="9" int_docASTNodeCount="6120" int_docActiveCodeLength="34712" int_docExpressionCount="4230" int_docLength="37049" length="2" offset="4767" startLine="141" starttimestamp="1614131043210" timestamp="2038092">
    <deletedText><![CDATA[ma]]></deletedText>
    <insertedText><![CDATA[MAX_VALUE]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2841" _type="Insert" date="Tue Feb 23 21:18:01 EST 2021" docASTNodeCount="6122" docActiveCodeLength="34722" docExpressionCount="4232" docLength="37059" length="1" offset="4776" starttimestamp="1614131043210" timestamp="2038421">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2846" _type="Insert" date="Tue Feb 23 21:18:04 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34735" docExpressionCount="3874" docLength="37072" length="13" offset="4939" repeat="4" starttimestamp="1614131043210" timestamp="2041030" timestamp2="2041870">
    <text><![CDATA[
								ent]]></text>
  </DocumentChange>
  <DocumentChange __id="2853" _type="Delete" date="Tue Feb 23 21:18:05 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34734" docExpressionCount="3874" docLength="37071" endLine="144" length="1" offset="4951" startLine="144" starttimestamp="1614131043210" timestamp="2042738">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="2854" _type="Insert" date="Tue Feb 23 21:18:06 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34738" docExpressionCount="3874" docLength="37075" length="4" offset="4951" repeat="4" starttimestamp="1614131043210" timestamp="2042824" timestamp2="2043133">
    <text><![CDATA[dtim]]></text>
  </DocumentChange>
  <DocumentChange __id="2859" _type="Replace" date="Tue Feb 23 21:18:06 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34744" docExpressionCount="3874" docLength="37081" endLine="144" insertionLength="12" int_docASTNodeCount="6122" int_docActiveCodeLength="34732" int_docExpressionCount="4232" int_docLength="37069" length="6" offset="4949" startLine="144" starttimestamp="1614131043210" timestamp="2043404">
    <deletedText><![CDATA[endtim]]></deletedText>
    <insertedText><![CDATA[endTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2861" _type="Insert" date="Tue Feb 23 21:18:07 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34747" docExpressionCount="3874" docLength="37084" length="3" offset="4961" repeat="3" starttimestamp="1614131043210" timestamp="2044424" timestamp2="2044677">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <DocumentChange __id="2872" _type="Insert" date="Tue Feb 23 21:18:16 EST 2021" docASTNodeCount="6139" docActiveCodeLength="34819" docExpressionCount="4248" docLength="37156" length="72" offset="4964" starttimestamp="1614131043210" timestamp="2052840">
    <text><![CDATA[startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];]]></text>
  </DocumentChange>
  <DocumentChange __id="2876" _type="Delete" date="Tue Feb 23 21:18:18 EST 2021" docASTNodeCount="6139" docActiveCodeLength="34818" docExpressionCount="4248" docLength="37155" endLine="144" length="1" offset="5033" startLine="144" starttimestamp="1614131043210" timestamp="2055432">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="2879" _type="Insert" date="Tue Feb 23 21:18:18 EST 2021" docASTNodeCount="6139" docActiveCodeLength="34819" docExpressionCount="4248" docLength="37156" length="1" offset="5033" starttimestamp="1614131043210" timestamp="2055476">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <DocumentChange __id="2891" _type="Insert" date="Tue Feb 23 21:19:02 EST 2021" docASTNodeCount="5609" docActiveCodeLength="34787" docExpressionCount="3886" docLength="37158" length="2" offset="5311" starttimestamp="1614131043210" timestamp="2099729">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2892" _type="Insert" date="Tue Feb 23 21:19:02 EST 2021" docASTNodeCount="5609" docActiveCodeLength="34688" docExpressionCount="3886" docLength="37160" length="2" offset="5347" starttimestamp="1614131043210" timestamp="2099735">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2893" _type="Insert" date="Tue Feb 23 21:19:02 EST 2021" docASTNodeCount="6126" docActiveCodeLength="34680" docExpressionCount="4238" docLength="37162" length="2" offset="5450" starttimestamp="1614131043210" timestamp="2099738">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="2900" _type="Insert" date="Tue Feb 23 21:19:40 EST 2021" docASTNodeCount="6126" docActiveCodeLength="34692" docExpressionCount="4238" docLength="37174" length="12" offset="5643" repeat="3" starttimestamp="1614131043210" timestamp="2137564" timestamp2="2138067">
    <text><![CDATA[
								if]]></text>
  </DocumentChange>
  <DocumentChange __id="2907" _type="Replace" date="Tue Feb 23 21:19:41 EST 2021" docASTNodeCount="6129" docActiveCodeLength="34741" docExpressionCount="4239" docLength="37223" endLine="161" insertionLength="51" int_docASTNodeCount="6126" int_docActiveCodeLength="34690" int_docExpressionCount="4238" int_docLength="37172" length="2" offset="5653" startLine="161" starttimestamp="1614131043210" timestamp="2138113">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
									
								}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2909" _type="Replace" date="Tue Feb 23 21:19:42 EST 2021" docASTNodeCount="6129" docActiveCodeLength="34720" docExpressionCount="4239" docLength="37202" endLine="161" insertionLength="1" int_docASTNodeCount="6129" int_docActiveCodeLength="34719" int_docExpressionCount="4239" int_docLength="37201" length="22" offset="5657" startLine="161" starttimestamp="1614131043210" timestamp="2139416">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2913" _type="Insert" date="Tue Feb 23 21:19:42 EST 2021" docASTNodeCount="6129" docActiveCodeLength="34723" docExpressionCount="4239" docLength="37205" length="3" offset="5658" repeat="3" starttimestamp="1614131043210" timestamp="2139648" timestamp2="2139917">
    <text><![CDATA[omm]]></text>
  </DocumentChange>
  <DocumentChange __id="2917" _type="Replace" date="Tue Feb 23 21:19:43 EST 2021" docASTNodeCount="6129" docActiveCodeLength="34726" docExpressionCount="4239" docLength="37208" endLine="161" insertionLength="7" int_docASTNodeCount="6129" int_docActiveCodeLength="34719" int_docExpressionCount="4239" int_docLength="37201" length="4" offset="5657" startLine="161" starttimestamp="1614131043210" timestamp="2140114">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2919" _type="Insert" date="Tue Feb 23 21:19:43 EST 2021" docASTNodeCount="6131" docActiveCodeLength="34733" docExpressionCount="4241" docLength="37215" length="7" offset="5664" repeat="7" starttimestamp="1614131043210" timestamp="2140351" timestamp2="2141681">
    <text><![CDATA[.gettim]]></text>
  </DocumentChange>
  <DocumentChange __id="2929" _type="Replace" date="Tue Feb 23 21:19:45 EST 2021" docASTNodeCount="6131" docActiveCodeLength="34741" docExpressionCount="4241" docLength="37223" endLine="161" insertionLength="14" int_docASTNodeCount="6131" int_docActiveCodeLength="34727" int_docExpressionCount="4240" int_docLength="37209" length="6" offset="5665" startLine="161" starttimestamp="1614131043210" timestamp="2142341">
    <deletedText><![CDATA[gettim]]></deletedText>
    <insertedText><![CDATA[getTimestamp()]]></insertedText>
  </DocumentChange>
  <Command __id="2932" _type="PauseCommand" date="Tue Feb 23 21:19:46 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2143446">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1099]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2933" _type="InsertStringCommand" date="Tue Feb 23 21:19:46 EST 2021" starttimestamp="1614131043210" timestamp="2143456" timestamp2="2143456">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2935" _type="InsertStringCommand" date="Tue Feb 23 21:19:46 EST 2021" starttimestamp="1614131043210" timestamp="2143737" timestamp2="2143737">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="2937" _type="InsertStringCommand" date="Tue Feb 23 21:19:47 EST 2021" starttimestamp="1614131043210" timestamp="2143868" timestamp2="2143868">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2939" _type="InsertStringCommand" date="Tue Feb 23 21:19:47 EST 2021" starttimestamp="1614131043210" timestamp="2144782" timestamp2="2144782">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2940" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:19:48 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2144824" />
  <Command __id="2946" _type="PauseCommand" date="Tue Feb 23 21:20:01 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2157936">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[12568]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2945" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:01 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2157936" />
  <Command __id="2947" _type="MoveCaretCommand" caretOffset="5633" date="Tue Feb 23 21:20:01 EST 2021" docOffset="5633" starttimestamp="1614131043210" timestamp="2158027" />
  <Command __id="2949" _type="PauseCommand" date="Tue Feb 23 21:20:03 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2159822">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1795]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2948" _type="MoveCaretCommand" caretOffset="5688" date="Tue Feb 23 21:20:03 EST 2021" docOffset="5688" starttimestamp="1614131043210" timestamp="2159822" />
  <Command __id="2950" _type="MoveCaretCommand" caretOffset="5687" date="Tue Feb 23 21:20:03 EST 2021" docOffset="5687" starttimestamp="1614131043210" timestamp="2160446" />
  <Command __id="2952" _type="PauseCommand" date="Tue Feb 23 21:20:11 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2167960">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7514]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2951" _type="MoveCaretCommand" caretOffset="4777" date="Tue Feb 23 21:20:11 EST 2021" docOffset="4777" starttimestamp="1614131043210" timestamp="2167960" />
  <Command __id="2954" _type="PauseCommand" date="Tue Feb 23 21:20:13 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2170058">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2098]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2953" _type="MoveCaretCommand" caretOffset="4733" date="Tue Feb 23 21:20:13 EST 2021" docOffset="4733" starttimestamp="1614131043210" timestamp="2170058" />
  <Command __id="2956" _type="PauseCommand" date="Tue Feb 23 21:20:16 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2173209">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3151]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2957" _type="InsertStringCommand" date="Tue Feb 23 21:20:16 EST 2021" starttimestamp="1614131043210" timestamp="2173213" timestamp2="2173213">
    <data><![CDATA[']]></data>
  </Command>
  <Command __id="2960" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:20:17 EST 2021" starttimestamp="1614131043210" timestamp="2173992" />
  <Command __id="2962" _type="InsertStringCommand" date="Tue Feb 23 21:20:17 EST 2021" starttimestamp="1614131043210" timestamp="2174308" timestamp2="2174308">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2964" _type="InsertStringCommand" date="Tue Feb 23 21:20:17 EST 2021" starttimestamp="1614131043210" timestamp="2174701" timestamp2="2174701">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2965" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:17 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2174742" />
  <Command __id="2970" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:18 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2175249" />
  <Command __id="2972" _type="PauseCommand" date="Tue Feb 23 21:20:20 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2177532">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2283]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2973" _type="InsertStringCommand" date="Tue Feb 23 21:20:20 EST 2021" starttimestamp="1614131043210" timestamp="2177537" timestamp2="2177537">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2974" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:20 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2177579" />
  <Command __id="2976" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:20 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2177678" />
  <Command __id="2978" _type="InsertStringCommand" date="Tue Feb 23 21:20:20 EST 2021" starttimestamp="1614131043210" timestamp="2177733" timestamp2="2177733">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2979" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:20 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2177774" />
  <Command __id="2980" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:21 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2177797" />
  <Command __id="2982" _type="InsertStringCommand" date="Tue Feb 23 21:20:21 EST 2021" starttimestamp="1614131043210" timestamp="2178339" timestamp2="2178339">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2984" _type="InsertStringCommand" date="Tue Feb 23 21:20:21 EST 2021" starttimestamp="1614131043210" timestamp="2178550" timestamp2="2178550">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2985" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:21 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2178643" />
  <Command __id="2986" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:21 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2178665" />
  <Command __id="2988" _type="InsertStringCommand" date="Tue Feb 23 21:20:21 EST 2021" starttimestamp="1614131043210" timestamp="2178692" timestamp2="2178692">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2990" _type="InsertStringCommand" date="Tue Feb 23 21:20:21 EST 2021" starttimestamp="1614131043210" timestamp="2178751" timestamp2="2178751">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2991" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:21 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2178785" />
  <Command __id="2992" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:22 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2178840" />
  <Command __id="2994" _type="InsertStringCommand" date="Tue Feb 23 21:20:22 EST 2021" starttimestamp="1614131043210" timestamp="2178921" timestamp2="2178921">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2995" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:22 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2179014" />
  <Command __id="2996" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:22 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2179035" />
  <Command __id="2998" _type="InsertStringCommand" date="Tue Feb 23 21:20:22 EST 2021" starttimestamp="1614131043210" timestamp="2179669" timestamp2="2179669">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="3000" _type="InsertStringCommand" date="Tue Feb 23 21:20:23 EST 2021" starttimestamp="1614131043210" timestamp="2179898" timestamp2="2179898">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3002" _type="InsertStringCommand" date="Tue Feb 23 21:20:23 EST 2021" starttimestamp="1614131043210" timestamp="2179967" timestamp2="2179967">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3004" _type="InsertStringCommand" date="Tue Feb 23 21:20:23 EST 2021" starttimestamp="1614131043210" timestamp="2179995" timestamp2="2179995">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3005" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:23 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2180036" />
  <Command __id="3006" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:23 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2180057" />
  <Command __id="3008" _type="InsertStringCommand" date="Tue Feb 23 21:20:23 EST 2021" starttimestamp="1614131043210" timestamp="2180589" timestamp2="2180589">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3009" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:23 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2180683" />
  <Command __id="3010" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:23 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2180704" />
  <Command __id="3012" _type="InsertStringCommand" date="Tue Feb 23 21:20:23 EST 2021" starttimestamp="1614131043210" timestamp="2180732" timestamp2="2180732">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3014" _type="InsertStringCommand" date="Tue Feb 23 21:20:24 EST 2021" starttimestamp="1614131043210" timestamp="2180807" timestamp2="2180807">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3015" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:24 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2180899" />
  <Command __id="3016" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:24 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2180921" />
  <Command __id="3018" _type="InsertStringCommand" date="Tue Feb 23 21:20:24 EST 2021" starttimestamp="1614131043210" timestamp="2180937" timestamp2="2180937">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3020" _type="InsertStringCommand" date="Tue Feb 23 21:20:24 EST 2021" starttimestamp="1614131043210" timestamp="2180980" timestamp2="2180980">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3021" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:24 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2181071" />
  <Command __id="3022" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:24 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2181092" />
  <Command __id="3024" _type="InsertStringCommand" date="Tue Feb 23 21:20:24 EST 2021" starttimestamp="1614131043210" timestamp="2181131" timestamp2="2181131">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3026" _type="InsertStringCommand" date="Tue Feb 23 21:20:24 EST 2021" starttimestamp="1614131043210" timestamp="2181247" timestamp2="2181247">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3028" _type="InsertStringCommand" date="Tue Feb 23 21:20:24 EST 2021" starttimestamp="1614131043210" timestamp="2181361" timestamp2="2181361">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3030" _type="PauseCommand" date="Tue Feb 23 21:20:26 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2182933">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1572]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3031" _type="InsertStringCommand" date="Tue Feb 23 21:20:26 EST 2021" starttimestamp="1614131043210" timestamp="2182938" timestamp2="2182938">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="3032" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:26 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2183031" />
  <Command __id="3042" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:28 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2185779" />
  <Command __id="3044" _type="InsertStringCommand" date="Tue Feb 23 21:20:29 EST 2021" starttimestamp="1614131043210" timestamp="2185795" timestamp2="2185795">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3046" _type="InsertStringCommand" date="Tue Feb 23 21:20:29 EST 2021" starttimestamp="1614131043210" timestamp="2185828" timestamp2="2185828">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3048" _type="PauseCommand" date="Tue Feb 23 21:20:33 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2190074">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4246]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3047" _type="MoveCaretCommand" caretOffset="5733" date="Tue Feb 23 21:20:33 EST 2021" docOffset="5733" starttimestamp="1614131043210" timestamp="2190074" />
  <Command __id="3049" _type="SelectTextCommand" caretOffset="5736" date="Tue Feb 23 21:20:33 EST 2021" end="5736" start="5731" starttimestamp="1614131043210" timestamp="2190225" />
  <Command __id="3050" _type="SelectTextCommand" caretOffset="5741" date="Tue Feb 23 21:20:33 EST 2021" end="5741" start="5694" starttimestamp="1614131043210" timestamp="2190372" />
  <Command __id="3051" _type="SelectTextCommand" caretOffset="5736" date="Tue Feb 23 21:20:33 EST 2021" end="5736" start="5694" starttimestamp="1614131043210" timestamp="2190738" />
  <Command __id="3052" _type="SelectTextCommand" caretOffset="5741" date="Tue Feb 23 21:20:34 EST 2021" end="5741" start="5694" starttimestamp="1614131043210" timestamp="2190921" />
  <Command __id="3053" _type="SelectTextCommand" caretOffset="5704" date="Tue Feb 23 21:20:34 EST 2021" end="5704" start="5694" starttimestamp="1614131043210" timestamp="2191239" />
  <Command __id="3054" _type="SelectTextCommand" caretOffset="5741" date="Tue Feb 23 21:20:34 EST 2021" end="5741" start="5694" starttimestamp="1614131043210" timestamp="2191502" />
  <Command __id="3055" _type="SelectTextCommand" caretOffset="5704" date="Tue Feb 23 21:20:35 EST 2021" end="5704" start="5694" starttimestamp="1614131043210" timestamp="2191918" />
  <Command __id="3056" _type="SelectTextCommand" caretOffset="5741" date="Tue Feb 23 21:20:35 EST 2021" end="5741" start="5694" starttimestamp="1614131043210" timestamp="2192293" />
  <Command __id="3057" _type="MoveCaretCommand" caretOffset="5733" date="Tue Feb 23 21:20:36 EST 2021" docOffset="5733" starttimestamp="1614131043210" timestamp="2192915" />
  <Command __id="3058" _type="MoveCaretCommand" caretOffset="5737" date="Tue Feb 23 21:20:36 EST 2021" docOffset="5737" starttimestamp="1614131043210" timestamp="2193779" />
  <Command __id="3059" _type="MoveCaretCommand" caretOffset="5735" date="Tue Feb 23 21:20:37 EST 2021" docOffset="5735" starttimestamp="1614131043210" timestamp="2194226" />
  <Command __id="3060" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:20:38 EST 2021" starttimestamp="1614131043210" timestamp="2195093" />
  <Command __id="3062" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:20:38 EST 2021" starttimestamp="1614131043210" timestamp="2195357" />
  <Command __id="3064" _type="InsertStringCommand" date="Tue Feb 23 21:20:38 EST 2021" starttimestamp="1614131043210" timestamp="2195716" timestamp2="2195716">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="3065" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:38 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2195758" />
  <Command __id="3073" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:41 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2197991" />
  <Command __id="3074" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:41 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2198197" />
  <Command __id="3076" _type="InsertStringCommand" date="Tue Feb 23 21:20:41 EST 2021" starttimestamp="1614131043210" timestamp="2198212" timestamp2="2198212">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3078" _type="PauseCommand" date="Tue Feb 23 21:20:43 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2199801">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1589]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3079" _type="InsertStringCommand" date="Tue Feb 23 21:20:43 EST 2021" starttimestamp="1614131043210" timestamp="2199808" timestamp2="2199808">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3081" _type="InsertStringCommand" date="Tue Feb 23 21:20:43 EST 2021" starttimestamp="1614131043210" timestamp="2200214" timestamp2="2200214">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="3083" _type="InsertStringCommand" date="Tue Feb 23 21:20:43 EST 2021" starttimestamp="1614131043210" timestamp="2200310" timestamp2="2200310">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3085" _type="PauseCommand" date="Tue Feb 23 21:20:45 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2202407">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2097]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3086" _type="InsertStringCommand" date="Tue Feb 23 21:20:45 EST 2021" starttimestamp="1614131043210" timestamp="2202414" timestamp2="2202414">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3087" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:45 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2202455" />
  <Command __id="3091" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:46 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2202936" />
  <Command __id="3093" _type="InsertStringCommand" date="Tue Feb 23 21:20:46 EST 2021" starttimestamp="1614131043210" timestamp="2202951" timestamp2="2202951">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3095" _type="PauseCommand" date="Tue Feb 23 21:20:48 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2205569">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2618]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3094" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:20:48 EST 2021" starttimestamp="1614131043210" timestamp="2205569" />
  <Command __id="3096" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:20:49 EST 2021" starttimestamp="1614131043210" timestamp="2205790" />
  <Command __id="3097" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:20:49 EST 2021" starttimestamp="1614131043210" timestamp="2205945" />
  <Command __id="3098" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:20:49 EST 2021" starttimestamp="1614131043210" timestamp="2206607" />
  <Command __id="3100" _type="PauseCommand" date="Tue Feb 23 21:20:54 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2211349">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4742]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3101" _type="InsertStringCommand" date="Tue Feb 23 21:20:54 EST 2021" starttimestamp="1614131043210" timestamp="2211354" timestamp2="2211354">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3102" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:20:54 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2211396" />
  <Command __id="3106" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:20:55 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2212678" />
  <Command __id="3108" _type="InsertStringCommand" date="Tue Feb 23 21:20:55 EST 2021" starttimestamp="1614131043210" timestamp="2212691" timestamp2="2212691">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3110" _type="InsertStringCommand" date="Tue Feb 23 21:20:56 EST 2021" starttimestamp="1614131043210" timestamp="2213518" timestamp2="2213518">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3111" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:20:57 EST 2021" starttimestamp="1614131043210" timestamp="2213942" />
  <Command __id="3112" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:20:57 EST 2021" starttimestamp="1614131043210" timestamp="2214640" />
  <Command __id="3113" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:20:58 EST 2021" starttimestamp="1614131043210" timestamp="2214804" />
  <Command __id="3114" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:20:58 EST 2021" starttimestamp="1614131043210" timestamp="2214935" />
  <Command __id="3116" _type="PauseCommand" date="Tue Feb 23 21:21:00 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2217180">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2245]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3117" _type="InsertStringCommand" date="Tue Feb 23 21:21:00 EST 2021" starttimestamp="1614131043210" timestamp="2217187" timestamp2="2217187">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3119" _type="InsertStringCommand" date="Tue Feb 23 21:21:00 EST 2021" starttimestamp="1614131043210" timestamp="2217743" timestamp2="2217743">
    <data><![CDATA[|]]></data>
  </Command>
  <Command __id="3121" _type="InsertStringCommand" date="Tue Feb 23 21:21:01 EST 2021" starttimestamp="1614131043210" timestamp="2217861" timestamp2="2217861">
    <data><![CDATA[|]]></data>
  </Command>
  <Command __id="3123" _type="InsertStringCommand" date="Tue Feb 23 21:21:01 EST 2021" starttimestamp="1614131043210" timestamp="2218039" timestamp2="2218039">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="2931" _type="Insert" date="Tue Feb 23 21:19:46 EST 2021" docASTNodeCount="6133" docActiveCodeLength="34749" docExpressionCount="4243" docLength="37231" length="8" offset="5679" repeat="8" starttimestamp="1614131043210" timestamp="2143446" timestamp2="2145368">
    <text><![CDATA[ + start]]></text>
  </DocumentChange>
  <DocumentChange __id="2955" _type="Insert" date="Tue Feb 23 21:20:16 EST 2021" docASTNodeCount="5440" docActiveCodeLength="34751" docExpressionCount="3779" docLength="37233" length="2" offset="4733" starttimestamp="1614131043210" timestamp="2173209">
    <text><![CDATA['']]></text>
  </DocumentChange>
  <DocumentChange __id="2958" _type="Delete" date="Tue Feb 23 21:20:17 EST 2021" docASTNodeCount="6133" docActiveCodeLength="34749" docExpressionCount="4243" docLength="37231" endLine="140" length="2" offset="4733" repeat="2" startLine="140" starttimestamp="1614131043210" timestamp="2173979" timestamp2="2173988">
    <text><![CDATA['']]></text>
  </DocumentChange>
  <DocumentChange __id="2961" _type="Insert" date="Tue Feb 23 21:20:17 EST 2021" docASTNodeCount="6137" docActiveCodeLength="34763" docExpressionCount="4244" docLength="37245" length="14" offset="4733" repeat="6" starttimestamp="1614131043210" timestamp="2174300" timestamp2="2175242">
    <text><![CDATA[
							long ]]></text>
  </DocumentChange>
  <DocumentChange __id="2971" _type="Insert" date="Tue Feb 23 21:20:20 EST 2021" docASTNodeCount="6138" docActiveCodeLength="34786" docExpressionCount="4245" docLength="37268" length="23" offset="4747" repeat="23" starttimestamp="1614131043210" timestamp="2177532" timestamp2="2183199">
    <text><![CDATA[logStartTimestamp = get]]></text>
  </DocumentChange>
  <DocumentChange __id="3035" _type="Delete" date="Tue Feb 23 21:20:27 EST 2021" docASTNodeCount="6138" docActiveCodeLength="34783" docExpressionCount="4246" docLength="37265" endLine="141" length="3" offset="4767" repeat="3" startLine="141" starttimestamp="1614131043210" timestamp="2184116" timestamp2="2184802">
    <text><![CDATA[get]]></text>
  </DocumentChange>
  <DocumentChange __id="3038" _type="Insert" date="Tue Feb 23 21:20:28 EST 2021" docASTNodeCount="6138" docActiveCodeLength="34787" docExpressionCount="4245" docLength="37269" length="4" offset="4767" repeat="4" starttimestamp="1614131043210" timestamp="2185169" timestamp2="2185496">
    <text><![CDATA[star]]></text>
  </DocumentChange>
  <DocumentChange __id="3043" _type="Replace" date="Tue Feb 23 21:20:28 EST 2021" docASTNodeCount="6138" docActiveCodeLength="34797" docExpressionCount="4245" docLength="37279" endLine="141" insertionLength="14" int_docASTNodeCount="6138" int_docActiveCodeLength="34783" int_docExpressionCount="4246" int_docLength="37265" length="4" offset="4767" startLine="141" starttimestamp="1614131043210" timestamp="2185788">
    <deletedText><![CDATA[star]]></deletedText>
    <insertedText><![CDATA[startTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3045" _type="Insert" date="Tue Feb 23 21:20:29 EST 2021" docASTNodeCount="6138" docActiveCodeLength="34798" docExpressionCount="4245" docLength="37280" length="1" offset="4781" starttimestamp="1614131043210" timestamp="2185824">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3061" _type="Delete" date="Tue Feb 23 21:20:38 EST 2021" docASTNodeCount="6136" docActiveCodeLength="34793" docExpressionCount="4243" docLength="37275" endLine="162" length="5" offset="5731" startLine="162" starttimestamp="1614131043210" timestamp="2195353">
    <text><![CDATA[start]]></text>
  </DocumentChange>
  <DocumentChange __id="3063" _type="Insert" date="Tue Feb 23 21:20:38 EST 2021" docASTNodeCount="6138" docActiveCodeLength="34794" docExpressionCount="4245" docLength="37276" length="1" offset="5731" starttimestamp="1614131043210" timestamp="2195711">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="3066" _type="Delete" date="Tue Feb 23 21:20:39 EST 2021" docASTNodeCount="6136" docActiveCodeLength="34793" docExpressionCount="4243" docLength="37275" endLine="162" length="1" offset="5731" startLine="162" starttimestamp="1614131043210" timestamp="2196134">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="3067" _type="Insert" date="Tue Feb 23 21:20:39 EST 2021" docASTNodeCount="5440" docActiveCodeLength="34797" docExpressionCount="3779" docLength="37279" length="4" offset="5731" repeat="4" starttimestamp="1614131043210" timestamp="2196336" timestamp2="2197079">
    <text><![CDATA[log']]></text>
  </DocumentChange>
  <DocumentChange __id="3071" _type="Delete" date="Tue Feb 23 21:20:40 EST 2021" docASTNodeCount="6138" docActiveCodeLength="34796" docExpressionCount="4245" docLength="37278" endLine="162" length="1" offset="5734" startLine="162" starttimestamp="1614131043210" timestamp="2197568">
    <text><![CDATA[']]></text>
  </DocumentChange>
  <DocumentChange __id="3072" _type="Insert" date="Tue Feb 23 21:20:41 EST 2021" docASTNodeCount="6138" docActiveCodeLength="34797" docExpressionCount="4245" docLength="37279" length="1" offset="5734" starttimestamp="1614131043210" timestamp="2197943">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="3075" _type="Replace" date="Tue Feb 23 21:20:41 EST 2021" docASTNodeCount="6138" docActiveCodeLength="34810" docExpressionCount="4245" docLength="37292" endLine="162" insertionLength="17" int_docASTNodeCount="6136" int_docActiveCodeLength="34793" int_docExpressionCount="4243" int_docLength="37275" length="4" offset="5731" startLine="162" starttimestamp="1614131043210" timestamp="2198205">
    <deletedText><![CDATA[logs]]></deletedText>
    <insertedText><![CDATA[logStartTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3077" _type="Insert" date="Tue Feb 23 21:20:43 EST 2021" docASTNodeCount="5876" docActiveCodeLength="34813" docExpressionCount="4060" docLength="37295" length="3" offset="5748" repeat="3" starttimestamp="1614131043210" timestamp="2199801" timestamp2="2200303">
    <text><![CDATA[ < ]]></text>
  </DocumentChange>
  <DocumentChange __id="3084" _type="Insert" date="Tue Feb 23 21:20:45 EST 2021" docASTNodeCount="6140" docActiveCodeLength="34817" docExpressionCount="4247" docLength="37299" length="4" offset="5751" repeat="4" starttimestamp="1614131043210" timestamp="2202407" timestamp2="2202756">
    <text><![CDATA[star]]></text>
  </DocumentChange>
  <DocumentChange __id="3092" _type="Replace" date="Tue Feb 23 21:20:46 EST 2021" docASTNodeCount="6140" docActiveCodeLength="34827" docExpressionCount="4247" docLength="37309" endLine="162" insertionLength="14" int_docASTNodeCount="5876" int_docActiveCodeLength="34813" int_docExpressionCount="4060" int_docLength="37295" length="4" offset="5751" startLine="162" starttimestamp="1614131043210" timestamp="2202945">
    <deletedText><![CDATA[star]]></deletedText>
    <insertedText><![CDATA[startTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3099" _type="Insert" date="Tue Feb 23 21:20:54 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34831" docExpressionCount="3874" docLength="37313" length="4" offset="5779" repeat="4" starttimestamp="1614131043210" timestamp="2211349" timestamp2="2212076">
    <text><![CDATA[cont]]></text>
  </DocumentChange>
  <DocumentChange __id="3107" _type="Replace" date="Tue Feb 23 21:20:55 EST 2021" docASTNodeCount="5583" docActiveCodeLength="34835" docExpressionCount="3874" docLength="37317" endLine="163" insertionLength="8" int_docASTNodeCount="6140" int_docActiveCodeLength="34827" int_docExpressionCount="4247" int_docLength="37309" length="4" offset="5779" startLine="163" starttimestamp="1614131043210" timestamp="2212685">
    <deletedText><![CDATA[cont]]></deletedText>
    <insertedText><![CDATA[continue]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3109" _type="Insert" date="Tue Feb 23 21:20:56 EST 2021" docASTNodeCount="6141" docActiveCodeLength="34836" docExpressionCount="4247" docLength="37318" length="1" offset="5787" starttimestamp="1614131043210" timestamp="2213513">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3115" _type="Insert" date="Tue Feb 23 21:21:00 EST 2021" docASTNodeCount="6143" docActiveCodeLength="34844" docExpressionCount="4249" docLength="37326" length="8" offset="5765" repeat="8" starttimestamp="1614131043210" timestamp="2217180" timestamp2="2219510">
    <text><![CDATA[ || comm]]></text>
  </DocumentChange>
  <DocumentChange __id="3132" _type="Replace" date="Tue Feb 23 21:21:03 EST 2021" docASTNodeCount="6143" docActiveCodeLength="34847" docExpressionCount="4249" docLength="37329" endLine="162" insertionLength="7" int_docASTNodeCount="5876" int_docActiveCodeLength="34840" int_docExpressionCount="4060" int_docLength="37322" length="4" offset="5769" startLine="162" starttimestamp="1614131043210" timestamp="2220055">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <Command __id="3125" _type="PauseCommand" date="Tue Feb 23 21:21:02 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2219045">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1006]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3126" _type="InsertStringCommand" date="Tue Feb 23 21:21:02 EST 2021" starttimestamp="1614131043210" timestamp="2219051" timestamp2="2219051">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3127" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:21:02 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2219092" />
  <Command __id="3131" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:21:03 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2220047" />
  <Command __id="3133" _type="InsertStringCommand" date="Tue Feb 23 21:21:03 EST 2021" starttimestamp="1614131043210" timestamp="2220062" timestamp2="2220062">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3135" _type="InsertStringCommand" date="Tue Feb 23 21:21:03 EST 2021" starttimestamp="1614131043210" timestamp="2220366" timestamp2="2220366">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3136" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:21:03 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2220406" />
  <Command __id="3143" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:21:05 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2221980" />
  <Command __id="3145" _type="InsertStringCommand" date="Tue Feb 23 21:21:05 EST 2021" starttimestamp="1614131043210" timestamp="2221998" timestamp2="2221998">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3147" _type="InsertStringCommand" date="Tue Feb 23 21:21:05 EST 2021" starttimestamp="1614131043210" timestamp="2222237" timestamp2="2222237">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3149" _type="InsertStringCommand" date="Tue Feb 23 21:21:05 EST 2021" starttimestamp="1614131043210" timestamp="2222615" timestamp2="2222615">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="3151" _type="InsertStringCommand" date="Tue Feb 23 21:21:05 EST 2021" starttimestamp="1614131043210" timestamp="2222737" timestamp2="2222737">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3153" _type="PauseCommand" date="Tue Feb 23 21:21:07 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2223952">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1215]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3154" _type="InsertStringCommand" date="Tue Feb 23 21:21:07 EST 2021" starttimestamp="1614131043210" timestamp="2223959" timestamp2="2223959">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3155" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:21:07 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2223999" />
  <Command __id="3159" _type="PauseCommand" date="Tue Feb 23 21:21:09 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2225827">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1576]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3158" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:21:09 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2225827" />
  <Command __id="3161" _type="InsertStringCommand" date="Tue Feb 23 21:21:09 EST 2021" starttimestamp="1614131043210" timestamp="2225842" timestamp2="2225842">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3163" _type="InsertStringCommand" date="Tue Feb 23 21:21:09 EST 2021" starttimestamp="1614131043210" timestamp="2226368" timestamp2="2226368">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3165" _type="InsertStringCommand" date="Tue Feb 23 21:21:10 EST 2021" starttimestamp="1614131043210" timestamp="2227142" timestamp2="2227142">
    <data><![CDATA[>]]></data>
  </Command>
  <Command __id="3167" _type="InsertStringCommand" date="Tue Feb 23 21:21:10 EST 2021" starttimestamp="1614131043210" timestamp="2227268" timestamp2="2227268">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3169" _type="PauseCommand" date="Tue Feb 23 21:21:11 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2228733">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1465]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3170" _type="InsertStringCommand" date="Tue Feb 23 21:21:11 EST 2021" starttimestamp="1614131043210" timestamp="2228739" timestamp2="2228739">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3171" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:21:11 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2228780" />
  <Command __id="3177" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:21:12 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2229438" />
  <Command __id="3179" _type="InsertStringCommand" date="Tue Feb 23 21:21:12 EST 2021" starttimestamp="1614131043210" timestamp="2229456" timestamp2="2229456">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3180" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:21:13 EST 2021" starttimestamp="1614131043210" timestamp="2230353" />
  <Command __id="3181" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:21:13 EST 2021" starttimestamp="1614131043210" timestamp="2230715" />
  <Command __id="3183" _type="PauseCommand" date="Tue Feb 23 21:21:24 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2241094">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10379]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3182" _type="MoveCaretCommand" caretOffset="6755" date="Tue Feb 23 21:21:24 EST 2021" docOffset="6755" starttimestamp="1614131043210" timestamp="2241094" />
  <Command __id="3185" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:21:25 EST 2021" starttimestamp="1614131043210" timestamp="2241904" />
  <Command __id="3187" _type="PauseCommand" date="Tue Feb 23 21:21:26 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2243312">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1408]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3188" _type="InsertStringCommand" date="Tue Feb 23 21:21:26 EST 2021" starttimestamp="1614131043210" timestamp="2243321" timestamp2="2243321">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3189" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:21:26 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2243359" />
  <Command __id="3193" _type="PauseCommand" date="Tue Feb 23 21:21:28 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2245145">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1540]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3192" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:21:28 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2245145" />
  <Command __id="3195" _type="InsertStringCommand" date="Tue Feb 23 21:21:28 EST 2021" starttimestamp="1614131043210" timestamp="2245157" timestamp2="2245157">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3197" _type="PauseCommand" date="Tue Feb 23 21:21:44 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2261433">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[16276]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3196" _type="MoveCaretCommand" caretOffset="6762" date="Tue Feb 23 21:21:44 EST 2021" docOffset="6762" starttimestamp="1614131043210" timestamp="2261433" />
  <Command __id="3198" _type="SelectTextCommand" caretOffset="6771" date="Tue Feb 23 21:21:44 EST 2021" end="6771" start="6754" starttimestamp="1614131043210" timestamp="2261592" />
  <Command __id="3200" _type="PauseCommand" date="Tue Feb 23 21:21:48 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2265623">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4031]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3199" _type="MoveCaretCommand" caretOffset="7107" date="Tue Feb 23 21:21:48 EST 2021" docOffset="7107" starttimestamp="1614131043210" timestamp="2265623" />
  <Command __id="3202" _type="PauseCommand" date="Tue Feb 23 21:21:50 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2267458">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1835]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3201" _type="MoveCaretCommand" caretOffset="6763" date="Tue Feb 23 21:21:50 EST 2021" docOffset="6763" starttimestamp="1614131043210" timestamp="2267458" />
  <Command __id="3203" _type="SelectTextCommand" caretOffset="6771" date="Tue Feb 23 21:21:50 EST 2021" end="6771" start="6754" starttimestamp="1614131043210" timestamp="2267595" />
  <Command __id="3204" _type="CopyCommand" date="Tue Feb 23 21:21:51 EST 2021" starttimestamp="1614131043210" timestamp="2267812" />
  <Command __id="3205" _type="MoveCaretCommand" caretOffset="7109" date="Tue Feb 23 21:21:51 EST 2021" docOffset="7109" starttimestamp="1614131043210" timestamp="2268332" />
  <Command __id="3206" _type="SelectTextCommand" caretOffset="7118" date="Tue Feb 23 21:21:51 EST 2021" end="7118" start="7104" starttimestamp="1614131043210" timestamp="2268494" />
  <Command __id="3208" _type="PasteCommand" date="Tue Feb 23 21:21:51 EST 2021" starttimestamp="1614131043210" timestamp="2268704" />
  <Command __id="3210" _type="PauseCommand" date="Tue Feb 23 21:22:07 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2284123">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[15419]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3209" _type="MoveCaretCommand" caretOffset="6845" date="Tue Feb 23 21:22:07 EST 2021" docOffset="6845" starttimestamp="1614131043210" timestamp="2284123" />
  <Command __id="3212" _type="PauseCommand" date="Tue Feb 23 21:22:08 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2285667">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1544]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3211" _type="MoveCaretCommand" caretOffset="6850" date="Tue Feb 23 21:22:08 EST 2021" docOffset="6850" starttimestamp="1614131043210" timestamp="2285667" />
  <Command __id="3214" _type="PauseCommand" date="Tue Feb 23 21:22:29 EST 2021" range="20s-30s" starttimestamp="1614131043210" timestamp="2305817">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[20150]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3213" _type="MoveCaretCommand" caretOffset="5629" date="Tue Feb 23 21:22:29 EST 2021" docOffset="5629" starttimestamp="1614131043210" timestamp="2305817" />
  <Command __id="3216" _type="PauseCommand" date="Tue Feb 23 21:22:34 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2311011">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5194]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3215" _type="MoveCaretCommand" caretOffset="5735" date="Tue Feb 23 21:22:34 EST 2021" docOffset="5735" starttimestamp="1614131043210" timestamp="2311011" />
  <Command __id="3217" _type="SelectTextCommand" caretOffset="5748" date="Tue Feb 23 21:22:34 EST 2021" end="5748" start="5731" starttimestamp="1614131043210" timestamp="2311183" />
  <Command __id="3219" _type="PauseCommand" date="Tue Feb 23 21:22:35 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2312642">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1459]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="3218" _type="CopyCommand" date="Tue Feb 23 21:22:35 EST 2021" starttimestamp="1614131043210" timestamp="2312642" />
  <Command __id="3220" _type="MoveCaretCommand" caretOffset="5625" date="Tue Feb 23 21:22:36 EST 2021" docOffset="5625" starttimestamp="1614131043210" timestamp="2313140" />
  <Command __id="3221" _type="SelectTextCommand" caretOffset="5635" date="Tue Feb 23 21:22:36 EST 2021" end="5635" start="5621" starttimestamp="1614131043210" timestamp="2313298" />
  <Command __id="3223" _type="PasteCommand" date="Tue Feb 23 21:22:36 EST 2021" starttimestamp="1614131043210" timestamp="2313474" />
  <Command __id="3225" _type="PauseCommand" date="Tue Feb 23 21:22:57 EST 2021" range="20s-30s" starttimestamp="1614131043210" timestamp="2334563">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[21088]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3224" _type="MoveCaretCommand" caretOffset="5863" date="Tue Feb 23 21:22:57 EST 2021" docOffset="5863" starttimestamp="1614131043210" timestamp="2334562" />
  <Command __id="3227" _type="PauseCommand" date="Tue Feb 23 21:22:59 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2336676">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2114]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3228" _type="InsertStringCommand" date="Tue Feb 23 21:22:59 EST 2021" starttimestamp="1614131043210" timestamp="2336686" timestamp2="2336686">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3230" _type="InsertStringCommand" date="Tue Feb 23 21:23:00 EST 2021" starttimestamp="1614131043210" timestamp="2336897" timestamp2="2336897">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3231" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:23:00 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2336940" />
  <Command __id="3235" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:23:01 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2337843" />
  <Command __id="3237" _type="InsertStringCommand" date="Tue Feb 23 21:23:01 EST 2021" starttimestamp="1614131043210" timestamp="2337858" timestamp2="2337858">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3239" _type="InsertStringCommand" date="Tue Feb 23 21:23:01 EST 2021" starttimestamp="1614131043210" timestamp="2338172" timestamp2="2338172">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3240" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:23:01 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2338214" />
  <Command __id="3254" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:23:04 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2341443" />
  <Command __id="3256" _type="InsertStringCommand" date="Tue Feb 23 21:23:04 EST 2021" starttimestamp="1614131043210" timestamp="2341523" timestamp2="2341523">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3258" _type="PauseCommand" date="Tue Feb 23 21:23:07 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2344375">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2852]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="3259" _type="InsertStringCommand" date="Tue Feb 23 21:23:07 EST 2021" starttimestamp="1614131043210" timestamp="2344384" timestamp2="2344384">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3260" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:23:07 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2344468" />
  <Command __id="3263" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:23:08 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2345032" />
  <Command __id="3265" _type="InsertStringCommand" date="Tue Feb 23 21:23:08 EST 2021" starttimestamp="1614131043210" timestamp="2345045" timestamp2="2345045">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3267" _type="PauseCommand" date="Tue Feb 23 21:23:11 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2348420">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3375]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3266" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:23:11 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2348420" />
  <Command __id="3268" _type="MoveCaretCommand" caretOffset="5946" date="Tue Feb 23 21:23:11 EST 2021" docOffset="5946" starttimestamp="1614131043210" timestamp="2348517" />
  <DocumentChange __id="3134" _type="Insert" date="Tue Feb 23 21:21:03 EST 2021" docASTNodeCount="6145" docActiveCodeLength="34854" docExpressionCount="4251" docLength="37336" length="7" offset="5776" repeat="7" starttimestamp="1614131043210" timestamp="2220360" timestamp2="2221687">
    <text><![CDATA[.gettim]]></text>
  </DocumentChange>
  <DocumentChange __id="3144" _type="Replace" date="Tue Feb 23 21:21:05 EST 2021" docASTNodeCount="6145" docActiveCodeLength="34862" docExpressionCount="4251" docLength="37344" endLine="162" insertionLength="14" int_docASTNodeCount="6145" int_docActiveCodeLength="34848" int_docExpressionCount="4250" int_docLength="37330" length="6" offset="5777" startLine="162" starttimestamp="1614131043210" timestamp="2221988">
    <deletedText><![CDATA[gettim]]></deletedText>
    <insertedText><![CDATA[getTimestamp()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3146" _type="Insert" date="Tue Feb 23 21:21:05 EST 2021" docASTNodeCount="6147" docActiveCodeLength="34868" docExpressionCount="4253" docLength="37350" length="6" offset="5791" repeat="6" starttimestamp="1614131043210" timestamp="2222230" timestamp2="2224251">
    <text><![CDATA[ + log]]></text>
  </DocumentChange>
  <DocumentChange __id="3160" _type="Replace" date="Tue Feb 23 21:21:09 EST 2021" docASTNodeCount="6147" docActiveCodeLength="34882" docExpressionCount="4253" docLength="37364" endLine="162" insertionLength="17" int_docASTNodeCount="6145" int_docActiveCodeLength="34865" int_docExpressionCount="4251" int_docLength="37347" length="3" offset="5794" startLine="162" starttimestamp="1614131043210" timestamp="2225835">
    <deletedText><![CDATA[log]]></deletedText>
    <insertedText><![CDATA[logStartTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3162" _type="Insert" date="Tue Feb 23 21:21:09 EST 2021" docASTNodeCount="6149" docActiveCodeLength="34891" docExpressionCount="4255" docLength="37373" length="9" offset="5811" repeat="9" starttimestamp="1614131043210" timestamp="2226362" timestamp2="2229249">
    <text><![CDATA[ > endtim]]></text>
  </DocumentChange>
  <DocumentChange __id="3178" _type="Replace" date="Tue Feb 23 21:21:12 EST 2021" docASTNodeCount="6149" docActiveCodeLength="34897" docExpressionCount="4255" docLength="37379" endLine="162" insertionLength="12" int_docASTNodeCount="5876" int_docActiveCodeLength="34885" int_docExpressionCount="4060" int_docLength="37367" length="6" offset="5814" startLine="162" starttimestamp="1614131043210" timestamp="2229446">
    <deletedText><![CDATA[endtim]]></deletedText>
    <insertedText><![CDATA[endTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3184" _type="Delete" date="Tue Feb 23 21:21:25 EST 2021" docASTNodeCount="6148" docActiveCodeLength="34896" docExpressionCount="4254" docLength="37378" endLine="187" length="1" offset="6754" startLine="187" starttimestamp="1614131043210" timestamp="2241899">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="3186" _type="Insert" date="Tue Feb 23 21:21:26 EST 2021" docASTNodeCount="6149" docActiveCodeLength="34899" docExpressionCount="4255" docLength="37381" length="3" offset="6754" repeat="3" starttimestamp="1614131043210" timestamp="2243312" timestamp2="2243605">
    <text><![CDATA[log]]></text>
  </DocumentChange>
  <DocumentChange __id="3194" _type="Replace" date="Tue Feb 23 21:21:28 EST 2021" docASTNodeCount="6149" docActiveCodeLength="34913" docExpressionCount="4255" docLength="37395" endLine="187" insertionLength="17" int_docASTNodeCount="6148" int_docActiveCodeLength="34896" int_docExpressionCount="4254" int_docLength="37378" length="3" offset="6754" startLine="187" starttimestamp="1614131043210" timestamp="2245152">
    <deletedText><![CDATA[log]]></deletedText>
    <insertedText><![CDATA[logStartTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3207" _type="Replace" date="Tue Feb 23 21:21:51 EST 2021" docASTNodeCount="6149" docActiveCodeLength="34916" docExpressionCount="4255" docLength="37398" endLine="194" insertionLength="17" int_docASTNodeCount="6147" int_docActiveCodeLength="34899" int_docExpressionCount="4253" int_docLength="37381" length="14" offset="7104" startLine="194" starttimestamp="1614131043210" timestamp="2268697">
    <deletedText><![CDATA[startTimestamp]]></deletedText>
    <insertedText><![CDATA[logStartTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3222" _type="Replace" date="Tue Feb 23 21:22:36 EST 2021" docASTNodeCount="6149" docActiveCodeLength="34919" docExpressionCount="4255" docLength="37401" endLine="159" insertionLength="17" int_docASTNodeCount="6147" int_docActiveCodeLength="34902" int_docExpressionCount="4253" int_docLength="37384" length="14" offset="5621" startLine="159" starttimestamp="1614131043210" timestamp="2313467">
    <deletedText><![CDATA[startTimestamp]]></deletedText>
    <insertedText><![CDATA[logStartTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3226" _type="Insert" date="Tue Feb 23 21:22:59 EST 2021" docASTNodeCount="6151" docActiveCodeLength="34933" docExpressionCount="4256" docLength="37415" length="14" offset="5863" repeat="5" starttimestamp="1614131043210" timestamp="2336676" timestamp2="2337353">
    <text><![CDATA[
								comm]]></text>
  </DocumentChange>
  <DocumentChange __id="3236" _type="Replace" date="Tue Feb 23 21:23:01 EST 2021" docASTNodeCount="6151" docActiveCodeLength="34936" docExpressionCount="4256" docLength="37418" endLine="165" insertionLength="7" int_docASTNodeCount="6149" int_docActiveCodeLength="34929" int_docExpressionCount="4255" int_docLength="37411" length="4" offset="5873" startLine="165" starttimestamp="1614131043210" timestamp="2337851">
    <deletedText><![CDATA[comm]]></deletedText>
    <insertedText><![CDATA[command]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3238" _type="Insert" date="Tue Feb 23 21:23:01 EST 2021" docASTNodeCount="6153" docActiveCodeLength="34943" docExpressionCount="4258" docLength="37425" length="7" offset="5880" repeat="7" starttimestamp="1614131043210" timestamp="2338167" timestamp2="2340052">
    <text><![CDATA[.settim]]></text>
  </DocumentChange>
  <DocumentChange __id="3247" _type="Delete" date="Tue Feb 23 21:23:03 EST 2021" docASTNodeCount="6153" docActiveCodeLength="34940" docExpressionCount="4258" docLength="37422" endLine="165" length="3" offset="5884" repeat="3" startLine="165" starttimestamp="1614131043210" timestamp="2340519" timestamp2="2340781">
    <text><![CDATA[tim]]></text>
  </DocumentChange>
  <DocumentChange __id="3250" _type="Insert" date="Tue Feb 23 21:23:04 EST 2021" docASTNodeCount="6153" docActiveCodeLength="34944" docExpressionCount="4258" docLength="37426" length="4" offset="5884" repeat="4" starttimestamp="1614131043210" timestamp="2340941" timestamp2="2341240">
    <text><![CDATA[star]]></text>
  </DocumentChange>
  <DocumentChange __id="3255" _type="Replace" date="Tue Feb 23 21:23:04 EST 2021" docASTNodeCount="6154" docActiveCodeLength="34966" docExpressionCount="4259" docLength="37448" endLine="165" insertionLength="29" int_docASTNodeCount="6151" int_docActiveCodeLength="34937" int_docExpressionCount="4256" int_docLength="37419" length="7" offset="5881" startLine="165" starttimestamp="1614131043210" timestamp="2341451">
    <deletedText><![CDATA[setstar]]></deletedText>
    <insertedText><![CDATA[setStartTimestamp(timestamp);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3257" _type="Replace" date="Tue Feb 23 21:23:07 EST 2021" docASTNodeCount="6154" docActiveCodeLength="34958" docExpressionCount="4259" docLength="37440" endLine="165" insertionLength="1" int_docASTNodeCount="6153" int_docActiveCodeLength="34957" int_docExpressionCount="4258" int_docLength="37439" length="9" offset="5899" startLine="165" starttimestamp="1614131043210" timestamp="2344375">
    <deletedText><![CDATA[timestamp]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3261" _type="Insert" date="Tue Feb 23 21:23:07 EST 2021" docASTNodeCount="6154" docActiveCodeLength="34960" docExpressionCount="4259" docLength="37442" length="2" offset="5900" repeat="2" starttimestamp="1614131043210" timestamp="2344682" timestamp2="2344694">
    <text><![CDATA[og]]></text>
  </DocumentChange>
  <DocumentChange __id="3264" _type="Replace" date="Tue Feb 23 21:23:08 EST 2021" docASTNodeCount="6154" docActiveCodeLength="34974" docExpressionCount="4259" docLength="37456" endLine="165" insertionLength="17" int_docASTNodeCount="6153" int_docActiveCodeLength="34957" int_docExpressionCount="4258" int_docLength="37439" length="3" offset="5899" startLine="165" starttimestamp="1614131043210" timestamp="2345038">
    <deletedText><![CDATA[log]]></deletedText>
    <insertedText><![CDATA[logStartTimestamp]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3271" _type="Delete" date="Tue Feb 23 21:23:18 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35006" docExpressionCount="3874" docLength="37454" endLine="154" length="2" offset="5360" startLine="154" starttimestamp="1614131043210" timestamp="2355655">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3272" _type="Delete" date="Tue Feb 23 21:23:18 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35105" docExpressionCount="3874" docLength="37452" endLine="155" length="2" offset="5394" startLine="155" starttimestamp="1614131043210" timestamp="2355661">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3273" _type="Delete" date="Tue Feb 23 21:23:18 EST 2021" docASTNodeCount="6167" docActiveCodeLength="35113" docExpressionCount="4269" docLength="37450" endLine="156" length="2" offset="5495" startLine="156" starttimestamp="1614131043210" timestamp="2355664">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3276" _type="Insert" date="Tue Feb 23 21:23:20 EST 2021" docASTNodeCount="6159" docActiveCodeLength="35014" docExpressionCount="4262" docLength="37452" length="2" offset="5394" starttimestamp="1614131043210" timestamp="2356951">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="3270" _type="PauseCommand" date="Tue Feb 23 21:23:17 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2354764">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6247]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3269" _type="SelectTextCommand" caretOffset="5509" date="Tue Feb 23 21:23:17 EST 2021" end="5509" start="5369" starttimestamp="1614131043210" timestamp="2354764" />
  <Command __id="3274" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:23:18 EST 2021" starttimestamp="1614131043210" timestamp="2355686" />
  <Command __id="3275" _type="MoveCaretCommand" caretOffset="5406" date="Tue Feb 23 21:23:19 EST 2021" docOffset="5406" starttimestamp="1614131043210" timestamp="2356454" />
  <Command __id="3277" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:23:20 EST 2021" starttimestamp="1614131043210" timestamp="2356972" />
  <Command __id="3279" _type="PauseCommand" date="Tue Feb 23 21:23:21 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2357972">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1000]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3280" _type="InsertStringCommand" date="Tue Feb 23 21:23:21 EST 2021" starttimestamp="1614131043210" timestamp="2357990" timestamp2="2357990">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3282" _type="InsertStringCommand" date="Tue Feb 23 21:23:21 EST 2021" starttimestamp="1614131043210" timestamp="2358360" timestamp2="2358360">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="3284" _type="InsertStringCommand" date="Tue Feb 23 21:23:21 EST 2021" starttimestamp="1614131043210" timestamp="2358401" timestamp2="2358401">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3285" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:23:21 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2358445" />
  <Command __id="3288" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:23:22 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2359277" />
  <Command __id="3290" _type="InsertStringCommand" date="Tue Feb 23 21:23:22 EST 2021" starttimestamp="1614131043210" timestamp="2359291" timestamp2="2359291">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3292" _type="InsertStringCommand" date="Tue Feb 23 21:23:23 EST 2021" starttimestamp="1614131043210" timestamp="2359865" timestamp2="2359865">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3294" _type="InsertStringCommand" date="Tue Feb 23 21:23:23 EST 2021" starttimestamp="1614131043210" timestamp="2359955" timestamp2="2359955">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3296" _type="InsertStringCommand" date="Tue Feb 23 21:23:23 EST 2021" starttimestamp="1614131043210" timestamp="2360067" timestamp2="2360067">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3298" _type="PauseCommand" date="Tue Feb 23 21:23:27 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2363973">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3906]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3299" _type="InsertStringCommand" date="Tue Feb 23 21:23:27 EST 2021" starttimestamp="1614131043210" timestamp="2363978" timestamp2="2363978">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="3301" _type="InsertStringCommand" date="Tue Feb 23 21:23:27 EST 2021" starttimestamp="1614131043210" timestamp="2364014" timestamp2="2364014">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3302" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:23:27 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2364054" />
  <Command __id="3306" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:23:28 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2364953" />
  <Command __id="3308" _type="InsertStringCommand" date="Tue Feb 23 21:23:28 EST 2021" starttimestamp="1614131043210" timestamp="2364967" timestamp2="2364967">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3310" _type="InsertStringCommand" date="Tue Feb 23 21:23:28 EST 2021" starttimestamp="1614131043210" timestamp="2365213" timestamp2="2365213">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3311" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:23:28 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2365255" />
  <Command __id="3314" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:23:29 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2365970" />
  <Command __id="3316" _type="InsertStringCommand" date="Tue Feb 23 21:23:29 EST 2021" starttimestamp="1614131043210" timestamp="2365987" timestamp2="2365987">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3318" _type="InsertStringCommand" date="Tue Feb 23 21:23:29 EST 2021" starttimestamp="1614131043210" timestamp="2366141" timestamp2="2366141">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3320" _type="PauseCommand" date="Tue Feb 23 21:23:38 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2375314">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[9173]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3319" _type="MoveCaretCommand" caretOffset="6092" date="Tue Feb 23 21:23:38 EST 2021" docOffset="6092" starttimestamp="1614131043210" timestamp="2375314" />
  <Command __id="3322" _type="PauseCommand" date="Tue Feb 23 21:23:54 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2390797">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15483]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3321" _type="MoveCaretCommand" caretOffset="7295" date="Tue Feb 23 21:23:54 EST 2021" docOffset="7295" starttimestamp="1614131043210" timestamp="2390797" />
  <Command __id="3324" _type="PauseCommand" date="Tue Feb 23 21:24:01 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2397850">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7053]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3323" _type="MoveCaretCommand" caretOffset="7448" date="Tue Feb 23 21:24:01 EST 2021" docOffset="7448" starttimestamp="1614131043210" timestamp="2397850" />
  <Command __id="3326" _type="PauseCommand" date="Tue Feb 23 21:24:02 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2399160">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1310]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3325" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:24:02 EST 2021" starttimestamp="1614131043210" timestamp="2399160" />
  <Command __id="3327" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:24:02 EST 2021" starttimestamp="1614131043210" timestamp="2399251" />
  <Command __id="3328" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:24:02 EST 2021" starttimestamp="1614131043210" timestamp="2399381" />
  <Command __id="3330" _type="PauseCommand" date="Tue Feb 23 21:24:15 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2412388">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[13007]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3329" _type="MoveCaretCommand" caretOffset="5707" date="Tue Feb 23 21:24:15 EST 2021" docOffset="5707" starttimestamp="1614131043210" timestamp="2412388" />
  <Command __id="3331" _type="SelectTextCommand" caretOffset="5629" date="Tue Feb 23 21:24:16 EST 2021" end="5694" start="5629" starttimestamp="1614131043210" timestamp="2412900" />
  <Command __id="3332" _type="MoveCaretCommand" caretOffset="5602" date="Tue Feb 23 21:24:16 EST 2021" docOffset="5602" starttimestamp="1614131043210" timestamp="2413431" />
  <Command __id="3333" _type="MoveCaretCommand" caretOffset="5705" date="Tue Feb 23 21:24:17 EST 2021" docOffset="5705" starttimestamp="1614131043210" timestamp="2413902" />
  <Command __id="3335" _type="PauseCommand" date="Tue Feb 23 21:24:22 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2418998">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5096]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3336" _type="MoveCaretCommand" caretOffset="349" date="Tue Feb 23 21:24:22 EST 2021" docOffset="646" starttimestamp="1614131043210" timestamp="2419111" />
  <Command __id="3352" _type="PauseCommand" date="Tue Feb 23 21:24:41 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2437851">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1652]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="3351" _type="RunCommand" date="Tue Feb 23 21:24:41 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2437851" type="Run" />
  <Command __id="3360" _type="PauseCommand" date="Tue Feb 23 21:24:55 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2452212">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[6132]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="3359" _type="RunCommand" date="Tue Feb 23 21:24:55 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2452212" type="Run" />
  <Command __id="3361" _type="ShellCommand" date="Tue Feb 23 21:24:56 EST 2021" starttimestamp="1614131043210" timestamp="2452952" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3362" _type="MoveCaretCommand" caretOffset="1956" date="Tue Feb 23 21:24:56 EST 2021" docOffset="1956" starttimestamp="1614131043210" timestamp="2453044" />
  <Command __id="3364" _type="PauseCommand" date="Tue Feb 23 21:25:04 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2461042">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7998]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3363" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Feb 23 21:25:04 EST 2021" starttimestamp="1614131043210" timestamp="2461042" />
  <Command __id="3365" _type="RunCommand" date="Tue Feb 23 21:25:04 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2461078" type="Debug" />
  <Command __id="3366" _type="RunCommand" date="Tue Feb 23 21:25:04 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2461078" type="Debug" />
  <Command __id="3367" _type="RunCommand" date="Tue Feb 23 21:25:04 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2461078" type="Run" />
  <Command __id="3369" _type="PauseCommand" date="Tue Feb 23 21:25:07 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2464473">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[3395]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3370" _type="MoveCaretCommand" caretOffset="876" date="Tue Feb 23 21:25:07 EST 2021" docOffset="1173" starttimestamp="1614131043210" timestamp="2464591" />
  <Command __id="3372" _type="PauseCommand" date="Tue Feb 23 21:25:09 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2466689">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2098]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3373" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:25:09 EST 2021" starttimestamp="1614131043210" timestamp="2466702" />
  <Command __id="3375" _type="PauseCommand" date="Tue Feb 23 21:25:12 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2469092">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2390]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3374" _type="MoveCaretCommand" caretOffset="1163" date="Tue Feb 23 21:25:12 EST 2021" docOffset="1460" starttimestamp="1614131043210" timestamp="2469092" />
  <Command __id="3377" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:25:13 EST 2021" starttimestamp="1614131043210" timestamp="2469878" />
  <Command __id="3379" _type="PauseCommand" date="Tue Feb 23 21:25:15 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2471882">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2003]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3380" _type="MoveCaretCommand" caretOffset="1956" date="Tue Feb 23 21:25:15 EST 2021" docOffset="1956" starttimestamp="1614131043210" timestamp="2471994" />
  <Command __id="3382" _type="PauseCommand" date="Tue Feb 23 21:25:16 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2473116">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1122]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3383" _type="MoveCaretCommand" caretOffset="1161" date="Tue Feb 23 21:25:16 EST 2021" docOffset="1458" starttimestamp="1614131043210" timestamp="2473230" />
  <Command __id="3384" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:25:17 EST 2021" starttimestamp="1614131043210" timestamp="2474142" />
  <Command __id="3385" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:25:17 EST 2021" starttimestamp="1614131043210" timestamp="2474231" />
  <Command __id="3386" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:25:17 EST 2021" starttimestamp="1614131043210" timestamp="2474314" />
  <Command __id="3388" _type="PauseCommand" date="Tue Feb 23 21:25:18 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2475691">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1377]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3389" _type="MoveCaretCommand" caretOffset="1956" date="Tue Feb 23 21:25:19 EST 2021" docOffset="1956" starttimestamp="1614131043210" timestamp="2475798" />
  <Command __id="3391" _type="PauseCommand" date="Tue Feb 23 21:25:27 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2484736">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8938]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3390" _type="MoveCaretCommand" caretOffset="4189" date="Tue Feb 23 21:25:27 EST 2021" docOffset="4189" starttimestamp="1614131043210" timestamp="2484736" />
  <Command __id="3393" _type="PauseCommand" date="Tue Feb 23 21:25:29 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2486467">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1731]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3394" _type="InsertStringCommand" date="Tue Feb 23 21:25:29 EST 2021" starttimestamp="1614131043210" timestamp="2486477" timestamp2="2486477">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3396" _type="InsertStringCommand" date="Tue Feb 23 21:25:30 EST 2021" starttimestamp="1614131043210" timestamp="2487142" timestamp2="2487142">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3397" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:25:30 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2487185" />
  <Command __id="3399" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:25:30 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2487349" />
  <Command __id="3401" _type="InsertStringCommand" date="Tue Feb 23 21:25:30 EST 2021" starttimestamp="1614131043210" timestamp="2487419" timestamp2="2487419">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3402" _type="ShellCommand" date="Tue Feb 23 21:25:31 EST 2021" starttimestamp="1614131043210" timestamp="2488026" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="3278" _type="Insert" date="Tue Feb 23 21:23:21 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35028" docExpressionCount="3874" docLength="37466" length="14" offset="5495" repeat="5" starttimestamp="1614131043210" timestamp="2357972" timestamp2="2358902">
    <text><![CDATA[
								webc]]></text>
  </DocumentChange>
  <DocumentChange __id="3289" _type="Replace" date="Tue Feb 23 21:23:22 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35034" docExpressionCount="3874" docLength="37472" endLine="156" insertionLength="10" int_docASTNodeCount="6159" int_docActiveCodeLength="35024" int_docExpressionCount="4262" int_docLength="37462" length="4" offset="5505" startLine="156" starttimestamp="1614131043210" timestamp="2359283">
    <deletedText><![CDATA[webc]]></deletedText>
    <insertedText><![CDATA[webCommand]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3291" _type="Insert" date="Tue Feb 23 21:23:23 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35037" docExpressionCount="3874" docLength="37475" length="3" offset="5515" repeat="3" starttimestamp="1614131043210" timestamp="2359860" timestamp2="2360063">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <DocumentChange __id="3297" _type="Insert" date="Tue Feb 23 21:23:27 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35042" docExpressionCount="3874" docLength="37480" length="5" offset="5518" repeat="5" starttimestamp="1614131043210" timestamp="2363973" timestamp2="2364633">
    <text><![CDATA[webit]]></text>
  </DocumentChange>
  <DocumentChange __id="3307" _type="Replace" date="Tue Feb 23 21:23:28 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35055" docExpressionCount="3874" docLength="37493" endLine="156" insertionLength="18" int_docASTNodeCount="5583" int_docActiveCodeLength="35037" int_docExpressionCount="3874" int_docLength="37475" length="5" offset="5518" startLine="156" starttimestamp="1614131043210" timestamp="2364961">
    <deletedText><![CDATA[webit]]></deletedText>
    <insertedText><![CDATA[webCommandIterator]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3309" _type="Insert" date="Tue Feb 23 21:23:28 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35058" docExpressionCount="3874" docLength="37496" length="3" offset="5536" repeat="3" starttimestamp="1614131043210" timestamp="2365208" timestamp2="2365772">
    <text><![CDATA[.ne]]></text>
  </DocumentChange>
  <DocumentChange __id="3315" _type="Replace" date="Tue Feb 23 21:23:29 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35062" docExpressionCount="3874" docLength="37500" endLine="156" insertionLength="6" int_docASTNodeCount="5583" int_docActiveCodeLength="35056" int_docExpressionCount="3874" int_docLength="37494" length="2" offset="5537" startLine="156" starttimestamp="1614131043210" timestamp="2365978">
    <deletedText><![CDATA[ne]]></deletedText>
    <insertedText><![CDATA[next()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3317" _type="Insert" date="Tue Feb 23 21:23:29 EST 2021" docASTNodeCount="6165" docActiveCodeLength="35063" docExpressionCount="4267" docLength="37501" length="1" offset="5543" starttimestamp="1614131043210" timestamp="2366135">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="3334" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:24:22 EST 2021" docASTNodeCount="145" docActiveCodeLength="1143" docExpressionCount="86" docLength="2833" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2418998">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="3346" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:24:27 EST 2021" docASTNodeCount="6165" docActiveCodeLength="35063" docExpressionCount="4267" docLength="37501" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2424363">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 10*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 10*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							"), Diff(INSERT,"long logStartTimestamp = startTimestamp;¶							long endTimestamp = Long.MAX_VALUE;¶							"), Diff(EQUAL,"if (timestamps.containsKey(studentFolder.getName())) {¶								startTimestamp = startTimestamp / DAY"), Diff(INSERT," * DAY + timestamps.get(studentFolder.getName())[0];¶								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];"), Diff(EQUAL,"¶							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							"), Diff(INSERT,"	webCommand = webCommandIterator.next();¶							"), Diff(EQUAL,"}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - "), Diff(DELETE,"s"), Diff(INSERT,"logS"), Diff(EQUAL,"tartTimestamp;¶							}¶							for (EHICommand command : commands) {¶								"), Diff(INSERT,"if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶									continue;¶								}¶								command.setStartTimestamp(logStartTimestamp);¶								"), Diff(EQUAL,"if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp("), Diff(DELETE,"0"), Diff(INSERT,"logStartTimestamp"), Diff(EQUAL,");¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - "), Diff(DELETE,"s"), Diff(INSERT,"logS"), Diff(EQUAL,"tartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";
	private Map<String, Long[]> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			SimpleDateFormat df = new SimpleDateFormat("HH:mm");
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			cr.readNext();
			String[] token = null;
			while ((token = cr.readNext()) != null) {
				long startTime = df.parse(token[4]).getTime();
				if (startTime < 10*3600*1000) {
					startTime += 12*3600*1000;
				}
				long endTime = df.parse(token[5]).getTime();
				if (endTime < 10*3600*1000) {
					endTime += 12*3600*1000;
				}
				Long[] times = {startTime, endTime};
				timestamps.put(token[0], times);
			}
			List<String[]> tokens = cr.readAll();
			System.out.println(tokens);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							
							long startTimestamp = getLogFileCreationTime(file);
							long logStartTimestamp = startTimestamp;
							long endTimestamp = Long.MAX_VALUE;
							if (timestamps.containsKey(studentFolder.getName())) {
								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];
								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];
							}
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
								webCommand = webCommandIterator.next();
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - logStartTimestamp;
							}
							for (EHICommand command : commands) {
								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {
									continue;
								}
								command.setStartTimestamp(logStartTimestamp);
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(logStartTimestamp);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - logStartTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <Command __id="3368" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:25:07 EST 2021" docASTNodeCount="145" docActiveCodeLength="1143" docExpressionCount="86" docLength="2833" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2464473">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="3371" _type="Insert" date="Tue Feb 23 21:25:09 EST 2021" docASTNodeCount="137" docActiveCodeLength="1091" docExpressionCount="80" docLength="2835" length="2" offset="1155" starttimestamp="1614131043210" timestamp="2466689">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3376" _type="Delete" date="Tue Feb 23 21:25:13 EST 2021" docASTNodeCount="142" docActiveCodeLength="1154" docExpressionCount="84" docLength="2833" endLine="36" length="2" offset="1442" startLine="36" starttimestamp="1614131043210" timestamp="2469867">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="3378" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:25:15 EST 2021" docASTNodeCount="6165" docActiveCodeLength="35063" docExpressionCount="4267" docLength="37501" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2471881">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 10*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 10*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶							long endTimestamp = Long.MAX_VALUE;¶							if (timestamps.containsKey(studentFolder.getName())) {¶								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];¶								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];¶							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶									continue;¶								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3381" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:25:16 EST 2021" docASTNodeCount="142" docActiveCodeLength="1154" docExpressionCount="84" docLength="2833" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2473116">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶"), Diff(DELETE,"//"), Diff(EQUAL,"		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
//		((AExperimentalReplayer)replayer).readTimestamp();
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);
//		System.out.println(s1.equals(s2));
//		analyzer.addAnalyzerListener(replayer);	
		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
//		Date d = new Date(1379180409552L+4869423L);
//		System.out.println(d);
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <Command __id="3387" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:25:18 EST 2021" docASTNodeCount="6165" docActiveCodeLength="35063" docExpressionCount="4267" docLength="37501" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2475691">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 10*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 10*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶							long endTimestamp = Long.MAX_VALUE;¶							if (timestamps.containsKey(studentFolder.getName())) {¶								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];¶								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];¶							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶									continue;¶								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3392" _type="Insert" date="Tue Feb 23 21:25:29 EST 2021" docASTNodeCount="6165" docActiveCodeLength="35072" docExpressionCount="4267" docLength="37510" length="9" offset="4189" repeat="3" starttimestamp="1614131043210" timestamp="2486467" timestamp2="2487338">
    <text><![CDATA[
					if]]></text>
  </DocumentChange>
  <DocumentChange __id="3400" _type="Replace" date="Tue Feb 23 21:25:30 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35115" docExpressionCount="4268" docLength="37553" endLine="127" insertionLength="45" int_docASTNodeCount="6165" int_docActiveCodeLength="35070" int_docExpressionCount="4267" int_docLength="37508" length="2" offset="4196" startLine="127" starttimestamp="1614131043210" timestamp="2487373">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
						
					}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3408" _type="Replace" date="Tue Feb 23 21:25:35 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35094" docExpressionCount="4268" docLength="37532" endLine="127" insertionLength="1" int_docASTNodeCount="6168" int_docActiveCodeLength="35093" int_docExpressionCount="4268" int_docLength="37531" length="22" offset="4200" startLine="127" starttimestamp="1614131043210" timestamp="2492649">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3411" _type="Insert" date="Tue Feb 23 21:25:36 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35097" docExpressionCount="4268" docLength="37535" length="3" offset="4201" repeat="3" starttimestamp="1614131043210" timestamp="2492890" timestamp2="2493090">
    <text><![CDATA[tud]]></text>
  </DocumentChange>
  <DocumentChange __id="3415" _type="Replace" date="Tue Feb 23 21:25:36 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35106" docExpressionCount="4268" docLength="37544" endLine="127" insertionLength="13" int_docASTNodeCount="6168" int_docActiveCodeLength="35093" int_docExpressionCount="4268" int_docLength="37531" length="4" offset="4200" startLine="127" starttimestamp="1614131043210" timestamp="2493392">
    <deletedText><![CDATA[stud]]></deletedText>
    <insertedText><![CDATA[studentFolder]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3417" _type="Insert" date="Tue Feb 23 21:25:37 EST 2021" docASTNodeCount="6170" docActiveCodeLength="35112" docExpressionCount="4270" docLength="37550" length="6" offset="4213" repeat="6" starttimestamp="1614131043210" timestamp="2493867" timestamp2="2494514">
    <text><![CDATA[.getna]]></text>
  </DocumentChange>
  <DocumentChange __id="3426" _type="Replace" date="Tue Feb 23 21:25:37 EST 2021" docASTNodeCount="6170" docActiveCodeLength="35116" docExpressionCount="4270" docLength="37554" endLine="127" insertionLength="9" int_docASTNodeCount="6170" int_docActiveCodeLength="35107" int_docExpressionCount="4269" int_docLength="37545" length="5" offset="4214" startLine="127" starttimestamp="1614131043210" timestamp="2494637">
    <deletedText><![CDATA[getna]]></deletedText>
    <insertedText><![CDATA[getName()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3428" _type="Insert" date="Tue Feb 23 21:25:38 EST 2021" docASTNodeCount="6172" docActiveCodeLength="35119" docExpressionCount="4272" docLength="37557" length="3" offset="4223" repeat="3" starttimestamp="1614131043210" timestamp="2495454" timestamp2="2495911">
    <text><![CDATA[.eq]]></text>
  </DocumentChange>
  <Command __id="3404" _type="PauseCommand" date="Tue Feb 23 21:25:34 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2491103">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3077]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3403" _type="ShellCommand" date="Tue Feb 23 21:25:34 EST 2021" starttimestamp="1614131043210" timestamp="2491103" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3405" _type="MoveCaretCommand" caretOffset="4233" date="Tue Feb 23 21:25:34 EST 2021" docOffset="4233" starttimestamp="1614131043210" timestamp="2491170" />
  <Command __id="3406" _type="MoveCaretCommand" caretOffset="4207" date="Tue Feb 23 21:25:34 EST 2021" docOffset="4207" starttimestamp="1614131043210" timestamp="2491622" />
  <Command __id="3407" _type="SelectTextCommand" caretOffset="4222" date="Tue Feb 23 21:25:34 EST 2021" end="4222" start="4200" starttimestamp="1614131043210" timestamp="2491751" />
  <Command __id="3409" _type="InsertStringCommand" date="Tue Feb 23 21:25:35 EST 2021" starttimestamp="1614131043210" timestamp="2492657" timestamp2="2492657">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3410" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:25:35 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2492692" />
  <Command __id="3414" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:25:36 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2493384" />
  <Command __id="3416" _type="InsertStringCommand" date="Tue Feb 23 21:25:36 EST 2021" starttimestamp="1614131043210" timestamp="2493398" timestamp2="2493398">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3418" _type="InsertStringCommand" date="Tue Feb 23 21:25:37 EST 2021" starttimestamp="1614131043210" timestamp="2493872" timestamp2="2493872">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3419" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:25:37 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2493913" />
  <Command __id="3425" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:25:37 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2494629" />
  <Command __id="3427" _type="InsertStringCommand" date="Tue Feb 23 21:25:37 EST 2021" starttimestamp="1614131043210" timestamp="2494644" timestamp2="2494644">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3429" _type="InsertStringCommand" date="Tue Feb 23 21:25:38 EST 2021" starttimestamp="1614131043210" timestamp="2495460" timestamp2="2495460">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3430" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:25:38 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2495500" />
  <Command __id="3433" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:25:39 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2496089" />
  <Command __id="3435" _type="InsertStringCommand" date="Tue Feb 23 21:25:39 EST 2021" starttimestamp="1614131043210" timestamp="2496169" timestamp2="2496169">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3437" _type="InsertStringCommand" date="Tue Feb 23 21:25:39 EST 2021" starttimestamp="1614131043210" timestamp="2496565" timestamp2="2496565">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3439" _type="InsertStringCommand" date="Tue Feb 23 21:25:40 EST 2021" starttimestamp="1614131043210" timestamp="2497154" timestamp2="2497154">
    <data><![CDATA[1]]></data>
  </Command>
  <Command __id="3441" _type="InsertStringCommand" date="Tue Feb 23 21:25:40 EST 2021" starttimestamp="1614131043210" timestamp="2497405" timestamp2="2497405">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="3443" _type="InsertStringCommand" date="Tue Feb 23 21:25:41 EST 2021" starttimestamp="1614131043210" timestamp="2498257" timestamp2="2498257">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="3444" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:25:41 EST 2021" starttimestamp="1614131043210" timestamp="2498769" />
  <Command __id="3446" _type="PauseCommand" date="Tue Feb 23 21:25:43 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2499834">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1065]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3445" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:25:43 EST 2021" starttimestamp="1614131043210" timestamp="2499834" />
  <Command __id="3448" _type="InsertStringCommand" date="Tue Feb 23 21:25:44 EST 2021" starttimestamp="1614131043210" timestamp="2500836" timestamp2="2500836">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="3450" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:25:44 EST 2021" starttimestamp="1614131043210" timestamp="2501582" />
  <Command __id="3451" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Tue Feb 23 21:25:45 EST 2021" starttimestamp="1614131043210" timestamp="2502507" />
  <Command __id="3452" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordNext" date="Tue Feb 23 21:25:45 EST 2021" starttimestamp="1614131043210" timestamp="2502685" />
  <Command __id="3453" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Feb 23 21:25:46 EST 2021" starttimestamp="1614131043210" timestamp="2503038" />
  <Command __id="3455" _type="InsertStringCommand" date="Tue Feb 23 21:25:46 EST 2021" starttimestamp="1614131043210" timestamp="2503434" timestamp2="2503434">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="3456" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:25:46 EST 2021" starttimestamp="1614131043210" timestamp="2503693" />
  <Command __id="3458" _type="InsertStringCommand" date="Tue Feb 23 21:25:47 EST 2021" starttimestamp="1614131043210" timestamp="2504350" timestamp2="2504350">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3459" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:25:47 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2504392" />
  <Command __id="3463" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:25:48 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2504829" />
  <Command __id="3465" _type="InsertStringCommand" date="Tue Feb 23 21:25:48 EST 2021" starttimestamp="1614131043210" timestamp="2504843" timestamp2="2504843">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3467" _type="InsertStringCommand" date="Tue Feb 23 21:25:48 EST 2021" starttimestamp="1614131043210" timestamp="2505012" timestamp2="2505012">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3469" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:25:48 EST 2021" starttimestamp="1614131043210" timestamp="2505628" />
  <Command __id="3471" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:25:48 EST 2021" starttimestamp="1614131043210" timestamp="2505741" />
  <Command __id="3473" _type="InsertStringCommand" date="Tue Feb 23 21:25:49 EST 2021" starttimestamp="1614131043210" timestamp="2506061" timestamp2="2506061">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3474" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:25:49 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2506103" />
  <Command __id="3480" _type="PauseCommand" date="Tue Feb 23 21:25:50 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2507763">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1195]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3484" _type="PauseCommand" date="Tue Feb 23 21:25:52 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2509444">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1092]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3483" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:25:52 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2509444" />
  <Command __id="3486" _type="InsertStringCommand" date="Tue Feb 23 21:25:52 EST 2021" starttimestamp="1614131043210" timestamp="2509615" timestamp2="2509615">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3488" _type="PauseCommand" date="Tue Feb 23 21:25:56 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2513676">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4061]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3487" _type="MoveCaretCommand" caretOffset="4253" date="Tue Feb 23 21:25:56 EST 2021" docOffset="4253" starttimestamp="1614131043210" timestamp="2513676" />
  <Command __id="3489" _type="MoveCaretCommand" caretOffset="4253" date="Tue Feb 23 21:25:57 EST 2021" docOffset="4253" starttimestamp="1614131043210" timestamp="2513846" />
  <Command __id="3491" _type="InsertStringCommand" date="Tue Feb 23 21:25:57 EST 2021" starttimestamp="1614131043210" timestamp="2514029" timestamp2="2514029">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3492" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:25:57 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2514070" />
  <Command __id="3493" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:25:57 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2514581" />
  <Command __id="3494" _type="MoveCaretCommand" caretOffset="4253" date="Tue Feb 23 21:25:57 EST 2021" docOffset="4253" starttimestamp="1614131043210" timestamp="2514652" />
  <Command __id="3495" _type="SelectTextCommand" caretOffset="4257" date="Tue Feb 23 21:25:58 EST 2021" end="4257" start="4248" starttimestamp="1614131043210" timestamp="2514817" />
  <Command __id="3497" _type="InsertStringCommand" date="Tue Feb 23 21:25:58 EST 2021" starttimestamp="1614131043210" timestamp="2514869" timestamp2="2514869">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3498" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:25:58 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2514905" />
  <Command __id="3501" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:25:58 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2515528" />
  <Command __id="3503" _type="InsertStringCommand" date="Tue Feb 23 21:25:58 EST 2021" starttimestamp="1614131043210" timestamp="2515543" timestamp2="2515543">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3505" _type="PauseCommand" date="Tue Feb 23 21:26:00 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2517284">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1741]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3504" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:26:00 EST 2021" starttimestamp="1614131043210" timestamp="2517284" />
  <Command __id="3506" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:26:00 EST 2021" starttimestamp="1614131043210" timestamp="2517424" />
  <Command __id="3507" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:26:00 EST 2021" starttimestamp="1614131043210" timestamp="2517542" />
  <Command __id="3509" _type="PauseCommand" date="Tue Feb 23 21:26:03 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2520436">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2894]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3508" _type="SelectTextCommand" caretOffset="4166" date="Tue Feb 23 21:26:03 EST 2021" end="4166" start="4087" starttimestamp="1614131043210" timestamp="2520436" />
  <Command __id="3510" _type="CopyCommand" date="Tue Feb 23 21:26:04 EST 2021" starttimestamp="1614131043210" timestamp="2521192" />
  <Command __id="3511" _type="MoveCaretCommand" caretOffset="4240" date="Tue Feb 23 21:26:05 EST 2021" docOffset="4240" starttimestamp="1614131043210" timestamp="2522167" />
  <Command __id="3513" _type="InsertStringCommand" date="Tue Feb 23 21:26:06 EST 2021" starttimestamp="1614131043210" timestamp="2522794" timestamp2="2522794">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3515" _type="PasteCommand" date="Tue Feb 23 21:26:06 EST 2021" starttimestamp="1614131043210" timestamp="2522987" />
  <Command __id="3517" _type="PauseCommand" date="Tue Feb 23 21:26:07 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2524399">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1412]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3516" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:26:07 EST 2021" starttimestamp="1614131043210" timestamp="2524399" />
  <Command __id="3518" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:26:07 EST 2021" starttimestamp="1614131043210" timestamp="2524539" />
  <Command __id="3519" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:26:07 EST 2021" starttimestamp="1614131043210" timestamp="2524655" />
  <Command __id="3521" _type="PauseCommand" date="Tue Feb 23 21:26:11 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2528289">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3634]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3522" _type="MoveCaretCommand" caretOffset="1161" date="Tue Feb 23 21:26:11 EST 2021" docOffset="1458" starttimestamp="1614131043210" timestamp="2528396" />
  <Command __id="3524" _type="MoveCaretCommand" caretOffset="4327" date="Tue Feb 23 21:26:12 EST 2021" docOffset="4327" starttimestamp="1614131043210" timestamp="2529350" />
  <Command __id="3529" _type="PauseCommand" date="Tue Feb 23 21:26:18 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2535707">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2645]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="3528" _type="RunCommand" date="Tue Feb 23 21:26:18 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2535707" type="Run" />
  <Command __id="3530" _type="RunCommand" date="Tue Feb 23 21:26:18 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2535707" type="Run" />
  <Command __id="3531" _type="ConsoleOutput" date="Tue Feb 23 21:26:19 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2536504" type="ConsoleOutput">
    <outputString><![CDATA[Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading 24
Reading 26
Reading 27
Reading 28
Reading 29
Reading 30
Reading 31
Reading 32
Reading 33
Reading pd1
Reading pd2
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="3532" _type="ConsoleOutput" date="Tue Feb 23 21:26:19 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2536638" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-"), Diff(DELETE,"36-31-023"), Diff(INSERT,"54-59-878"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="3534" _type="PauseCommand" date="Tue Feb 23 21:26:24 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2541366">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4728]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3533" _type="ShellCommand" date="Tue Feb 23 21:26:24 EST 2021" starttimestamp="1614131043210" timestamp="2541366" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3536" _type="PauseCommand" date="Tue Feb 23 21:26:26 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2543501">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2135]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="3535" _type="ConsoleOutput" date="Tue Feb 23 21:26:26 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2543501" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-"), Diff(DELETE,"36-31-023.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse"), Diff(INSERT,"54-59-878.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest"), Diff(EQUAL,"\Log2013-09-13-14-54-59-878.xml¶")]]]></diff>
  </Command>
  <Command __id="3537" _type="ShellCommand" date="Tue Feb 23 21:26:26 EST 2021" starttimestamp="1614131043210" timestamp="2543578" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3538" _type="RunCommand" date="Tue Feb 23 21:26:27 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2543817" type="Debug" />
  <Command __id="3539" _type="RunCommand" date="Tue Feb 23 21:26:27 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2543817" type="Run" />
  <Command __id="3540" _type="RunCommand" date="Tue Feb 23 21:26:27 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2543817" type="Debug" />
  <Command __id="3541" _type="RunCommand" date="Tue Feb 23 21:26:27 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2543817" type="Run" />
  <Command __id="3543" _type="PauseCommand" date="Tue Feb 23 21:26:29 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2545905">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2088]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3542" _type="ShellCommand" date="Tue Feb 23 21:26:29 EST 2021" starttimestamp="1614131043210" timestamp="2545905" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3545" _type="PauseCommand" date="Tue Feb 23 21:27:11 EST 2021" range="30s-1m" starttimestamp="1614131043210" timestamp="2588759">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[42854]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3544" _type="ShellCommand" date="Tue Feb 23 21:27:11 EST 2021" starttimestamp="1614131043210" timestamp="2588759" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3547" _type="SelectTextCommand" caretOffset="15358" date="Tue Feb 23 21:27:12 EST 2021" end="15358" start="15336" starttimestamp="1614131043210" timestamp="2589131" />
  <Command __id="3549" _type="PauseCommand" date="Tue Feb 23 21:27:28 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2605598">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[16467]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3550" _type="MoveCaretCommand" caretOffset="4327" date="Tue Feb 23 21:27:28 EST 2021" docOffset="4327" starttimestamp="1614131043210" timestamp="2605729" />
  <Command __id="3552" _type="PauseCommand" date="Tue Feb 23 21:27:34 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2611401">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5672]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3551" _type="SelectTextCommand" caretOffset="9933" date="Tue Feb 23 21:27:34 EST 2021" end="9933" start="9913" starttimestamp="1614131043210" timestamp="2611401" />
  <Command __id="3554" _type="PauseCommand" date="Tue Feb 23 21:27:39 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2616497">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5096]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3553" _type="MoveCaretCommand" caretOffset="10892" date="Tue Feb 23 21:27:39 EST 2021" docOffset="35022" starttimestamp="1614131043210" timestamp="2616497" />
  <Command __id="3555" _type="MoveCaretCommand" caretOffset="10891" date="Tue Feb 23 21:27:40 EST 2021" docOffset="35021" starttimestamp="1614131043210" timestamp="2617278" />
  <DocumentChange __id="3434" _type="Replace" date="Tue Feb 23 21:25:39 EST 2021" docASTNodeCount="6173" docActiveCodeLength="35133" docExpressionCount="4273" docLength="37571" endLine="127" insertionLength="16" int_docASTNodeCount="6172" int_docActiveCodeLength="35117" int_docExpressionCount="4272" int_docLength="37555" length="2" offset="4224" startLine="127" starttimestamp="1614131043210" timestamp="2496097">
    <deletedText><![CDATA[eq]]></deletedText>
    <insertedText><![CDATA[equals(anObject)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3436" _type="Replace" date="Tue Feb 23 21:25:39 EST 2021" docASTNodeCount="5477" docActiveCodeLength="35126" docExpressionCount="3793" docLength="37564" endLine="127" insertionLength="1" int_docASTNodeCount="6172" int_docActiveCodeLength="35125" int_docExpressionCount="4272" int_docLength="37563" length="8" offset="4231" startLine="127" starttimestamp="1614131043210" timestamp="2496557">
    <deletedText><![CDATA[anObject]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3438" _type="Insert" date="Tue Feb 23 21:25:40 EST 2021" docASTNodeCount="6173" docActiveCodeLength="35129" docExpressionCount="4273" docLength="37567" length="3" offset="4232" repeat="3" starttimestamp="1614131043210" timestamp="2497152" timestamp2="2498252">
    <text><![CDATA[16"]]></text>
  </DocumentChange>
  <DocumentChange __id="3447" _type="Insert" date="Tue Feb 23 21:25:44 EST 2021" docASTNodeCount="6173" docActiveCodeLength="35130" docExpressionCount="4273" docLength="37568" length="1" offset="4191" starttimestamp="1614131043210" timestamp="2500830">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="3449" _type="Delete" date="Tue Feb 23 21:25:44 EST 2021" docASTNodeCount="6173" docActiveCodeLength="35129" docExpressionCount="4273" docLength="37567" endLine="127" length="1" offset="4191" startLine="127" starttimestamp="1614131043210" timestamp="2501579">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="3454" _type="Insert" date="Tue Feb 23 21:25:46 EST 2021" docASTNodeCount="6174" docActiveCodeLength="35130" docExpressionCount="4274" docLength="37568" length="1" offset="4200" starttimestamp="1614131043210" timestamp="2503428">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="3457" _type="Insert" date="Tue Feb 23 21:25:47 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35134" docExpressionCount="3874" docLength="37572" length="4" offset="4248" repeat="4" starttimestamp="1614131043210" timestamp="2504345" timestamp2="2504685">
    <text><![CDATA[cont]]></text>
  </DocumentChange>
  <DocumentChange __id="3464" _type="Replace" date="Tue Feb 23 21:25:48 EST 2021" docASTNodeCount="5583" docActiveCodeLength="35137" docExpressionCount="3874" docLength="37575" endLine="128" insertionLength="7" int_docASTNodeCount="6174" int_docActiveCodeLength="35130" int_docExpressionCount="4274" int_docLength="37568" length="4" offset="4248" startLine="128" starttimestamp="1614131043210" timestamp="2504837">
    <deletedText><![CDATA[cont]]></deletedText>
    <insertedText><![CDATA[context]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3466" _type="Insert" date="Tue Feb 23 21:25:48 EST 2021" docASTNodeCount="6176" docActiveCodeLength="35138" docExpressionCount="4275" docLength="37576" length="1" offset="4255" starttimestamp="1614131043210" timestamp="2505008">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3468" _type="Delete" date="Tue Feb 23 21:25:48 EST 2021" docASTNodeCount="6174" docActiveCodeLength="35130" docExpressionCount="4274" docLength="37568" endLine="128" length="8" offset="4248" repeat="2" startLine="128" starttimestamp="1614131043210" timestamp="2505624" timestamp2="2505737">
    <text><![CDATA[context;]]></text>
  </DocumentChange>
  <DocumentChange __id="3472" _type="Insert" date="Tue Feb 23 21:25:49 EST 2021" docASTNodeCount="6175" docActiveCodeLength="35139" docExpressionCount="4274" docLength="37577" length="9" offset="4248" repeat="9" starttimestamp="1614131043210" timestamp="2506057" timestamp2="2509610">
    <text><![CDATA[continue;]]></text>
  </DocumentChange>
  <DocumentChange __id="3490" _type="Insert" date="Tue Feb 23 21:25:57 EST 2021" docASTNodeCount="6176" docActiveCodeLength="35140" docExpressionCount="4275" docLength="37578" length="1" offset="4253" starttimestamp="1614131043210" timestamp="2514024">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="3496" _type="Replace" date="Tue Feb 23 21:25:58 EST 2021" docASTNodeCount="6176" docActiveCodeLength="35132" docExpressionCount="4275" docLength="37570" endLine="128" insertionLength="1" int_docASTNodeCount="6175" int_docActiveCodeLength="35131" int_docExpressionCount="4274" int_docLength="37569" length="9" offset="4248" startLine="128" starttimestamp="1614131043210" timestamp="2514863">
    <deletedText><![CDATA[contirnue]]></deletedText>
    <insertedText><![CDATA[r]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3499" _type="Insert" date="Tue Feb 23 21:25:58 EST 2021" docASTNodeCount="6176" docActiveCodeLength="35134" docExpressionCount="4275" docLength="37572" length="2" offset="4249" repeat="2" starttimestamp="1614131043210" timestamp="2515088" timestamp2="2515100">
    <text><![CDATA[et]]></text>
  </DocumentChange>
  <DocumentChange __id="3502" _type="Replace" date="Tue Feb 23 21:25:58 EST 2021" docASTNodeCount="6175" docActiveCodeLength="35137" docExpressionCount="4274" docLength="37575" endLine="128" insertionLength="6" int_docASTNodeCount="6175" int_docActiveCodeLength="35131" int_docExpressionCount="4274" int_docLength="37569" length="3" offset="4248" startLine="128" starttimestamp="1614131043210" timestamp="2515535">
    <deletedText><![CDATA[ret]]></deletedText>
    <insertedText><![CDATA[return]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3512" _type="Insert" date="Tue Feb 23 21:26:05 EST 2021" docASTNodeCount="6175" docActiveCodeLength="35145" docExpressionCount="4274" docLength="37583" length="8" offset="4240" starttimestamp="1614131043210" timestamp="2522782">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <DocumentChange __id="3514" _type="Replace" date="Tue Feb 23 21:26:06 EST 2021" docASTNodeCount="6185" docActiveCodeLength="35224" docExpressionCount="4280" docLength="37662" endLine="128" insertionLength="85" int_docASTNodeCount="6175" int_docActiveCodeLength="35139" int_docExpressionCount="4274" int_docLength="37577" length="6" offset="4242" startLine="128" starttimestamp="1614131043210" timestamp="2522977">
    <deletedText><![CDATA[						]]></deletedText>
    <insertedText><![CDATA[						synchronized (this) {
							threadCount--;
						}
						latch.countDown();]]></insertedText>
  </DocumentChange>
  <Command __id="3520" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:26:11 EST 2021" docASTNodeCount="142" docActiveCodeLength="1154" docExpressionCount="84" docLength="2833" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2528289">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶//		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="3523" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:26:12 EST 2021" docASTNodeCount="6185" docActiveCodeLength="35224" docExpressionCount="4280" docLength="37662" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2529220">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 10*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 10*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					"), Diff(INSERT,"if (!studentFolder.getName().equals("16")) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					"), Diff(EQUAL,"try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶							long endTimestamp = Long.MAX_VALUE;¶							if (timestamps.containsKey(studentFolder.getName())) {¶								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];¶								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];¶							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶									continue;¶								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";
	private Map<String, Long[]> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			SimpleDateFormat df = new SimpleDateFormat("HH:mm");
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			cr.readNext();
			String[] token = null;
			while ((token = cr.readNext()) != null) {
				long startTime = df.parse(token[4]).getTime();
				if (startTime < 10*3600*1000) {
					startTime += 12*3600*1000;
				}
				long endTime = df.parse(token[5]).getTime();
				if (endTime < 10*3600*1000) {
					endTime += 12*3600*1000;
				}
				Long[] times = {startTime, endTime};
				timestamps.put(token[0], times);
			}
			List<String[]> tokens = cr.readAll();
			System.out.println(tokens);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					if (!studentFolder.getName().equals("16")) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							
							long startTimestamp = getLogFileCreationTime(file);
							long logStartTimestamp = startTimestamp;
							long endTimestamp = Long.MAX_VALUE;
							if (timestamps.containsKey(studentFolder.getName())) {
								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];
								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];
							}
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
								webCommand = webCommandIterator.next();
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - logStartTimestamp;
							}
							for (EHICommand command : commands) {
								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {
									continue;
								}
								command.setStartTimestamp(logStartTimestamp);
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(logStartTimestamp);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - logStartTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <Command __id="3525" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:26:16 EST 2021" docASTNodeCount="142" docActiveCodeLength="1154" docExpressionCount="84" docLength="2833" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2532934">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶//		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="3546" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:27:12 EST 2021" docASTNodeCount="6305" docActiveCodeLength="36390" docExpressionCount="4229" docLength="36445" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2588931">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.contains("google.com/url?") || keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3548" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:27:28 EST 2021" docASTNodeCount="6185" docActiveCodeLength="35224" docExpressionCount="4280" docLength="37662" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2605598">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 10*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 10*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					if (!studentFolder.getName().equals("16")) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶							long endTimestamp = Long.MAX_VALUE;¶							if (timestamps.containsKey(studentFolder.getName())) {¶								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];¶								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];¶							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶									continue;¶								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3556" _type="Delete" date="Tue Feb 23 21:27:46 EST 2021" docASTNodeCount="6184" docActiveCodeLength="35223" docExpressionCount="4279" docLength="37661" endLine="991" length="1" offset="35020" startLine="991" starttimestamp="1614131043210" timestamp="2623508">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="3559" _type="Insert" date="Tue Feb 23 21:27:47 EST 2021" docASTNodeCount="6187" docActiveCodeLength="35233" docExpressionCount="4282" docLength="37671" length="10" offset="35020" repeat="10" starttimestamp="1614131043210" timestamp="2624302" timestamp2="2626448">
    <text><![CDATA[last.getst]]></text>
  </DocumentChange>
  <Command __id="3582" _type="PauseCommand" date="Tue Feb 23 21:27:55 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2632470">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4725]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="3581" _type="RunCommand" date="Tue Feb 23 21:27:55 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2632470" type="Run" />
  <Command __id="3583" _type="RunCommand" date="Tue Feb 23 21:27:55 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2632470" type="Run" />
  <Command __id="3584" _type="ConsoleOutput" date="Tue Feb 23 21:27:56 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2633277" type="ConsoleOutput">
    <outputString><![CDATA[Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading 24
Reading 26
Reading 27
Reading 28
Reading 29
Reading 30
Reading 31
Reading 32
Reading 33
Reading pd1
Reading pd2
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml¶Finished writing to file"), Diff(INSERT,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-13-14-"), Diff(DELETE,"54-59-878"), Diff(INSERT,"36-31-023"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="3585" _type="ConsoleOutput" date="Tue Feb 23 21:27:56 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2633439" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-"), Diff(DELETE,"36-31-023"), Diff(INSERT,"54-59-878"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="3587" _type="PauseCommand" date="Tue Feb 23 21:28:01 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2638162">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4723]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3586" _type="ShellCommand" date="Tue Feb 23 21:28:01 EST 2021" starttimestamp="1614131043210" timestamp="2638162" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3589" _type="PauseCommand" date="Tue Feb 23 21:28:03 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2639947">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1785]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="3588" _type="ConsoleOutput" date="Tue Feb 23 21:28:03 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2639947" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-"), Diff(DELETE,"36-31-023.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse"), Diff(INSERT,"54-59-878.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest"), Diff(EQUAL,"\Log2013-09-13-14-54-59-878.xml¶")]]]></diff>
  </Command>
  <Command __id="3590" _type="RunCommand" date="Tue Feb 23 21:28:03 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2640202" type="Debug" />
  <Command __id="3591" _type="RunCommand" date="Tue Feb 23 21:28:03 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2640202" type="Run" />
  <Command __id="3592" _type="RunCommand" date="Tue Feb 23 21:28:03 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2640202" type="Debug" />
  <Command __id="3593" _type="RunCommand" date="Tue Feb 23 21:28:03 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2640202" type="Run" />
  <Command __id="3595" _type="PauseCommand" date="Tue Feb 23 21:28:26 EST 2021" range="20s-30s" starttimestamp="1614131043210" timestamp="2662928">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[22726]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3594" _type="ShellCommand" date="Tue Feb 23 21:28:26 EST 2021" starttimestamp="1614131043210" timestamp="2662928" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3596" _type="MoveCaretCommand" caretOffset="10631" date="Tue Feb 23 21:28:26 EST 2021" docOffset="34761" starttimestamp="1614131043210" timestamp="2662992" />
  <Command __id="3598" _type="PauseCommand" date="Tue Feb 23 21:28:29 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2666389">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3396]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3599" _type="MoveCaretCommand" caretOffset="1162" date="Tue Feb 23 21:28:29 EST 2021" docOffset="1459" starttimestamp="1614131043210" timestamp="2666492" />
  <Command __id="3601" _type="MoveCaretCommand" caretOffset="10631" date="Tue Feb 23 21:28:30 EST 2021" docOffset="34761" starttimestamp="1614131043210" timestamp="2667165" />
  <Command __id="3606" _type="PauseCommand" date="Tue Feb 23 21:28:41 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2678302">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BreakPointCommand]]></prev>
    <pause><![CDATA[1506]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="3605" _type="RunCommand" date="Tue Feb 23 21:28:41 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2678302" type="Run" />
  <Command __id="3607" _type="RunCommand" date="Tue Feb 23 21:28:41 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2678302" type="Run" />
  <Command __id="3608" _type="RunCommand" date="Tue Feb 23 21:28:41 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2678405" type="Run" />
  <Command __id="3609" _type="RunCommand" date="Tue Feb 23 21:28:41 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2678437" type="Run" />
  <Command __id="3610" _type="RunCommand" date="Tue Feb 23 21:28:41 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2678637" type="Run" />
  <Command __id="3611" _type="RunCommand" date="Tue Feb 23 21:28:42 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2679256" type="Run" />
  <Command __id="3612" _type="ConsoleOutput" date="Tue Feb 23 21:28:42 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2679453" type="ConsoleOutput">
    <outputString><![CDATA[Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading 24
Reading 26
Reading 27
Reading 28
Reading 29
Reading 30
Reading 31
Reading 32
Reading 33
Reading pd1
Reading pd2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml"), Diff(INSERT,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3614" _type="PauseCommand" date="Tue Feb 23 21:28:45 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2682069">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2616]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BreakPointCommand]]></next>
  </Command>
  <Command __id="3613" _type="BreakPointCommand" date="Tue Feb 23 21:28:45 EST 2021" lineNumber="140" starttimestamp="1614131043210" timestamp="2682069" type="BreakPointRemoved" />
  <Command __id="3615" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Tue Feb 23 21:28:45 EST 2021" starttimestamp="1614131043210" timestamp="2682142" />
  <Command __id="3616" _type="RunCommand" date="Tue Feb 23 21:28:46 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2683041" type="Run" />
  <Command __id="3617" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Tue Feb 23 21:28:46 EST 2021" starttimestamp="1614131043210" timestamp="2683042" />
  <Command __id="3619" _type="PauseCommand" date="Tue Feb 23 21:28:47 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2684368">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1325]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3618" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Feb 23 21:28:47 EST 2021" starttimestamp="1614131043210" timestamp="2684367" />
  <Command __id="3620" _type="RunCommand" date="Tue Feb 23 21:28:47 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2684368" type="Run" />
  <Command __id="3622" _type="PauseCommand" date="Tue Feb 23 21:28:49 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2686690">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2322]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3621" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Feb 23 21:28:49 EST 2021" starttimestamp="1614131043210" timestamp="2686690" />
  <Command __id="3623" _type="RunCommand" date="Tue Feb 23 21:28:49 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2686690" type="Run" />
  <Command __id="3634" _type="PauseCommand" date="Tue Feb 23 21:29:01 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2698364">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1741]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="3633" _type="RunCommand" date="Tue Feb 23 21:29:01 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2698364" type="Run" />
  <Command __id="3635" _type="ShellCommand" date="Tue Feb 23 21:29:01 EST 2021" starttimestamp="1614131043210" timestamp="2698484" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3665" _type="PauseCommand" date="Tue Feb 23 21:29:19 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2715895">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1742]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3664" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Tue Feb 23 21:29:19 EST 2021" starttimestamp="1614131043210" timestamp="2715895" />
  <Command __id="3666" _type="RunCommand" date="Tue Feb 23 21:29:19 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2715896" type="Run" />
  <Command __id="3668" _type="PauseCommand" date="Tue Feb 23 21:29:24 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2721012">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[5116]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3667" _type="MoveCaretCommand" caretOffset="5003" date="Tue Feb 23 21:29:24 EST 2021" docOffset="5003" starttimestamp="1614131043210" timestamp="2721012" />
  <Command __id="3670" _type="PauseCommand" date="Tue Feb 23 21:29:28 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2724917">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3905]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3669" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Feb 23 21:29:28 EST 2021" starttimestamp="1614131043210" timestamp="2724917" />
  <Command __id="3671" _type="RunCommand" date="Tue Feb 23 21:29:28 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2724917" type="Run" />
  <Command __id="3673" _type="PauseCommand" date="Tue Feb 23 21:29:36 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2733659">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[8742]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3672" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Feb 23 21:29:36 EST 2021" starttimestamp="1614131043210" timestamp="2733659" />
  <Command __id="3674" _type="RunCommand" date="Tue Feb 23 21:29:36 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2733694" type="Debug" />
  <Command __id="3675" _type="RunCommand" date="Tue Feb 23 21:29:36 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2733694" type="Debug" />
  <Command __id="3676" _type="RunCommand" date="Tue Feb 23 21:29:36 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2733694" type="Run" />
  <Command __id="3678" _type="MoveCaretCommand" caretOffset="1162" date="Tue Feb 23 21:29:37 EST 2021" docOffset="1459" starttimestamp="1614131043210" timestamp="2734578" />
  <Command __id="3680" _type="PauseCommand" date="Tue Feb 23 21:29:39 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2736068">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1490]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3679" _type="MoveCaretCommand" caretOffset="1147" date="Tue Feb 23 21:29:39 EST 2021" docOffset="1444" starttimestamp="1614131043210" timestamp="2736068" />
  <Command __id="3682" _type="PauseCommand" date="Tue Feb 23 21:29:48 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2744795">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8727]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3681" _type="MoveCaretCommand" caretOffset="890" date="Tue Feb 23 21:29:48 EST 2021" docOffset="1187" starttimestamp="1614131043210" timestamp="2744795" />
  <Command __id="3684" _type="PauseCommand" date="Tue Feb 23 21:29:49 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2745999">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1204]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3685" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:29:49 EST 2021" starttimestamp="1614131043210" timestamp="2746016" />
  <Command __id="3691" _type="PauseCommand" date="Tue Feb 23 21:29:55 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2751827">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4448]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="3690" _type="RunCommand" date="Tue Feb 23 21:29:55 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2751827" type="Run" />
  <Command __id="3692" _type="RunCommand" date="Tue Feb 23 21:29:55 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2751827" type="Run" />
  <Command __id="3693" _type="ConsoleOutput" date="Tue Feb 23 21:29:55 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2752645" type="ConsoleOutput">
    <outputString><![CDATA[[]
Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading 24
Reading 26
Reading 27
Reading 28
Reading 29
Reading 30
Reading 31
Reading 32
Reading 33
Reading pd1
Reading pd2
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml
Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"[]¶"), Diff(EQUAL,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml¶")]]]></diff>
  </Command>
  <Command __id="3695" _type="PauseCommand" date="Tue Feb 23 21:29:57 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2753953">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1308]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="3694" _type="ConsoleOutput" date="Tue Feb 23 21:29:57 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2753953" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"[]¶Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest"), Diff(EQUAL,"\Log2013-09-13-14-54-59-878.xml¶")]]]></diff>
  </Command>
  <Command __id="3696" _type="RunCommand" date="Tue Feb 23 21:29:57 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2754198" type="Debug" />
  <Command __id="3697" _type="RunCommand" date="Tue Feb 23 21:29:57 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2754198" type="Run" />
  <Command __id="3698" _type="RunCommand" date="Tue Feb 23 21:29:57 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2754199" type="Debug" />
  <Command __id="3699" _type="RunCommand" date="Tue Feb 23 21:29:57 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2754199" type="Run" />
  <Command __id="3701" _type="PauseCommand" date="Tue Feb 23 21:29:58 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2755686">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1487]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3700" _type="ShellCommand" date="Tue Feb 23 21:29:58 EST 2021" starttimestamp="1614131043210" timestamp="2755686" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3703" _type="PauseCommand" date="Tue Feb 23 21:30:08 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2765740">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10054]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3702" _type="ShellCommand" date="Tue Feb 23 21:30:08 EST 2021" starttimestamp="1614131043210" timestamp="2765740" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3705" _type="MoveCaretCommand" caretOffset="5258" date="Tue Feb 23 21:30:09 EST 2021" docOffset="5258" starttimestamp="1614131043210" timestamp="2766045" />
  <Command __id="3707" _type="PauseCommand" date="Tue Feb 23 21:30:12 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2768852">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2807]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3706" _type="MoveCaretCommand" caretOffset="2692" date="Tue Feb 23 21:30:12 EST 2021" docOffset="2692" starttimestamp="1614131043210" timestamp="2768852" />
  <Command __id="3709" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 23 21:30:13 EST 2021" starttimestamp="1614131043210" timestamp="2769841" />
  <Command __id="3711" _type="PauseCommand" date="Tue Feb 23 21:30:14 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2771161">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1320]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3710" _type="MoveCaretCommand" caretOffset="2695" date="Tue Feb 23 21:30:14 EST 2021" docOffset="2695" starttimestamp="1614131043210" timestamp="2771161" />
  <Command __id="3713" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Tue Feb 23 21:30:14 EST 2021" starttimestamp="1614131043210" timestamp="2771552" />
  <Command __id="3715" _type="PauseCommand" date="Tue Feb 23 21:30:54 EST 2021" range="30s-1m" starttimestamp="1614131043210" timestamp="2811598">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[40046]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3714" _type="MoveCaretCommand" caretOffset="4751" date="Tue Feb 23 21:30:54 EST 2021" docOffset="4751" starttimestamp="1614131043210" timestamp="2811598" />
  <Command __id="3717" _type="PauseCommand" date="Tue Feb 23 21:31:03 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2819791">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8193]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3716" _type="MoveCaretCommand" caretOffset="7648" date="Tue Feb 23 21:31:03 EST 2021" docOffset="7648" starttimestamp="1614131043210" timestamp="2819791" />
  <Command __id="3719" _type="InsertStringCommand" date="Tue Feb 23 21:31:03 EST 2021" starttimestamp="1614131043210" timestamp="2820452" timestamp2="2820452">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3721" _type="InsertStringCommand" date="Tue Feb 23 21:31:03 EST 2021" starttimestamp="1614131043210" timestamp="2820738" timestamp2="2820738">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3722" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:31:03 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2820778" />
  <Command __id="3724" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:31:04 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2820952" />
  <Command __id="3726" _type="InsertStringCommand" date="Tue Feb 23 21:31:04 EST 2021" starttimestamp="1614131043210" timestamp="2821024" timestamp2="2821024">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3728" _type="InsertStringCommand" date="Tue Feb 23 21:31:05 EST 2021" starttimestamp="1614131043210" timestamp="2821828" timestamp2="2821828">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3729" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:31:05 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2821863" />
  <Command __id="3736" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:31:06 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2823045" />
  <Command __id="3738" _type="InsertStringCommand" date="Tue Feb 23 21:31:06 EST 2021" starttimestamp="1614131043210" timestamp="2823060" timestamp2="2823060">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3740" _type="InsertStringCommand" date="Tue Feb 23 21:31:06 EST 2021" starttimestamp="1614131043210" timestamp="2823319" timestamp2="2823319">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3741" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:31:06 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2823361" />
  <Command __id="3743" _type="PauseCommand" date="Tue Feb 23 21:31:08 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2825097">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1736]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3745" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:31:08 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2825400" />
  <Command __id="3747" _type="InsertStringCommand" date="Tue Feb 23 21:31:08 EST 2021" starttimestamp="1614131043210" timestamp="2825415" timestamp2="2825415">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3749" _type="InsertStringCommand" date="Tue Feb 23 21:31:09 EST 2021" starttimestamp="1614131043210" timestamp="2825841" timestamp2="2825841">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3751" _type="InsertStringCommand" date="Tue Feb 23 21:31:09 EST 2021" starttimestamp="1614131043210" timestamp="2826159" timestamp2="2826159">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3753" _type="InsertStringCommand" date="Tue Feb 23 21:31:09 EST 2021" starttimestamp="1614131043210" timestamp="2826284" timestamp2="2826284">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3755" _type="InsertStringCommand" date="Tue Feb 23 21:31:09 EST 2021" starttimestamp="1614131043210" timestamp="2826405" timestamp2="2826405">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3757" _type="InsertStringCommand" date="Tue Feb 23 21:31:09 EST 2021" starttimestamp="1614131043210" timestamp="2826494" timestamp2="2826494">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="3758" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:31:10 EST 2021" starttimestamp="1614131043210" timestamp="2827124" />
  <Command __id="3760" _type="InsertStringCommand" date="Tue Feb 23 21:31:10 EST 2021" starttimestamp="1614131043210" timestamp="2827462" timestamp2="2827462">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3761" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:31:10 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2827503" />
  <Command __id="3764" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:31:11 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2828099" />
  <Command __id="3766" _type="InsertStringCommand" date="Tue Feb 23 21:31:11 EST 2021" starttimestamp="1614131043210" timestamp="2828173" timestamp2="2828173">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3768" _type="UndoCommand" date="Tue Feb 23 21:31:11 EST 2021" starttimestamp="1614131043210" timestamp="2828774" />
  <Command __id="3770" _type="InsertStringCommand" date="Tue Feb 23 21:31:12 EST 2021" starttimestamp="1614131043210" timestamp="2829103" timestamp2="2829103">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3772" _type="InsertStringCommand" date="Tue Feb 23 21:31:12 EST 2021" starttimestamp="1614131043210" timestamp="2829181" timestamp2="2829181">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3773" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:31:12 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="2829223" />
  <Command __id="3776" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:31:13 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="2829854" />
  <Command __id="3778" _type="InsertStringCommand" date="Tue Feb 23 21:31:13 EST 2021" starttimestamp="1614131043210" timestamp="2829867" timestamp2="2829867">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3780" _type="InsertStringCommand" date="Tue Feb 23 21:31:13 EST 2021" starttimestamp="1614131043210" timestamp="2830277" timestamp2="2830277">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3781" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:31:13 EST 2021" starttimestamp="1614131043210" timestamp="2830664" />
  <Command __id="3782" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:31:13 EST 2021" starttimestamp="1614131043210" timestamp="2830747" />
  <Command __id="3783" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:31:14 EST 2021" starttimestamp="1614131043210" timestamp="2830867" />
  <Command __id="3785" _type="PauseCommand" date="Tue Feb 23 21:31:23 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2840428">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9561]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3784" _type="MoveCaretCommand" caretOffset="7906" date="Tue Feb 23 21:31:23 EST 2021" docOffset="7906" starttimestamp="1614131043210" timestamp="2840428" />
  <Command __id="3787" _type="PauseCommand" date="Tue Feb 23 21:31:27 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2844199">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3771]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3786" _type="MoveCaretCommand" caretOffset="7868" date="Tue Feb 23 21:31:27 EST 2021" docOffset="7868" starttimestamp="1614131043210" timestamp="2844199" />
  <Command __id="3788" _type="MoveCaretCommand" caretOffset="7870" date="Tue Feb 23 21:31:27 EST 2021" docOffset="7870" starttimestamp="1614131043210" timestamp="2844604" />
  <Command __id="3790" _type="PauseCommand" date="Tue Feb 23 21:31:35 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2852397">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7793]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3789" _type="SelectTextCommand" caretOffset="7657" date="Tue Feb 23 21:31:35 EST 2021" end="7716" start="7657" starttimestamp="1614131043210" timestamp="2852397" />
  <Command __id="3792" _type="PauseCommand" date="Tue Feb 23 21:31:36 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2853487">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1090]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3793" _type="CutCommand" date="Tue Feb 23 21:31:36 EST 2021" starttimestamp="1614131043210" timestamp="2853506" />
  <DocumentChange __id="3576" _type="Replace" date="Tue Feb 23 21:27:49 EST 2021" docASTNodeCount="6187" docActiveCodeLength="35247" docExpressionCount="4282" docLength="37685" endLine="991" insertionLength="19" int_docASTNodeCount="6187" int_docActiveCodeLength="35228" int_docExpressionCount="4281" int_docLength="37666" length="5" offset="35025" startLine="991" starttimestamp="1614131043210" timestamp="2626706">
    <deletedText><![CDATA[getst]]></deletedText>
    <insertedText><![CDATA[getStartTimestamp()]]></insertedText>
  </DocumentChange>
  <Command __id="3597" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:28:29 EST 2021" docASTNodeCount="142" docActiveCodeLength="1154" docExpressionCount="84" docLength="2833" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2666388">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶//		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <Command __id="3600" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:28:30 EST 2021" docASTNodeCount="6187" docActiveCodeLength="35247" docExpressionCount="4282" docLength="37685" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2667050">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 10*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 10*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					if (!studentFolder.getName().equals("16")) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶							long endTimestamp = Long.MAX_VALUE;¶							if (timestamps.containsKey(studentFolder.getName())) {¶								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];¶								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];¶							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶									continue;¶								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp("), Diff(DELETE,"0"), Diff(INSERT,"last.getStartTimestamp()"), Diff(EQUAL,");¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";
	private Map<String, Long[]> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			SimpleDateFormat df = new SimpleDateFormat("HH:mm");
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			cr.readNext();
			String[] token = null;
			while ((token = cr.readNext()) != null) {
				long startTime = df.parse(token[4]).getTime();
				if (startTime < 10*3600*1000) {
					startTime += 12*3600*1000;
				}
				long endTime = df.parse(token[5]).getTime();
				if (endTime < 10*3600*1000) {
					endTime += 12*3600*1000;
				}
				Long[] times = {startTime, endTime};
				timestamps.put(token[0], times);
			}
			List<String[]> tokens = cr.readAll();
			System.out.println(tokens);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					if (!studentFolder.getName().equals("16")) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							
							long startTimestamp = getLogFileCreationTime(file);
							long logStartTimestamp = startTimestamp;
							long endTimestamp = Long.MAX_VALUE;
							if (timestamps.containsKey(studentFolder.getName())) {
								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];
								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];
							}
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
								webCommand = webCommandIterator.next();
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - logStartTimestamp;
							}
							for (EHICommand command : commands) {
								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {
									continue;
								}
								command.setStartTimestamp(logStartTimestamp);
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(logStartTimestamp);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - logStartTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(last.getStartTimestamp());
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <Command __id="3677" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:29:37 EST 2021" docASTNodeCount="142" docActiveCodeLength="1154" docExpressionCount="84" docLength="2833" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2734465">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶//		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="3683" _type="Delete" date="Tue Feb 23 21:29:49 EST 2021" docASTNodeCount="150" docActiveCodeLength="1206" docExpressionCount="90" docLength="2831" endLine="31" length="2" offset="1155" startLine="31" starttimestamp="1614131043210" timestamp="2745999">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="3704" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:30:09 EST 2021" docASTNodeCount="6187" docActiveCodeLength="35247" docExpressionCount="4282" docLength="37685" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2765882">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 10*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 10*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶			List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					if (!studentFolder.getName().equals("16")) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶							long endTimestamp = Long.MAX_VALUE;¶							if (timestamps.containsKey(studentFolder.getName())) {¶								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];¶								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];¶							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶									continue;¶								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3708" _type="Delete" date="Tue Feb 23 21:30:13 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35173" docExpressionCount="4270" docLength="37611" endLine="80" length="74" offset="2683" repeat="2" startLine="78" starttimestamp="1614131043210" timestamp="2769836" timestamp2="2771548">
    <text><![CDATA[			List<String[]> tokens = cr.readAll();
			System.out.println(tokens);
]]></text>
  </DocumentChange>
  <DocumentChange __id="3718" _type="Insert" date="Tue Feb 23 21:31:03 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35184" docExpressionCount="4270" docLength="37622" length="11" offset="7648" repeat="3" starttimestamp="1614131043210" timestamp="2820442" timestamp2="2820941">
    <text><![CDATA[
							if]]></text>
  </DocumentChange>
  <DocumentChange __id="3725" _type="Replace" date="Tue Feb 23 21:31:04 EST 2021" docASTNodeCount="6171" docActiveCodeLength="35231" docExpressionCount="4271" docLength="37669" endLine="215" insertionLength="49" int_docASTNodeCount="6168" int_docActiveCodeLength="35182" int_docExpressionCount="4270" int_docLength="37620" length="2" offset="7657" startLine="215" starttimestamp="1614131043210" timestamp="2820980">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
								
							}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3727" _type="Replace" date="Tue Feb 23 21:31:05 EST 2021" docASTNodeCount="6171" docActiveCodeLength="35210" docExpressionCount="4271" docLength="37648" endLine="215" insertionLength="1" int_docASTNodeCount="6171" int_docActiveCodeLength="35209" int_docExpressionCount="4271" int_docLength="37647" length="22" offset="7661" startLine="215" starttimestamp="1614131043210" timestamp="2821819">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3730" _type="Insert" date="Tue Feb 23 21:31:05 EST 2021" docASTNodeCount="6171" docActiveCodeLength="35216" docExpressionCount="4271" docLength="37654" length="6" offset="7662" repeat="6" starttimestamp="1614131043210" timestamp="2822019" timestamp2="2822871">
    <text><![CDATA[ewcomm]]></text>
  </DocumentChange>
  <DocumentChange __id="3737" _type="Replace" date="Tue Feb 23 21:31:06 EST 2021" docASTNodeCount="6171" docActiveCodeLength="35220" docExpressionCount="4271" docLength="37658" endLine="215" insertionLength="11" int_docASTNodeCount="6171" int_docActiveCodeLength="35209" int_docExpressionCount="4271" int_docLength="37647" length="7" offset="7661" startLine="215" starttimestamp="1614131043210" timestamp="2823053">
    <deletedText><![CDATA[newcomm]]></deletedText>
    <insertedText><![CDATA[newCommands]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3739" _type="Insert" date="Tue Feb 23 21:31:06 EST 2021" docASTNodeCount="6173" docActiveCodeLength="35223" docExpressionCount="4273" docLength="37661" length="3" offset="7672" repeat="3" starttimestamp="1614131043210" timestamp="2823317" timestamp2="2825152">
    <text><![CDATA[.si]]></text>
  </DocumentChange>
  <DocumentChange __id="3746" _type="Replace" date="Tue Feb 23 21:31:08 EST 2021" docASTNodeCount="6173" docActiveCodeLength="35227" docExpressionCount="4273" docLength="37665" endLine="215" insertionLength="6" int_docASTNodeCount="6173" int_docActiveCodeLength="35221" int_docExpressionCount="4272" int_docLength="37659" length="2" offset="7673" startLine="215" starttimestamp="1614131043210" timestamp="2825408">
    <deletedText><![CDATA[si]]></deletedText>
    <insertedText><![CDATA[size()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3748" _type="Insert" date="Tue Feb 23 21:31:09 EST 2021" docASTNodeCount="6175" docActiveCodeLength="35232" docExpressionCount="4275" docLength="37670" length="5" offset="7679" repeat="5" starttimestamp="1614131043210" timestamp="2825838" timestamp2="2826492">
    <text><![CDATA[ == 0]]></text>
  </DocumentChange>
  <DocumentChange __id="3759" _type="Insert" date="Tue Feb 23 21:31:10 EST 2021" docASTNodeCount="5566" docActiveCodeLength="35235" docExpressionCount="3864" docLength="37673" length="3" offset="7697" repeat="3" starttimestamp="1614131043210" timestamp="2827457" timestamp2="2827854">
    <text><![CDATA[con]]></text>
  </DocumentChange>
  <DocumentChange __id="3765" _type="Replace" date="Tue Feb 23 21:31:11 EST 2021" docASTNodeCount="5566" docActiveCodeLength="35268" docExpressionCount="3864" docLength="37706" endLine="216" insertionLength="36" int_docASTNodeCount="6175" int_docActiveCodeLength="35232" int_docExpressionCount="4275" int_docLength="37670" length="3" offset="7697" startLine="216" starttimestamp="1614131043210" timestamp="2828106">
    <deletedText><![CDATA[con]]></deletedText>
    <insertedText><![CDATA[convertToHourMinuteSecond(timeSpent)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3767" _type="Replace" date="Tue Feb 23 21:31:11 EST 2021" docASTNodeCount="5566" docActiveCodeLength="35235" docExpressionCount="3864" docLength="37673" endLine="216" insertionLength="3" int_docASTNodeCount="6175" int_docActiveCodeLength="35232" int_docExpressionCount="4275" int_docLength="37670" length="36" offset="7697" startLine="216" starttimestamp="1614131043210" timestamp="2828745">
    <deletedText><![CDATA[convertToHourMinuteSecond(timeSpent)]]></deletedText>
    <insertedText><![CDATA[con]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3769" _type="Replace" date="Tue Feb 23 21:31:12 EST 2021" docASTNodeCount="5566" docActiveCodeLength="35233" docExpressionCount="3864" docLength="37671" endLine="216" insertionLength="1" int_docASTNodeCount="6175" int_docActiveCodeLength="35232" int_docExpressionCount="4275" int_docLength="37670" length="3" offset="7697" startLine="216" starttimestamp="1614131043210" timestamp="2829097">
    <deletedText><![CDATA[con]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3771" _type="Insert" date="Tue Feb 23 21:31:12 EST 2021" docASTNodeCount="5566" docActiveCodeLength="35236" docExpressionCount="3864" docLength="37674" length="3" offset="7698" repeat="3" starttimestamp="1614131043210" timestamp="2829176" timestamp2="2829430">
    <text><![CDATA[ont]]></text>
  </DocumentChange>
  <DocumentChange __id="3777" _type="Replace" date="Tue Feb 23 21:31:13 EST 2021" docASTNodeCount="5566" docActiveCodeLength="35240" docExpressionCount="3864" docLength="37678" endLine="216" insertionLength="8" int_docASTNodeCount="6175" int_docActiveCodeLength="35232" int_docExpressionCount="4275" int_docLength="37670" length="4" offset="7697" startLine="216" starttimestamp="1614131043210" timestamp="2829861">
    <deletedText><![CDATA[cont]]></deletedText>
    <insertedText><![CDATA[continue]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3779" _type="Insert" date="Tue Feb 23 21:31:13 EST 2021" docASTNodeCount="6176" docActiveCodeLength="35241" docExpressionCount="4275" docLength="37679" length="1" offset="7705" starttimestamp="1614131043210" timestamp="2830272">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3791" _type="Delete" date="Tue Feb 23 21:31:36 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35182" docExpressionCount="4270" docLength="37620" endLine="217" length="59" offset="7657" startLine="215" starttimestamp="1614131043210" timestamp="2853487">
    <text><![CDATA[if (newCommands.size() == 0) {
								continue;
							}]]></text>
  </DocumentChange>
  <DocumentChange __id="3796" _type="Insert" date="Tue Feb 23 21:31:40 EST 2021" docASTNodeCount="6168" docActiveCodeLength="35192" docExpressionCount="4270" docLength="37630" length="10" offset="8083" starttimestamp="1614131043210" timestamp="2856813">
    <text><![CDATA[
								]]></text>
  </DocumentChange>
  <Command __id="3795" _type="PauseCommand" date="Tue Feb 23 21:31:39 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2856322">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[2816]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3794" _type="MoveCaretCommand" caretOffset="8083" date="Tue Feb 23 21:31:39 EST 2021" docOffset="8083" starttimestamp="1614131043210" timestamp="2856322" />
  <Command __id="3797" _type="InsertStringCommand" date="Tue Feb 23 21:31:40 EST 2021" starttimestamp="1614131043210" timestamp="2856824" timestamp2="2856824">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3799" _type="PasteCommand" date="Tue Feb 23 21:31:40 EST 2021" starttimestamp="1614131043210" timestamp="2857206" />
  <Command __id="3805" _type="PauseCommand" date="Tue Feb 23 21:31:53 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2870230">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[11238]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="3804" _type="RunCommand" date="Tue Feb 23 21:31:53 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2870230" type="Run" />
  <Command __id="3806" _type="RunCommand" date="Tue Feb 23 21:31:53 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2870230" type="Run" />
  <Command __id="3807" _type="ConsoleOutput" date="Tue Feb 23 21:31:54 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2871091" type="ConsoleOutput">
    <outputString><![CDATA[Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading 24
Reading 26
Reading 27
Reading 28
Reading 29
Reading 30
Reading 31
Reading 32
Reading 33
Reading pd1
Reading pd2
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file"), Diff(INSERT,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-13-14-"), Diff(DELETE,"54-59-878.xml¶Finished writing to file"), Diff(INSERT,"36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-13-14-54-59-878.xml¶")]]]></diff>
  </Command>
  <Command __id="3809" _type="PauseCommand" date="Tue Feb 23 21:31:55 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2872395">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1304]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="3808" _type="ConsoleOutput" date="Tue Feb 23 21:31:55 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2872395" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2¶Reading"), Diff(INSERT,"Writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-13-14-"), Diff(DELETE,"36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Reading"), Diff(INSERT,"54-59-878.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-13-14-54-59-878.xml¶")]]]></diff>
  </Command>
  <Command __id="3810" _type="RunCommand" date="Tue Feb 23 21:31:55 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2872647" type="Debug" />
  <Command __id="3811" _type="RunCommand" date="Tue Feb 23 21:31:55 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2872647" type="Run" />
  <Command __id="3812" _type="RunCommand" date="Tue Feb 23 21:31:55 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2872647" type="Debug" />
  <Command __id="3813" _type="RunCommand" date="Tue Feb 23 21:31:55 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2872647" type="Run" />
  <Command __id="3815" _type="PauseCommand" date="Tue Feb 23 21:31:57 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2873814">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1167]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3814" _type="ShellCommand" date="Tue Feb 23 21:31:57 EST 2021" starttimestamp="1614131043210" timestamp="2873814" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3821" _type="PauseCommand" date="Tue Feb 23 21:32:40 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2916824">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BreakPointCommand]]></prev>
    <pause><![CDATA[2256]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="3820" _type="RunCommand" date="Tue Feb 23 21:32:40 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2916824" type="Run" />
  <Command __id="3822" _type="RunCommand" date="Tue Feb 23 21:32:40 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2916824" type="Run" />
  <Command __id="3823" _type="RunCommand" date="Tue Feb 23 21:32:40 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2916926" type="Run" />
  <Command __id="3824" _type="RunCommand" date="Tue Feb 23 21:32:40 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2916956" type="Run" />
  <Command __id="3825" _type="RunCommand" date="Tue Feb 23 21:32:40 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2917153" type="Run" />
  <Command __id="3826" _type="RunCommand" date="Tue Feb 23 21:32:41 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2917790" type="Run" />
  <Command __id="3831" _type="PauseCommand" date="Tue Feb 23 21:32:50 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2927767">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1091]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="3830" _type="RunCommand" date="Tue Feb 23 21:32:50 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2927767" type="Run" />
  <Command __id="3832" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Tue Feb 23 21:32:50 EST 2021" starttimestamp="1614131043210" timestamp="2927767" />
  <Command __id="3833" _type="ConsoleOutput" date="Tue Feb 23 21:32:51 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="2927844" type="ConsoleOutput">
    <outputString><![CDATA[Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading 24
Reading 26
Reading 27
Reading 28
Reading 29
Reading 30
Reading 31
Reading 32
Reading 33
Reading pd1
Reading pd2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml"), Diff(INSERT,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3835" _type="PauseCommand" date="Tue Feb 23 21:32:57 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2933955">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6111]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3834" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Feb 23 21:32:57 EST 2021" starttimestamp="1614131043210" timestamp="2933955" />
  <Command __id="3836" _type="RunCommand" date="Tue Feb 23 21:32:57 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2933956" type="Run" />
  <Command __id="3838" _type="PauseCommand" date="Tue Feb 23 21:33:04 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2941001">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[7045]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3837" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Feb 23 21:33:04 EST 2021" starttimestamp="1614131043210" timestamp="2941001" />
  <Command __id="3839" _type="RunCommand" date="Tue Feb 23 21:33:04 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2941001" type="Run" />
  <Command __id="3841" _type="PauseCommand" date="Tue Feb 23 21:33:14 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2951047">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[10046]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3840" _type="MoveCaretCommand" caretOffset="5035" date="Tue Feb 23 21:33:14 EST 2021" docOffset="5035" starttimestamp="1614131043210" timestamp="2951047" />
  <Command __id="3843" _type="PauseCommand" date="Tue Feb 23 21:33:20 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="2957194">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6147]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3842" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Tue Feb 23 21:33:20 EST 2021" starttimestamp="1614131043210" timestamp="2957194" />
  <Command __id="3844" _type="RunCommand" date="Tue Feb 23 21:33:20 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2957195" type="Run" />
  <Command __id="3846" _type="PauseCommand" date="Tue Feb 23 21:33:37 EST 2021" range="10s-20s" starttimestamp="1614131043210" timestamp="2974344">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[17149]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3845" _type="ShellCommand" date="Tue Feb 23 21:33:37 EST 2021" starttimestamp="1614131043210" timestamp="2974344" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3848" _type="PauseCommand" date="Tue Feb 23 21:33:38 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2975765">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1421]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="3847" _type="CopyCommand" date="Tue Feb 23 21:33:38 EST 2021" starttimestamp="1614131043210" timestamp="2975765" />
  <Command __id="3849" _type="ShellCommand" date="Tue Feb 23 21:33:39 EST 2021" starttimestamp="1614131043210" timestamp="2976317" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3851" _type="MoveCaretCommand" caretOffset="888" date="Tue Feb 23 21:33:39 EST 2021" docOffset="1185" starttimestamp="1614131043210" timestamp="2976547" />
  <Command __id="3853" _type="PauseCommand" date="Tue Feb 23 21:33:43 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2980226">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3679]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3852" _type="SelectTextCommand" caretOffset="1622" date="Tue Feb 23 21:33:43 EST 2021" end="1622" start="1566" starttimestamp="1614131043210" timestamp="2980226" />
  <Command __id="3856" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:33:44 EST 2021" starttimestamp="1614131043210" timestamp="2981009" />
  <Command __id="3858" _type="PauseCommand" date="Tue Feb 23 21:33:48 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2984874">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3865]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3857" _type="MoveCaretCommand" caretOffset="1589" date="Tue Feb 23 21:33:48 EST 2021" docOffset="1886" starttimestamp="1614131043210" timestamp="2984874" />
  <Command __id="3860" _type="PauseCommand" date="Tue Feb 23 21:33:50 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2986843">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1969]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3859" _type="SelectTextCommand" caretOffset="1573" date="Tue Feb 23 21:33:50 EST 2021" end="1595" start="1573" starttimestamp="1614131043210" timestamp="2986843" />
  <Command __id="3862" _type="PasteCommand" date="Tue Feb 23 21:33:50 EST 2021" starttimestamp="1614131043210" timestamp="2987257" />
  <Command __id="3864" _type="PauseCommand" date="Tue Feb 23 21:33:51 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2988395">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1138]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3863" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:33:51 EST 2021" starttimestamp="1614131043210" timestamp="2988395" />
  <Command __id="3865" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:33:51 EST 2021" starttimestamp="1614131043210" timestamp="2988483" />
  <Command __id="3866" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:33:51 EST 2021" starttimestamp="1614131043210" timestamp="2988561" />
  <Command __id="3867" _type="RunCommand" date="Tue Feb 23 21:33:51 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2988572" type="Run" />
  <Command __id="3869" _type="PauseCommand" date="Tue Feb 23 21:33:53 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2990276">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1704]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3868" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Feb 23 21:33:53 EST 2021" starttimestamp="1614131043210" timestamp="2990276" />
  <Command __id="3870" _type="RunCommand" date="Tue Feb 23 21:33:53 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2990313" type="Debug" />
  <Command __id="3871" _type="RunCommand" date="Tue Feb 23 21:33:53 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="2990313" type="Debug" />
  <Command __id="3872" _type="RunCommand" date="Tue Feb 23 21:33:53 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2990313" type="Run" />
  <Command __id="3874" _type="PauseCommand" date="Tue Feb 23 21:33:55 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2991856">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1543]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3873" _type="MoveCaretCommand" caretOffset="823" date="Tue Feb 23 21:33:55 EST 2021" docOffset="1120" starttimestamp="1614131043210" timestamp="2991856" />
  <Command __id="3876" _type="PauseCommand" date="Tue Feb 23 21:33:56 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2993022">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1166]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3877" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:33:56 EST 2021" starttimestamp="1614131043210" timestamp="2993037" />
  <Command __id="3879" _type="PauseCommand" date="Tue Feb 23 21:33:57 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="2994168">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1131]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3878" _type="MoveCaretCommand" caretOffset="874" date="Tue Feb 23 21:33:57 EST 2021" docOffset="1171" starttimestamp="1614131043210" timestamp="2994168" />
  <Command __id="3881" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:33:57 EST 2021" starttimestamp="1614131043210" timestamp="2994513" />
  <Command __id="3882" _type="MoveCaretCommand" caretOffset="1160" date="Tue Feb 23 21:33:58 EST 2021" docOffset="1457" starttimestamp="1614131043210" timestamp="2994980" />
  <Command __id="3884" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:33:58 EST 2021" starttimestamp="1614131043210" timestamp="2995432" />
  <Command __id="3886" _type="PauseCommand" date="Tue Feb 23 21:34:02 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="2999403">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3971]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3885" _type="MoveCaretCommand" caretOffset="608" date="Tue Feb 23 21:34:02 EST 2021" docOffset="905" starttimestamp="1614131043210" timestamp="2999403" />
  <Command __id="3888" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:34:03 EST 2021" starttimestamp="1614131043210" timestamp="2999875" />
  <Command __id="3889" _type="ShellCommand" date="Tue Feb 23 21:34:04 EST 2021" starttimestamp="1614131043210" timestamp="3000830" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3891" _type="PauseCommand" date="Tue Feb 23 21:34:05 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3002191">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1361]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3890" _type="ShellCommand" date="Tue Feb 23 21:34:05 EST 2021" starttimestamp="1614131043210" timestamp="3002191" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3892" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:34:05 EST 2021" starttimestamp="1614131043210" timestamp="3002341" />
  <Command __id="3893" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:34:05 EST 2021" starttimestamp="1614131043210" timestamp="3002421" />
  <Command __id="3894" _type="RunCommand" date="Tue Feb 23 21:34:05 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3002453" type="Run" />
  <Command __id="3895" _type="RunCommand" date="Tue Feb 23 21:34:05 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3002453" type="Run" />
  <Command __id="3896" _type="RunCommand" date="Tue Feb 23 21:34:05 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="3002569" type="Debug" />
  <Command __id="3897" _type="RunCommand" date="Tue Feb 23 21:34:05 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3002569" type="Run" />
  <Command __id="3898" _type="RunCommand" date="Tue Feb 23 21:34:05 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="3002569" type="Debug" />
  <Command __id="3899" _type="RunCommand" date="Tue Feb 23 21:34:05 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3002569" type="Run" />
  <Command __id="3900" _type="ConsoleOutput" date="Tue Feb 23 21:34:05 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3002616" type="ConsoleOutput">
    <outputString><![CDATA[Fri Sep 13 17:41:00 EDT 2013
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2"), Diff(INSERT,"Fri Sep 13 17:41:00 EDT 2013"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3902" _type="PauseCommand" date="Tue Feb 23 21:34:09 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3005847">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3231]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3903" _type="MoveCaretCommand" caretOffset="5184" date="Tue Feb 23 21:34:09 EST 2021" docOffset="5184" starttimestamp="1614131043210" timestamp="3005958" />
  <Command __id="3905" _type="PauseCommand" date="Tue Feb 23 21:34:12 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3009560">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3602]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3904" _type="MoveCaretCommand" caretOffset="5074" date="Tue Feb 23 21:34:12 EST 2021" docOffset="5074" starttimestamp="1614131043210" timestamp="3009560" />
  <Command __id="3907" _type="PauseCommand" date="Tue Feb 23 21:34:14 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3011726">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2166]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3908" _type="InsertStringCommand" date="Tue Feb 23 21:34:14 EST 2021" starttimestamp="1614131043210" timestamp="3011733" timestamp2="3011733">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3910" _type="InsertStringCommand" date="Tue Feb 23 21:34:15 EST 2021" starttimestamp="1614131043210" timestamp="3011876" timestamp2="3011876">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="3912" _type="InsertStringCommand" date="Tue Feb 23 21:34:15 EST 2021" starttimestamp="1614131043210" timestamp="3011948" timestamp2="3011948">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3914" _type="InsertStringCommand" date="Tue Feb 23 21:34:15 EST 2021" starttimestamp="1614131043210" timestamp="3012268" timestamp2="3012268">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="3915" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:34:15 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="3012310" />
  <Command __id="3920" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:34:17 EST 2021" starttimestamp="1614131043210" timestamp="3013824" />
  <Command __id="3926" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Tue Feb 23 21:34:18 EST 2021" starttimestamp="1614131043210" timestamp="3015662" />
  <Command __id="3928" _type="PauseCommand" date="Tue Feb 23 21:34:20 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3017015">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1353]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3932" _type="PauseCommand" date="Tue Feb 23 21:34:21 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3018322">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1115]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3936" _type="PauseCommand" date="Tue Feb 23 21:34:25 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3022438">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[3844]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3935" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:34:25 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="3022438" />
  <Command __id="3938" _type="PauseCommand" date="Tue Feb 23 21:34:27 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3024404">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1966]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3939" _type="SelectTextCommand" caretOffset="15358" date="Tue Feb 23 21:34:27 EST 2021" end="15358" start="15336" starttimestamp="1614131043210" timestamp="3024577" />
  <Command __id="3941" _type="PauseCommand" date="Tue Feb 23 21:34:35 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="3032626">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[8049]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3942" _type="MoveCaretCommand" caretOffset="5077" date="Tue Feb 23 21:34:35 EST 2021" docOffset="5077" starttimestamp="1614131043210" timestamp="3032749" />
  <Command __id="3944" _type="PauseCommand" date="Tue Feb 23 21:34:39 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3035890">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3141]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3945" _type="InsertStringCommand" date="Tue Feb 23 21:34:39 EST 2021" starttimestamp="1614131043210" timestamp="3035896" timestamp2="3035896">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="3947" _type="InsertStringCommand" date="Tue Feb 23 21:34:39 EST 2021" starttimestamp="1614131043210" timestamp="3036016" timestamp2="3036016">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="3949" _type="InsertStringCommand" date="Tue Feb 23 21:34:40 EST 2021" starttimestamp="1614131043210" timestamp="3036924" timestamp2="3036924">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="3951" _type="InsertStringCommand" date="Tue Feb 23 21:34:40 EST 2021" starttimestamp="1614131043210" timestamp="3037304" timestamp2="3037304">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3952" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Feb 23 21:34:40 EST 2021" start_end="START" starttimestamp="1614131043210" timestamp="3037345" />
  <Command __id="3957" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Feb 23 21:34:42 EST 2021" start_end="END" starttimestamp="1614131043210" timestamp="3039592" />
  <Command __id="3959" _type="InsertStringCommand" date="Tue Feb 23 21:34:42 EST 2021" starttimestamp="1614131043210" timestamp="3039606" timestamp2="3039606">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3961" _type="PauseCommand" date="Tue Feb 23 21:34:45 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3042337">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2731]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3960" _type="SelectTextCommand" caretOffset="5087" date="Tue Feb 23 21:34:45 EST 2021" end="5087" start="5075" starttimestamp="1614131043210" timestamp="3042337" />
  <Command __id="3963" _type="PauseCommand" date="Tue Feb 23 21:34:46 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3043493">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1156]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="3962" _type="CopyCommand" date="Tue Feb 23 21:34:46 EST 2021" starttimestamp="1614131043210" timestamp="3043493" />
  <Command __id="3964" _type="MoveCaretCommand" caretOffset="5184" date="Tue Feb 23 21:34:47 EST 2021" docOffset="5184" starttimestamp="1614131043210" timestamp="3044167" />
  <Command __id="3966" _type="InsertStringCommand" date="Tue Feb 23 21:34:47 EST 2021" starttimestamp="1614131043210" timestamp="3044258" timestamp2="3044258">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3968" _type="PasteCommand" date="Tue Feb 23 21:34:47 EST 2021" starttimestamp="1614131043210" timestamp="3044537" />
  <Command __id="3969" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:34:48 EST 2021" starttimestamp="1614131043210" timestamp="3045315" />
  <Command __id="3970" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:34:48 EST 2021" starttimestamp="1614131043210" timestamp="3045334" />
  <Command __id="3971" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:34:48 EST 2021" starttimestamp="1614131043210" timestamp="3045499" />
  <Command __id="3973" _type="PauseCommand" date="Tue Feb 23 21:34:53 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3050075">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4576]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3974" _type="MoveCaretCommand" caretOffset="610" date="Tue Feb 23 21:34:53 EST 2021" docOffset="907" starttimestamp="1614131043210" timestamp="3050180" />
  <DocumentChange __id="3798" _type="Replace" date="Tue Feb 23 21:31:40 EST 2021" docASTNodeCount="6176" docActiveCodeLength="35253" docExpressionCount="4275" docLength="37691" endLine="226" insertionLength="69" int_docASTNodeCount="6168" int_docActiveCodeLength="35184" int_docExpressionCount="4270" int_docLength="37622" length="8" offset="8085" startLine="226" starttimestamp="1614131043210" timestamp="2857195">
    <deletedText><![CDATA[								]]></deletedText>
    <insertedText><![CDATA[								if (newCommands.size() == 0) {
									continue;
								}]]></insertedText>
  </DocumentChange>
  <Command __id="3850" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:33:39 EST 2021" docASTNodeCount="150" docActiveCodeLength="1206" docExpressionCount="90" docLength="2831" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="2976419">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶//		Date d = new Date(1379180409552L+4869423L);¶//		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		((AExperimentalReplayer)replayer).readTimestamp();
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);
//		System.out.println(s1.equals(s2));
//		analyzer.addAnalyzerListener(replayer);	
		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
//		Date d = new Date(1379180409552L+4869423L);
//		System.out.println(d);
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <DocumentChange __id="3854" _type="Delete" date="Tue Feb 23 21:33:44 EST 2021" docASTNodeCount="161" docActiveCodeLength="1251" docExpressionCount="97" docLength="2829" endLine="48" length="2" offset="1850" startLine="48" starttimestamp="1614131043210" timestamp="2980990">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3855" _type="Delete" date="Tue Feb 23 21:33:44 EST 2021" docASTNodeCount="168" docActiveCodeLength="1275" docExpressionCount="103" docLength="2827" endLine="49" length="2" offset="1897" startLine="49" starttimestamp="1614131043210" timestamp="2980992">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3861" _type="Replace" date="Tue Feb 23 21:33:50 EST 2021" docASTNodeCount="166" docActiveCodeLength="1266" docExpressionCount="101" docLength="2818" endLine="48" insertionLength="13" int_docASTNodeCount="166" int_docActiveCodeLength="1253" int_docExpressionCount="101" int_docLength="2805" length="22" offset="1870" startLine="48" starttimestamp="1614131043210" timestamp="2987250">
    <deletedText><![CDATA[1379180409552L+4869423]]></deletedText>
    <insertedText><![CDATA[1379108460000]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3875" _type="Insert" date="Tue Feb 23 21:33:56 EST 2021" docASTNodeCount="159" docActiveCodeLength="1217" docExpressionCount="96" docLength="2820" length="2" offset="1104" starttimestamp="1614131043210" timestamp="2993022">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3880" _type="Insert" date="Tue Feb 23 21:33:57 EST 2021" docASTNodeCount="151" docActiveCodeLength="1165" docExpressionCount="90" docLength="2822" length="2" offset="1157" starttimestamp="1614131043210" timestamp="2994500">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3883" _type="Insert" date="Tue Feb 23 21:33:58 EST 2021" docASTNodeCount="146" docActiveCodeLength="1102" docExpressionCount="86" docLength="2824" length="2" offset="1444" starttimestamp="1614131043210" timestamp="2995418">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3887" _type="Insert" date="Tue Feb 23 21:34:03 EST 2021" docASTNodeCount="140" docActiveCodeLength="1072" docExpressionCount="82" docLength="2826" length="2" offset="884" starttimestamp="1614131043210" timestamp="2999862">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="3901" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:34:09 EST 2021" docASTNodeCount="6176" docActiveCodeLength="35253" docExpressionCount="4275" docLength="37691" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3005847">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 10*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 10*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		"), Diff(DELETE,"	List<String[]> tokens = cr.readAll();¶			System.out.println(tokens);¶		"), Diff(EQUAL,"} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					if (!studentFolder.getName().equals("16")) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶							long endTimestamp = Long.MAX_VALUE;¶							if (timestamps.containsKey(studentFolder.getName())) {¶								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];¶								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];¶							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶									continue;¶								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							"), Diff(INSERT,"¶							"), Diff(EQUAL,"String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								"), Diff(INSERT,"if (newCommands.size() == 0) {¶									continue;¶								}¶								"), Diff(EQUAL,"newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";
	private Map<String, Long[]> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			SimpleDateFormat df = new SimpleDateFormat("HH:mm");
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			cr.readNext();
			String[] token = null;
			while ((token = cr.readNext()) != null) {
				long startTime = df.parse(token[4]).getTime();
				if (startTime < 10*3600*1000) {
					startTime += 12*3600*1000;
				}
				long endTime = df.parse(token[5]).getTime();
				if (endTime < 10*3600*1000) {
					endTime += 12*3600*1000;
				}
				Long[] times = {startTime, endTime};
				timestamps.put(token[0], times);
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					if (!studentFolder.getName().equals("16")) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							
							long startTimestamp = getLogFileCreationTime(file);
							long logStartTimestamp = startTimestamp;
							long endTimestamp = Long.MAX_VALUE;
							if (timestamps.containsKey(studentFolder.getName())) {
								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0];
								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];
							}
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
								webCommand = webCommandIterator.next();
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - logStartTimestamp;
							}
							for (EHICommand command : commands) {
								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {
									continue;
								}
								command.setStartTimestamp(logStartTimestamp);
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(logStartTimestamp);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - logStartTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								if (newCommands.size() == 0) {
									continue;
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(last.getStartTimestamp());
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="3906" _type="Insert" date="Tue Feb 23 21:34:14 EST 2021" docASTNodeCount="6178" docActiveCodeLength="35260" docExpressionCount="4277" docLength="37698" length="7" offset="5074" repeat="7" starttimestamp="1614131043210" timestamp="3011726" timestamp2="3013100">
    <text><![CDATA[ - hour]]></text>
  </DocumentChange>
  <DocumentChange __id="3919" _type="Delete" date="Tue Feb 23 21:34:17 EST 2021" docASTNodeCount="6177" docActiveCodeLength="35256" docExpressionCount="4276" docLength="37694" endLine="149" length="4" offset="5077" startLine="149" starttimestamp="1614131043210" timestamp="3013820">
    <text><![CDATA[hour]]></text>
  </DocumentChange>
  <DocumentChange __id="3921" _type="Insert" date="Tue Feb 23 21:34:17 EST 2021" docASTNodeCount="6178" docActiveCodeLength="35260" docExpressionCount="4277" docLength="37698" length="4" offset="5077" repeat="4" starttimestamp="1614131043210" timestamp="3014377" timestamp2="3015026">
    <text><![CDATA[HOUR]]></text>
  </DocumentChange>
  <DocumentChange __id="3925" _type="Delete" date="Tue Feb 23 21:34:18 EST 2021" docASTNodeCount="6177" docActiveCodeLength="35256" docExpressionCount="4276" docLength="37694" endLine="149" length="4" offset="5077" startLine="149" starttimestamp="1614131043210" timestamp="3015658">
    <text><![CDATA[HOUR]]></text>
  </DocumentChange>
  <DocumentChange __id="3927" _type="Insert" date="Tue Feb 23 21:34:20 EST 2021" docASTNodeCount="6178" docActiveCodeLength="35259" docExpressionCount="4277" docLength="37697" length="3" offset="5077" repeat="3" starttimestamp="1614131043210" timestamp="3017015" timestamp2="3017207">
    <text><![CDATA[hal]]></text>
  </DocumentChange>
  <DocumentChange __id="3931" _type="Delete" date="Tue Feb 23 21:34:21 EST 2021" docASTNodeCount="6177" docActiveCodeLength="35256" docExpressionCount="4276" docLength="37694" endLine="149" length="3" offset="5077" repeat="3" startLine="149" starttimestamp="1614131043210" timestamp="3018322" timestamp2="3018594">
    <text><![CDATA[hal]]></text>
  </DocumentChange>
  <Command __id="3937" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:34:27 EST 2021" docASTNodeCount="6305" docActiveCodeLength="36390" docExpressionCount="4229" docLength="36445" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3024404">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.text.DateFormat;¶import java.text.DecimalFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Arrays;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import analyzer.MainConsoleUI;¶import analyzer.extension.ADifficultyPredictionAndStatusPrinter;¶import au.com.bytecode.opencsv.CSVWriter;¶import dayton.ellwanger.helpbutton.exceptionMatcher.ExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.JavaExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.PrologExceptionMatcher;¶import dayton.ellwanger.helpbutton.exceptionMatcher.SMLExceptionMatcher;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import fluorite.util.EHLogReader;¶¶public class AReplayer extends ADifficultyPredictionAndStatusPrinter{¶	protected static final String REST_INSESSION = "Rest(In Session)";¶	protected static final String REST_ENDSESSION = "Rest(End Session)";¶	protected static final String REST_LOSEFOCUS = "Rest(Lose Focus)";¶	protected static final String ECLIPSE_LOST_FOCUS = "ECLIPSE_LOST_FOCUS";¶	protected static final String ECLIPSE_CLOSED = "ECLIPSE_CLOSED";¶	protected static final String XML_START1 = "<Events startTimestamp=\"";¶	protected static final String XML_START2 = "\" logVersion=\"";¶	protected static final String XML_VERSION = "1.0.0.202008151525";¶	protected static final String XML_START3 = "\">\r\n";¶	protected static final String XML_FILE_ENDING = "\r\n</Events>"; ¶	protected static final long ONE_SECOND = 1000;¶	protected static final long ONE_MIN = 60*1000;¶	protected static final long TEN_MIN = 10*ONE_MIN;¶	protected static final long FIVE_MIN = 5*ONE_MIN;¶	protected static final long HALF_MIN = ONE_MIN/2;¶	protected static final long TWO_MIN = 2*ONE_MIN;¶	protected static final long DAY = 24*60*ONE_MIN;¶	protected static final long[] REST = {ONE_SECOND, 2*ONE_SECOND, 5*ONE_SECOND, 10*ONE_SECOND, 15*ONE_SECOND, HALF_MIN, ONE_MIN, TWO_MIN, FIVE_MIN, TEN_MIN, 2*TEN_MIN, 3*TEN_MIN, 9*FIVE_MIN, 6*TEN_MIN};¶	protected int threadCount = 0;¶	protected CountDownLatch latch;¶	protected Analyzer analyzer;¶	private static final int THREAD_LIM = 3;¶	private int count = 0;¶	private int currentExceptions = 0; ¶	private int totalExceptions = 0;¶	private List<List<List<String>>> metrics = null;¶	private Map<String, Map<String, List<List<EHICommand>>>> data;¶	private ExceptionMatcher[] ems = {JavaExceptionMatcher.getInstance(), PrologExceptionMatcher.getInstance(), SMLExceptionMatcher.getInstance()};¶¶	public AReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶	}¶	¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			data.put(assignFolder.getName(), new HashMap<>());¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					data.get(assignFolder.getName()).put(studentFolder.getName(), replayLogs(projectFolder.getPath(), analyzer));¶				}¶			}¶		}¶		for (String assign : data.keySet()) {¶			new Thread(new Runnable() {¶				@Override¶				public void run() {¶					createAssignData(assign, folder);¶					createDistributionData(assign, folder);¶					count++;¶					if (count == data.size()) {¶						System.out.println("finished");¶						System.exit(0);¶					}¶				}¶			}).start();¶		}¶	}¶	¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶			¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶			¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶										command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶										(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 1; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	protected String getEventType(EHICommand command) {¶		if (command instanceof InsertStringCommand || ¶			command instanceof CopyCommand ||¶			command instanceof Delete ||¶			command instanceof Replace || command instanceof PasteCommand) {¶			return "Edit";¶		}¶		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {¶			return "IO";¶		}¶		if (command instanceof ExceptionCommand) {¶			return "Exception";¶		}¶		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶			return "Request";¶		}¶		return null;¶	}¶	¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			long[] restTimeSum = new long[REST.length];¶			for (String student : data.get(assign).keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(assign).get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] assigns = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		int numThread = 0;¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			numThread += students.length;¶		}¶		latch = new CountDownLatch(numThread);¶		for (int i = 0; i < assigns.length; i++) {¶			File assignFolder = assigns[i];¶			File[] students = assignFolder.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.isDirectory();¶				}¶			});¶			for (int j = 0; j < students.length; j++) {¶				File studentFolder  = students[j];¶				File submissionFolder = new File(studentFolder,"Submission attachment(s)");¶				if (!submissionFolder.exists()) {¶					latch.countDown();¶					continue;¶				}¶				for (File projectFolder : submissionFolder.listFiles(new FileFilter() {¶					public boolean accept(File pathname) {¶						return pathname.isDirectory();¶					}¶				})) {¶					System.out.println("Reading " + assignFolder.getName() + " student " + studentFolder.getName());¶					File[] logs = new File(projectFolder.getPath(), "Logs"+File.separator+"Eclipse").listFiles(new FileFilter() {¶						public boolean accept(File pathname) {¶							return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶						}¶					});¶					¶					Thread thread = new Thread(new Runnable() {¶						public void run() {¶							if (logs == null) {¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶								return;¶							}¶							try {¶								for (File file : logs) {¶									List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶									if (commands.size() < 2) {¶										continue;¶									}¶									List<EHICommand> newCommands = new ArrayList<>();¶									EHICommand last = null;¶									EHICommand cur = null;¶									for (EHICommand command : commands) {¶										if (cur == null) {¶											cur = command;¶											newCommands.add(command);¶										} else {¶											last = cur;¶											cur = command;¶											long rest = cur.getStartTimestamp()+cur.getTimestamp()-last.getStartTimestamp()-last.getTimestamp();¶											if (rest >= 1*ONE_SECOND) {¶												String range = "";¶												if (rest < 2*ONE_SECOND) {¶													range = "1s-2s";¶												} else if (rest < 5*ONE_SECOND) {¶													range = "2s-5s";¶												} else if (rest < 10*ONE_SECOND) {¶													range = "5s-10s";¶												} else if (rest < 20*ONE_SECOND) {¶													range = "10s-20s";¶												} else if (rest < 30*ONE_SECOND) {¶													range = "20s-30s";¶												} else if (rest < ONE_MIN) {¶													range = "30s-1m";¶												} else if (rest < TWO_MIN) {¶													range = "1m-2m";¶												} else if (rest < FIVE_MIN) {¶													range = "2m-5m";¶												} else if (rest < TEN_MIN) {¶													range = "5m-10m";¶												} else if (rest < 3*TEN_MIN) {¶													range = "10m-30m";¶												} else if (rest < 6*TEN_MIN) {¶													range = "30m-60m";¶												} else {¶													range = ">1h";¶												}¶												PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶												rCommnad.setStartTimestamp(last.getStartTimestamp());¶												rCommnad.setTimestamp(last.getTimestamp()+1);¶												newCommands.add(rCommnad);¶											} ¶											newCommands.add(command);¶										}¶									}¶									String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶									for (EHICommand c : newCommands) {¶										logContent += c.persist();¶									}¶									logContent += XML_FILE_ENDING;¶									try {¶										File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶										if (newLog.exists()) {¶											newLog.delete();¶										}¶										newLog.getParentFile().mkdirs();¶										newLog.createNewFile();¶										BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶										System.out.println("Writing to file " + newLog.getPath());¶										writer.write(logContent);¶										writer.close();¶										System.out.println("Finished writing to file " + newLog.getPath());¶									} catch (IOException e) {¶										e.printStackTrace();¶									}¶								}¶							} catch (Exception e) {¶								// TODO: handle exception¶								e.printStackTrace();¶							}finally {¶								// TODO: handle finally clause¶								synchronized (this) {¶									threadCount--;¶								}¶								latch.countDown();¶							}¶						}							¶					});¶					while(true) {¶						if (threadCount > THREAD_LIM) {¶							try {¶								Thread.sleep(1000);¶							} catch (InterruptedException e) {¶								e.printStackTrace();¶							}¶						}¶						¶						if (threadCount <= THREAD_LIM) {¶							synchronized (this) {¶								threadCount++;¶								thread.start();¶								break;¶							}¶						}¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶	¶	public List<EHICommand> readOneLogFile(String path, Analyzer analyzer){¶		EHLogReader reader = new EHLogReader();¶		File log = new File(path);¶		if (!log.exists()) {¶			System.out.println("log does not exist:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		if (!path.endsWith(".xml")) {¶			System.out.println("log is not in xml format:" + path);¶			return new ArrayList<EHICommand>();¶		}¶¶		System.out.println("Reading " + path);¶		try {¶			List<EHICommand> commands = reader.readAll(path);¶			sortCommands(commands, 0, commands.size()-1);¶			return commands;¶		} catch (Exception e) {¶			System.out.println("Could not read file" + path + e);¶		}¶		return new ArrayList<EHICommand>();¶	}¶	¶	protected boolean isException(EHICommand command) {¶		String output = "";¶		String language = "";¶		if (command instanceof EHExceptionCommand) {¶			output = command.getDataMap().get("outputString");¶		} else {¶			output = command.getDataMap().get("exceptionString");¶			language = command.getDataMap().get("language");¶		}¶		for (ExceptionMatcher em : ems) {¶			if ((language.equals("") || language.equals(em.getLanguage())) && em.isException(output)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	public String countConsecutiveCommands(String list) {¶		char lastChar = ' ';¶		char curChar = ' ';¶		int count = 1;¶		String retVal = "";¶		for (int i = 0; i < list.length(); i++) {¶			if (i != 0) {¶				lastChar = curChar;¶			}¶			curChar = list.charAt(i);¶			if (curChar == lastChar){¶				count++;¶			} else if (i != 0){¶				retVal += lastChar + "" + count;¶				count = 1;¶			}¶		}¶		retVal += curChar + "" + count;¶		count = 1;¶		return retVal;¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		refineLogFiles(projectPath);¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Logs"+File.separator+"Eclipse"+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶	¶	protected void sortNestedCommands(List<List<EHICommand>> nestedCommands){¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			if (commands == null || commands.size() < 2) {¶				nestedCommands.remove(i);¶				i--;¶			} else if (commands.size() > 2) {¶				sortCommands(commands, 0, commands.size()-1);¶			}¶		}¶	}¶	¶	private void sortCommands(List<EHICommand> commands, int start, int end){¶		for(int i = 0; i < commands.size(); i++) {¶			if (commands.get(i) == null) {¶				commands.remove(i);¶				i--;¶			}¶		}¶		EHICommand command = null;¶		long cur = 0;¶		for(int i = 2; i < commands.size(); i++) {¶			command = commands.get(i);¶			cur = command.getStartTimestamp()+command.getTimestamp();¶			int j = i-1;¶			while (j > 1){¶				if (commands.get(j).getStartTimestamp() + commands.get(j).getTimestamp() > cur) {¶					j--;¶				} else {¶					break;¶				}¶			}¶			if (j < i-1) {¶				commands.remove(i);¶				commands.add(j+1, command);¶			}¶		}¶	}¶¶	public List<List<List<String>>> createMetrics(String projectPath) {¶		File metricFolder = new File(projectPath+File.separator+"Logs"+File.separator+"Metrics");¶		List<String> metricFiles = MainConsoleUI.getFilesForFolder(metricFolder);¶		metrics = new ArrayList<>();¶		String largestFileName = "";¶		String secondLargestFileName = "";¶		for (int i = 0; i < metricFiles.size(); i++) {¶			String aFileName = metricFiles.get(i);¶			if (aFileName.compareTo(largestFileName) > 0) {¶				secondLargestFileName = largestFileName;¶				largestFileName = aFileName;¶			} else if (aFileName.compareTo(secondLargestFileName) > 0) {¶				secondLargestFileName = aFileName;¶			}¶		}¶		for (int i = 0; i < metricFiles.size(); i++) {¶			List<List<String>> metric = new ArrayList<>();¶			metrics.add(metric);¶			BufferedReader r;¶			try {¶				r = new BufferedReader(new FileReader(new File(metricFolder.getPath()+File.separator+metricFiles.get(i))));¶				String line=r.readLine();¶				while(true){¶					line = r.readLine();¶					if (line == null) {¶						break;¶					}¶					try {¶						Integer.parseInt(line.substring(0, line.indexOf(",")));¶					} catch (NumberFormatException e) {¶						continue;¶					}¶					metric.add(Arrays.asList(line.split(","))); ¶				}¶				r.close();¶			} catch (IOException e) {¶				e.printStackTrace();¶				return null;¶			}¶		}¶		return metrics;¶	}¶¶	protected String[] getHeader() {¶		String[] header = new String[4*REST.length+5];¶		header[0] = "Student";¶		header[1] = "Total Time Spent";¶		header[2] = "Wall Clock Time";¶		for (int i = 0; i < REST.length; i++) {¶			String t = getTime(REST[i]);¶			header[3+i*4] = "Active Time(" + t + ")";¶			header[4+i*4] = "Rest Time(" + t + ")";¶			header[5+i*4] = "# of Rests(" + t + ")";¶			header[6+i*4] = "Avg. Rest Time(" + t + ")";¶		}¶		header[header.length-2] = "# of Days";¶		header[header.length-1] = "Time Spent Each Day";¶		return header;¶	}¶	¶	protected String getTime(long t) {¶		long ret = t / ONE_SECOND;¶		if (ret < 60) {¶			return ret + "s";¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return ret + "m";¶		}¶		double ret2 = ret / 60.0;¶		return ret2 + "h";¶	}¶	¶	protected String getTime(double t) {¶		double ret = t / ONE_SECOND;¶		DecimalFormat df = new DecimalFormat("#.###");¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60;¶		if (ret < 60) {¶			return df.format(ret);¶		}¶		ret /= 60.0;¶		return df.format(ret);¶	}¶¶	public void refineLogFiles(String projectPath){¶		String logPath = projectPath + File.separator + "Logs" + File.separator + "Eclipse";¶		try {¶			File logDirectory = new File(logPath);¶			if (!logDirectory.exists()) {¶				return;¶			}¶			for (File file : logDirectory.listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getPath().contains(".lck");¶				}¶			})) {¶				File xmlFile = new File(file.getPath().substring(0,file.getPath().lastIndexOf(".")));¶				if (xmlFile.exists()) {¶					BufferedReader reader = new BufferedReader(new FileReader(xmlFile));¶					String lastLine = null;¶					String currentLine = null;¶					while((currentLine = reader.readLine()) != null) {¶						lastLine = currentLine;¶					}¶					if (lastLine != null && !lastLine.endsWith("</Events>")) {¶						BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile, true));¶						writer.write(XML_FILE_ENDING);¶						writer.close();¶					}	¶					reader.close();¶				}¶				file.delete();¶			}¶		} catch (Exception e) {¶			e.printStackTrace();¶		} ¶	}¶¶	protected long totalTimeSpent(List<List<EHICommand>> nestedCommands){¶		long projectTime = 0;¶		for(int k = 0; k < nestedCommands.size(); k++) {¶			List<EHICommand> commands = nestedCommands.get(k);¶			if (commands.size() == 0) {¶				continue;¶			}¶			int j = 0;¶			for(; j < commands.size(); j++) {¶				if (commands.get(j).getStartTimestamp() > 0 || commands.get(j).getTimestamp() > 0) {¶					break;¶				}¶			}¶			long timestamp1 = commands.get(j).getTimestamp() + commands.get(j).getStartTimestamp();¶			EHICommand command2 = commands.get(commands.size()-1);¶			long timestamp2 = command2.getStartTimestamp() + command2.getTimestamp();¶			projectTime += timestamp2 - timestamp1;¶		}¶		return projectTime;¶	}¶	¶	protected long[] restTime(List<List<EHICommand>> nestedCommands, long time, long time2) {¶		long[] restTime = {0,0,0};¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			List<EHICommand> commands = nestedCommands.get(i);¶			EHICommand last = null;¶			EHICommand cur = null;¶			int k = 0;¶			for(; k < commands.size(); k++) {¶				if (commands.get(k).getStartTimestamp() > 0 || commands.get(k).getTimestamp() > 0) {¶					break;¶				}¶			}¶			for(; k < commands.size(); k++) {¶				if (cur != null) {¶					last = cur;¶				}¶				cur = commands.get(k);¶				if (last != null) {¶					long diff = cur.getStartTimestamp() + cur.getTimestamp() - last.getTimestamp() - last.getStartTimestamp();¶					if (diff > time) {¶						restTime[0] += diff;¶						if (diff < time2) {¶							restTime[1]++;¶							restTime[2] += diff;¶						}¶					}¶				}¶			}¶		}¶		return restTime;¶	}¶	¶	protected long wallClockTime(List<List<EHICommand>> nestedCommands) {¶		long wallClockTime = 0;¶		EHICommand c1 = null;¶		EHICommand c2 = null;¶		if (nestedCommands.size() == 0) {¶			return 0;¶		}¶		for (int j = 0; j < nestedCommands.get(0).size(); j++) {¶			c1 = nestedCommands.get(0).get(j);¶			if (c1.getStartTimestamp() > 0 || c1.getTimestamp() > 0) {¶				break;¶			}¶		}¶		if (c1 == null) {¶			return 0;¶		}¶		c2 = nestedCommands.get(nestedCommands.size()-1).get(nestedCommands.get(nestedCommands.size()-1).size()-1);¶		wallClockTime = c2.getStartTimestamp()+c2.getTimestamp()-c1.getStartTimestamp()-c1.getTimestamp();¶		return wallClockTime;¶	}¶	¶	protected String[] daysSpent(List<List<EHICommand>> nestedCommands) {¶		List<String> retVal = new ArrayList<>();¶		int days = 1;¶		long startTime = 0;¶		long endTime = 0;¶		List<EHICommand> commands = nestedCommands.get(0);¶		EHICommand command = null;¶		List<List<EHICommand>> nestedCommands2 = new ArrayList<>();¶		List<EHICommand> commands2 = null;¶		for (int i = 1; i < commands.size(); i++) {¶			command = commands.get(i);¶			if (command.getStartTimestamp() != 0) {¶				break;¶			}¶		}¶		startTime = command.getStartTimestamp();¶		startTime -= startTime % DAY;¶		commands = nestedCommands.get(nestedCommands.size()-1);¶		endTime = command.getStartTimestamp() + command.getTimestamp();¶		endTime = endTime - endTime % DAY + DAY;¶		long timeStamp = 0;¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			commands = nestedCommands.get(i);¶			commands2 = new ArrayList<>();¶			nestedCommands2.add(commands2);¶			for (int j = 0; j < commands.size(); j++) {¶				command = commands.get(j);¶				timeStamp = command.getStartTimestamp()+command.getTimestamp();¶				if (timeStamp == 0) {¶					continue;¶				}¶				if (timeStamp > startTime && timeStamp < (startTime+DAY)) {¶					commands2.add(command);¶				} else if (timeStamp >= (startTime+DAY)){¶					days++;¶					startTime = timeStamp - timeStamp % DAY;¶					if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶						retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶					}¶					nestedCommands2 = new ArrayList<>();¶					commands2 = new ArrayList<>();¶					nestedCommands2.add(commands2);¶					commands2.add(command);¶				}¶			}¶		}¶		if (nestedCommands2.size() > 0 && nestedCommands2.get(0).size() > 0) {¶			retVal.add(convertToHourMinuteSecond(totalTimeSpent(nestedCommands2)));¶		}¶		retVal.add(0,days+"");¶		return retVal.toArray(new String[1]);¶	}¶¶	protected String convertToHourMinuteSecond(long timeSpent){¶		int hour = (int) (timeSpent / 3600000);¶		int minute = (int) (timeSpent % 3600000 / 60000);¶		int second = (int) (timeSpent % 60000 / 1000);¶		return hour + ":" + minute + ":" + second;¶	}¶¶	public int getCurrentExceptions() {¶		return currentExceptions;¶	}¶¶	public int getTotalExceptions() {¶		return totalExceptions;¶	}¶¶	protected List<EHICommand> readWebCommands(File file){¶		if (!file.exists()) {¶			return null;¶		}¶		List<EHICommand> retVal = new ArrayList<>();¶		BufferedReader br = null;¶		try {¶			br = new BufferedReader(new FileReader(file));¶			String nextLine;¶			SimpleDateFormat format = new SimpleDateFormat("M/d/yyyy hh:mm:ss");¶			Date date;¶			String keyword;¶			String url;¶			WebCommand webCommand;¶			while ((nextLine = br.readLine()) != null) {¶				try {¶					String[] tokens = nextLine.split("\t");¶					if (tokens.length >= 3) {¶						date = format.parse(tokens[0]);¶						keyword = tokens[1];¶						url = tokens[2];¶						if (keyword.contains("google.com/url?") || keyword.equals(url)) {¶							continue;¶						}¶						webCommand = new WebCommand(keyword, url);¶						webCommand.setTimestamp(date.getTime());¶						retVal.add(0, webCommand);¶					} else {¶						System.out.println("Failed to parse WebCommand");¶					}¶				} catch (ParseException e) {¶					e.printStackTrace();¶				}¶			}¶		} catch (FileNotFoundException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (br != null) {¶				try {¶					br.close();¶				} catch (IOException e) {¶					e.printStackTrace();¶				}¶			}¶		}¶		return retVal;¶	}¶	¶	public List<List<List<String>>> getMetrics() {¶		List<List<List<String>>> retval = new ArrayList<>();¶		long startTime = 0;¶		long endTime = Long.MAX_VALUE;¶		if (startTime > endTime) {¶			long temp = startTime;¶			startTime = endTime;¶			endTime = temp;¶		} ¶		for(int k = 0, m = 0; k < metrics.size(); k++) {¶			List<List<String>> metric = metrics.get(k);¶			if (metric.size() == 0) {¶				continue;¶			}¶			if ((Long.parseLong(metric.get(metric.size()-1).get(4)) < startTime) || (Long.parseLong(metric.get(0).get(4)) > endTime)) {¶				continue;¶			}¶			retval.add(new ArrayList<>());¶			for(int l = 0; l < metrics.get(k).size(); l++) {¶				if ((Long.parseLong(metric.get(l).get(4)) >= startTime) && (Long.parseLong(metric.get(l).get(4)) <= endTime)) {¶					retval.get(m).add(metric.get(l));¶				}¶			}¶			m++;¶		}¶		return retval;¶	}¶	¶	protected long getLogFileCreationTime(File file) {¶		DateFormat df = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");¶		try {¶			return df.parse(file.getName().substring(3, 27)).getTime();¶		} catch (ParseException e) {¶			e.printStackTrace();¶			return 0;¶		}¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="3940" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:34:35 EST 2021" docASTNodeCount="6177" docActiveCodeLength="35256" docExpressionCount="4276" docLength="37694" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3032626">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileNotFoundException;¶import java.io.FileReader;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.ParseException;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVReader;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶import jdk.internal.jline.internal.InputStreamReader;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";¶	private Map<String, Long[]> timestamps = new HashMap<>();¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void readTimestamp() {¶		try {¶			SimpleDateFormat df = new SimpleDateFormat("HH:mm");¶			File timestampFile = new File(TIMESTAMP);¶			CSVReader cr = new CSVReader(new FileReader(timestampFile));¶			cr.readNext();¶			String[] token = null;¶			while ((token = cr.readNext()) != null) {¶				long startTime = df.parse(token[4]).getTime();¶				if (startTime < 10*3600*1000) {¶					startTime += 12*3600*1000;¶				}¶				long endTime = df.parse(token[5]).getTime();¶				if (endTime < 10*3600*1000) {¶					endTime += 12*3600*1000;¶				}¶				Long[] times = {startTime, endTime};¶				timestamps.put(token[0], times);¶			}¶		} catch (FileNotFoundException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (IOException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		} catch (ParseException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					if (!studentFolder.getName().equals("16")) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							¶							long startTimestamp = getLogFileCreationTime(file);¶							long logStartTimestamp = startTimestamp;¶							long endTimestamp = Long.MAX_VALUE;¶							if (timestamps.containsKey(studentFolder.getName())) {¶								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0]"), Diff(INSERT," - "), Diff(EQUAL,";¶								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];¶							}¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶								webCommand = webCommandIterator.next();¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - logStartTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {¶									continue;¶								}¶								command.setStartTimestamp(logStartTimestamp);¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(logStartTimestamp);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - logStartTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								if (newCommands.size() == 0) {¶									continue;¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶		List<List<EHICommand>> nestedCommands = data.get("26");¶		for (int i = 0; i < nestedCommands.size(); i++) {¶			for (EHICommand command:nestedCommands.get(i)) {¶				if (command instanceof ExceptionCommand) {¶					System.out.println(command);¶				}¶			}¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶//		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] prev = {"Prev"};¶			cw.writeNext(prev);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶¶			String[] nextLine = new String[header.length];¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶//				String[] nextLine = retVal.toArray(new String[1]);¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶//			String[] nextLine = new String[header.length];¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			String[] empty = {};¶			cw.writeNext(empty);¶			String[] next = {"next"};¶			cw.writeNext(next);¶			sum = new int[PauseCommand.TYPES.length];¶			sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶										list.add(readWebContent(url));¶//										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									list.add(readWebContent(url));¶//									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											String pastedText2 = pastedText.replaceAll("\\s", "");¶											if (list.get(0).contains(pastedText2)) {¶												for (int k = 1; k < list.size(); k++) {¶													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {¶														break outer;¶													}¶												}¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(last.getStartTimestamp());¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶//	public String readWebContent2(String url){¶//		try {¶//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶//			httpClient.setRequestMethod("GET");¶//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//			int responseCode = httpClient.getResponseCode();¶//			try (BufferedReader in = new BufferedReader(¶//					new InputStreamReader(httpClient.getInputStream()))) {¶//				StringBuilder response = new StringBuilder();¶//				String line;¶//				while ((line = in.readLine()) != null) {¶//					response.append(line);¶//				}¶//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {¶//					url = url.replaceFirst("http", "https");¶//					return readWebContent2(url);¶//				}	¶//				return response.toString();¶//			}¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		return "";¶//	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;
import jdk.internal.jline.internal.InputStreamReader;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	private static final String TIMESTAMP = "C:\\Users\\Zhizhou\\Desktop\\timestamp for each participant.csv";
	private Map<String, Long[]> timestamps = new HashMap<>();
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void readTimestamp() {
		try {
			SimpleDateFormat df = new SimpleDateFormat("HH:mm");
			File timestampFile = new File(TIMESTAMP);
			CSVReader cr = new CSVReader(new FileReader(timestampFile));
			cr.readNext();
			String[] token = null;
			while ((token = cr.readNext()) != null) {
				long startTime = df.parse(token[4]).getTime();
				if (startTime < 10*3600*1000) {
					startTime += 12*3600*1000;
				}
				long endTime = df.parse(token[5]).getTime();
				if (endTime < 10*3600*1000) {
					endTime += 12*3600*1000;
				}
				Long[] times = {startTime, endTime};
				timestamps.put(token[0], times);
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					if (!studentFolder.getName().equals("16")) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							
							long startTimestamp = getLogFileCreationTime(file);
							long logStartTimestamp = startTimestamp;
							long endTimestamp = Long.MAX_VALUE;
							if (timestamps.containsKey(studentFolder.getName())) {
								startTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[0] - ;
								endTimestamp = startTimestamp / DAY * DAY + timestamps.get(studentFolder.getName())[1];
							}
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
//								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
								webCommand = webCommandIterator.next();
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - logStartTimestamp;
							}
							for (EHICommand command : commands) {
								if (command.getTimestamp() + logStartTimestamp < startTimestamp || command.getTimestamp() + logStartTimestamp > endTimestamp) {
									continue;
								}
								command.setStartTimestamp(logStartTimestamp);
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(logStartTimestamp);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - logStartTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								if (newCommands.size() == 0) {
									continue;
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
		List<List<EHICommand>> nestedCommands = data.get("26");
		for (int i = 0; i < nestedCommands.size(); i++) {
			for (EHICommand command:nestedCommands.get(i)) {
				if (command instanceof ExceptionCommand) {
					System.out.println(command);
				}
			}
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
//		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] prev = {"Prev"};
			cw.writeNext(prev);
			String[] header = getPauseHeader();
			cw.writeNext(header);

			String[] nextLine = new String[header.length];
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
//				String[] nextLine = retVal.toArray(new String[1]);
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
//			String[] nextLine = new String[header.length];
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			String[] empty = {};
			cw.writeNext(empty);
			String[] next = {"next"};
			cw.writeNext(next);
			sum = new int[PauseCommand.TYPES.length];
			sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
//										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
//									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											String pastedText2 = pastedText.replaceAll("\\s", "");
											if (list.get(0).contains(pastedText2)) {
												for (int k = 1; k < list.size(); k++) {
													if (list.get(k).replaceAll("\\s",  "").equals(pastedText2)) {
														break outer;
													}
												}
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)? "Provided":""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(last.getStartTimestamp());
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
//	public String readWebContent2(String url){
//		try {
//			HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
//			httpClient.setRequestMethod("GET");
//			httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//			int responseCode = httpClient.getResponseCode();
//			try (BufferedReader in = new BufferedReader(
//					new InputStreamReader(httpClient.getInputStream()))) {
//				StringBuilder response = new StringBuilder();
//				String line;
//				while ((line = in.readLine()) != null) {
//					response.append(line);
//				}
//				if (response.toString().equals("") && !url.substring(0,5).equals("https")) {
//					url = url.replaceFirst("http", "https");
//					return readWebContent2(url);
//				}	
//				return response.toString();
//			}
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		return "";
//	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="3943" _type="Insert" date="Tue Feb 23 21:34:39 EST 2021" docASTNodeCount="6180" docActiveCodeLength="35260" docExpressionCount="4279" docLength="37698" length="4" offset="5077" repeat="4" starttimestamp="1614131043210" timestamp="3035890" timestamp2="3037297">
    <text><![CDATA[60*m]]></text>
  </DocumentChange>
  <DocumentChange __id="3953" _type="Delete" date="Tue Feb 23 21:34:41 EST 2021" docASTNodeCount="5773" docActiveCodeLength="35259" docExpressionCount="3988" docLength="37697" endLine="149" length="1" offset="5080" startLine="149" starttimestamp="1614131043210" timestamp="3038149">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="3954" _type="Insert" date="Tue Feb 23 21:34:42 EST 2021" docASTNodeCount="6180" docActiveCodeLength="35262" docExpressionCount="4279" docLength="37700" length="3" offset="5080" repeat="3" starttimestamp="1614131043210" timestamp="3038882" timestamp2="3039122">
    <text><![CDATA[one]]></text>
  </DocumentChange>
  <DocumentChange __id="3958" _type="Replace" date="Tue Feb 23 21:34:42 EST 2021" docASTNodeCount="6180" docActiveCodeLength="35266" docExpressionCount="4279" docLength="37704" endLine="149" insertionLength="7" int_docASTNodeCount="5773" int_docActiveCodeLength="35259" int_docExpressionCount="3988" int_docLength="37697" length="3" offset="5080" startLine="149" starttimestamp="1614131043210" timestamp="3039598">
    <deletedText><![CDATA[one]]></deletedText>
    <insertedText><![CDATA[ONE_MIN]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3965" _type="Insert" date="Tue Feb 23 21:34:47 EST 2021" docASTNodeCount="6184" docActiveCodeLength="35279" docExpressionCount="4283" docLength="37717" length="13" offset="5184" repeat="2" starttimestamp="1614131043210" timestamp="3044250" timestamp2="3044531">
    <text><![CDATA[ - 60*ONE_MIN]]></text>
  </DocumentChange>
  <Command __id="3972" _type="DiffBasedFileOpenCommand" date="Tue Feb 23 21:34:53 EST 2021" docASTNodeCount="140" docActiveCodeLength="1072" docExpressionCount="82" docLength="2826" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3050075">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶import java.util.Date;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";¶	¶	public static void main(String[] args) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"		analyzer = new AnAnalyzer();¶"), Diff(DELETE,""), Diff(EQUAL,"//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		replayer = new AExperimentalReplayer(analyzer);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		((AExperimentalReplayer)replayer).readTimestamp();¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);¶//		System.out.println(s1.equals(s2));¶//		analyzer.addAnalyzerListener(replayer);	¶"), Diff(INSERT,"//"), Diff(EQUAL,"		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶"), Diff(DELETE,""), Diff(EQUAL,"//		replayer.analyzeFolder(experimentalClassFolderPath);¶//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶//		String s2 = "";¶//		System.out.println();¶//		try {¶//			s2 = get(url);¶//		} catch (Exception e) {¶//			// TODO: handle exception¶//			e.printStackTrace();¶//		}¶//		System.out.println(s1.equals(s2));¶"), Diff(DELETE,"//"), Diff(EQUAL,"		Date d = new Date(13791"), Diff(DELETE,"80409552L+4869423"), Diff(INSERT,"08460000"), Diff(EQUAL,"L);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		System.out.println(d);¶	}¶	¶//	public static String get(String urlString) throws Exception{¶//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶//        httpClient.setRequestMethod("GET");¶//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶//        int responseCode = httpClient.getResponseCode();¶//        System.out.println("Response Code : " + responseCode);¶//        try (BufferedReader in = new BufferedReader(¶//                new InputStreamReader(httpClient.getInputStream()))) {¶//            StringBuilder response = new StringBuilder();¶//            String line;¶//            while ((line = in.readLine()) != null) {¶//                response.append(line);¶//            }¶//            System.out.println(response.toString());¶//            return response.toString();¶//        }¶//	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "http://stackoverflow.com/questions/4186835/how-to-add-multiple-components-to-a-jframe";
	
	public static void main(String[] args) {
//		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
//		replayer = new AExperimentalReplayer(analyzer);
//		((AExperimentalReplayer)replayer).readTimestamp();
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = ((AExperimentalReplayer)replayer).readWebContent2(url);
//		System.out.println(s1.equals(s2));
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
		Date d = new Date(1379108460000L);
		System.out.println(d);
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <Command __id="3976" _type="PauseCommand" date="Tue Feb 23 21:34:56 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3053064">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2884]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3975" _type="SelectTextCommand" caretOffset="1611" date="Tue Feb 23 21:34:56 EST 2021" end="1611" start="1570" starttimestamp="1614131043210" timestamp="3053064" />
  <Command __id="3979" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:34:56 EST 2021" starttimestamp="1614131043210" timestamp="3053741" />
  <Command __id="3981" _type="PauseCommand" date="Tue Feb 23 21:34:58 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3055095">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1354]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3980" _type="MoveCaretCommand" caretOffset="885" date="Tue Feb 23 21:34:58 EST 2021" docOffset="1182" starttimestamp="1614131043210" timestamp="3055095" />
  <Command __id="3982" _type="MoveCaretCommand" caretOffset="939" date="Tue Feb 23 21:34:58 EST 2021" docOffset="1236" starttimestamp="1614131043210" timestamp="3055493" />
  <Command __id="3984" _type="PauseCommand" date="Tue Feb 23 21:35:00 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3057457">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1964]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3983" _type="MoveCaretCommand" caretOffset="1166" date="Tue Feb 23 21:35:00 EST 2021" docOffset="1463" starttimestamp="1614131043210" timestamp="3057457" />
  <Command __id="3986" _type="PauseCommand" date="Tue Feb 23 21:35:02 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3059729">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2272]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3985" _type="MoveCaretCommand" caretOffset="608" date="Tue Feb 23 21:35:02 EST 2021" docOffset="905" starttimestamp="1614131043210" timestamp="3059729" />
  <Command __id="3988" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:35:03 EST 2021" starttimestamp="1614131043210" timestamp="3059922" />
  <Command __id="3990" _type="PauseCommand" date="Tue Feb 23 21:35:04 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3061548">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1626]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3989" _type="MoveCaretCommand" caretOffset="825" date="Tue Feb 23 21:35:04 EST 2021" docOffset="1122" starttimestamp="1614131043210" timestamp="3061548" />
  <Command __id="3992" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:35:05 EST 2021" starttimestamp="1614131043210" timestamp="3061799" />
  <Command __id="3993" _type="MoveCaretCommand" caretOffset="875" date="Tue Feb 23 21:35:05 EST 2021" docOffset="1172" starttimestamp="1614131043210" timestamp="3062316" />
  <Command __id="3995" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:35:05 EST 2021" starttimestamp="1614131043210" timestamp="3062491" />
  <Command __id="3997" _type="PauseCommand" date="Tue Feb 23 21:35:07 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3064321">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1830]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3996" _type="MoveCaretCommand" caretOffset="1118" date="Tue Feb 23 21:35:07 EST 2021" docOffset="1415" starttimestamp="1614131043210" timestamp="3064321" />
  <Command __id="3998" _type="MoveCaretCommand" caretOffset="1080" date="Tue Feb 23 21:35:07 EST 2021" docOffset="1377" starttimestamp="1614131043210" timestamp="3064689" />
  <Command __id="4000" _type="PauseCommand" date="Tue Feb 23 21:35:09 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3065890">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1201]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3999" _type="MoveCaretCommand" caretOffset="1166" date="Tue Feb 23 21:35:09 EST 2021" docOffset="1463" starttimestamp="1614131043210" timestamp="3065890" />
  <Command __id="4002" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Tue Feb 23 21:35:09 EST 2021" starttimestamp="1614131043210" timestamp="3066133" />
  <Command __id="4004" _type="PauseCommand" date="Tue Feb 23 21:35:11 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3068159">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2026]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4003" _type="ShellCommand" date="Tue Feb 23 21:35:11 EST 2021" starttimestamp="1614131043210" timestamp="3068159" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4006" _type="PauseCommand" date="Tue Feb 23 21:35:12 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3069222">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1063]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4005" _type="ShellCommand" date="Tue Feb 23 21:35:12 EST 2021" starttimestamp="1614131043210" timestamp="3069222" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4007" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:35:12 EST 2021" starttimestamp="1614131043210" timestamp="3069380" />
  <Command __id="4008" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:35:12 EST 2021" starttimestamp="1614131043210" timestamp="3069460" />
  <Command __id="4009" _type="RunCommand" date="Tue Feb 23 21:35:12 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3069493" type="Run" />
  <Command __id="4010" _type="RunCommand" date="Tue Feb 23 21:35:12 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3069493" type="Run" />
  <Command __id="4011" _type="ConsoleOutput" date="Tue Feb 23 21:35:13 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3070374" type="ConsoleOutput">
    <outputString><![CDATA[Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading 24
Reading 26
Reading 27
Reading 28
Reading 29
Reading 30
Reading 31
Reading 32
Reading 33
Reading pd1
Reading pd2
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Fri Sep 13 17:41:00 EDT 2013"), Diff(INSERT,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4013" _type="PauseCommand" date="Tue Feb 23 21:35:15 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3072643">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2269]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4012" _type="ShellCommand" date="Tue Feb 23 21:35:15 EST 2021" starttimestamp="1614131043210" timestamp="3072643" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4014" _type="ShellCommand" date="Tue Feb 23 21:35:15 EST 2021" starttimestamp="1614131043210" timestamp="3072766" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4015" _type="ShellCommand" date="Tue Feb 23 21:35:16 EST 2021" starttimestamp="1614131043210" timestamp="3073320" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4017" _type="PauseCommand" date="Tue Feb 23 21:35:19 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3076658">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3338]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4016" _type="ConsoleOutput" date="Tue Feb 23 21:35:19 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3076658" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading 24¶Reading 26¶Reading 27¶Reading 28¶Reading 29¶Reading 30¶Reading 31¶Reading 32¶Reading 33¶Reading pd1¶Reading pd2¶Reading"), Diff(INSERT,"Writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-13-14-"), Diff(DELETE,"36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml¶Reading"), Diff(INSERT,"54-59-878.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-13-14-54-59-878.xml¶")]]]></diff>
  </Command>
  <Command __id="4018" _type="RunCommand" date="Tue Feb 23 21:35:20 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="3076963" type="Debug" />
  <Command __id="4019" _type="RunCommand" date="Tue Feb 23 21:35:20 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3076963" type="Run" />
  <Command __id="4020" _type="RunCommand" date="Tue Feb 23 21:35:20 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="3076963" type="Debug" />
  <Command __id="4021" _type="RunCommand" date="Tue Feb 23 21:35:20 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3076963" type="Run" />
  <Command __id="4023" _type="PauseCommand" date="Tue Feb 23 21:35:48 EST 2021" range="20s-30s" starttimestamp="1614131043210" timestamp="3105452">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[28489]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4022" _type="ShellCommand" date="Tue Feb 23 21:35:48 EST 2021" starttimestamp="1614131043210" timestamp="3105452" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4025" _type="MoveCaretCommand" caretOffset="5197" date="Tue Feb 23 21:35:48 EST 2021" docOffset="5197" starttimestamp="1614131043210" timestamp="3105681" />
  <Command __id="4027" _type="PauseCommand" date="Tue Feb 23 21:35:51 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3107909">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2228]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4026" _type="MoveCaretCommand" caretOffset="5087" date="Tue Feb 23 21:35:51 EST 2021" docOffset="5087" starttimestamp="1614131043210" timestamp="3107909" />
  <Command __id="4029" _type="InsertStringCommand" date="Tue Feb 23 21:35:51 EST 2021" starttimestamp="1614131043210" timestamp="3108612" timestamp2="3108612">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4031" _type="InsertStringCommand" date="Tue Feb 23 21:35:52 EST 2021" starttimestamp="1614131043210" timestamp="3109469" timestamp2="3109469">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="4033" _type="InsertStringCommand" date="Tue Feb 23 21:35:52 EST 2021" starttimestamp="1614131043210" timestamp="3109596" timestamp2="3109596">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4035" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:35:53 EST 2021" starttimestamp="1614131043210" timestamp="3110527" />
  <Command __id="4037" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:35:53 EST 2021" starttimestamp="1614131043210" timestamp="3110697" />
  <Command __id="4039" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:35:54 EST 2021" starttimestamp="1614131043210" timestamp="3110834" />
  <Command __id="4040" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:35:54 EST 2021" starttimestamp="1614131043210" timestamp="3111581" />
  <Command __id="4041" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:35:54 EST 2021" starttimestamp="1614131043210" timestamp="3111733" />
  <Command __id="4042" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.wordPrevious" date="Tue Feb 23 21:35:55 EST 2021" starttimestamp="1614131043210" timestamp="3111870" />
  <Command __id="4044" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:35:55 EST 2021" starttimestamp="1614131043210" timestamp="3112561" />
  <Command __id="4046" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:35:55 EST 2021" starttimestamp="1614131043210" timestamp="3112674" />
  <Command __id="4048" _type="InsertStringCommand" date="Tue Feb 23 21:35:56 EST 2021" starttimestamp="1614131043210" timestamp="3112894" timestamp2="3112894">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="4050" _type="InsertStringCommand" date="Tue Feb 23 21:35:56 EST 2021" starttimestamp="1614131043210" timestamp="3113104" timestamp2="3113104">
    <data><![CDATA[9]]></data>
  </Command>
  <Command __id="4051" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:35:56 EST 2021" starttimestamp="1614131043210" timestamp="3113605" />
  <Command __id="4052" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:35:57 EST 2021" starttimestamp="1614131043210" timestamp="3113795" />
  <Command __id="4053" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Feb 23 21:35:57 EST 2021" starttimestamp="1614131043210" timestamp="3113954" />
  <Command __id="4055" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:35:57 EST 2021" starttimestamp="1614131043210" timestamp="3114610" />
  <Command __id="4057" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Feb 23 21:35:57 EST 2021" starttimestamp="1614131043210" timestamp="3114727" />
  <Command __id="4059" _type="InsertStringCommand" date="Tue Feb 23 21:35:58 EST 2021" starttimestamp="1614131043210" timestamp="3114922" timestamp2="3114922">
    <data><![CDATA[5]]></data>
  </Command>
  <Command __id="4061" _type="InsertStringCommand" date="Tue Feb 23 21:35:58 EST 2021" starttimestamp="1614131043210" timestamp="3115034" timestamp2="3115034">
    <data><![CDATA[9]]></data>
  </Command>
  <Command __id="4062" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:35:58 EST 2021" starttimestamp="1614131043210" timestamp="3115436" />
  <Command __id="4063" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Feb 23 21:35:58 EST 2021" starttimestamp="1614131043210" timestamp="3115572" />
  <Command __id="4064" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Feb 23 21:35:59 EST 2021" starttimestamp="1614131043210" timestamp="3116102" />
  <Command __id="4066" _type="PauseCommand" date="Tue Feb 23 21:36:00 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3117431">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1329]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="4067" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 23 21:36:00 EST 2021" starttimestamp="1614131043210" timestamp="3117435" />
  <Command __id="4069" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Feb 23 21:36:00 EST 2021" starttimestamp="1614131043210" timestamp="3117592" />
  <Command __id="4071" _type="InsertStringCommand" date="Tue Feb 23 21:36:01 EST 2021" starttimestamp="1614131043210" timestamp="3118237" timestamp2="3118237">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="4073" _type="InsertStringCommand" date="Tue Feb 23 21:36:01 EST 2021" starttimestamp="1614131043210" timestamp="3118418" timestamp2="3118418">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="4074" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Feb 23 21:36:02 EST 2021" starttimestamp="1614131043210" timestamp="3119399" />
  <Command __id="4075" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:36:02 EST 2021" starttimestamp="1614131043210" timestamp="3119489" />
  <Command __id="4076" _type="EclipseCommand" commandID="" date="Tue Feb 23 21:36:02 EST 2021" starttimestamp="1614131043210" timestamp="3119616" />
  <Command __id="4091" _type="PauseCommand" date="Tue Feb 23 21:36:22 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3139373">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2105]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="4090" _type="RunCommand" date="Tue Feb 23 21:36:22 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3139373" type="Run" />
  <Command __id="4092" _type="RunCommand" date="Tue Feb 23 21:36:22 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3139373" type="Run" />
  <Command __id="4093" _type="ConsoleOutput" date="Tue Feb 23 21:36:23 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3140200" type="ConsoleOutput">
    <outputString><![CDATA[Reading 16
Reading 17
Reading 18
Reading 19
Reading 20
Reading 21
Reading 22
Reading 23
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Log2013-09-15-15-38-06-069.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Log2013-09-12-10-40-05-321.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Log2013-09-17-10-06-32-242.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Log2013-09-13-09-53-29-705.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Log2013-09-12-15-05-47-820.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Log2013-09-16-10-05-18-718.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file"), Diff(INSERT,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Log2013-09-15-15-38-06-069.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Log2013-09-12-10-40-05-321.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest"), Diff(INSERT,"Log2013-09-17-10-06-32-242.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse"), Diff(EQUAL,"\Log2013-09-13-"), Diff(DELETE,"14-54-59-878.xml¶Finished writing to file"), Diff(INSERT,"09-53-29-705.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Log2013-09-12-15-05-47-820.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"2"), Diff(EQUAL,"1"), Diff(DELETE,"6"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest"), Diff(INSERT,"Log2013-09-16-10-05-18-718.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse"), Diff(EQUAL,"\Log2013-09-13-14-"), Diff(DELETE,"54-59-878"), Diff(INSERT,"39-52-726"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4094" _type="ConsoleOutput" date="Tue Feb 23 21:36:23 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3140268" type="ConsoleOutput">
    <outputString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 16¶Reading 17¶Reading 18¶Reading 19¶Reading 20¶Reading 21¶Reading 22¶Reading 23¶"), Diff(EQUAL,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"22\Eclipse\Log2013-09-15-15-38-06-069.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Log2013-09-12-10-40-05-321.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Log2013-09-17-10-06-32-242.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Log2013-09-13-09-53-29-705.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-36-31-023.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Log2013-09-12-15-05-47-820.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Log2013-09-16-10-05-18-718.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Log2013-09-13-14-39-52-726"), Diff(INSERT,"16\Eclipse\Log2013-09-13-14-54-59-878"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4095" _type="ConsoleOutput" date="Tue Feb 23 21:36:24 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3141200" type="ConsoleOutput">
    <outputString><![CDATA[Reading 24
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-09-48-24-508.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Reading 24¶"), Diff(EQUAL,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"16"), Diff(INSERT,"23"), Diff(EQUAL,"\Eclipse\Log2013-09-1"), Diff(DELETE,"3-14-54-59-87"), Diff(INSERT,"4-09-48-24-50"), Diff(EQUAL,"8.xml¶")]]]></diff>
  </Command>
  <Command __id="4096" _type="ConsoleOutput" date="Tue Feb 23 21:36:24 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3141489" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-10-54-43-267.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 24¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-14-09-48-24-508.xml¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-10-54-43-267.xml¶")]]]></diff>
  </Command>
  <Command __id="4097" _type="ConsoleOutput" date="Tue Feb 23 21:36:25 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3141967" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"23"), Diff(INSERT,"17"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"3"), Diff(EQUAL,"-09-"), Diff(DELETE,"48-24-508"), Diff(INSERT,"53-29-705"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"23"), Diff(INSERT,"17"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"3"), Diff(EQUAL,"-09-"), Diff(DELETE,"48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Log2013-09-14-10-54-43-267"), Diff(INSERT,"53-29-705"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4098" _type="ConsoleOutput" date="Tue Feb 23 21:36:25 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3142200" type="ConsoleOutput">
    <outputString><![CDATA[Reading 26
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-12-59-39-052.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml¶Finished writing to file"), Diff(INSERT,"Reading 26¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"17"), Diff(INSERT,"24"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"3-09-53-2"), Diff(INSERT,"4-12-59-3"), Diff(EQUAL,"9-"), Diff(DELETE,"7"), Diff(EQUAL,"05"), Diff(INSERT,"2"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4099" _type="ConsoleOutput" date="Tue Feb 23 21:36:26 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3143042" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 26¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-14-12-59-39-052.xml¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-13-40-09-552.xml¶")]]]></diff>
  </Command>
  <Command __id="4101" _type="PauseCommand" date="Tue Feb 23 21:36:27 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3144385">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1343]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4100" _type="ShellCommand" date="Tue Feb 23 21:36:27 EST 2021" starttimestamp="1614131043210" timestamp="3144385" type="ECLIPSE_MINIMIZED" />
  <Command __id="4102" _type="ShellCommand" date="Tue Feb 23 21:36:27 EST 2021" starttimestamp="1614131043210" timestamp="3144406" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4104" _type="PauseCommand" date="Tue Feb 23 21:36:33 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="3150624">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6218]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4103" _type="ConsoleOutput" date="Tue Feb 23 21:36:33 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3150624" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-14-1"), Diff(DELETE,"2"), Diff(INSERT,"0"), Diff(EQUAL,"-5"), Diff(DELETE,"9-39-052"), Diff(INSERT,"4-43-267"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-14-1"), Diff(DELETE,"2"), Diff(INSERT,"0"), Diff(EQUAL,"-5"), Diff(DELETE,"9-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Log2013-09-14-13-40-09-552"), Diff(INSERT,"4-43-267"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4105" _type="ConsoleOutput" date="Tue Feb 23 21:36:34 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3151204" type="ConsoleOutput">
    <outputString><![CDATA[Reading 27
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-14-39-04-982.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml¶Finished writing to file"), Diff(INSERT,"Reading 27¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"-1"), Diff(DELETE,"0-54-43-267"), Diff(INSERT,"4-39-04-982"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4106" _type="ConsoleOutput" date="Tue Feb 23 21:36:35 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3151980" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 27¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-18-14-39-04-982.xml¶"), Diff(INSERT,"Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226.xml¶")]]]></diff>
  </Command>
  <Command __id="4108" _type="PauseCommand" date="Tue Feb 23 21:36:43 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="3160090">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8110]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4107" _type="ConsoleOutput" date="Tue Feb 23 21:36:43 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3160090" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"8"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(DELETE,"4-39-04-982"), Diff(INSERT,"0-05-18-718"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"8"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(DELETE,"4-39-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Log2013-09-18-15-33-03-226"), Diff(INSERT,"0-05-18-718"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4109" _type="ConsoleOutput" date="Tue Feb 23 21:36:43 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3160210" type="ConsoleOutput">
    <outputString><![CDATA[Reading 28
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml¶Finished writing to file"), Diff(INSERT,"Reading 28¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"16"), Diff(INSERT,"20"), Diff(EQUAL,"-10-"), Diff(DELETE,"05-18-"), Diff(INSERT,"17-49-0"), Diff(EQUAL,"71"), Diff(DELETE,"8"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4111" _type="PauseCommand" date="Tue Feb 23 21:36:51 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="3167795">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7585]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4110" _type="ConsoleOutput" date="Tue Feb 23 21:36:51 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3167795" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 28¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"27"), Diff(INSERT,"18"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"20-10-17-49-071"), Diff(INSERT,"17-10-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4112" _type="ConsoleOutput" date="Tue Feb 23 21:36:51 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3168215" type="ConsoleOutput">
    <outputString><![CDATA[Reading 29
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml¶Finished writing to file"), Diff(INSERT,"Reading 29¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"8\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"17-10-06-32-242"), Diff(INSERT,"20-14-30-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4113" _type="ConsoleOutput" date="Tue Feb 23 21:36:51 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3168766" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 29¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"8"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"20"), Diff(INSERT,"18"), Diff(EQUAL,"-1"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL,"-3"), Diff(DELETE,"0-38-379"), Diff(INSERT,"3-03-226"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4114" _type="ConsoleOutput" date="Tue Feb 23 21:36:52 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3169217" type="ConsoleOutput">
    <outputString><![CDATA[Reading 30
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Log2013-09-23-12-56-55-221.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Finished writing to file"), Diff(INSERT,"Reading 30¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"6"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"18-15-33-03"), Diff(INSERT,"23-12-56-55"), Diff(EQUAL,"-22"), Diff(DELETE,"6"), Diff(INSERT,"1"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4116" _type="PauseCommand" date="Tue Feb 23 21:36:53 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3170599">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1382]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4115" _type="ConsoleOutput" date="Tue Feb 23 21:36:53 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3170599" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 30¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"9"), Diff(INSERT,"4"), Diff(EQUAL,"\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-"), Diff(DELETE,"23-12-56-55-221"), Diff(INSERT,"14-13-40-09-552"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4117" _type="ConsoleOutput" date="Tue Feb 23 21:36:54 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3171270" type="ConsoleOutput">
    <outputString><![CDATA[Reading 31
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml¶Finished writing to file"), Diff(INSERT,"Reading 31¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"24"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"1-15"), Diff(EQUAL,"-13-4"), Diff(DELETE,"0-09-552"), Diff(INSERT,"8-829"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4119" _type="PauseCommand" date="Tue Feb 23 21:36:58 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3175186">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3916]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4118" _type="ConsoleOutput" date="Tue Feb 23 21:36:58 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3175186" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
Reading 32
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Log2013-09-06-16-07-40-790.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml¶"), Diff(EQUAL,"Reading 3"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"\Eclipse\Log2013-09-"), Diff(DELETE,"11-15-13-48-829"), Diff(INSERT,"06-16-07-40-790"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4121" _type="PauseCommand" date="Tue Feb 23 21:36:59 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3176317">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1131]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4120" _type="ConsoleOutput" date="Tue Feb 23 21:36:59 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3176317" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"20"), Diff(INSERT,"16"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0-40-05-321"), Diff(INSERT,"4-54-59-878"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"20"), Diff(INSERT,"16"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"-1"), Diff(DELETE,"0-40-05-321.xml¶Reading 32¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Log2013-09-06-16-07-40-790"), Diff(INSERT,"4-54-59-878"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4122" _type="ConsoleOutput" date="Tue Feb 23 21:37:00 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3177228" type="ConsoleOutput">
    <outputString><![CDATA[Reading 33
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Log2013-09-13-12-11-53-568.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml¶Finished writing to file"), Diff(INSERT,"Reading 33¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"16"), Diff(INSERT,"32"), Diff(EQUAL,"\Eclipse\"), Diff(DELETE,"Rest\"), Diff(EQUAL,"Log2013-09-13-1"), Diff(DELETE,"4"), Diff(INSERT,"2-11"), Diff(EQUAL,"-5"), Diff(DELETE,"4"), Diff(INSERT,"3"), Diff(EQUAL,"-5"), Diff(DELETE,"9-87"), Diff(INSERT,"6"), Diff(EQUAL,"8.xml¶")]]]></diff>
  </Command>
  <Command __id="4123" _type="ConsoleOutput" date="Tue Feb 23 21:37:00 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3177311" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading 33¶Reading"), Diff(INSERT,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml¶Finished writing to file"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\"), Diff(INSERT,"Rest\"), Diff(EQUAL,"Log2013-09-13-12-11-53-568.xml¶")]]]></diff>
  </Command>
  <Command __id="4124" _type="ExceptionCommand" date="Tue Feb 23 21:37:01 EST 2021" starttimestamp="1614131043210" timestamp="3178280" type="Exception">
    <exceptionString><![CDATA[Reading pd1
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Log2015-02-12-12-35-18-862.xml
java.lang.NullPointerException
	at logAnalyzer.AExperimentalReplayer$3.run(AExperimentalReplayer.java:162)
	at java.lang.Thread.run(Thread.java:748)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="4125" _type="ExceptionCommand" date="Tue Feb 23 21:37:02 EST 2021" starttimestamp="1614131043210" timestamp="3179229" type="Exception">
    <exceptionString><![CDATA[Reading pd2
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Log2014-09-26-10-09-23-822.xml
java.lang.NullPointerException
	at logAnalyzer.AExperimentalReplayer$3.run(AExperimentalReplayer.java:162)
	at java.lang.Thread.run(Thread.java:748)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="4127" _type="PauseCommand" date="Tue Feb 23 21:37:03 EST 2021" range="1s-2s" starttimestamp="1614131043210" timestamp="3180234">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1004]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="4126" _type="ExceptionCommand" date="Tue Feb 23 21:37:03 EST 2021" starttimestamp="1614131043210" timestamp="3180233" type="Exception">
    <exceptionString><![CDATA[Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Log2014-10-04-12-25-59-852.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Log2014-10-04-13-38-06-627.xml
java.lang.NullPointerException
	at logAnalyzer.AExperimentalReplayer$3.run(AExperimentalReplayer.java:162)
	at java.lang.Thread.run(Thread.java:748)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="4129" _type="PauseCommand" date="Tue Feb 23 21:37:06 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3182830">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[2597]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4128" _type="ConsoleOutput" date="Tue Feb 23 21:37:06 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3182830" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"19"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3-12-11-53-568"), Diff(INSERT,"2-15-05-47-820"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"19"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3-12-11-53-568"), Diff(INSERT,"2-15-05-47-820"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4131" _type="PauseCommand" date="Tue Feb 23 21:37:09 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3185842">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3012]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4130" _type="ConsoleOutput" date="Tue Feb 23 21:37:09 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3185842" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"1"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"12"), Diff(INSERT,"06"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL,"-0"), Diff(DELETE,"5"), Diff(INSERT,"7"), Diff(EQUAL,"-4"), Diff(DELETE,"7-82"), Diff(INSERT,"0-79"), Diff(EQUAL,"0.xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"1"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"12"), Diff(INSERT,"06"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL,"-0"), Diff(DELETE,"5"), Diff(INSERT,"7"), Diff(EQUAL,"-4"), Diff(DELETE,"7-82"), Diff(INSERT,"0-79"), Diff(EQUAL,"0.xml¶")]]]></diff>
  </Command>
  <Command __id="4133" _type="PauseCommand" date="Tue Feb 23 21:37:16 EST 2021" range="5s-10s" starttimestamp="1614131043210" timestamp="3193075">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7232]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4132" _type="ConsoleOutput" date="Tue Feb 23 21:37:16 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3193074" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"31"), Diff(INSERT,"29"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"06-16-07-40-790"), Diff(INSERT,"23-12-56-55-221"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"31"), Diff(INSERT,"29"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"06-16-07-40-790"), Diff(INSERT,"23-12-56-55-221"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4135" _type="PauseCommand" date="Tue Feb 23 21:37:20 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3197101">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4027]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4134" _type="ConsoleOutput" date="Tue Feb 23 21:37:20 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3197101" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"23-12-56-55-221"), Diff(INSERT,"11-15-13-48-829"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"23-12-56-55-221"), Diff(INSERT,"11-15-13-48-829"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4136" _type="ConsoleOutput" date="Tue Feb 23 21:37:21 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3198090" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30"), Diff(INSERT,"27"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"11"), Diff(INSERT,"20"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"0"), Diff(EQUAL,"-1"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"-4"), Diff(DELETE,"8-829"), Diff(INSERT,"9-071"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"30"), Diff(INSERT,"27"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"11"), Diff(INSERT,"20"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"0"), Diff(EQUAL,"-1"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"-4"), Diff(DELETE,"8-829"), Diff(INSERT,"9-071"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4138" _type="PauseCommand" date="Tue Feb 23 21:37:23 EST 2021" range="2s-5s" starttimestamp="1614131043210" timestamp="3200521">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2431]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4137" _type="ConsoleOutput" date="Tue Feb 23 21:37:23 EST 2021" overflow="false" starttimestamp="1614131043210" timestamp="3200521" type="ConsoleOutput">
    <outputString><![CDATA[Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-20-1"), Diff(DELETE,"0-17-49-071"), Diff(INSERT,"4-30-38-379"), Diff(EQUAL,".xml¶Finished writing to file C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-20-1"), Diff(DELETE,"0-17-49-071"), Diff(INSERT,"4-30-38-379"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="4139" _type="RunCommand" date="Tue Feb 23 21:37:24 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="3200815" type="Debug" />
  <Command __id="4140" _type="RunCommand" date="Tue Feb 23 21:37:24 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3200815" type="Run" />
  <Command __id="4141" _type="RunCommand" date="Tue Feb 23 21:37:24 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1614131043210" timestamp="3200815" type="Debug" />
  <Command __id="4142" _type="RunCommand" date="Tue Feb 23 21:37:24 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1614131043210" timestamp="3200815" type="Run" />
</Events>
