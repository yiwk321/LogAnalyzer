<Events startTimestamp="1612994614940" logVersion="1.0.0.202102091426">
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Wed Feb 10 17:03:36 EST 2021" docASTNodeCount="285" docActiveCodeLength="2177" docExpressionCount="179" docLength="2503" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="2058">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "https://www.google.com/search?q=accessing%20java%20swing%20&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a&channel=np&source=hp";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
		String s2 = "";
		System.out.println();
		try {
			s2 = get(url);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		System.out.println(s1.equals(s2));
	}
	
	public static String get(String urlString) throws Exception{
         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
        httpClient.setRequestMethod("GET");
        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
        int responseCode = httpClient.getResponseCode();
        System.out.println("Response Code : " + responseCode);
        try (BufferedReader in = new BufferedReader(
                new InputStreamReader(httpClient.getInputStream()))) {
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                response.append(line);
            }
            System.out.println(response.toString());
            return response.toString();
        }
	}
}

















]]></snapshot>
  </Command>
  <Command __id="4" _type="PauseCommand" date="Wed Feb 10 17:03:39 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="4497">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Replace]]></prev>
    <pause><![CDATA[1970]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:39 EST 2021" starttimestamp="1612994614940" timestamp="4494" />
  <Command __id="5" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:40 EST 2021" starttimestamp="1612994614940" timestamp="5445" />
  <Command __id="6" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:40 EST 2021" starttimestamp="1612994614940" timestamp="5450" />
  <Command __id="7" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:40 EST 2021" starttimestamp="1612994614940" timestamp="5466" />
  <Command __id="8" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:40 EST 2021" starttimestamp="1612994614940" timestamp="5468" />
  <Command __id="9" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:40 EST 2021" starttimestamp="1612994614940" timestamp="5592" />
  <Command __id="10" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:40 EST 2021" starttimestamp="1612994614940" timestamp="5594" />
  <Command __id="11" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:40 EST 2021" starttimestamp="1612994614940" timestamp="5615" />
  <Command __id="12" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:40 EST 2021" starttimestamp="1612994614940" timestamp="5618" />
  <Command __id="13" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:40 EST 2021" starttimestamp="1612994614940" timestamp="5641" />
  <Command __id="14" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:40 EST 2021" starttimestamp="1612994614940" timestamp="5647" />
  <Command __id="15" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:41 EST 2021" starttimestamp="1612994614940" timestamp="6128" />
  <Command __id="16" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:41 EST 2021" starttimestamp="1612994614940" timestamp="6130" />
  <Command __id="18" _type="PauseCommand" date="Wed Feb 10 17:03:43 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="8101">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1971]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="17" _type="ShellCommand" date="Wed Feb 10 17:03:43 EST 2021" starttimestamp="1612994614940" timestamp="8101" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="20" _type="PauseCommand" date="Wed Feb 10 17:03:44 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="9601">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1500]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="19" _type="ShellCommand" date="Wed Feb 10 17:03:44 EST 2021" starttimestamp="1612994614940" timestamp="9601" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="21" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:44 EST 2021" starttimestamp="1612994614940" timestamp="9611" />
  <Command __id="22" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:44 EST 2021" starttimestamp="1612994614940" timestamp="9790" />
  <Command __id="23" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:44 EST 2021" starttimestamp="1612994614940" timestamp="9894" />
  <Command __id="24" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:44 EST 2021" starttimestamp="1612994614940" timestamp="9909" />
  <Command __id="25" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:44 EST 2021" starttimestamp="1612994614940" timestamp="10053" />
  <Command __id="26" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:45 EST 2021" starttimestamp="1612994614940" timestamp="10070" />
  <Command __id="27" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:45 EST 2021" starttimestamp="1612994614940" timestamp="10256" />
  <Command __id="28" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:45 EST 2021" starttimestamp="1612994614940" timestamp="10272" />
  <Command __id="29" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:45 EST 2021" starttimestamp="1612994614940" timestamp="10432" />
  <Command __id="30" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:45 EST 2021" starttimestamp="1612994614940" timestamp="10435" />
  <Command __id="31" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:45 EST 2021" starttimestamp="1612994614940" timestamp="10784" />
  <Command __id="32" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:45 EST 2021" starttimestamp="1612994614940" timestamp="10821" />
  <Command __id="33" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:45 EST 2021" starttimestamp="1612994614940" timestamp="11036" />
  <Command __id="34" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:45 EST 2021" starttimestamp="1612994614940" timestamp="11037" />
  <Command __id="35" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:46 EST 2021" starttimestamp="1612994614940" timestamp="11188" />
  <Command __id="36" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:46 EST 2021" starttimestamp="1612994614940" timestamp="11204" />
  <Command __id="37" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:03:46 EST 2021" starttimestamp="1612994614940" timestamp="11300" />
  <Command __id="39" _type="PauseCommand" date="Wed Feb 10 17:03:50 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="15734">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4434]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="38" _type="MoveCaretCommand" caretOffset="1827" date="Wed Feb 10 17:03:50 EST 2021" docOffset="1827" starttimestamp="1612994614940" timestamp="15734" />
  <Command __id="41" _type="PauseCommand" date="Wed Feb 10 17:03:52 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="17166">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1432]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="40" _type="MoveCaretCommand" caretOffset="1641" date="Wed Feb 10 17:03:52 EST 2021" docOffset="1641" starttimestamp="1612994614940" timestamp="17166" />
  <Command __id="43" _type="PauseCommand" date="Wed Feb 10 17:03:53 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="18703">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1537]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="42" _type="SelectTextCommand" caretOffset="2464" date="Wed Feb 10 17:03:53 EST 2021" end="2464" start="1641" starttimestamp="1612994614940" timestamp="18703" />
  <Command __id="44" _type="CopyCommand" date="Wed Feb 10 17:03:54 EST 2021" starttimestamp="1612994614940" timestamp="19184" />
  <Command __id="46" _type="PauseCommand" date="Wed Feb 10 17:03:57 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="22220">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3036]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="47" _type="MoveCaretCommand" caretOffset="31896" date="Wed Feb 10 17:03:57 EST 2021" docOffset="33178" starttimestamp="1612994614940" timestamp="22379" />
  <Command __id="49" _type="PauseCommand" date="Wed Feb 10 17:04:03 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="28798">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6419]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="48" _type="MoveCaretCommand" caretOffset="32556" date="Wed Feb 10 17:04:03 EST 2021" docOffset="33838" starttimestamp="1612994614940" timestamp="28798" />
  <Command __id="51" _type="InsertStringCommand" date="Wed Feb 10 17:04:04 EST 2021" starttimestamp="1612994614940" timestamp="29582" timestamp2="29582">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="53" _type="InsertStringCommand" date="Wed Feb 10 17:04:04 EST 2021" starttimestamp="1612994614940" timestamp="29681" timestamp2="29681">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="54" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:04:04 EST 2021" starttimestamp="1612994614940" timestamp="29706" />
  <Command __id="55" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:04:04 EST 2021" starttimestamp="1612994614940" timestamp="29721" />
  <Command __id="56" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:04:04 EST 2021" starttimestamp="1612994614940" timestamp="29722" />
  <Command __id="57" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:04:04 EST 2021" starttimestamp="1612994614940" timestamp="29730" />
  <Command __id="65" _type="PasteCommand" date="Wed Feb 10 17:04:05 EST 2021" starttimestamp="1612994614940" timestamp="30135" />
  <Command __id="67" _type="PauseCommand" date="Wed Feb 10 17:04:06 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="31252">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1117]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="66" _type="MoveCaretCommand" caretOffset="32572" date="Wed Feb 10 17:04:06 EST 2021" docOffset="33957" starttimestamp="1612994614940" timestamp="31252" />
  <Command __id="68" _type="SelectTextCommand" caretOffset="32575" date="Wed Feb 10 17:04:06 EST 2021" end="32575" start="32569" starttimestamp="1612994614940" timestamp="31404" />
  <Command __id="70" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Wed Feb 10 17:04:07 EST 2021" starttimestamp="1612994614940" timestamp="32159" />
  <Command __id="72" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.deletePreviousWord" date="Wed Feb 10 17:04:07 EST 2021" starttimestamp="1612994614940" timestamp="32263" />
  <Command __id="74" _type="InsertStringCommand" date="Wed Feb 10 17:04:08 EST 2021" starttimestamp="1612994614940" timestamp="33071" timestamp2="33071">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="75" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Feb 10 17:04:08 EST 2021" start_end="START" starttimestamp="1612994614940" timestamp="33408" />
  <Command __id="82" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Feb 10 17:04:09 EST 2021" start_end="END" starttimestamp="1612994614940" timestamp="34970" />
  <Command __id="83" _type="MoveCaretCommand" caretOffset="32550" date="Wed Feb 10 17:04:10 EST 2021" docOffset="33935" starttimestamp="1612994614940" timestamp="35063" />
  <Command __id="85" _type="PauseCommand" date="Wed Feb 10 17:04:12 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="37827">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2764]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="84" _type="MoveCaretCommand" caretOffset="31484" date="Wed Feb 10 17:04:12 EST 2021" docOffset="32869" starttimestamp="1612994614940" timestamp="37827" />
  <Command __id="86" _type="SelectTextCommand" caretOffset="31489" date="Wed Feb 10 17:04:12 EST 2021" end="31489" start="31475" starttimestamp="1612994614940" timestamp="37987" />
  <Command __id="87" _type="CopyCommand" date="Wed Feb 10 17:04:13 EST 2021" starttimestamp="1612994614940" timestamp="38150" />
  <Command __id="89" _type="PauseCommand" date="Wed Feb 10 17:04:15 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="40715">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2565]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="88" _type="MoveCaretCommand" caretOffset="32579" date="Wed Feb 10 17:04:15 EST 2021" docOffset="33964" starttimestamp="1612994614940" timestamp="40715" />
  <Command __id="90" _type="SelectTextCommand" caretOffset="32580" date="Wed Feb 10 17:04:15 EST 2021" end="32580" start="32577" starttimestamp="1612994614940" timestamp="40870" />
  <Command __id="92" _type="PasteCommand" date="Wed Feb 10 17:04:15 EST 2021" starttimestamp="1612994614940" timestamp="40910" />
  <Command __id="94" _type="PauseCommand" date="Wed Feb 10 17:04:17 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="42321">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1411]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="95" _type="InsertStringCommand" date="Wed Feb 10 17:04:17 EST 2021" starttimestamp="1612994614940" timestamp="42330" timestamp2="42330">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="96" _type="MoveCaretCommand" caretOffset="32862" date="Wed Feb 10 17:04:17 EST 2021" docOffset="34247" starttimestamp="1612994614940" timestamp="42614" />
  <Command __id="98" _type="PauseCommand" date="Wed Feb 10 17:04:19 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="44290">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1676]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="97" _type="MoveCaretCommand" caretOffset="32606" date="Wed Feb 10 17:04:19 EST 2021" docOffset="33991" starttimestamp="1612994614940" timestamp="44290" />
  <Command __id="99" _type="SelectTextCommand" caretOffset="32609" date="Wed Feb 10 17:04:19 EST 2021" end="32609" start="32600" starttimestamp="1612994614940" timestamp="44444" />
  <Command __id="101" _type="InsertStringCommand" date="Wed Feb 10 17:04:20 EST 2021" starttimestamp="1612994614940" timestamp="45255" timestamp2="45255">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="102" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Feb 10 17:04:20 EST 2021" start_end="START" starttimestamp="1612994614940" timestamp="45285" />
  <Command __id="106" _type="PauseCommand" date="Wed Feb 10 17:04:21 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="46902">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1468]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="105" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Feb 10 17:04:21 EST 2021" start_end="END" starttimestamp="1612994614940" timestamp="46902" />
  <Command __id="107" _type="MoveCaretCommand" caretOffset="32601" date="Wed Feb 10 17:04:21 EST 2021" docOffset="33986" starttimestamp="1612994614940" timestamp="46974" />
  <Command __id="108" _type="SelectTextCommand" caretOffset="32603" date="Wed Feb 10 17:04:22 EST 2021" end="32603" start="32600" starttimestamp="1612994614940" timestamp="47118" />
  <Command __id="109" _type="CopyCommand" date="Wed Feb 10 17:04:22 EST 2021" starttimestamp="1612994614940" timestamp="47260" />
  <Command __id="110" _type="MoveCaretCommand" caretOffset="32622" date="Wed Feb 10 17:04:23 EST 2021" docOffset="34007" starttimestamp="1612994614940" timestamp="48171" />
  <Command __id="111" _type="MoveCaretCommand" caretOffset="32691" date="Wed Feb 10 17:04:23 EST 2021" docOffset="34076" starttimestamp="1612994614940" timestamp="48577" />
  <Command __id="112" _type="SelectTextCommand" caretOffset="32699" date="Wed Feb 10 17:04:23 EST 2021" end="32699" start="32690" starttimestamp="1612994614940" timestamp="48728" />
  <Command __id="114" _type="PasteCommand" date="Wed Feb 10 17:04:23 EST 2021" starttimestamp="1612994614940" timestamp="48913" />
  <Command __id="116" _type="PauseCommand" date="Wed Feb 10 17:04:24 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="49972">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1059]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="115" _type="MoveCaretCommand" caretOffset="33117" date="Wed Feb 10 17:04:24 EST 2021" docOffset="34502" starttimestamp="1612994614940" timestamp="49972" />
  <Command __id="117" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Feb 10 17:04:25 EST 2021" starttimestamp="1612994614940" timestamp="50663" />
  <Command __id="118" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:04:25 EST 2021" starttimestamp="1612994614940" timestamp="50754" />
  <Command __id="119" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:04:25 EST 2021" starttimestamp="1612994614940" timestamp="50915" />
  <Command __id="121" _type="PauseCommand" date="Wed Feb 10 17:04:38 EST 2021" range="10s-20s" starttimestamp="1612994614940" timestamp="63958">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[13043]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="120" _type="MoveCaretCommand" caretOffset="32906" date="Wed Feb 10 17:04:38 EST 2021" docOffset="34291" starttimestamp="1612994614940" timestamp="63958" />
  <Command __id="123" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:04:39 EST 2021" starttimestamp="1612994614940" timestamp="64266" />
  <Command __id="125" _type="PauseCommand" date="Wed Feb 10 17:04:40 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="65522">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1256]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="124" _type="MoveCaretCommand" caretOffset="33212" date="Wed Feb 10 17:04:40 EST 2021" docOffset="34597" starttimestamp="1612994614940" timestamp="65522" />
  <Command __id="127" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:04:40 EST 2021" starttimestamp="1612994614940" timestamp="65838" />
  <Command __id="129" _type="PauseCommand" date="Wed Feb 10 17:04:42 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="67929">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2091]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="128" _type="ShellCommand" date="Wed Feb 10 17:04:42 EST 2021" starttimestamp="1612994614940" timestamp="67929" type="ECLIPSE_MINIMIZED" />
  <Command __id="130" _type="ShellCommand" date="Wed Feb 10 17:04:42 EST 2021" starttimestamp="1612994614940" timestamp="67938" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="132" _type="PauseCommand" date="Wed Feb 10 17:04:51 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="76340">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8402]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="131" _type="ShellCommand" date="Wed Feb 10 17:04:51 EST 2021" starttimestamp="1612994614940" timestamp="76340" type="ECLIPSE_MAXIMIZED" />
  <Command __id="133" _type="ShellCommand" date="Wed Feb 10 17:04:51 EST 2021" starttimestamp="1612994614940" timestamp="76385" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="134" _type="MoveCaretCommand" caretOffset="32597" date="Wed Feb 10 17:04:51 EST 2021" docOffset="33982" starttimestamp="1612994614940" timestamp="77054" />
  <Command __id="135" _type="MoveCaretCommand" caretOffset="32787" date="Wed Feb 10 17:04:52 EST 2021" docOffset="34172" starttimestamp="1612994614940" timestamp="77671" />
  <Command __id="137" _type="PauseCommand" date="Wed Feb 10 17:04:53 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="79042">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1370]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="136" _type="MoveCaretCommand" caretOffset="32846" date="Wed Feb 10 17:04:53 EST 2021" docOffset="34231" starttimestamp="1612994614940" timestamp="79041" />
  <Command __id="139" _type="PauseCommand" date="Wed Feb 10 17:04:56 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="81378">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2337]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="138" _type="MoveCaretCommand" caretOffset="32881" date="Wed Feb 10 17:04:56 EST 2021" docOffset="34266" starttimestamp="1612994614940" timestamp="81378" />
  <Command __id="141" _type="PauseCommand" date="Wed Feb 10 17:04:59 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="85005">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3627]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="140" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Feb 10 17:04:59 EST 2021" starttimestamp="1612994614940" timestamp="85005" />
  <Command __id="142" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:05:00 EST 2021" starttimestamp="1612994614940" timestamp="85097" />
  <Command __id="143" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:05:00 EST 2021" starttimestamp="1612994614940" timestamp="85215" />
  <Command __id="145" _type="PauseCommand" date="Wed Feb 10 17:05:06 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="91847">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6632]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="144" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.folding.collapse_all" date="Wed Feb 10 17:05:06 EST 2021" starttimestamp="1612994614940" timestamp="91847" />
  <Command __id="147" _type="PauseCommand" date="Wed Feb 10 17:05:14 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="99909">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8062]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="146" _type="MoveCaretCommand" caretOffset="992" date="Wed Feb 10 17:05:14 EST 2021" docOffset="2744" starttimestamp="1612994614940" timestamp="99909" />
  <Command __id="149" _type="PauseCommand" date="Wed Feb 10 17:05:26 EST 2021" range="10s-20s" starttimestamp="1612994614940" timestamp="111147">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11238]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="148" _type="MoveCaretCommand" caretOffset="705" date="Wed Feb 10 17:05:26 EST 2021" docOffset="20970" starttimestamp="1612994614940" timestamp="111147" />
  <Command __id="151" _type="InsertStringCommand" date="Wed Feb 10 17:05:26 EST 2021" starttimestamp="1612994614940" timestamp="111384" timestamp2="111384">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="152" _type="MoveCaretCommand" caretOffset="782" date="Wed Feb 10 17:05:26 EST 2021" docOffset="21047" starttimestamp="1612994614940" timestamp="111857" />
  <Command __id="154" _type="InsertStringCommand" date="Wed Feb 10 17:05:26 EST 2021" starttimestamp="1612994614940" timestamp="111900" timestamp2="111900">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="163" _type="PauseCommand" date="Wed Feb 10 17:05:34 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="119634">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1121]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="162" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:05:34 EST 2021" starttimestamp="1612994614940" timestamp="119634" />
  <Command __id="164" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Feb 10 17:05:34 EST 2021" starttimestamp="1612994614940" timestamp="119653" />
  <Command __id="165" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:05:34 EST 2021" starttimestamp="1612994614940" timestamp="119749" />
  <Command __id="167" _type="PauseCommand" date="Wed Feb 10 17:05:37 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="122957">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3208]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="166" _type="MoveCaretCommand" caretOffset="3757" date="Wed Feb 10 17:05:37 EST 2021" docOffset="24022" starttimestamp="1612994614940" timestamp="122957" />
  <Command __id="169" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:05:38 EST 2021" starttimestamp="1612994614940" timestamp="123229" />
  <Command __id="170" _type="MoveCaretCommand" caretOffset="3805" date="Wed Feb 10 17:05:38 EST 2021" docOffset="24070" starttimestamp="1612994614940" timestamp="123875" />
  <Command __id="172" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:05:38 EST 2021" starttimestamp="1612994614940" timestamp="124019" />
  <Command __id="174" _type="PauseCommand" date="Wed Feb 10 17:05:40 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="125611">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1592]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="173" _type="SelectTextCommand" caretOffset="4349" date="Wed Feb 10 17:05:40 EST 2021" end="4349" start="4274" starttimestamp="1612994614940" timestamp="125611" />
  <Command __id="176" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:05:40 EST 2021" starttimestamp="1612994614940" timestamp="125767" />
  <Command __id="178" _type="PauseCommand" date="Wed Feb 10 17:05:43 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="128492">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2725]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="177" _type="SelectTextCommand" caretOffset="4886" date="Wed Feb 10 17:05:43 EST 2021" end="4886" start="4606" starttimestamp="1612994614940" timestamp="128492" />
  <Command __id="180" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:05:43 EST 2021" starttimestamp="1612994614940" timestamp="128650" />
  <Command __id="181" _type="MoveCaretCommand" caretOffset="4618" date="Wed Feb 10 17:05:44 EST 2021" docOffset="24883" starttimestamp="1612994614940" timestamp="129318" />
  <Command __id="183" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:05:44 EST 2021" starttimestamp="1612994614940" timestamp="129482" />
  <Command __id="184" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:05:45 EST 2021" starttimestamp="1612994614940" timestamp="130217" />
  <Command __id="185" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Feb 10 17:05:45 EST 2021" starttimestamp="1612994614940" timestamp="130231" />
  <Command __id="186" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:05:45 EST 2021" starttimestamp="1612994614940" timestamp="130331" />
  <DocumentChange __id="2" _type="Replace" date="Wed Feb 10 17:03:37 EST 2021" docASTNodeCount="285" docActiveCodeLength="2177" docExpressionCount="179" docLength="2503" endLine="80" insertionLength="2503" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="2503" offset="0" startLine="0" starttimestamp="1612994614940" timestamp="2524">
    <deletedText><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "https://www.google.com/search?q=accessing%20java%20swing%20&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a&channel=np&source=hp";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
		String s2 = "";
		System.out.println();
		try {
			s2 = get(url);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		System.out.println(s1.equals(s2));
	}
	
	public static String get(String urlString) throws Exception{
         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
        httpClient.setRequestMethod("GET");
        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
        int responseCode = httpClient.getResponseCode();
        System.out.println("Response Code : " + responseCode);
        try (BufferedReader in = new BufferedReader(
                new InputStreamReader(httpClient.getInputStream()))) {
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                response.append(line);
            }
            System.out.println(response.toString());
            return response.toString();
        }
	}
}

















]]></deletedText>
    <insertedText><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "https://www.google.com/search?q=accessing%20java%20swing%20&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a&channel=np&source=hp";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
//		replayer.analyzeFolder(experimentalClassFolderPath);
		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
		String s2 = "";
		System.out.println();
		try {
			s2 = get(url);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		System.out.println(s1.equals(s2));
	}
	
	public static String get(String urlString) throws Exception{
         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
        httpClient.setRequestMethod("GET");
        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
        int responseCode = httpClient.getResponseCode();
        System.out.println("Response Code : " + responseCode);
        try (BufferedReader in = new BufferedReader(
                new InputStreamReader(httpClient.getInputStream()))) {
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                response.append(line);
            }
            System.out.println(response.toString());
            return response.toString();
        }
	}
}

















]]></insertedText>
  </DocumentChange>
  <Command __id="45" _type="DiffBasedFileOpenCommand" date="Wed Feb 10 17:03:57 EST 2021" docASTNodeCount="5363" docActiveCodeLength="30856" docExpressionCount="3701" docLength="33843" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="22220">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
//			Map<String, String> searchWords = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
//			EHICommand lastPage = null;
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
//				if (!student.equals("16")) {
//					continue;
//				}
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
//							System.out.println("webcommand found");
							String url = command.getDataMap().get("URL");
//							if (url.contains("stackoverflow")) {
//								int a = 0;
//							}
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
										list.add(readWebContent(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									list.add(readWebContent(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
//							System.out.println("webcommad processed");
						}
						if (command instanceof PasteCommand) {
//							System.out.println("pastecommand found");
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
//									if (pastedText.contains("paintComponent")) {
//										int a = 0;
//									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											if (list.get(0).contains(pastedText.replaceAll("\\s", ""))) {
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
//								if (command2 instanceof WebCommand && (command2.getAttributesMap().get("type").equals("Search Result") || command2.getAttributesMap().get("type").equals("Instructor Provided Link"))) {
//									contents.get(command2.getDataMap().get("URL")).add(pastedText);
//									break;
//								}
							}
//							System.out.println("pastecommand processed");
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
//						nextLine.add(isProvided(url)+"");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="50" _type="Insert" date="Wed Feb 10 17:04:04 EST 2021" docASTNodeCount="5363" docActiveCodeLength="30862" docExpressionCount="3701" docLength="33849" length="6" offset="33838" repeat="2" starttimestamp="1612994614940" timestamp="29565" timestamp2="29671">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="58" _type="Replace" date="Wed Feb 10 17:04:04 EST 2021" docASTNodeCount="5459" docActiveCodeLength="31670" docExpressionCount="3765" docLength="34657" endLine="965" insertionLength="809" int_docASTNodeCount="5363" int_docActiveCodeLength="30861" int_docExpressionCount="3701" int_docLength="33848" length="1" offset="33843" startLine="965" starttimestamp="1612994614940" timestamp="29926">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public static String get(String urlString) throws Exception{
        HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
       httpClient.setRequestMethod("GET");
       httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
       int responseCode = httpClient.getResponseCode();
       System.out.println("Response Code : " + responseCode);
       try (BufferedReader in = new BufferedReader(
               new InputStreamReader(httpClient.getInputStream()))) {
           StringBuilder response = new StringBuilder();
           String line;
           while ((line = in.readLine()) != null) {
               response.append(line);
           }
           System.out.println(response.toString());
           return response.toString();
       }
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="59" _type="Insert" date="Wed Feb 10 17:04:04 EST 2021" docASTNodeCount="5471" docActiveCodeLength="31741" docExpressionCount="3775" docLength="34728" length="71" offset="161" repeat="4" starttimestamp="1612994614940" timestamp="30034" timestamp2="30051">
    <text><![CDATA[
import java.io.InputStreamReader;
import java.net.HttpURLConnection;]]></text>
  </DocumentChange>
  <DocumentChange __id="63" _type="Insert" date="Wed Feb 10 17:04:04 EST 2021" docASTNodeCount="5477" docActiveCodeLength="31773" docExpressionCount="3780" docLength="34760" length="32" offset="24" repeat="2" starttimestamp="1612994614940" timestamp="30056" timestamp2="30062">
    <text><![CDATA[import java.io.BufferedReader;
]]></text>
  </DocumentChange>
  <DocumentChange __id="69" _type="Delete" date="Wed Feb 10 17:04:07 EST 2021" docASTNodeCount="5475" docActiveCodeLength="31760" docExpressionCount="3780" docLength="34747" endLine="968" length="13" offset="33947" repeat="2" startLine="968" starttimestamp="1612994614940" timestamp="32149" timestamp2="32260">
    <text><![CDATA[public static]]></text>
  </DocumentChange>
  <DocumentChange __id="73" _type="Insert" date="Wed Feb 10 17:04:08 EST 2021" docASTNodeCount="5476" docActiveCodeLength="31767" docExpressionCount="3780" docLength="34754" length="7" offset="33947" repeat="7" starttimestamp="1612994614940" timestamp="33065" timestamp2="34177">
    <text><![CDATA[private]]></text>
  </DocumentChange>
  <DocumentChange __id="91" _type="Replace" date="Wed Feb 10 17:04:15 EST 2021" docASTNodeCount="5476" docActiveCodeLength="31778" docExpressionCount="3780" docLength="34765" endLine="968" insertionLength="14" int_docASTNodeCount="5474" int_docActiveCodeLength="31764" int_docExpressionCount="3779" int_docLength="34751" length="3" offset="33962" startLine="968" starttimestamp="1612994614940" timestamp="40901">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[readWebContent]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="93" _type="Insert" date="Wed Feb 10 17:04:17 EST 2021" docASTNodeCount="5476" docActiveCodeLength="31779" docExpressionCount="3780" docLength="34766" length="1" offset="33976" starttimestamp="1612994614940" timestamp="42321">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="100" _type="Replace" date="Wed Feb 10 17:04:20 EST 2021" docASTNodeCount="5476" docActiveCodeLength="31771" docExpressionCount="3780" docLength="34758" endLine="968" insertionLength="1" int_docASTNodeCount="5471" int_docActiveCodeLength="31770" int_docExpressionCount="3777" int_docLength="34757" length="9" offset="33985" startLine="968" starttimestamp="1612994614940" timestamp="45245">
    <deletedText><![CDATA[urlString]]></deletedText>
    <insertedText><![CDATA[u]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="103" _type="Insert" date="Wed Feb 10 17:04:20 EST 2021" docASTNodeCount="5476" docActiveCodeLength="31773" docExpressionCount="3780" docLength="34760" length="2" offset="33986" repeat="2" starttimestamp="1612994614940" timestamp="45371" timestamp2="45434">
    <text><![CDATA[rl]]></text>
  </DocumentChange>
  <DocumentChange __id="113" _type="Replace" date="Wed Feb 10 17:04:23 EST 2021" docASTNodeCount="5476" docActiveCodeLength="31767" docExpressionCount="3780" docLength="34754" endLine="969" insertionLength="3" int_docASTNodeCount="5475" int_docActiveCodeLength="31764" int_docExpressionCount="3779" int_docLength="34751" length="9" offset="34075" startLine="969" starttimestamp="1612994614940" timestamp="48899">
    <deletedText><![CDATA[urlString]]></deletedText>
    <insertedText><![CDATA[url]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="122" _type="Delete" date="Wed Feb 10 17:04:39 EST 2021" docASTNodeCount="5467" docActiveCodeLength="31704" docExpressionCount="3772" docLength="34691" endLine="974" length="63" offset="34268" startLine="973" starttimestamp="1612994614940" timestamp="64260">
    <text><![CDATA[       System.out.println("Response Code : " + responseCode);
]]></text>
  </DocumentChange>
  <DocumentChange __id="126" _type="Delete" date="Wed Feb 10 17:04:40 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31651" docExpressionCount="3764" docLength="34638" endLine="981" length="53" offset="34581" startLine="980" starttimestamp="1612994614940" timestamp="65834">
    <text><![CDATA[           System.out.println(response.toString());
]]></text>
  </DocumentChange>
  <DocumentChange __id="150" _type="Insert" date="Wed Feb 10 17:05:26 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31652" docExpressionCount="3764" docLength="34639" length="1" offset="20970" starttimestamp="1612994614940" timestamp="111377">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="153" _type="Insert" date="Wed Feb 10 17:05:26 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31653" docExpressionCount="3764" docLength="34640" length="1" offset="21047" starttimestamp="1612994614940" timestamp="111895">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="157" _type="Delete" date="Wed Feb 10 17:05:33 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31647" docExpressionCount="3764" docLength="34559" endLine="634" length="81" offset="22528" startLine="631" starttimestamp="1612994614940" timestamp="118078">
    <text><![CDATA[//							if (url.contains("stackoverflow")) {
//								int a = 0;
//							}
]]></text>
  </DocumentChange>
  <DocumentChange __id="160" _type="Delete" date="Wed Feb 10 17:05:33 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31645" docExpressionCount="3764" docLength="34509" endLine="630" length="50" offset="22424" startLine="629" starttimestamp="1612994614940" timestamp="118508">
    <text><![CDATA[//							System.out.println("webcommand found");
]]></text>
  </DocumentChange>
  <DocumentChange __id="168" _type="Delete" date="Wed Feb 10 17:05:38 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31643" docExpressionCount="3764" docLength="34456" endLine="667" length="53" offset="23990" startLine="666" starttimestamp="1612994614940" timestamp="123221">
    <text><![CDATA[//							System.out.println("webcommad processed");
]]></text>
  </DocumentChange>
  <DocumentChange __id="171" _type="Delete" date="Wed Feb 10 17:05:38 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31641" docExpressionCount="3764" docLength="34404" endLine="669" length="52" offset="24045" startLine="668" starttimestamp="1612994614940" timestamp="124014">
    <text><![CDATA[//							System.out.println("pastecommand found");
]]></text>
  </DocumentChange>
  <DocumentChange __id="175" _type="Delete" date="Wed Feb 10 17:05:40 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31635" docExpressionCount="3764" docLength="34309" endLine="681" length="95" offset="24521" startLine="678" starttimestamp="1612994614940" timestamp="125756">
    <text><![CDATA[//									if (pastedText.contains("paintComponent")) {
//										int a = 0;
//									}
]]></text>
  </DocumentChange>
  <DocumentChange __id="179" _type="Delete" date="Wed Feb 10 17:05:43 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31627" docExpressionCount="3764" docLength="34005" endLine="692" length="304" offset="24849" startLine="688" starttimestamp="1612994614940" timestamp="128641">
    <text><![CDATA[//								if (command2 instanceof WebCommand && (command2.getAttributesMap().get("type").equals("Search Result") || command2.getAttributesMap().get("type").equals("Instructor Provided Link"))) {
//									contents.get(command2.getDataMap().get("URL")).add(pastedText);
//									break;
//								}
]]></text>
  </DocumentChange>
  <DocumentChange __id="182" _type="Delete" date="Wed Feb 10 17:05:44 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31625" docExpressionCount="3764" docLength="33949" endLine="690" length="56" offset="24859" startLine="689" starttimestamp="1612994614940" timestamp="129478">
    <text><![CDATA[//							System.out.println("pastecommand processed");
]]></text>
  </DocumentChange>
  <Command __id="188" _type="PauseCommand" date="Wed Feb 10 17:05:47 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="133019">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2688]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="187" _type="MoveCaretCommand" caretOffset="5209" date="Wed Feb 10 17:05:47 EST 2021" docOffset="25474" starttimestamp="1612994614940" timestamp="133019" />
  <Command __id="190" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:05:48 EST 2021" starttimestamp="1612994614940" timestamp="133517" />
  <Command __id="191" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:05:49 EST 2021" starttimestamp="1612994614940" timestamp="134301" />
  <Command __id="192" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Feb 10 17:05:49 EST 2021" starttimestamp="1612994614940" timestamp="134312" />
  <Command __id="193" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:05:49 EST 2021" starttimestamp="1612994614940" timestamp="134411" />
  <Command __id="195" _type="PauseCommand" date="Wed Feb 10 17:05:53 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="138968">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4557]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="194" _type="ShellCommand" date="Wed Feb 10 17:05:53 EST 2021" starttimestamp="1612994614940" timestamp="138968" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="197" _type="PauseCommand" date="Wed Feb 10 17:05:55 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="140586">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1618]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="196" _type="ShellCommand" date="Wed Feb 10 17:05:55 EST 2021" starttimestamp="1612994614940" timestamp="140586" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="198" _type="ShellCommand" date="Wed Feb 10 17:05:56 EST 2021" starttimestamp="1612994614940" timestamp="141146" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="200" _type="PauseCommand" date="Wed Feb 10 17:05:58 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="143193">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2047]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="199" _type="ShellCommand" date="Wed Feb 10 17:05:58 EST 2021" starttimestamp="1612994614940" timestamp="143193" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="201" _type="ShellCommand" date="Wed Feb 10 17:05:58 EST 2021" starttimestamp="1612994614940" timestamp="143742" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="203" _type="PauseCommand" date="Wed Feb 10 17:06:00 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="145252">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1510]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="202" _type="ShellCommand" date="Wed Feb 10 17:06:00 EST 2021" starttimestamp="1612994614940" timestamp="145252" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="204" _type="ShellCommand" date="Wed Feb 10 17:06:00 EST 2021" starttimestamp="1612994614940" timestamp="145336" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="206" _type="PauseCommand" date="Wed Feb 10 17:06:04 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="149905">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4569]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="205" _type="ShellCommand" date="Wed Feb 10 17:06:04 EST 2021" starttimestamp="1612994614940" timestamp="149905" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="207" _type="MoveCaretCommand" caretOffset="4332" date="Wed Feb 10 17:06:04 EST 2021" docOffset="24597" starttimestamp="1612994614940" timestamp="149955" />
  <Command __id="208" _type="MoveCaretCommand" caretOffset="4436" date="Wed Feb 10 17:06:05 EST 2021" docOffset="24701" starttimestamp="1612994614940" timestamp="150360" />
  <Command __id="209" _type="MoveCaretCommand" caretOffset="4501" date="Wed Feb 10 17:06:05 EST 2021" docOffset="24766" starttimestamp="1612994614940" timestamp="150717" />
  <Command __id="210" _type="MoveCaretCommand" caretOffset="4532" date="Wed Feb 10 17:06:06 EST 2021" docOffset="24797" starttimestamp="1612994614940" timestamp="151277" />
  <Command __id="211" _type="MoveCaretCommand" caretOffset="4501" date="Wed Feb 10 17:06:06 EST 2021" docOffset="24766" starttimestamp="1612994614940" timestamp="151764" />
  <Command __id="213" _type="PauseCommand" date="Wed Feb 10 17:06:11 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="156104">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4340]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="212" _type="ShellCommand" date="Wed Feb 10 17:06:11 EST 2021" starttimestamp="1612994614940" timestamp="156104" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="214" _type="ShellCommand" date="Wed Feb 10 17:06:11 EST 2021" starttimestamp="1612994614940" timestamp="156264" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="215" _type="ShellCommand" date="Wed Feb 10 17:06:11 EST 2021" starttimestamp="1612994614940" timestamp="156282" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="217" _type="PauseCommand" date="Wed Feb 10 17:06:16 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="161559">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5277]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="216" _type="ShellCommand" date="Wed Feb 10 17:06:16 EST 2021" starttimestamp="1612994614940" timestamp="161559" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="218" _type="ShellCommand" date="Wed Feb 10 17:06:16 EST 2021" starttimestamp="1612994614940" timestamp="161582" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="220" _type="PauseCommand" date="Wed Feb 10 17:06:21 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="166964">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5382]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="219" _type="ShellCommand" date="Wed Feb 10 17:06:21 EST 2021" starttimestamp="1612994614940" timestamp="166964" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="222" _type="PauseCommand" date="Wed Feb 10 17:06:33 EST 2021" range="10s-20s" starttimestamp="1612994614940" timestamp="179056">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12092]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="221" _type="MoveCaretCommand" caretOffset="3105" date="Wed Feb 10 17:06:33 EST 2021" docOffset="23370" starttimestamp="1612994614940" timestamp="179056" />
  <Command __id="223" _type="MoveCaretCommand" caretOffset="3105" date="Wed Feb 10 17:06:34 EST 2021" docOffset="23370" starttimestamp="1612994614940" timestamp="179827" />
  <Command __id="224" _type="SelectTextCommand" caretOffset="3124" date="Wed Feb 10 17:06:34 EST 2021" end="3124" start="3105" starttimestamp="1612994614940" timestamp="179988" />
  <Command __id="225" _type="SelectTextCommand" caretOffset="3128" date="Wed Feb 10 17:06:35 EST 2021" end="3128" start="3086" starttimestamp="1612994614940" timestamp="180131" />
  <Command __id="226" _type="CopyCommand" date="Wed Feb 10 17:06:35 EST 2021" starttimestamp="1612994614940" timestamp="180448" />
  <Command __id="227" _type="MoveCaretCommand" caretOffset="3126" date="Wed Feb 10 17:06:35 EST 2021" docOffset="23391" starttimestamp="1612994614940" timestamp="180931" />
  <Command __id="229" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Feb 10 17:06:36 EST 2021" starttimestamp="1612994614940" timestamp="181792" />
  <Command __id="231" _type="InsertStringCommand" date="Wed Feb 10 17:06:37 EST 2021" starttimestamp="1612994614940" timestamp="182290" timestamp2="182290">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="233" _type="PasteCommand" date="Wed Feb 10 17:06:37 EST 2021" starttimestamp="1612994614940" timestamp="182561" />
  <Command __id="235" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:06:38 EST 2021" starttimestamp="1612994614940" timestamp="183511" />
  <Command __id="237" _type="PauseCommand" date="Wed Feb 10 17:06:39 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="184969">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1458]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="236" _type="MoveCaretCommand" caretOffset="3163" date="Wed Feb 10 17:06:39 EST 2021" docOffset="23428" starttimestamp="1612994614940" timestamp="184969" />
  <Command __id="239" _type="InsertStringCommand" date="Wed Feb 10 17:06:39 EST 2021" starttimestamp="1612994614940" timestamp="184997" timestamp2="184997">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="240" _type="MoveCaretCommand" caretOffset="3230" date="Wed Feb 10 17:06:40 EST 2021" docOffset="23495" starttimestamp="1612994614940" timestamp="185249" />
  <Command __id="242" _type="PauseCommand" date="Wed Feb 10 17:06:41 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="186455">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1206]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="241" _type="MoveCaretCommand" caretOffset="3608" date="Wed Feb 10 17:06:41 EST 2021" docOffset="23873" starttimestamp="1612994614940" timestamp="186455" />
  <Command __id="244" _type="PauseCommand" date="Wed Feb 10 17:06:43 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="188475">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2020]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="245" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Feb 10 17:06:43 EST 2021" starttimestamp="1612994614940" timestamp="188509" />
  <Command __id="247" _type="InsertStringCommand" date="Wed Feb 10 17:06:44 EST 2021" starttimestamp="1612994614940" timestamp="189115" timestamp2="189115">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="249" _type="PasteCommand" date="Wed Feb 10 17:06:44 EST 2021" starttimestamp="1612994614940" timestamp="189391" />
  <Command __id="251" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:06:45 EST 2021" starttimestamp="1612994614940" timestamp="190202" />
  <Command __id="252" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Feb 10 17:06:45 EST 2021" starttimestamp="1612994614940" timestamp="190394" />
  <Command __id="253" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" date="Wed Feb 10 17:06:45 EST 2021" starttimestamp="1612994614940" timestamp="190776" />
  <Command __id="254" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Feb 10 17:06:45 EST 2021" starttimestamp="1612994614940" timestamp="191011" />
  <Command __id="255" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Feb 10 17:06:46 EST 2021" starttimestamp="1612994614940" timestamp="191180" />
  <Command __id="256" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Feb 10 17:06:46 EST 2021" starttimestamp="1612994614940" timestamp="191313" />
  <Command __id="258" _type="InsertStringCommand" date="Wed Feb 10 17:06:46 EST 2021" starttimestamp="1612994614940" timestamp="191580" timestamp2="191580">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="260" _type="PauseCommand" date="Wed Feb 10 17:06:47 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="192978">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1398]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="259" _type="MoveCaretCommand" caretOffset="3365" date="Wed Feb 10 17:06:47 EST 2021" docOffset="23630" starttimestamp="1612994614940" timestamp="192978" />
  <Command __id="262" _type="PauseCommand" date="Wed Feb 10 17:06:49 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="194293">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1315]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="263" _type="UndoCommand" date="Wed Feb 10 17:06:49 EST 2021" starttimestamp="1612994614940" timestamp="194304" />
  <Command __id="264" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Feb 10 17:06:49 EST 2021" starttimestamp="1612994614940" timestamp="194659" />
  <Command __id="265" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Feb 10 17:06:49 EST 2021" starttimestamp="1612994614940" timestamp="194813" />
  <Command __id="266" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Feb 10 17:06:49 EST 2021" starttimestamp="1612994614940" timestamp="194977" />
  <Command __id="267" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Feb 10 17:06:50 EST 2021" starttimestamp="1612994614940" timestamp="195084" />
  <Command __id="269" _type="InsertStringCommand" date="Wed Feb 10 17:06:50 EST 2021" starttimestamp="1612994614940" timestamp="195263" timestamp2="195263">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="271" _type="PauseCommand" date="Wed Feb 10 17:06:51 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="196493">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1230]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="270" _type="MoveCaretCommand" caretOffset="3687" date="Wed Feb 10 17:06:51 EST 2021" docOffset="23952" starttimestamp="1612994614940" timestamp="196493" />
  <Command __id="273" _type="PauseCommand" date="Wed Feb 10 17:07:00 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="205505">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9012]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="272" _type="SelectTextCommand" caretOffset="7855" date="Wed Feb 10 17:07:00 EST 2021" end="7855" start="7838" starttimestamp="1612994614940" timestamp="205505" />
  <Command __id="275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:07:00 EST 2021" starttimestamp="1612994614940" timestamp="205987" />
  <Command __id="277" _type="PauseCommand" date="Wed Feb 10 17:07:03 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="208347">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2360]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="276" _type="MoveCaretCommand" caretOffset="7839" date="Wed Feb 10 17:07:03 EST 2021" docOffset="33347" starttimestamp="1612994614940" timestamp="208347" />
  <Command __id="279" _type="InsertStringCommand" date="Wed Feb 10 17:07:03 EST 2021" starttimestamp="1612994614940" timestamp="208995" timestamp2="208995">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="281" _type="InsertStringCommand" date="Wed Feb 10 17:07:04 EST 2021" starttimestamp="1612994614940" timestamp="209195" timestamp2="209195">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="282" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Feb 10 17:07:04 EST 2021" start_end="START" starttimestamp="1612994614940" timestamp="209235" />
  <Command __id="285" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Feb 10 17:07:05 EST 2021" start_end="END" starttimestamp="1612994614940" timestamp="210456" />
  <Command __id="287" _type="InsertStringCommand" date="Wed Feb 10 17:07:05 EST 2021" starttimestamp="1612994614940" timestamp="210521" timestamp2="210521">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="289" _type="PauseCommand" date="Wed Feb 10 17:07:12 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="217326">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[6805]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="288" _type="SelectTextCommand" caretOffset="8537" date="Wed Feb 10 17:07:12 EST 2021" end="8537" start="7924" starttimestamp="1612994614940" timestamp="217326" />
  <Command __id="291" _type="CutCommand" date="Wed Feb 10 17:07:12 EST 2021" starttimestamp="1612994614940" timestamp="217844" />
  <Command __id="292" _type="MoveCaretCommand" caretOffset="7853" date="Wed Feb 10 17:07:13 EST 2021" docOffset="33361" starttimestamp="1612994614940" timestamp="218822" />
  <Command __id="294" _type="PasteCommand" date="Wed Feb 10 17:07:13 EST 2021" starttimestamp="1612994614940" timestamp="218941" />
  <Command __id="295" _type="ShellCommand" date="Wed Feb 10 17:07:14 EST 2021" starttimestamp="1612994614940" timestamp="219484" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="297" _type="PauseCommand" date="Wed Feb 10 17:07:24 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="229280">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9796]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="296" _type="ShellCommand" date="Wed Feb 10 17:07:24 EST 2021" starttimestamp="1612994614940" timestamp="229280" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="299" _type="PauseCommand" date="Wed Feb 10 17:07:26 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="231142">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1862]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="298" _type="MoveCaretCommand" caretOffset="8552" date="Wed Feb 10 17:07:26 EST 2021" docOffset="34060" starttimestamp="1612994614940" timestamp="231142" />
  <Command __id="300" _type="MoveCaretCommand" caretOffset="8561" date="Wed Feb 10 17:07:26 EST 2021" docOffset="34069" starttimestamp="1612994614940" timestamp="231542" />
  <Command __id="302" _type="InsertStringCommand" date="Wed Feb 10 17:07:26 EST 2021" starttimestamp="1612994614940" timestamp="231860" timestamp2="231860">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="303" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Feb 10 17:07:26 EST 2021" start_end="START" starttimestamp="1612994614940" timestamp="231899" />
  <Command __id="306" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Feb 10 17:07:27 EST 2021" start_end="END" starttimestamp="1612994614940" timestamp="232252" />
  <Command __id="308" _type="InsertStringCommand" date="Wed Feb 10 17:07:27 EST 2021" starttimestamp="1612994614940" timestamp="232267" timestamp2="232267">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="310" _type="InsertStringCommand" date="Wed Feb 10 17:07:27 EST 2021" starttimestamp="1612994614940" timestamp="232845" timestamp2="232845">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="312" _type="InsertStringCommand" date="Wed Feb 10 17:07:28 EST 2021" starttimestamp="1612994614940" timestamp="233092" timestamp2="233092">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="314" _type="InsertStringCommand" date="Wed Feb 10 17:07:28 EST 2021" starttimestamp="1612994614940" timestamp="233218" timestamp2="233218">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="316" _type="InsertStringCommand" date="Wed Feb 10 17:07:28 EST 2021" starttimestamp="1612994614940" timestamp="233405" timestamp2="233405">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="318" _type="PauseCommand" date="Wed Feb 10 17:07:29 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="234620">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1215]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="317" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Feb 10 17:07:29 EST 2021" starttimestamp="1612994614940" timestamp="234620" />
  <Command __id="319" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:07:29 EST 2021" starttimestamp="1612994614940" timestamp="234711" />
  <Command __id="320" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:07:29 EST 2021" starttimestamp="1612994614940" timestamp="234832" />
  <Command __id="324" _type="PauseCommand" date="Wed Feb 10 17:07:50 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="255295">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1030]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="323" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Wed Feb 10 17:07:50 EST 2021" starttimestamp="1612994614940" timestamp="255295" />
  <Command __id="326" _type="PauseCommand" date="Wed Feb 10 17:07:54 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="259358">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4063]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="325" _type="MoveCaretCommand" caretOffset="8458" date="Wed Feb 10 17:07:54 EST 2021" docOffset="32958" starttimestamp="1612994614940" timestamp="259358" />
  <Command __id="327" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Wed Feb 10 17:07:54 EST 2021" starttimestamp="1612994614940" timestamp="259818" />
  <Command __id="329" _type="PauseCommand" date="Wed Feb 10 17:07:57 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="262899">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3081]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="328" _type="MoveCaretCommand" caretOffset="8448" date="Wed Feb 10 17:07:57 EST 2021" docOffset="32948" starttimestamp="1612994614940" timestamp="262899" />
  <Command __id="331" _type="PauseCommand" date="Wed Feb 10 17:07:58 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="263927">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1028]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="332" _type="SelectTextCommand" caretOffset="2464" date="Wed Feb 10 17:07:58 EST 2021" end="2464" start="1641" starttimestamp="1612994614940" timestamp="264041" />
  <DocumentChange __id="189" _type="Delete" date="Wed Feb 10 17:05:48 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31623" docExpressionCount="3764" docLength="33906" endLine="708" length="43" offset="25441" startLine="707" starttimestamp="1612994614940" timestamp="133509">
    <text><![CDATA[//						nextLine.add(isProvided(url)+"");
]]></text>
  </DocumentChange>
  <DocumentChange __id="228" _type="Insert" date="Wed Feb 10 17:06:36 EST 2021" docASTNodeCount="5451" docActiveCodeLength="31583" docExpressionCount="3758" docLength="33908" length="2" offset="23351" starttimestamp="1612994614940" timestamp="181758">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="230" _type="Insert" date="Wed Feb 10 17:06:37 EST 2021" docASTNodeCount="5451" docActiveCodeLength="31595" docExpressionCount="3758" docLength="33920" length="12" offset="23393" starttimestamp="1612994614940" timestamp="182277">
    <text><![CDATA[
										]]></text>
  </DocumentChange>
  <DocumentChange __id="232" _type="Replace" date="Wed Feb 10 17:06:37 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31627" docExpressionCount="3764" docLength="33952" endLine="649" insertionLength="42" int_docASTNodeCount="5451" int_docActiveCodeLength="31585" int_docExpressionCount="3758" int_docLength="33910" length="10" offset="23395" startLine="649" starttimestamp="1612994614940" timestamp="182553">
    <deletedText><![CDATA[										]]></deletedText>
    <insertedText><![CDATA[										list.add(readWebContent(url));
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="234" _type="Delete" date="Wed Feb 10 17:06:38 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31625" docExpressionCount="3764" docLength="33950" endLine="651" length="2" offset="23437" startLine="650" starttimestamp="1612994614940" timestamp="183506">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="238" _type="Insert" date="Wed Feb 10 17:06:39 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31626" docExpressionCount="3764" docLength="33951" length="1" offset="23428" starttimestamp="1612994614940" timestamp="184990">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="243" _type="Insert" date="Wed Feb 10 17:06:43 EST 2021" docASTNodeCount="5451" docActiveCodeLength="31587" docExpressionCount="3758" docLength="33953" length="2" offset="23834" starttimestamp="1612994614940" timestamp="188475">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="246" _type="Insert" date="Wed Feb 10 17:06:44 EST 2021" docASTNodeCount="5451" docActiveCodeLength="31598" docExpressionCount="3758" docLength="33964" length="11" offset="23875" starttimestamp="1612994614940" timestamp="189106">
    <text><![CDATA[
									]]></text>
  </DocumentChange>
  <DocumentChange __id="248" _type="Replace" date="Wed Feb 10 17:06:44 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31630" docExpressionCount="3764" docLength="33996" endLine="662" insertionLength="41" int_docASTNodeCount="5451" int_docActiveCodeLength="31589" int_docExpressionCount="3758" int_docLength="33955" length="9" offset="23877" startLine="662" starttimestamp="1612994614940" timestamp="189380">
    <deletedText><![CDATA[									]]></deletedText>
    <insertedText><![CDATA[									list.add(readWebContent(url));
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="250" _type="Delete" date="Wed Feb 10 17:06:45 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31628" docExpressionCount="3764" docLength="33994" endLine="664" length="2" offset="23918" startLine="663" starttimestamp="1612994614940" timestamp="190200">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="257" _type="Insert" date="Wed Feb 10 17:06:46 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31629" docExpressionCount="3764" docLength="33995" length="1" offset="23913" starttimestamp="1612994614940" timestamp="191576">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="261" _type="Delete" date="Wed Feb 10 17:06:49 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31628" docExpressionCount="3764" docLength="33994" endLine="662" length="1" offset="23913" startLine="662" starttimestamp="1612994614940" timestamp="194293">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="268" _type="Insert" date="Wed Feb 10 17:06:50 EST 2021" docASTNodeCount="5458" docActiveCodeLength="31629" docExpressionCount="3764" docLength="33995" length="1" offset="23909" starttimestamp="1612994614940" timestamp="195256">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="274" _type="Delete" date="Wed Feb 10 17:07:00 EST 2021" docASTNodeCount="5457" docActiveCodeLength="31612" docExpressionCount="3763" docLength="33978" endLine="955" length="17" offset="33346" startLine="955" starttimestamp="1612994614940" timestamp="205981">
    <text><![CDATA[ throws Exception]]></text>
  </DocumentChange>
  <DocumentChange __id="278" _type="Insert" date="Wed Feb 10 17:07:03 EST 2021" docASTNodeCount="5391" docActiveCodeLength="31619" docExpressionCount="3720" docLength="33985" length="7" offset="33347" repeat="4" starttimestamp="1612994614940" timestamp="208984" timestamp2="209466">
    <text><![CDATA[
		try]]></text>
  </DocumentChange>
  <DocumentChange __id="286" _type="Replace" date="Wed Feb 10 17:07:05 EST 2021" docASTNodeCount="5465" docActiveCodeLength="31663" docExpressionCount="3765" docLength="34054" endLine="956" insertionLength="72" int_docASTNodeCount="5457" int_docActiveCodeLength="31616" int_docExpressionCount="3763" int_docLength="33982" length="3" offset="33351" startLine="956" starttimestamp="1612994614940" timestamp="210491">
    <deletedText><![CDATA[try]]></deletedText>
    <insertedText><![CDATA[try {
			
		} catch (Exception e) {
			// TODO: handle exception
		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="290" _type="Delete" date="Wed Feb 10 17:07:12 EST 2021" docASTNodeCount="5399" docActiveCodeLength="31050" docExpressionCount="3722" docLength="33441" endLine="973" length="613" offset="33432" startLine="961" starttimestamp="1612994614940" timestamp="217823">
    <text><![CDATA[ HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
       httpClient.setRequestMethod("GET");
       httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
       int responseCode = httpClient.getResponseCode();
       try (BufferedReader in = new BufferedReader(
               new InputStreamReader(httpClient.getInputStream()))) {
           StringBuilder response = new StringBuilder();
           String line;
           while ((line = in.readLine()) != null) {
               response.append(line);
           }
           return response.toString();
       }]]></text>
  </DocumentChange>
  <DocumentChange __id="293" _type="Replace" date="Wed Feb 10 17:07:13 EST 2021" docASTNodeCount="5465" docActiveCodeLength="31687" docExpressionCount="3765" docLength="34078" endLine="957" insertionLength="640" int_docASTNodeCount="5399" int_docActiveCodeLength="31047" int_docExpressionCount="3722" int_docLength="33438" length="3" offset="33358" startLine="957" starttimestamp="1612994614940" timestamp="218921">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			 HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
		       httpClient.setRequestMethod("GET");
		       httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
		       int responseCode = httpClient.getResponseCode();
		       try (BufferedReader in = new BufferedReader(
		               new InputStreamReader(httpClient.getInputStream()))) {
		           StringBuilder response = new StringBuilder();
		           String line;
		           while ((line = in.readLine()) != null) {
		               response.append(line);
		           }
		           return response.toString();
		       }]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="301" _type="Insert" date="Wed Feb 10 17:07:26 EST 2021" docASTNodeCount="5467" docActiveCodeLength="31690" docExpressionCount="3766" docLength="34081" length="3" offset="34069" repeat="3" starttimestamp="1612994614940" timestamp="231853" timestamp2="232116">
    <text><![CDATA[ret]]></text>
  </DocumentChange>
  <DocumentChange __id="307" _type="Replace" date="Wed Feb 10 17:07:27 EST 2021" docASTNodeCount="5466" docActiveCodeLength="31693" docExpressionCount="3765" docLength="34084" endLine="973" insertionLength="6" int_docASTNodeCount="5465" int_docActiveCodeLength="31687" int_docExpressionCount="3765" int_docLength="34078" length="3" offset="34069" startLine="973" starttimestamp="1612994614940" timestamp="232261">
    <deletedText><![CDATA[ret]]></deletedText>
    <insertedText><![CDATA[return]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="309" _type="Insert" date="Wed Feb 10 17:07:27 EST 2021" docASTNodeCount="5467" docActiveCodeLength="31697" docExpressionCount="3766" docLength="34088" length="4" offset="34075" repeat="4" starttimestamp="1612994614940" timestamp="232840" timestamp2="233401">
    <text><![CDATA[ "";]]></text>
  </DocumentChange>
  <Command __id="330" _type="DiffBasedFileOpenCommand" date="Wed Feb 10 17:07:58 EST 2021" docASTNodeCount="285" docActiveCodeLength="2177" docExpressionCount="179" docLength="2503" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="263927">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "https://www.google.com/search?q=accessing%20java%20swing%20&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a&channel=np&source=hp";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶//		replayer.analyzeFolder(experimentalClassFolderPath);¶		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶		String s2 = "";¶		System.out.println();¶		try {¶			s2 = get(url);¶		} catch (Exception e) {¶			// TODO: handle exception¶			e.printStackTrace();¶		}¶		System.out.println(s1.equals(s2));¶	}¶	¶	public static String get(String urlString) throws Exception{¶         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶        httpClient.setRequestMethod("GET");¶        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶        int responseCode = httpClient.getResponseCode();¶        System.out.println("Response Code : " + responseCode);¶        try (BufferedReader in = new BufferedReader(¶                new InputStreamReader(httpClient.getInputStream()))) {¶            StringBuilder response = new StringBuilder();¶            String line;¶            while ((line = in.readLine()) != null) {¶                response.append(line);¶            }¶            System.out.println(response.toString());¶            return response.toString();¶        }¶	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="333" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="267" docActiveCodeLength="2116" docExpressionCount="166" docLength="2505" length="2" offset="1640" starttimestamp="1612994614940" timestamp="267835">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="335" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="253" docActiveCodeLength="2021" docExpressionCount="157" docLength="2507" length="2" offset="1705" starttimestamp="1612994614940" timestamp="267860">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="334" _type="PauseCommand" date="Wed Feb 10 17:08:02 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="267835">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3794]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="351" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Feb 10 17:08:02 EST 2021" starttimestamp="1612994614940" timestamp="267917" />
  <Command __id="353" _type="PauseCommand" date="Wed Feb 10 17:08:06 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="271387">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3470]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="352" _type="SelectTextCommand" caretOffset="1631" date="Wed Feb 10 17:08:06 EST 2021" end="1631" start="1457" starttimestamp="1612994614940" timestamp="271387" />
  <Command __id="362" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Feb 10 17:08:06 EST 2021" starttimestamp="1612994614940" timestamp="271496" />
  <DocumentChange __id="336" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="253" docActiveCodeLength="1978" docExpressionCount="157" docLength="2509" length="2" offset="1804" starttimestamp="1612994614940" timestamp="267874">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="337" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="253" docActiveCodeLength="1911" docExpressionCount="157" docLength="2511" length="2" offset="1851" starttimestamp="1612994614940" timestamp="267884">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="338" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="246" docActiveCodeLength="1855" docExpressionCount="153" docLength="2513" length="2" offset="1922" starttimestamp="1612994614940" timestamp="267886">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="339" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="246" docActiveCodeLength="1793" docExpressionCount="153" docLength="2515" length="2" offset="1982" starttimestamp="1612994614940" timestamp="267887">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="340" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="232" docActiveCodeLength="1741" docExpressionCount="144" docLength="2517" length="2" offset="2048" starttimestamp="1612994614940" timestamp="267888">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="341" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="209" docActiveCodeLength="1671" docExpressionCount="125" docLength="2519" length="2" offset="2104" starttimestamp="1612994614940" timestamp="267889">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="342" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="201" docActiveCodeLength="1614" docExpressionCount="121" docLength="2521" length="2" offset="2178" starttimestamp="1612994614940" timestamp="267890">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="343" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="196" docActiveCodeLength="1590" docExpressionCount="119" docLength="2523" length="2" offset="2239" starttimestamp="1612994614940" timestamp="267891">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="344" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="189" docActiveCodeLength="1538" docExpressionCount="115" docLength="2525" length="2" offset="2267" starttimestamp="1612994614940" timestamp="267892">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="345" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="189" docActiveCodeLength="1500" docExpressionCount="115" docLength="2527" length="2" offset="2323" starttimestamp="1612994614940" timestamp="267893">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="346" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="189" docActiveCodeLength="1487" docExpressionCount="115" docLength="2529" length="2" offset="2365" starttimestamp="1612994614940" timestamp="267894">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="347" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="189" docActiveCodeLength="1435" docExpressionCount="115" docLength="2531" length="2" offset="2382" starttimestamp="1612994614940" timestamp="267895">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="348" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="189" docActiveCodeLength="1396" docExpressionCount="115" docLength="2533" length="2" offset="2438" starttimestamp="1612994614940" timestamp="267896">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="349" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="189" docActiveCodeLength="1387" docExpressionCount="115" docLength="2535" length="2" offset="2481" starttimestamp="1612994614940" timestamp="267896">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="350" _type="Insert" date="Wed Feb 10 17:08:02 EST 2021" docASTNodeCount="189" docActiveCodeLength="1385" docExpressionCount="115" docLength="2537" length="2" offset="2494" starttimestamp="1612994614940" timestamp="267897">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="354" _type="Insert" date="Wed Feb 10 17:08:06 EST 2021" docASTNodeCount="183" docActiveCodeLength="1362" docExpressionCount="110" docLength="2539" length="2" offset="1455" starttimestamp="1612994614940" timestamp="271472">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="355" _type="Insert" date="Wed Feb 10 17:08:06 EST 2021" docASTNodeCount="172" docActiveCodeLength="1355" docExpressionCount="101" docLength="2541" length="2" offset="1482" starttimestamp="1612994614940" timestamp="271474">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="356" _type="Insert" date="Wed Feb 10 17:08:06 EST 2021" docASTNodeCount="166" docActiveCodeLength="1338" docExpressionCount="96" docLength="2543" length="2" offset="1493" starttimestamp="1612994614940" timestamp="271475">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="357" _type="Insert" date="Wed Feb 10 17:08:06 EST 2021" docASTNodeCount="159" docActiveCodeLength="1313" docExpressionCount="94" docLength="2545" length="2" offset="1514" starttimestamp="1612994614940" timestamp="271476">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="358" _type="Insert" date="Wed Feb 10 17:08:06 EST 2021" docASTNodeCount="159" docActiveCodeLength="1310" docExpressionCount="94" docLength="2547" length="2" offset="1543" starttimestamp="1612994614940" timestamp="271477">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="359" _type="Insert" date="Wed Feb 10 17:08:06 EST 2021" docASTNodeCount="155" docActiveCodeLength="1287" docExpressionCount="91" docLength="2549" length="2" offset="1575" starttimestamp="1612994614940" timestamp="271478">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="360" _type="Insert" date="Wed Feb 10 17:08:06 EST 2021" docASTNodeCount="165" docActiveCodeLength="1284" docExpressionCount="100" docLength="2551" length="2" offset="1602" starttimestamp="1612994614940" timestamp="271478">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="361" _type="Insert" date="Wed Feb 10 17:08:06 EST 2021" docASTNodeCount="155" docActiveCodeLength="1248" docExpressionCount="91" docLength="2553" length="2" offset="1609" starttimestamp="1612994614940" timestamp="271479">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="365" _type="Insert" date="Wed Feb 10 17:08:08 EST 2021" docASTNodeCount="142" docActiveCodeLength="1180" docExpressionCount="82" docLength="2555" length="2" offset="1366" starttimestamp="1612994614940" timestamp="273453">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="364" _type="PauseCommand" date="Wed Feb 10 17:08:08 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="273390">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1894]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="363" _type="SelectTextCommand" caretOffset="1449" date="Wed Feb 10 17:08:08 EST 2021" end="1449" start="1374" starttimestamp="1612994614940" timestamp="273390" />
  <Command __id="367" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Feb 10 17:08:08 EST 2021" starttimestamp="1612994614940" timestamp="273471" />
  <Command __id="368" _type="MoveCaretCommand" caretOffset="1323" date="Wed Feb 10 17:08:08 EST 2021" docOffset="1323" starttimestamp="1612994614940" timestamp="273908" />
  <Command __id="370" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Feb 10 17:08:09 EST 2021" starttimestamp="1612994614940" timestamp="274217" />
  <Command __id="372" _type="PauseCommand" date="Wed Feb 10 17:08:10 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="275472">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1255]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="371" _type="MoveCaretCommand" caretOffset="1324" date="Wed Feb 10 17:08:10 EST 2021" docOffset="1324" starttimestamp="1612994614940" timestamp="275472" />
  <Command __id="374" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Feb 10 17:08:11 EST 2021" starttimestamp="1612994614940" timestamp="276236" />
  <Command __id="376" _type="PauseCommand" date="Wed Feb 10 17:08:14 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="279588">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3352]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="375" _type="MoveCaretCommand" caretOffset="1321" date="Wed Feb 10 17:08:14 EST 2021" docOffset="1321" starttimestamp="1612994614940" timestamp="279588" />
  <Command __id="378" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Feb 10 17:08:15 EST 2021" starttimestamp="1612994614940" timestamp="280562" />
  <Command __id="380" _type="PauseCommand" date="Wed Feb 10 17:08:16 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="281595">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1033]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="381" _type="MoveCaretCommand" caretOffset="8448" date="Wed Feb 10 17:08:16 EST 2021" docOffset="32948" starttimestamp="1612994614940" timestamp="281708" />
  <Command __id="383" _type="PauseCommand" date="Wed Feb 10 17:08:23 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="289011">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7303]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="382" _type="MoveCaretCommand" caretOffset="890" date="Wed Feb 10 17:08:23 EST 2021" docOffset="7804" starttimestamp="1612994614940" timestamp="289011" />
  <Command __id="392" _type="PauseCommand" date="Wed Feb 10 17:08:27 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="292573">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1689]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="391" _type="RunCommand" date="Wed Feb 10 17:08:27 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="292573" type="Run" />
  <Command __id="393" _type="RunCommand" date="Wed Feb 10 17:08:27 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="292573" type="Run" />
  <Command __id="394" _type="ConsoleOutput" date="Wed Feb 10 17:08:28 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="293370" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest has 3 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-36-31-023.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-39-52-726.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\16\Eclipse\Rest\Log2013-09-13-14-54-59-878.xml
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="395" _type="ConsoleOutput" date="Wed Feb 10 17:08:28 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="293616" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\17\Eclipse\Rest\Log2013-09-13-09-53-29-705.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\18\Eclipse\Rest\Log2013-09-17-10-06-32-242.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"3"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-13-"), Diff(DELETE,"14-36-31-023"), Diff(INSERT,"09-53-29-705"), Diff(EQUAL,".xml¶Reading "), Diff(INSERT,"student Eclipse¶Particpant "), Diff(EQUAL,"C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE,"\Log2013-09-13-14-39-52-726.xml"), Diff(INSERT," has 1 file(s)"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"-1"), Diff(DELETE,"4-54-59-878"), Diff(INSERT,"0-06-32-242"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="396" _type="ConsoleOutput" date="Wed Feb 10 17:08:28 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="293729" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\19\Eclipse\Rest\Log2013-09-12-15-05-47-820.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"3-09-53-29-705"), Diff(INSERT,"2-15-05-47-820"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"18"), Diff(INSERT,"20"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"7"), Diff(INSERT,"2"), Diff(EQUAL,"-10-"), Diff(DELETE,"06-32-242"), Diff(INSERT,"40-05-321"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="397" _type="ConsoleOutput" date="Wed Feb 10 17:08:28 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="293840" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\21\Eclipse\Rest\Log2013-09-16-10-05-18-718.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"2"), Diff(EQUAL,"1"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"2"), Diff(EQUAL,"1"), Diff(DELETE,"9"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"2"), Diff(INSERT,"6"), Diff(EQUAL,"-1"), Diff(DELETE,"5"), Diff(INSERT,"0"), Diff(EQUAL,"-05-"), Diff(DELETE,"47-820"), Diff(INSERT,"18-718"), Diff(EQUAL,".xml¶Reading student Eclipse¶"), Diff(DELETE,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\20\Eclipse\Rest\Log2013-09-12-10-40-05-321.xml¶")]]]></diff>
  </Command>
  <Command __id="398" _type="ConsoleOutput" date="Wed Feb 10 17:08:28 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="293911" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\22\Eclipse\Rest\Log2013-09-15-15-38-06-069.xml
Reading student Eclipse
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"6"), Diff(INSERT,"5"), Diff(EQUAL,"-1"), Diff(DELETE,"0-0"), Diff(EQUAL,"5-"), Diff(DELETE,"1"), Diff(INSERT,"3"), Diff(EQUAL,"8-"), Diff(DELETE,"718"), Diff(INSERT,"06-069"), Diff(EQUAL,".xml¶Reading student Eclipse¶")]]]></diff>
  </Command>
  <Command __id="399" _type="ConsoleOutput" date="Wed Feb 10 17:08:28 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="293969" type="ConsoleOutput">
    <outputString><![CDATA[Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23\Eclipse\Rest\Log2013-09-14-10-54-43-267.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"2"), Diff(INSERT,"3\Eclipse\Rest\Log2013-09-14-09-48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"5"), Diff(INSERT,"4"), Diff(EQUAL,"-1"), Diff(DELETE,"5-38-06-069.xml¶Reading student Eclipse"), Diff(INSERT,"0-54-43-267.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24\Eclipse\Rest\Log2013-09-14-13-40-09-552.xml"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="400" _type="ConsoleOutput" date="Wed Feb 10 17:08:29 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="294276" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\28\Eclipse\Rest\Log2013-09-20-14-30-38-379.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest\Log2013-09-11-15-13-48-829.xml
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Reading student Eclipse¶"), Diff(EQUAL,"Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest has 2 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"3"), Diff(INSERT,"6"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(INSERT,"18-"), Diff(EQUAL,"14-"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"9-"), Diff(DELETE,"48-24-508.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\23"), Diff(INSERT,"04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"14"), Diff(INSERT,"20"), Diff(EQUAL,"-10-"), Diff(DELETE,"54-43-267"), Diff(INSERT,"17-49-071"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\2"), Diff(DELETE,"4"), Diff(INSERT,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"14-12-59-39-052.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\24"), Diff(INSERT,"20-14-30-38-379.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\29\Eclipse\Rest\Log2013-09-23-12-56-55-221.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-1"), Diff(DELETE,"4"), Diff(INSERT,"1-15"), Diff(EQUAL,"-13-4"), Diff(DELETE,"0-09-552"), Diff(INSERT,"8-829"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="401" _type="ConsoleOutput" date="Wed Feb 10 17:08:29 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="294365" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\31\Eclipse\Rest\Log2013-09-06-16-07-40-790.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\32\Eclipse\Rest\Log2013-09-13-12-11-53-568.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest has 2 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-35-18-862.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"26"), Diff(INSERT,"31"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"26\Eclipse\Rest\Log2013-09-18-14-39-04-982.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\26\Eclipse\Rest\Log2013-09-18-15-33-03-226.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\27\Eclipse\Rest\Log2013-09-20-10-17-49-071"), Diff(INSERT,"31\Eclipse\Rest\Log2013-09-06-16-07-40-790"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"8"), Diff(EQUAL,"\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"8"), Diff(EQUAL,"\Eclipse\Rest\Log2013-09-"), Diff(DELETE,"20-14-30-38-379"), Diff(INSERT,"13-12-11-53-568"), Diff(EQUAL,".xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"33"), Diff(EQUAL,"\Eclipse\Rest has "), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"29"), Diff(INSERT,"33"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3"), Diff(INSERT,"5"), Diff(EQUAL,"-0"), Diff(DELETE,"9-23-12-56-55-221.xml¶Reading student Eclipse¶Particpant"), Diff(INSERT,"2-12-12-35-18-862.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\3"), Diff(DELETE,"0\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\30"), Diff(INSERT,"3"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3"), Diff(INSERT,"5"), Diff(EQUAL,"-0"), Diff(DELETE,"9"), Diff(INSERT,"2"), Diff(EQUAL,"-1"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL,"-1"), Diff(DELETE,"5-13-48-829"), Diff(INSERT,"2-57-56-864"), Diff(EQUAL,".xml¶")]]]></diff>
  </Command>
  <Command __id="402" _type="ConsoleOutput" date="Wed Feb 10 17:08:29 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="294439" type="ConsoleOutput">
    <outputString><![CDATA[Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml
Reading student Eclipse
Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)
Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml
Writing Experiment student 22 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest has 1"), Diff(INSERT,"8"), Diff(EQUAL," file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"1\Eclipse\Rest\Log201"), Diff(DELETE,"3"), Diff(INSERT,"4"), Diff(EQUAL,"-09-"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL,"6-1"), Diff(DELETE,"6"), Diff(INSERT,"0"), Diff(EQUAL,"-0"), Diff(DELETE,"7-40-790.xml¶Reading student Eclipse¶Particpant"), Diff(INSERT,"9-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 1 file(s)"), Diff(INSERT,"\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"32"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"3-09-13-12-11-53-568.xml¶Reading student Eclipse¶Particpant"), Diff(INSERT,"4-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading"), Diff(EQUAL," C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest"), Diff(DELETE," has 2 file(s)"), Diff(INSERT,"\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml"), Diff(EQUAL,"¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\"), Diff(DELETE,"33"), Diff(INSERT,"pd1"), Diff(EQUAL,"\Eclipse\Rest\Log201"), Diff(DELETE,"5-02-12-12-35-18-862.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\33\Eclipse\Rest\Log2015-02-12-12-57-56-864.xml"), Diff(INSERT,"4-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml¶Writing Experiment student 22 to ExperimentWebStats2.csv"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="404" _type="PauseCommand" date="Wed Feb 10 17:08:30 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="295472">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1033]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="403" _type="ConsoleOutput" date="Wed Feb 10 17:08:30 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="295472" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 33 to ExperimentWebStats2.csv
Writing Experiment student 23 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest has 18 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-09-23-822.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-30-44-271.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-09-26-10-32-16-955.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-48-45-037.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-02-09-53-58-501.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-47-36-829.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-09-54-11-604.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-08-45-537.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-11-06-680.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-10-55-07-198.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-01-19-061.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-11-54-18-232.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-11-54-779.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-12-53-09-775.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-06-57-784.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-13-24-337.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-15-38-180.xml¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd1\Eclipse\Rest\Log2014-10-04-13-17-08-589.xml¶Reading student Eclipse¶Particpant C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest has 1 file(s)¶Reading C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\data\ExperimentalData\pd2\Eclipse\Rest\Log2014-10-04-13-38-06-627.xml¶Writing Experiment student 22"), Diff(INSERT,"Writing Experiment student 33 to ExperimentWebStats2.csv¶Writing Experiment student 23"), Diff(EQUAL," to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="408" _type="PauseCommand" date="Wed Feb 10 17:08:37 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="302901">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6313]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="407" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:08:37 EST 2021" starttimestamp="1612994614940" timestamp="302901" />
  <Command __id="409" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:08:37 EST 2021" starttimestamp="1612994614940" timestamp="302904" />
  <Command __id="410" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:08:37 EST 2021" starttimestamp="1612994614940" timestamp="302904" />
  <Command __id="411" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:08:37 EST 2021" starttimestamp="1612994614940" timestamp="302906" />
  <Command __id="413" _type="PauseCommand" date="Wed Feb 10 17:08:52 EST 2021" range="10s-20s" starttimestamp="1612994614940" timestamp="317789">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[14883]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="412" _type="MoveCaretCommand" caretOffset="1135" date="Wed Feb 10 17:08:52 EST 2021" docOffset="1135" starttimestamp="1612994614940" timestamp="317789" />
  <Command __id="415" _type="PauseCommand" date="Wed Feb 10 17:08:58 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="323438">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5649]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="414" _type="MoveCaretCommand" caretOffset="1084" date="Wed Feb 10 17:08:58 EST 2021" docOffset="1084" starttimestamp="1612994614940" timestamp="323438" />
  <Command __id="416" _type="ConsoleOutput" date="Wed Feb 10 17:08:58 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="323624" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 26 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student 2"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL," to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="417" _type="MoveCaretCommand" caretOffset="1169" date="Wed Feb 10 17:08:59 EST 2021" docOffset="1169" starttimestamp="1612994614940" timestamp="324104" />
  <Command __id="419" _type="PauseCommand" date="Wed Feb 10 17:09:00 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="325188">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1084]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="418" _type="ConsoleOutput" date="Wed Feb 10 17:09:00 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="325188" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 16 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"6 to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="421" _type="PauseCommand" date="Wed Feb 10 17:09:05 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="330244">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5056]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="420" _type="ConsoleOutput" date="Wed Feb 10 17:09:05 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="330244" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 27 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"16"), Diff(INSERT,"27"), Diff(EQUAL," to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="423" _type="PauseCommand" date="Wed Feb 10 17:09:16 EST 2021" range="10s-20s" starttimestamp="1612994614940" timestamp="341635">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11391]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="422" _type="ConsoleOutput" date="Wed Feb 10 17:09:16 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="341635" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 17 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"7 to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="424" _type="ConsoleOutput" date="Wed Feb 10 17:09:16 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="341873" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 28 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"17"), Diff(INSERT,"28"), Diff(EQUAL," to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="426" _type="PauseCommand" date="Wed Feb 10 17:09:18 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="343599">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1726]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="427" _type="MoveCaretCommand" caretOffset="890" date="Wed Feb 10 17:09:18 EST 2021" docOffset="7804" starttimestamp="1612994614940" timestamp="343720" />
  <Command __id="428" _type="ConsoleOutput" date="Wed Feb 10 17:09:19 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="344218" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 18 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"8 to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="430" _type="PauseCommand" date="Wed Feb 10 17:09:20 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="345614">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1396]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="429" _type="ConsoleOutput" date="Wed Feb 10 17:09:20 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="345614" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 29 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"18"), Diff(INSERT,"29"), Diff(EQUAL," to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="432" _type="PauseCommand" date="Wed Feb 10 17:09:21 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="346723">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1109]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="431" _type="ConsoleOutput" date="Wed Feb 10 17:09:21 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="346723" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 19 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"2"), Diff(INSERT,"1"), Diff(EQUAL,"9 to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="434" _type="PauseCommand" date="Wed Feb 10 17:09:22 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="347759">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1036]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="433" _type="MoveCaretCommand" caretOffset="10209" date="Wed Feb 10 17:09:22 EST 2021" docOffset="34055" starttimestamp="1612994614940" timestamp="347759" />
  <Command __id="436" _type="InsertStringCommand" date="Wed Feb 10 17:09:23 EST 2021" starttimestamp="1612994614940" timestamp="348526" timestamp2="348526">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="438" _type="InsertStringCommand" date="Wed Feb 10 17:09:23 EST 2021" starttimestamp="1612994614940" timestamp="348756" timestamp2="348756">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="439" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Feb 10 17:09:23 EST 2021" start_end="START" starttimestamp="1612994614940" timestamp="348799" />
  <Command __id="440" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Feb 10 17:09:23 EST 2021" start_end="END" starttimestamp="1612994614940" timestamp="348978" />
  <Command __id="442" _type="InsertStringCommand" date="Wed Feb 10 17:09:23 EST 2021" starttimestamp="1612994614940" timestamp="349001" timestamp2="349001">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="443" _type="ConsoleOutput" date="Wed Feb 10 17:09:23 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="349003" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student pd1 to ExperimentWebStats2.csv
Writing Experiment student 30 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"19"), Diff(INSERT,"pd1 to ExperimentWebStats2.csv¶Writing Experiment student 30"), Diff(EQUAL," to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="444" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Feb 10 17:09:23 EST 2021" start_end="START" starttimestamp="1612994614940" timestamp="349052" />
  <Command __id="447" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Feb 10 17:09:24 EST 2021" start_end="END" starttimestamp="1612994614940" timestamp="349635" />
  <Command __id="449" _type="InsertStringCommand" date="Wed Feb 10 17:09:24 EST 2021" starttimestamp="1612994614940" timestamp="349651" timestamp2="349651">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="450" _type="ConsoleOutput" date="Wed Feb 10 17:09:24 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="349708" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 20 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"pd1 to ExperimentWebStats2.csv¶Writing Experiment student 3"), Diff(INSERT,"2"), Diff(EQUAL,"0 to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="451" _type="InsertStringCommand" date="Wed Feb 10 17:09:24 EST 2021" starttimestamp="1612994614940" timestamp="350003" timestamp2="350003">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="452" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Feb 10 17:09:25 EST 2021" starttimestamp="1612994614940" timestamp="350451" />
  <Command __id="453" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:09:25 EST 2021" starttimestamp="1612994614940" timestamp="350542" />
  <Command __id="454" _type="ConsoleOutput" date="Wed Feb 10 17:09:25 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="350562" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 31 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"20"), Diff(INSERT,"31"), Diff(EQUAL," to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="455" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:09:25 EST 2021" starttimestamp="1612994614940" timestamp="350653" />
  <Command __id="456" _type="ConsoleOutput" date="Wed Feb 10 17:09:26 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="351177" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 21 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"3"), Diff(INSERT,"2"), Diff(EQUAL,"1 to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="458" _type="PauseCommand" date="Wed Feb 10 17:09:27 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="352473">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1296]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="457" _type="ConsoleOutput" date="Wed Feb 10 17:09:27 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="352473" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student 32 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(INSERT,"3"), Diff(EQUAL,"2"), Diff(DELETE,"1"), Diff(EQUAL," to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="459" _type="ConsoleOutput" date="Wed Feb 10 17:09:27 EST 2021" overflow="false" starttimestamp="1612994614940" timestamp="352942" type="ConsoleOutput">
    <outputString><![CDATA[Writing Experiment student pd2 to ExperimentWebStats2.csv
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Writing Experiment student "), Diff(DELETE,"3"), Diff(INSERT,"pd"), Diff(EQUAL,"2 to ExperimentWebStats2.csv¶")]]]></diff>
  </Command>
  <Command __id="460" _type="RunCommand" date="Wed Feb 10 17:09:28 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="353108" type="Run" />
  <Command __id="461" _type="RunCommand" date="Wed Feb 10 17:09:28 EST 2021" kind="HitBreakPoint" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="353109" type="Run" />
  <Command __id="463" _type="PauseCommand" date="Wed Feb 10 17:09:29 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="354209">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1100]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="462" _type="ShellCommand" date="Wed Feb 10 17:09:29 EST 2021" starttimestamp="1612994614940" timestamp="354209" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="465" _type="PauseCommand" date="Wed Feb 10 17:10:06 EST 2021" range="30s-1m" starttimestamp="1612994614940" timestamp="391298">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[37089]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="464" _type="ShellCommand" date="Wed Feb 10 17:10:06 EST 2021" starttimestamp="1612994614940" timestamp="391298" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="467" _type="PauseCommand" date="Wed Feb 10 17:10:07 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="392564">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1266]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="466" _type="ShellCommand" date="Wed Feb 10 17:10:07 EST 2021" starttimestamp="1612994614940" timestamp="392564" type="ECLIPSE_MINIMIZED" />
  <Command __id="468" _type="ShellCommand" date="Wed Feb 10 17:10:07 EST 2021" starttimestamp="1612994614940" timestamp="392572" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="473" _type="PauseCommand" date="Wed Feb 10 17:16:51 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="796684">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1584]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="474" _type="MoveCaretCommand" caretOffset="4943" date="Wed Feb 10 17:16:51 EST 2021" docOffset="5181" starttimestamp="1612994614940" timestamp="796798" />
  <Command __id="476" _type="PauseCommand" date="Wed Feb 10 17:16:59 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="804897">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8099]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="477" _type="MoveCaretCommand" caretOffset="10234" date="Wed Feb 10 17:16:59 EST 2021" docOffset="34080" starttimestamp="1612994614940" timestamp="805008" />
  <Command __id="479" _type="PauseCommand" date="Wed Feb 10 17:17:02 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="807336">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2328]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="478" _type="MoveCaretCommand" caretOffset="10239" date="Wed Feb 10 17:17:02 EST 2021" docOffset="34085" starttimestamp="1612994614940" timestamp="807336" />
  <Command __id="481" _type="PauseCommand" date="Wed Feb 10 17:17:05 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="810260">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2924]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="482" _type="InsertStringCommand" date="Wed Feb 10 17:17:05 EST 2021" starttimestamp="1612994614940" timestamp="810267" timestamp2="810267">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="484" _type="InsertStringCommand" date="Wed Feb 10 17:17:05 EST 2021" starttimestamp="1612994614940" timestamp="810769" timestamp2="810769">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="485" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Feb 10 17:17:05 EST 2021" start_end="START" starttimestamp="1612994614940" timestamp="810812" />
  <Command __id="487" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Feb 10 17:17:06 EST 2021" start_end="END" starttimestamp="1612994614940" timestamp="811064" />
  <Command __id="489" _type="InsertStringCommand" date="Wed Feb 10 17:17:06 EST 2021" starttimestamp="1612994614940" timestamp="811157" timestamp2="811157">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="491" _type="InsertStringCommand" date="Wed Feb 10 17:17:06 EST 2021" starttimestamp="1612994614940" timestamp="811621" timestamp2="811621">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="492" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Feb 10 17:17:06 EST 2021" start_end="START" starttimestamp="1612994614940" timestamp="811656" />
  <Command __id="498" _type="PauseCommand" date="Wed Feb 10 17:17:09 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="814646">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1731]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="499" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:17:09 EST 2021" starttimestamp="1612994614940" timestamp="814651" />
  <Command __id="501" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:17:09 EST 2021" starttimestamp="1612994614940" timestamp="814818" />
  <Command __id="503" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Feb 10 17:17:09 EST 2021" starttimestamp="1612994614940" timestamp="814994" />
  <Command __id="505" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Feb 10 17:17:10 EST 2021" start_end="END" starttimestamp="1612994614940" timestamp="815732" />
  <Command __id="507" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:17:11 EST 2021" starttimestamp="1612994614940" timestamp="816580" />
  <Command __id="509" _type="PauseCommand" date="Wed Feb 10 17:17:15 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="820892">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4312]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="508" _type="ShellCommand" date="Wed Feb 10 17:17:15 EST 2021" starttimestamp="1612994614940" timestamp="820892" type="ECLIPSE_MINIMIZED" />
  <Command __id="510" _type="ShellCommand" date="Wed Feb 10 17:17:15 EST 2021" starttimestamp="1612994614940" timestamp="820897" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="512" _type="PauseCommand" date="Wed Feb 10 17:25:15 EST 2021" range="5m-10m" starttimestamp="1612994614940" timestamp="1300747">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[479850]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="511" _type="ShellCommand" date="Wed Feb 10 17:25:15 EST 2021" starttimestamp="1612994614940" timestamp="1300747" type="ECLIPSE_MAXIMIZED" />
  <Command __id="513" _type="ShellCommand" date="Wed Feb 10 17:25:15 EST 2021" starttimestamp="1612994614940" timestamp="1300792" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="515" _type="PauseCommand" date="Wed Feb 10 17:25:27 EST 2021" range="10s-20s" starttimestamp="1612994614940" timestamp="1313023">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12231]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="514" _type="MoveCaretCommand" caretOffset="10241" date="Wed Feb 10 17:25:27 EST 2021" docOffset="34087" starttimestamp="1612994614940" timestamp="1313023" />
  <Command __id="517" _type="PauseCommand" date="Wed Feb 10 17:25:30 EST 2021" range="2s-5s" starttimestamp="1612994614940" timestamp="1315910">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2887]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="516" _type="ShellCommand" date="Wed Feb 10 17:25:30 EST 2021" starttimestamp="1612994614940" timestamp="1315910" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="518" _type="ShellCommand" date="Wed Feb 10 17:25:30 EST 2021" starttimestamp="1612994614940" timestamp="1315975" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="519" _type="MoveCaretCommand" caretOffset="10241" date="Wed Feb 10 17:25:30 EST 2021" docOffset="34087" starttimestamp="1612994614940" timestamp="1316032" />
  <Command __id="521" _type="PauseCommand" date="Wed Feb 10 17:25:38 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="1323922">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7890]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="520" _type="MoveCaretCommand" caretOffset="6755" date="Wed Feb 10 17:25:38 EST 2021" docOffset="26243" starttimestamp="1612994614940" timestamp="1323922" />
  <Command __id="522" _type="MoveCaretCommand" caretOffset="6758" date="Wed Feb 10 17:25:39 EST 2021" docOffset="26246" starttimestamp="1612994614940" timestamp="1324724" />
  <Command __id="524" _type="PauseCommand" date="Wed Feb 10 17:25:41 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="1326714">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1990]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="523" _type="MoveCaretCommand" caretOffset="6756" date="Wed Feb 10 17:25:41 EST 2021" docOffset="26244" starttimestamp="1612994614940" timestamp="1326714" />
  <Command __id="525" _type="MoveCaretCommand" caretOffset="6756" date="Wed Feb 10 17:25:42 EST 2021" docOffset="26244" starttimestamp="1612994614940" timestamp="1327368" />
  <Command __id="526" _type="MoveCaretCommand" caretOffset="6755" date="Wed Feb 10 17:25:42 EST 2021" docOffset="26243" starttimestamp="1612994614940" timestamp="1327829" />
  <Command __id="528" _type="InsertStringCommand" date="Wed Feb 10 17:25:43 EST 2021" starttimestamp="1612994614940" timestamp="1328673" timestamp2="1328673">
    <data><![CDATA[?]]></data>
  </Command>
  <Command __id="530" _type="InsertStringCommand" date="Wed Feb 10 17:25:43 EST 2021" starttimestamp="1612994614940" timestamp="1328797" timestamp2="1328797">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="532" _type="InsertStringCommand" date="Wed Feb 10 17:25:43 EST 2021" starttimestamp="1612994614940" timestamp="1329055" timestamp2="1329055">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="534" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:25:44 EST 2021" starttimestamp="1612994614940" timestamp="1329502" />
  <DocumentChange __id="366" _type="Insert" date="Wed Feb 10 17:08:08 EST 2021" docASTNodeCount="136" docActiveCodeLength="1163" docExpressionCount="79" docLength="2557" length="2" offset="1438" starttimestamp="1612994614940" timestamp="273453">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="369" _type="Delete" date="Wed Feb 10 17:08:09 EST 2021" docASTNodeCount="141" docActiveCodeLength="1217" docExpressionCount="83" docLength="2555" endLine="32" length="2" offset="1308" startLine="32" starttimestamp="1612994614940" timestamp="274202">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="373" _type="Insert" date="Wed Feb 10 17:08:11 EST 2021" docASTNodeCount="136" docActiveCodeLength="1163" docExpressionCount="79" docLength="2557" length="2" offset="1308" starttimestamp="1612994614940" timestamp="276221">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="377" _type="Delete" date="Wed Feb 10 17:08:15 EST 2021" docASTNodeCount="141" docActiveCodeLength="1217" docExpressionCount="83" docLength="2555" endLine="32" length="2" offset="1308" startLine="32" starttimestamp="1612994614940" timestamp="280547">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="379" _type="DiffBasedFileOpenCommand" date="Wed Feb 10 17:08:16 EST 2021" docASTNodeCount="5467" docActiveCodeLength="31697" docExpressionCount="3766" docLength="34088" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="281595">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶"), Diff(INSERT,"import java.io.BufferedReader;¶"), Diff(EQUAL,"import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶"), Diff(INSERT,"import java.io.InputStreamReader;¶import java.net.HttpURLConnection;¶"), Diff(EQUAL,"import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats"), Diff(INSERT,"2"), Diff(EQUAL,".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches"), Diff(INSERT,"2"), Diff(EQUAL,".csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶//			Map<String, String> searchWords = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶//			EHICommand lastPage = null;¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶//				if (!student.equals("16")) {¶//					continue;¶//				}¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶"), Diff(DELETE,"//							System.out.println("webcommand found");¶"), Diff(EQUAL,"							String url = command.getDataMap().get("URL");¶"), Diff(DELETE,"//							if (url.contains("stackoverflow")) {¶//								int a = 0;¶//							}¶"), Diff(EQUAL,"							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"										list.add(readWebContent(url));¶										"), Diff(INSERT,"list.add(readWebContent2(url));¶										"), Diff(EQUAL,"contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶"), Diff(INSERT,"//"), Diff(EQUAL,"									list.add(readWebContent(url));¶									"), Diff(INSERT,"list.add(readWebContent2(url));¶									"), Diff(EQUAL,"contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶"), Diff(DELETE,"//							System.out.println("webcommad processed");¶"), Diff(EQUAL,"						}¶						if (command instanceof PasteCommand) {¶"), Diff(DELETE,"//							System.out.println("pastecommand found");¶"), Diff(EQUAL,"							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶"), Diff(DELETE,"//									if (pastedText.contains("paintComponent")) {¶//										int a = 0;¶//									}¶"), Diff(EQUAL,"									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											if (list.get(0).contains(pastedText.replaceAll("\\s", ""))) {¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶"), Diff(DELETE,"//								if (command2 instanceof WebCommand && (command2.getAttributesMap().get("type").equals("Search Result") || command2.getAttributesMap().get("type").equals("Instructor Provided Link"))) {¶//									contents.get(command2.getDataMap().get("URL")).add(pastedText);¶//									break;¶//								}¶							}¶//							System.out.println("pastecommand processed");"), Diff(INSERT,"							}"), Diff(EQUAL,"¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶"), Diff(DELETE,"//						nextLine.add(isProvided(url)+"");¶"), Diff(EQUAL,"						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶"), Diff(INSERT,"	¶	private String readWebContent2(String url){¶		try {¶			 HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶		       httpClient.setRequestMethod("GET");¶		       httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶		       int responseCode = httpClient.getResponseCode();¶		       try (BufferedReader in = new BufferedReader(¶		               new InputStreamReader(httpClient.getInputStream()))) {¶		           StringBuilder response = new StringBuilder();¶		           String line;¶		           while ((line = in.readLine()) != null) {¶		               response.append(line);¶		           }¶		           return response.toString();¶		       }¶		} catch (Exception e) {¶			// TODO: handle exception¶		}¶       return "";¶	}¶"), Diff(EQUAL,"}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats2.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches2.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
//			Map<String, String> searchWords = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
//			EHICommand lastPage = null;
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
//				if (!student.equals("16")) {
//					continue;
//				}
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
//										list.add(readWebContent(url));
										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
//									list.add(readWebContent(url));
									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											if (list.get(0).contains(pastedText.replaceAll("\\s", ""))) {
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
	private String readWebContent2(String url){
		try {
			 HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
		       httpClient.setRequestMethod("GET");
		       httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
		       int responseCode = httpClient.getResponseCode();
		       try (BufferedReader in = new BufferedReader(
		               new InputStreamReader(httpClient.getInputStream()))) {
		           StringBuilder response = new StringBuilder();
		           String line;
		           while ((line = in.readLine()) != null) {
		               response.append(line);
		           }
		           return response.toString();
		       }
		} catch (Exception e) {
			// TODO: handle exception
		}
       return "";
	}
}
]]></snapshot>
  </Command>
  <Command __id="384" _type="DiffBasedFileOpenCommand" date="Wed Feb 10 17:08:25 EST 2021" docASTNodeCount="141" docActiveCodeLength="1217" docExpressionCount="83" docLength="2555" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="290102">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\Driver.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.io.OutputStream;¶import java.net.HttpURLConnection;¶import java.net.URL;¶¶import org.json.JSONException;¶import org.json.JSONObject;¶¶import analyzer.AnAnalyzer;¶import analyzer.Analyzer;¶¶public class Driver {¶	private static String classFolderPath = "E:\\testdata\\Fall2020";¶	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";¶	private static Analyzer analyzer;¶	private static AReplayer replayer;¶	private static int timeout = 5000;¶	private static String url = "https://www.google.com/search?q=accessing%20java%20swing%20&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a&channel=np&source=hp";¶	¶	public static void main(String[] args) {¶		analyzer = new AnAnalyzer();¶//		replayer = new AReplayer(analyzer);¶//		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(classFolderPath);¶//		replayer.analyzeFolder(classFolderPath);¶		replayer = new AExperimentalReplayer(analyzer);¶		analyzer.addAnalyzerListener(replayer);	¶//		replayer.createPauseCommandLogs(experimentalClassFolderPath);¶"), Diff(DELETE,"//"), Diff(EQUAL,"		replayer.analyzeFolder(experimentalClassFolderPath);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		String s2 = "";¶"), Diff(INSERT,"//"), Diff(EQUAL,"		System.out.println();¶"), Diff(INSERT,"//"), Diff(EQUAL,"		try {¶"), Diff(INSERT,"//"), Diff(EQUAL,"			s2 = get(url);¶"), Diff(INSERT,"//"), Diff(EQUAL,"		} catch (Exception e) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"			// TODO: handle exception¶"), Diff(INSERT,"//"), Diff(EQUAL,"			e.printStackTrace();¶"), Diff(INSERT,"//"), Diff(EQUAL,"		}¶"), Diff(INSERT,"//"), Diff(EQUAL,"		System.out.println(s1.equals(s2));¶	}¶	¶"), Diff(INSERT,"//"), Diff(EQUAL,"	public static String get(String urlString) throws Exception{¶"), Diff(INSERT,"//"), Diff(EQUAL,"         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();¶"), Diff(INSERT,"//"), Diff(EQUAL,"        httpClient.setRequestMethod("GET");¶"), Diff(INSERT,"//"), Diff(EQUAL,"        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶"), Diff(INSERT,"//"), Diff(EQUAL,"        int responseCode = httpClient.getResponseCode();¶"), Diff(INSERT,"//"), Diff(EQUAL,"        System.out.println("Response Code : " + responseCode);¶"), Diff(INSERT,"//"), Diff(EQUAL,"        try (BufferedReader in = new BufferedReader(¶"), Diff(INSERT,"//"), Diff(EQUAL,"                new InputStreamReader(httpClient.getInputStream()))) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"            StringBuilder response = new StringBuilder();¶"), Diff(INSERT,"//"), Diff(EQUAL,"            String line;¶"), Diff(INSERT,"//"), Diff(EQUAL,"            while ((line = in.readLine()) != null) {¶"), Diff(INSERT,"//"), Diff(EQUAL,"                response.append(line);¶"), Diff(INSERT,"//"), Diff(EQUAL,"            }¶"), Diff(INSERT,"//"), Diff(EQUAL,"            System.out.println(response.toString());¶"), Diff(INSERT,"//"), Diff(EQUAL,"            return response.toString();¶"), Diff(INSERT,"//"), Diff(EQUAL,"        }¶"), Diff(INSERT,"//"), Diff(EQUAL,"	}¶}¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONException;
import org.json.JSONObject;

import analyzer.AnAnalyzer;
import analyzer.Analyzer;

public class Driver {
	private static String classFolderPath = "E:\\testdata\\Fall2020";
	private static String experimentalClassFolderPath = "C:\\Users\\Zhizhou\\OneDrive\\UNC CH\\Junior 1st Sem\\hermes\\git\\Hermes\\Hermes\\data\\ExperimentalData";
	private static Analyzer analyzer;
	private static AReplayer replayer;
	private static int timeout = 5000;
	private static String url = "https://www.google.com/search?q=accessing%20java%20swing%20&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a&channel=np&source=hp";
	
	public static void main(String[] args) {
		analyzer = new AnAnalyzer();
//		replayer = new AReplayer(analyzer);
//		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(classFolderPath);
//		replayer.analyzeFolder(classFolderPath);
		replayer = new AExperimentalReplayer(analyzer);
		analyzer.addAnalyzerListener(replayer);	
//		replayer.createPauseCommandLogs(experimentalClassFolderPath);
		replayer.analyzeFolder(experimentalClassFolderPath);
//		String s1 = ((AExperimentalReplayer)replayer).readWebContent(url);
//		String s2 = "";
//		System.out.println();
//		try {
//			s2 = get(url);
//		} catch (Exception e) {
//			// TODO: handle exception
//			e.printStackTrace();
//		}
//		System.out.println(s1.equals(s2));
	}
	
//	public static String get(String urlString) throws Exception{
//         HttpURLConnection httpClient =(HttpURLConnection) new URL(urlString).openConnection();
//        httpClient.setRequestMethod("GET");
//        httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
//        int responseCode = httpClient.getResponseCode();
//        System.out.println("Response Code : " + responseCode);
//        try (BufferedReader in = new BufferedReader(
//                new InputStreamReader(httpClient.getInputStream()))) {
//            StringBuilder response = new StringBuilder();
//            String line;
//            while ((line = in.readLine()) != null) {
//                response.append(line);
//            }
//            System.out.println(response.toString());
//            return response.toString();
//        }
//	}
}

















]]></snapshot>
  </Command>
  <Command __id="425" _type="DiffBasedFileOpenCommand" date="Wed Feb 10 17:09:18 EST 2021" docASTNodeCount="5467" docActiveCodeLength="31697" docExpressionCount="3766" docLength="34088" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="343599">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.net.HttpURLConnection;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats2.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches2.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶//			Map<String, String> searchWords = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶//			EHICommand lastPage = null;¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶//				if (!student.equals("16")) {¶//					continue;¶//				}¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶//										list.add(readWebContent(url));¶										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶//									list.add(readWebContent(url));¶									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											if (list.get(0).contains(pastedText.replaceAll("\\s", ""))) {¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	private String readWebContent2(String url){¶		try {¶			 HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶		       httpClient.setRequestMethod("GET");¶		       httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶		       int responseCode = httpClient.getResponseCode();¶		       try (BufferedReader in = new BufferedReader(¶		               new InputStreamReader(httpClient.getInputStream()))) {¶		           StringBuilder response = new StringBuilder();¶		           String line;¶		           while ((line = in.readLine()) != null) {¶		               response.append(line);¶		           }¶		           return response.toString();¶		       }¶		} catch (Exception e) {¶			// TODO: handle exception¶		}¶       return "";¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="435" _type="Insert" date="Wed Feb 10 17:09:23 EST 2021" docASTNodeCount="5469" docActiveCodeLength="31703" docExpressionCount="3767" docLength="34094" length="6" offset="34055" repeat="2" starttimestamp="1612994614940" timestamp="348518" timestamp2="348753">
    <text><![CDATA[
			e]]></text>
  </DocumentChange>
  <DocumentChange __id="441" _type="Replace" date="Wed Feb 10 17:09:23 EST 2021" docASTNodeCount="5467" docActiveCodeLength="31704" docExpressionCount="3766" docLength="34095" endLine="972" insertionLength="2" int_docASTNodeCount="5467" int_docActiveCodeLength="31702" int_docExpressionCount="3766" int_docLength="34093" length="1" offset="34060" startLine="972" starttimestamp="1612994614940" timestamp="348996">
    <deletedText><![CDATA[e]]></deletedText>
    <insertedText><![CDATA[e.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="445" _type="Insert" date="Wed Feb 10 17:09:24 EST 2021" docASTNodeCount="5471" docActiveCodeLength="31706" docExpressionCount="3769" docLength="34097" length="2" offset="34062" repeat="2" starttimestamp="1612994614940" timestamp="349196" timestamp2="349235">
    <text><![CDATA[pr]]></text>
  </DocumentChange>
  <DocumentChange __id="448" _type="Replace" date="Wed Feb 10 17:09:24 EST 2021" docASTNodeCount="5471" docActiveCodeLength="31722" docExpressionCount="3769" docLength="34113" endLine="972" insertionLength="18" int_docASTNodeCount="5467" int_docActiveCodeLength="31704" int_docExpressionCount="3766" int_docLength="34095" length="2" offset="34062" startLine="972" starttimestamp="1612994614940" timestamp="349644">
    <deletedText><![CDATA[pr]]></deletedText>
    <insertedText><![CDATA[printStackTrace();]]></insertedText>
  </DocumentChange>
  <Command __id="472" _type="DiffBasedFileOpenCommand" date="Wed Feb 10 17:16:51 EST 2021" docASTNodeCount="934" docActiveCodeLength="5768" docExpressionCount="625" docLength="5768" projectName="Hermes" starttimestamp="1612994614940" timestamp="796684">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\git\Hermes\Hermes\src\main\java\fluorite\commands\PauseCommand.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package fluorite.commands;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import org.eclipse.ui.IEditorPart;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import fluorite.model.EHEventRecorder;

public class PauseCommand extends AbstractCommand implements EHICommand{
	private static final String XML_RANGE = "range";
	private static final String XML_PREV = "prev";
	private static final String XML_NEXT = "next";
	private static final String XML_PAUSE = "pause";
	private static final String XML_PREV_TYPE = "prevType";
	private static final String XML_NEXT_TYPE = "nextType";
	public static final String[] TYPES = {"Edit", "Debug", "Run", "IO", "Exception", "Request", "Web", "Save", "Gained Focus", "Lost Focus", "Terminate", "Difficulty", "Move Caret", "Open File", "Select", "Compile", "Other"}; 
	private String prev, next, range, prevType, nextType;
	private long pause;

	public PauseCommand() {}
	
	public PauseCommand(EHICommand prev, EHICommand next, long pause, String range) {
		this.prev = prev.getCommandType();
		this.next = next.getCommandType();
		this.pause = pause;
		this.range = range;
		prevType = getType(prev);
		nextType = getType(next);
	}
	
	private String getType(EHICommand command) {
		if (command instanceof InsertStringCommand || command instanceof Insert ||
				command instanceof CopyCommand ||
				command instanceof Delete ||
				command instanceof Replace || command instanceof PasteCommand ||
				command instanceof AssistCommand) {
			return TYPES[0];
		}
		if (command instanceof RunCommand && (command.getAttributesMap().get("type").equals("HitBreakPoint") || command.getAttributesMap().get("type").equals("Debug"))) {
			return TYPES[1];
		}
		if (command instanceof RunCommand && command.getAttributesMap().get("type").equals("Run")) {
			return TYPES[2];
		}
		if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput || command instanceof EHExceptionCommand) {
			return TYPES[3];
		}
		if (command instanceof ExceptionCommand) {
			return TYPES[4];
		}
		if (command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
			return TYPES[5];
		}
		if (command instanceof WebCommand) {
			return TYPES[6];
		}
		if (command instanceof EclipseCommand) {
			String id = command.getAttributesMap().get(EclipseCommand.XML_ID_ATTR).toLowerCase();
			if (id.contains("delete")) {
				return TYPES[0];
			}
			if (id.contains("save")) {
				return TYPES[7];
			}
			if (id.contains("terminate")) {
				return TYPES[10];
			}
			if (id.contains("line_start") || id.contains("line_down") || id.contains("line_up") || id.contains("column")) {
				return TYPES[12];
			}
		}
		if (command instanceof ShellCommand) {
			String type = command.getAttributesMap().get("type").toLowerCase();
			if (type.contains("gained_focus")) {
				return TYPES[8];
			}
			if (type.contains("lost_focus") || type.contains("minimized")) {
				return TYPES[9];
			}
		}
		if (command instanceof DifficultyCommand) {
			return TYPES[11];
		}
		if (command instanceof MoveCaretCommand) {
			return TYPES[12];
		}
		if (command instanceof FileOpenCommand) {
			return TYPES[13];
		}
		if (command instanceof SelectTextCommand) {
			return TYPES[14];
		}
		if (command instanceof CompilationCommand) {
			return TYPES[15];
		}
		return TYPES[16];
	}
	
	@Override
	public boolean execute(IEditorPart target) {
		return false;
	}

	@Override
	public void dump() {
	}

	@Override
	public Map<String, String> getAttributesMap() {
		Map<String, String> attrMap = new HashMap<String, String>();
		attrMap.put(XML_RANGE, range);
		return attrMap;
	}

	@Override
	public Map<String, String> getDataMap() {
		Map<String, String> dataMap = new TreeMap<String, String>(Comparator.reverseOrder());
		dataMap.put(XML_PREV, prev);
		dataMap.put(XML_NEXT, next);
		dataMap.put(XML_PAUSE, pause+"");
		dataMap.put(XML_PREV_TYPE, prevType);
		dataMap.put(XML_NEXT_TYPE, nextType);
		return dataMap;
	}

	@Override
	public String getCommandType() {
		return "PauseCommand";
	}

	@Override
	public String getName() {
		return "Pause";
	}

	@Override
	public String getDescription() {
		return null;
	}

	@Override
	public String getCategory() {
		return EHEventRecorder.UserMacroCategoryName;
	}

	@Override
	public String getCategoryID() {
		return EHEventRecorder.UserMacroCategoryID;
	}
	
	public void createFrom(Element commandElement) {
		super.createFrom(commandElement);
		
		NodeList nodeList = null;

		if ((nodeList = commandElement.getElementsByTagName(XML_PREV)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			prev = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			next = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_PAUSE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			pause = Long.parseLong(textNode.getTextContent());
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_RANGE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			range = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_PREV_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			prevType = textNode.getTextContent();
		}
		if ((nodeList = commandElement.getElementsByTagName(XML_NEXT_TYPE)).getLength() > 0) {
			Node textNode = nodeList.item(0);
			nextType = textNode.getTextContent();
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="475" _type="DiffBasedFileOpenCommand" date="Wed Feb 10 17:16:59 EST 2021" docASTNodeCount="5471" docActiveCodeLength="31722" docExpressionCount="3769" docLength="34113" projectName="LogAnalyzer" starttimestamp="1612994614940" timestamp="804897">
    <filePath><![CDATA[C:\Users\Zhizhou\OneDrive\UNC CH\Junior 1st Sem\hermes\LogAnalyzer\src\logAnalyzer\AExperimentalReplayer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package logAnalyzer;¶¶import java.io.BufferedReader;¶import java.io.BufferedWriter;¶import java.io.File;¶import java.io.FileFilter;¶import java.io.FileWriter;¶import java.io.IOException;¶import java.io.InputStreamReader;¶import java.net.HttpURLConnection;¶import java.net.MalformedURLException;¶import java.net.URL;¶import java.net.URLConnection;¶import java.text.DateFormat;¶import java.text.SimpleDateFormat;¶import java.util.ArrayList;¶import java.util.Comparator;¶import java.util.Date;¶import java.util.HashMap;¶import java.util.Iterator;¶import java.util.LinkedHashMap;¶import java.util.List;¶import java.util.Map;¶import java.util.Scanner;¶import java.util.concurrent.CountDownLatch;¶import analyzer.Analyzer;¶import au.com.bytecode.opencsv.CSVWriter;¶import fluorite.commands.ConsoleInput;¶import fluorite.commands.ConsoleOutputCommand;¶import fluorite.commands.CopyCommand;¶import fluorite.commands.Delete;¶import fluorite.commands.EHExceptionCommand;¶import fluorite.commands.EHICommand;¶import fluorite.commands.ExceptionCommand;¶import fluorite.commands.GetHelpCommand;¶import fluorite.commands.InsertStringCommand;¶import fluorite.commands.PasteCommand;¶import fluorite.commands.PauseCommand;¶import fluorite.commands.Replace;¶import fluorite.commands.RequestHelpCommand;¶import fluorite.commands.RunCommand;¶import fluorite.commands.ShellCommand;¶import fluorite.commands.WebCommand;¶¶public class AExperimentalReplayer extends AReplayer{¶	private Map<String, List<List<EHICommand>>> data;¶	private static final int THREAD_LIM = 6;¶	¶	public AExperimentalReplayer(Analyzer anAnalyzer) {¶		super(anAnalyzer);¶		analyzer = anAnalyzer;¶		data = new HashMap<>();¶		System.setProperty("http.agent", "Chrome");¶	}¶	¶	public void createPauseCommandLogs(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.out.println("Class Folder does not exist");¶			System.exit(0);¶		}¶		File[] students = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		latch = new CountDownLatch(students.length);¶		for (int j = 0; j < students.length; j++) {¶			File studentFolder  = students[j];¶			File logFolder = new File(studentFolder,"Eclipse");¶			if (!logFolder.exists()) {¶				latch.countDown();¶				continue;¶			}¶			System.out.println("Reading " + studentFolder.getName());¶			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {¶				public boolean accept(File pathname) {¶					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");¶				}¶			});¶			Thread thread = new Thread(new Runnable() {¶				public void run() {¶					if (logs == null) {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶						return;¶					}¶					try {¶						File browser = new File(studentFolder, "Browser");¶						List<EHICommand> webCommands = null;¶						Iterator<EHICommand> webCommandIterator = null;¶						if (browser.exists() && browser.listFiles().length != 0) {¶							webCommands = readWebCommands(browser.listFiles()[0]);¶							if (webCommands != null) {¶								webCommandIterator = webCommands.iterator();¶							}¶						}¶						EHICommand webCommand = null;¶						for (File file : logs) {¶							long startTimestamp = getLogFileCreationTime(file);¶							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);¶							if (commands.size() < 2) {¶								continue;¶							}¶							List<EHICommand> newCommands = new ArrayList<>();¶							EHICommand last = null;¶							EHICommand cur = null;¶							if (webCommand == null) {¶								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);¶							}¶							long timestamp = 0;¶							if (webCommand != null) {¶								timestamp = webCommand.getTimestamp() - startTimestamp;¶							}¶							for (EHICommand command : commands) {¶								if (cur == null) {¶									cur = command;¶									newCommands.add(command);¶								} else {¶									last = cur;¶									cur = command;¶//									boolean webCommandAdded = false;¶//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {¶//										webCommandAdded = true;¶//										last = webCommand;¶//										try {¶//											webCommand = webCommandIterator.next();¶//										} catch (NoSuchElementException e) {¶//											webCommand = null;¶//										}¶//									} ¶//									if (!webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶									¶//									boolean added = false;¶									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶										webCommand.setStartTimestamp(0);¶										webCommand.setTimestamp(timestamp);¶										maybeAddPauseCommand(newCommands, last,	webCommand);¶//										webCommandAdded = true;¶										if (webCommandIterator.hasNext()) {¶											last = webCommand;¶											webCommand = webCommandIterator.next();¶											timestamp = webCommand.getTimestamp() - startTimestamp;¶										} else {¶											webCommand = null;¶											break;¶										}¶									}¶//									if (webCommandAdded) {¶//										maybeAddPauseCommand(newCommands, last, cur);¶////										return webCommand;¶//									} else {¶										maybeAddPauseCommand(newCommands, last, cur);¶//									}¶								}¶							}¶							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;¶							for (EHICommand c : newCommands) {¶								logContent += c.persist();¶							}¶							logContent += XML_FILE_ENDING;¶							try {¶								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());¶								if (newLog.exists()) {¶									newLog.delete();¶								}¶								newLog.getParentFile().mkdirs();¶								newLog.createNewFile();¶								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));¶								System.out.println("Writing to file " + newLog.getPath());¶								writer.write(logContent);¶								writer.close();¶								System.out.println("Finished writing to file " + newLog.getPath());¶							} catch (IOException e) {¶								e.printStackTrace();¶							}¶						}¶						¶					} catch (Exception e) {¶						e.printStackTrace();¶					} finally {¶						synchronized (this) {¶							threadCount--;¶						}¶						latch.countDown();¶					}¶				}							¶			});¶			while(true) {¶				if (threadCount > THREAD_LIM) {¶					try {¶						Thread.sleep(1000);¶					} catch (InterruptedException e) {¶						e.printStackTrace();¶					}¶				}¶				¶				if (threadCount <= THREAD_LIM) {¶					synchronized (this) {¶						threadCount++;¶						thread.start();¶						break;¶					}¶				}¶			}¶		}¶		try {¶			latch.await();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		} finally {¶			System.exit(0);¶		}¶	}¶¶	public void analyzeFolder(String classFolderPath) {¶		File folder = new File(classFolderPath);¶		if (!folder.exists()) {¶			System.exit(0);¶		}¶		File[] participants = folder.listFiles(new FileFilter() {¶			public boolean accept(File pathname) {¶				return pathname.isDirectory();¶			}¶		});¶		for (int i = 0; i < participants.length; i++) {¶			File participantFolder = new File(participants[i],"Eclipse");¶			if (!participantFolder.exists()) {¶				continue;¶			}¶			System.out.println("Reading student " + participantFolder.getName());¶			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));¶		}¶//		createAssignData("Experiment", folder);¶//		createDistributionData("Experiment", folder);¶//		createPrevPauseDistribution("Experiment", folder);¶//		createNextPauseDistribution("Experiment", folder);¶		createWebStats("Experiment", folder);¶		System.exit(0);¶	}¶¶	private void createAssignData(String assign, File folder) {¶		File csv = new File(folder,assign+".csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"Event.csv");¶		FileWriter fw2;¶		int[] sum = new int[10];¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};¶			cw.writeNext(header);¶¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv2.createNewFile();¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header2 = {"case_id", "timestamp", "activity", "user"};¶			cw2.writeNext(header2);¶¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶				retVal.add(convertToHourMinuteSecond(restTime[0]));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶				int[] numCommands = new int[9];¶				List<String> breakdownList = new ArrayList<>();¶				String list = "";¶				for (List<EHICommand> commands : nestedCommands) {¶					long lastTime = -1;¶					long curTime = -1;¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶¶						if (i > 0) {¶							lastTime = curTime;¶						}¶						if (command != null) {¶							curTime = command.getTimestamp() + command.getStartTimestamp();¶						}¶						if (lastTime - curTime > 5*60*1000) {¶							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶						}¶						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||¶								command instanceof Delete ||¶								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||¶								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {¶							writeOneLine(cw2, assign, curTime, getEventType(command), student);¶						}¶						if (command instanceof PauseCommand) {¶							numCommands[0]++;¶							list += "A";¶						}¶						if (command instanceof WebCommand) {¶							numCommands[1]++;¶							list += "W";¶						}¶						if (command instanceof InsertStringCommand) {¶							numCommands[2]++;¶							list += "I";¶						}¶						if (command instanceof Delete) {¶							numCommands[3]++;¶							list += "D";¶						}¶						if (command instanceof Replace) {¶							numCommands[4]++;¶							list += "R";¶						}¶						if (command instanceof CopyCommand) {¶							numCommands[5]++;¶							list += "C";¶						}¶						if (command instanceof PasteCommand) {¶							numCommands[6]++;¶							list += "P";¶						}¶						if (command instanceof RunCommand) {¶							numCommands[7]++;¶							list += "U";¶						}¶						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {¶							if(isException(command)) {¶								if (command instanceof EHExceptionCommand) {¶									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶									ex.setTimestamp(command.getTimestamp());¶									ex.setStartTimestamp(command.getStartTimestamp());¶								}¶								numCommands[8]++;¶								list += "E";¶								if (i < commands.size()-1) {¶									command = commands.get(i+1);¶								} else {¶									continue;¶								}¶								while(!(command instanceof InsertStringCommand || command instanceof Replace ¶										|| command instanceof Delete ¶										|| command instanceof CopyCommand || command instanceof PasteCommand)) {¶									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||¶											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||¶											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {¶										if (i > 0) {¶											lastTime = curTime;¶										}¶										curTime = command.getTimestamp() + command.getStartTimestamp();¶										if (lastTime - curTime > 5*60*1000) {¶											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶										}¶										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {¶											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);¶										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {¶											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);¶										} else {¶											writeOneLine(cw2, assign, curTime, getEventType(command), student);¶										}¶									}¶									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {¶										if (command instanceof EHExceptionCommand) {¶											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");¶											ex.setTimestamp(command.getTimestamp());¶											ex.setStartTimestamp(command.getStartTimestamp());¶											if (i > 0) {¶												lastTime = curTime;¶											}¶											curTime = command.getTimestamp() + command.getStartTimestamp();¶											if (lastTime - curTime > 5*60*1000) {¶												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);¶											}¶											writeOneLine(cw2, assign, curTime, getEventType(ex), student);¶										}¶										numCommands[8]++;¶										list += "E";¶									}¶									i++;¶									if (i+1 < commands.size()) {¶										command = commands.get(i+1);¶									} else {¶										break;¶									}¶								}¶								breakdownList.add(countConsecutiveCommands(list));¶								list = "";¶							}¶						}¶					}¶				}¶				if (!list.equals("")) {¶					breakdownList.add(countConsecutiveCommands(list));¶				}¶				for(int i = 0; i < numCommands.length; i++) {¶					retVal.add(i+5, numCommands[i]+"");¶					sum[i] += numCommands[i];¶					if (i > 1) {¶						sum[9] += numCommands[i];¶					}¶				}¶				for(int i = 0; i < breakdownList.size(); i++) {¶					retVal.add(i+14, breakdownList.get(i));¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			List<String> retVal = new ArrayList<>();¶			retVal.add("Sum");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			retVal.add("");¶			for (int i = 0; i < sum.length; i++) {¶				retVal.add(sum[i]+"");¶			}¶			String[] nextLine = retVal.toArray(new String[1]);¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶	}¶¶	private void createDistributionData(String assign, File folder) {¶		File csv = new File(folder,assign+"Distribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getHeader();¶			cw.writeNext(header);¶			¶			String[] sum = new String[header.length];¶			long[] restTimeSum = new long[REST.length];¶			sum[0] = "Sum";¶			for (int i = 1; i < sum.length; i++) {¶				sum[i] = "";¶			}¶			int[] restSum = new int[REST.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				retVal.add(student);¶				long totalTime = totalTimeSpent(nestedCommands);¶				if (totalTime == 0) {¶					continue;¶				}¶				long wallClockTime = wallClockTime(nestedCommands);¶				retVal.add(convertToHourMinuteSecond(totalTime));¶				retVal.add(convertToHourMinuteSecond(wallClockTime));¶¶				long[] restTime = {0,0};¶				for (int i = 0; i < REST.length; i++) {¶					if (i < REST.length-1) {¶						restTime = restTime(nestedCommands, REST[i], REST[i+1]);¶					} else {¶						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);¶					}¶					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));¶					retVal.add(convertToHourMinuteSecond(restTime[0]));¶					retVal.add(restTime[1]+"");¶					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));¶					restSum[i] += restTime[1];¶					restTimeSum[i] += restTime[2];¶				}¶				¶				String[] days = daysSpent(nestedCommands);¶				if (days != null) {¶					for (int i = 0; i < days.length; i++) {¶						retVal.add(days[i]);¶					}¶				}¶				¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			int sum2 = 0;¶			for (int i = 0; i < restSum.length; i++) {¶				sum[4*i+5] = restSum[i]+"";¶				sum2 += restSum[i];¶				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);¶			}¶			sum[1] = sum2+"";¶			cw.writeNext(sum);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createPrevPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"PrevPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createWebStats(String assign, File folder) {¶		File csv = new File(folder,assign+"WebStats2.csv");¶		FileWriter fw;¶		File csv2 = new File(folder,assign+"WebSearches2.csv");¶		FileWriter fw2;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			if (csv2.exists()) {¶				csv2.delete();¶			}¶			csv.createNewFile();¶			csv2.createNewFile();¶			fw = new FileWriter(csv);¶			fw2 = new FileWriter(csv2);¶			CSVWriter cw = new CSVWriter(fw);¶			CSVWriter cw2 = new CSVWriter(fw2);¶			String[] header = {"Title", "URL", "# of Visits", "Provided?"};¶			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};¶			cw.writeNext(header);¶			cw2.writeNext(header2);¶¶			Map<String, Integer> urls = new HashMap<>();¶			Map<String, String> titles = new HashMap<>();¶//			Map<String, String> searchWords = new HashMap<>();¶			Map<String, List<String>> searches = new LinkedHashMap<>();¶			Map<String, List<String>> contents = new HashMap<>();¶//			EHICommand lastPage = null;¶			for (String student : data.keySet()) {¶				EHICommand lastSearch = null;¶//				if (!student.equals("16")) {¶//					continue;¶//				}¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (int i = 0; i < commands.size(); i++) {¶						EHICommand command = commands.get(i);¶						if (command instanceof WebCommand) {¶							String url = command.getDataMap().get("URL");¶							if (command.getAttributesMap().get("type").equals("Search")) {¶								lastSearch = command;¶								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {¶									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());¶								}¶							} ¶							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {¶								String searchWord = "null";¶								if (lastSearch != null) {¶									searchWord = lastSearch.getDataMap().get("keyword");¶								}¶								if (!searches.containsKey(searchWord)) {¶									searches.put(searchWord, new ArrayList<>());¶								}¶								searches.get(searchWord).add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶									if (!url.contains("google.com")) {¶//										list.add(readWebContent(url));¶										list.add(readWebContent2(url));¶										contents.put(url, list);¶									}¶								}¶							}¶							if (command.getAttributesMap().get("type").contains("Provided")) {¶								if (!searches.containsKey("Provided")) {¶									searches.put("Provided", new ArrayList<>());¶								}¶								searches.get("Provided").add(url);¶								if (!contents.containsKey(url)) {¶									List<String> list = new ArrayList<>();¶//									list.add(readWebContent(url));¶									list.add(readWebContent2(url));¶									contents.put(url, list);¶								}¶							}¶							urls.merge(url, 1, Integer::sum);¶							titles.put(url, command.getDataMap().get("keyword"));¶						}¶						if (command instanceof PasteCommand) {¶							outer:¶							for (int j = i-1; j >= 0 && j > i-20; j--) {¶								EHICommand command2 = commands.get(j);¶								String pastedText = "";¶								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {¶									if (command2 instanceof InsertStringCommand) {¶										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);¶									} else {¶										pastedText = command2.getDataMap().get("insertedText");¶									}¶									if (pastedText.length() > 10) {¶										for (String url : contents.keySet()) {¶											List<String> list = contents.get(url);¶											if (list.get(0).contains(pastedText.replaceAll("\\s", ""))) {¶												list.add(pastedText);¶												break outer;¶											}¶										}¶									}¶								}¶							}¶						}¶					}¶				}¶				for (String s : searches.keySet()) {¶					List<String> nextLine = new ArrayList<>();¶					nextLine.add(student);¶					nextLine.add(s);¶					if (searches.get(s).size() == 0) {¶						nextLine.add("No Result");¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						continue;¶					}¶					for (int i = 0; i < searches.get(s).size(); i++) {¶						String url = searches.get(s).get(i);¶						nextLine.add(titles.get(url));¶						nextLine.add(url);¶						nextLine.add(i+1+"");¶						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");¶						if (contents.containsKey(url)) {¶							List<String> list = contents.get(url);¶							for (int j = 1; j < list.size(); j++) {¶								nextLine.add(list.get(j));¶							}¶						}¶						cw2.writeNext(nextLine.toArray(new String[1]));¶						nextLine = new ArrayList<>();¶						nextLine.add(student);¶						nextLine.add("");¶					}¶				}¶				searches.clear();¶			}¶			Map<String, Integer> sortedMap = new LinkedHashMap<>();¶			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));¶			for (String s : sortedMap.keySet()) {¶				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)+""};¶				cw.writeNext(nextLine);¶			}¶			fw.close();¶			cw.close();¶			¶			fw2.close();¶			cw2.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private void createNextPauseDistribution(String assign, File folder) {¶		File csv = new File(folder,assign+"NextPauseDistribution.csv");¶		FileWriter fw;¶		try {¶			if (csv.exists()) {¶				csv.delete();¶			}¶			csv.createNewFile();¶			fw = new FileWriter(csv);¶			CSVWriter cw = new CSVWriter(fw);¶			String[] header = getPauseHeader();¶			cw.writeNext(header);¶			¶			int[] sum = new int[PauseCommand.TYPES.length];¶			long[] sumPause = new long[sum.length];¶			for (String student : data.keySet()) {¶				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());¶				List<List<EHICommand>> nestedCommands = data.get(student);¶				List<String> retVal = new ArrayList<>();¶				int[] numCommmands = new int[sum.length];¶				long[] pauseTimes = new long[sum.length];¶				retVal.add(student);¶				for (List<EHICommand> commands : nestedCommands) {¶					for (EHICommand command : commands) {¶						if (command instanceof PauseCommand) {¶							for (int i = 0; i < sum.length; i++) {¶								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {¶									numCommmands[i]++;¶									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); ¶									break;¶								}¶							}¶						}¶					}¶				}¶				for (int i = 0; i < sum.length; i++) {¶					retVal.add(numCommmands[i]+"");¶					if (numCommmands[i] == 0) {¶						retVal.add("0");¶					} else {¶						retVal.add(pauseTimes[i]/numCommmands[i]+"");¶					}¶					sum[i] += numCommmands[i];¶					sumPause[i] += pauseTimes[i];¶				}¶				String[] nextLine = retVal.toArray(new String[1]);¶				cw.writeNext(nextLine);¶				System.out.println("written " + assign + " student " + student + "to " + csv.getName());¶			}¶			String[] nextLine = new String[header.length];¶			nextLine[0] = "Sum";¶			for (int i = 0; i < sum.length; i++) {¶				nextLine[1+i*2] = sum[i]+"";¶				if (sum[i] == 0) {¶					nextLine[2+i*2] = 0+"";¶				} else {¶					nextLine[2+i*2] = sumPause[i]/sum[i]+"";¶				}¶			}¶			cw.writeNext(nextLine);¶			fw.close();¶			cw.close();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} ¶	}¶	¶	private String[] getPauseHeader() {¶		List<String> retVal = new ArrayList<>();¶		retVal.add("ID");¶		for (String s : PauseCommand.TYPES) {¶			retVal.add(s);¶			retVal.add("Avg. Time");¶//			retVal.add("Longest Time");¶//			retVal.add("Shortest Time");¶		}¶		return retVal.toArray(new String[1]);¶	}¶	¶	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {¶		String[] nextLine = new String[4]; ¶		nextLine[0] = assign + " " + pid;¶		Date date = new Date(time);¶		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");¶		nextLine[1] = df.format(date);¶		nextLine[2] = type;¶		nextLine[3] = pid;¶		if (nextLine != null) {¶			cw.writeNext(nextLine);¶		}¶	}¶	¶	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){¶		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");¶		sortNestedCommands(nestedCommands);¶		return nestedCommands;¶	}¶¶	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {¶		long rest = cur.getTimestamp()-last.getTimestamp();¶		if (rest >= 1*ONE_SECOND) {¶			String range = "";¶			if (rest < 2*ONE_SECOND) {¶				range = "1s-2s";¶			} else if (rest < 5*ONE_SECOND) {¶				range = "2s-5s";¶			} else if (rest < 10*ONE_SECOND) {¶				range = "5s-10s";¶			} else if (rest < 20*ONE_SECOND) {¶				range = "10s-20s";¶			} else if (rest < 30*ONE_SECOND) {¶				range = "20s-30s";¶			} else if (rest < ONE_MIN) {¶				range = "30s-1m";¶			} else if (rest < TWO_MIN) {¶				range = "1m-2m";¶			} else if (rest < FIVE_MIN) {¶				range = "2m-5m";¶			} else if (rest < TEN_MIN) {¶				range = "5m-10m";¶			} else if (rest < 3*TEN_MIN) {¶				range = "10m-30m";¶			} else if (rest < 6*TEN_MIN) {¶				range = "30m-60m";¶			} else {¶				range = ">1h";¶			}¶			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);¶			rCommnad.setStartTimestamp(0);¶			rCommnad.setTimestamp(last.getTimestamp()+1);¶			newCommands.add(rCommnad);¶		} ¶		newCommands.add(cur);¶	}¶	¶//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {¶//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//		boolean added = false;¶//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {¶//			webCommand.setStartTimestamp(0);¶//			webCommand.setTimestamp(timestamp);¶//			maybeAddPauseCommand(newCommands, last,	webCommand);¶//			added = true;¶//			if (webCommandIterator.hasNext()) {¶//				last = webCommand;¶//				webCommand = webCommandIterator.next();¶//				timestamp = webCommand.getStartTimestamp() - startTimestamp;¶//			} else {¶//				break;¶//			}¶//		}¶//		if (added) {¶//			maybeAddPauseCommand(newCommands, last, cur);¶//			return webCommand;¶//		}¶////		newCommands.add(webCommand);¶////		maybeAddPauseCommand(newCommands, webCommand, cur);¶//		return null;¶//	}¶	¶	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {¶		if (iterator == null) {¶			return null;¶		}¶		EHICommand webCommand = null;¶		long timestamp = 0;¶		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {¶			webCommand.setStartTimestamp(0);¶			webCommand.setTimestamp(timestamp);¶			commands.add(webCommand);¶		}¶		return webCommand;¶	}¶¶	public String readWebContent(String aURL) {¶		String content = "";¶		Scanner sc = null;¶		try {¶			URL url = new URL(aURL);¶//			System.out.println("accessing webpage " + aURL);¶			URLConnection con = url.openConnection();¶			con.setReadTimeout(5000);¶			sc = new Scanner(con.getInputStream());¶			StringBuffer sb = new StringBuffer();¶			while (sc.hasNext()) {¶				sb.append(sc.next());¶			}¶			content = sb.toString();¶		} catch (MalformedURLException e) {¶			e.printStackTrace();¶		} catch (IOException e) {¶			e.printStackTrace();¶		} finally {¶			if (sc != null) {¶				sc.close();¶			}¶		}¶		if (content.equals("") && !aURL.substring(0,5).equals("https")) {¶			aURL = aURL.replaceFirst("http", "https");¶			return readWebContent(aURL);¶		}¶		¶//		System.out.println("webpage content " + aURL + content);¶//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");¶		return content;¶	}¶	¶	private boolean isProvided(String s) {¶		for (String url : WebCommand.PROVIDED_URL) {¶			if (s.equals(url)) {¶				return true;¶			}¶		}¶		return false;¶	}¶	¶	private String readWebContent2(String url){¶		try {¶			 HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();¶		       httpClient.setRequestMethod("GET");¶		       httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");¶		       int responseCode = httpClient.getResponseCode();¶		       try (BufferedReader in = new BufferedReader(¶		               new InputStreamReader(httpClient.getInputStream()))) {¶		           StringBuilder response = new StringBuilder();¶		           String line;¶		           while ((line = in.readLine()) != null) {¶		               response.append(line);¶		           }¶		           return response.toString();¶		       }¶		} catch (Exception e) {¶			// TODO: handle exception¶		"), Diff(INSERT,"	e.printStackTrace();¶		"), Diff(EQUAL,"}¶       return "";¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package logAnalyzer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import analyzer.Analyzer;
import au.com.bytecode.opencsv.CSVWriter;
import fluorite.commands.ConsoleInput;
import fluorite.commands.ConsoleOutputCommand;
import fluorite.commands.CopyCommand;
import fluorite.commands.Delete;
import fluorite.commands.EHExceptionCommand;
import fluorite.commands.EHICommand;
import fluorite.commands.ExceptionCommand;
import fluorite.commands.GetHelpCommand;
import fluorite.commands.InsertStringCommand;
import fluorite.commands.PasteCommand;
import fluorite.commands.PauseCommand;
import fluorite.commands.Replace;
import fluorite.commands.RequestHelpCommand;
import fluorite.commands.RunCommand;
import fluorite.commands.ShellCommand;
import fluorite.commands.WebCommand;

public class AExperimentalReplayer extends AReplayer{
	private Map<String, List<List<EHICommand>>> data;
	private static final int THREAD_LIM = 6;
	
	public AExperimentalReplayer(Analyzer anAnalyzer) {
		super(anAnalyzer);
		analyzer = anAnalyzer;
		data = new HashMap<>();
		System.setProperty("http.agent", "Chrome");
	}
	
	public void createPauseCommandLogs(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.out.println("Class Folder does not exist");
			System.exit(0);
		}
		File[] students = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		latch = new CountDownLatch(students.length);
		for (int j = 0; j < students.length; j++) {
			File studentFolder  = students[j];
			File logFolder = new File(studentFolder,"Eclipse");
			if (!logFolder.exists()) {
				latch.countDown();
				continue;
			}
			System.out.println("Reading " + studentFolder.getName());
			File[] logs = new File(logFolder.getPath()).listFiles(new FileFilter() {
				public boolean accept(File pathname) {
					return pathname.getName().startsWith("Log") && pathname.getName().endsWith(".xml");
				}
			});
			Thread thread = new Thread(new Runnable() {
				public void run() {
					if (logs == null) {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
						return;
					}
					try {
						File browser = new File(studentFolder, "Browser");
						List<EHICommand> webCommands = null;
						Iterator<EHICommand> webCommandIterator = null;
						if (browser.exists() && browser.listFiles().length != 0) {
							webCommands = readWebCommands(browser.listFiles()[0]);
							if (webCommands != null) {
								webCommandIterator = webCommands.iterator();
							}
						}
						EHICommand webCommand = null;
						for (File file : logs) {
							long startTimestamp = getLogFileCreationTime(file);
							List<EHICommand> commands = readOneLogFile(file.getPath(), analyzer);
							if (commands.size() < 2) {
								continue;
							}
							List<EHICommand> newCommands = new ArrayList<>();
							EHICommand last = null;
							EHICommand cur = null;
							if (webCommand == null) {
								webCommand = maybeAddWebCommandBeforeLogs(webCommandIterator, startTimestamp, newCommands);
							}
							long timestamp = 0;
							if (webCommand != null) {
								timestamp = webCommand.getTimestamp() - startTimestamp;
							}
							for (EHICommand command : commands) {
								if (cur == null) {
									cur = command;
									newCommands.add(command);
								} else {
									last = cur;
									cur = command;
//									boolean webCommandAdded = false;
//									while(webCommand != null && maybeAddWebCommand(newCommands, last, cur, webCommand, webCommandIterator, startTimestamp)) {
//										webCommandAdded = true;
//										last = webCommand;
//										try {
//											webCommand = webCommandIterator.next();
//										} catch (NoSuchElementException e) {
//											webCommand = null;
//										}
//									} 
//									if (!webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
//									}
									
//									boolean added = false;
									while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
										webCommand.setStartTimestamp(0);
										webCommand.setTimestamp(timestamp);
										maybeAddPauseCommand(newCommands, last,	webCommand);
//										webCommandAdded = true;
										if (webCommandIterator.hasNext()) {
											last = webCommand;
											webCommand = webCommandIterator.next();
											timestamp = webCommand.getTimestamp() - startTimestamp;
										} else {
											webCommand = null;
											break;
										}
									}
//									if (webCommandAdded) {
//										maybeAddPauseCommand(newCommands, last, cur);
////										return webCommand;
//									} else {
										maybeAddPauseCommand(newCommands, last, cur);
//									}
								}
							}
							String logContent = XML_START1 + getLogFileCreationTime(file) + XML_START2 + XML_VERSION + XML_START3;
							for (EHICommand c : newCommands) {
								logContent += c.persist();
							}
							logContent += XML_FILE_ENDING;
							try {
								File newLog = new File(file.getParent()+File.separator+"Rest"+File.separator+file.getName());
								if (newLog.exists()) {
									newLog.delete();
								}
								newLog.getParentFile().mkdirs();
								newLog.createNewFile();
								BufferedWriter writer = new BufferedWriter(new FileWriter(newLog, true));
								System.out.println("Writing to file " + newLog.getPath());
								writer.write(logContent);
								writer.close();
								System.out.println("Finished writing to file " + newLog.getPath());
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						
					} catch (Exception e) {
						e.printStackTrace();
					} finally {
						synchronized (this) {
							threadCount--;
						}
						latch.countDown();
					}
				}							
			});
			while(true) {
				if (threadCount > THREAD_LIM) {
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				if (threadCount <= THREAD_LIM) {
					synchronized (this) {
						threadCount++;
						thread.start();
						break;
					}
				}
			}
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			System.exit(0);
		}
	}

	public void analyzeFolder(String classFolderPath) {
		File folder = new File(classFolderPath);
		if (!folder.exists()) {
			System.exit(0);
		}
		File[] participants = folder.listFiles(new FileFilter() {
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (int i = 0; i < participants.length; i++) {
			File participantFolder = new File(participants[i],"Eclipse");
			if (!participantFolder.exists()) {
				continue;
			}
			System.out.println("Reading student " + participantFolder.getName());
			data.put(participants[i].getName(), replayLogs(participantFolder.getPath(), analyzer));
		}
//		createAssignData("Experiment", folder);
//		createDistributionData("Experiment", folder);
//		createPrevPauseDistribution("Experiment", folder);
//		createNextPauseDistribution("Experiment", folder);
		createWebStats("Experiment", folder);
		System.exit(0);
	}

	private void createAssignData(String assign, File folder) {
		File csv = new File(folder,assign+".csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"Event.csv");
		FileWriter fw2;
		int[] sum = new int[10];
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = {"Student", "Total Time Spent", "Active Time", "Rest Time", "Wall Clock Time", "Pause", "Web Visit", "Insert", "Delete", "Replace", "Copy", "Paste", "Run", "Exception", "Exception Breakdown"};
			cw.writeNext(header);

			if (csv2.exists()) {
				csv2.delete();
			}
			csv2.createNewFile();
			fw2 = new FileWriter(csv2);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header2 = {"case_id", "timestamp", "activity", "user"};
			cw2.writeNext(header2);

			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + "to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				long[] restTime = restTime(nestedCommands, FIVE_MIN, Long.MAX_VALUE);
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
				retVal.add(convertToHourMinuteSecond(restTime[0]));
				retVal.add(convertToHourMinuteSecond(wallClockTime));
				int[] numCommands = new int[9];
				List<String> breakdownList = new ArrayList<>();
				String list = "";
				for (List<EHICommand> commands : nestedCommands) {
					long lastTime = -1;
					long curTime = -1;
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);

						if (i > 0) {
							lastTime = curTime;
						}
						if (command != null) {
							curTime = command.getTimestamp() + command.getStartTimestamp();
						}
						if (lastTime - curTime > 5*60*1000) {
							writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
						}
						if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
							writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
						} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
							writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
						} else if (command instanceof InsertStringCommand || command instanceof CopyCommand ||
								command instanceof Delete ||
								command instanceof Replace || command instanceof PasteCommand || command instanceof ExceptionCommand ||
								command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
								command instanceof RequestHelpCommand || command instanceof GetHelpCommand) {
							writeOneLine(cw2, assign, curTime, getEventType(command), student);
						}
						if (command instanceof PauseCommand) {
							numCommands[0]++;
							list += "A";
						}
						if (command instanceof WebCommand) {
							numCommands[1]++;
							list += "W";
						}
						if (command instanceof InsertStringCommand) {
							numCommands[2]++;
							list += "I";
						}
						if (command instanceof Delete) {
							numCommands[3]++;
							list += "D";
						}
						if (command instanceof Replace) {
							numCommands[4]++;
							list += "R";
						}
						if (command instanceof CopyCommand) {
							numCommands[5]++;
							list += "C";
						}
						if (command instanceof PasteCommand) {
							numCommands[6]++;
							list += "P";
						}
						if (command instanceof RunCommand) {
							numCommands[7]++;
							list += "U";
						}
						if (command instanceof ExceptionCommand || command instanceof EHExceptionCommand) {
							if(isException(command)) {
								if (command instanceof EHExceptionCommand) {
									ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
									ex.setTimestamp(command.getTimestamp());
									ex.setStartTimestamp(command.getStartTimestamp());
								}
								numCommands[8]++;
								list += "E";
								if (i < commands.size()-1) {
									command = commands.get(i+1);
								} else {
									continue;
								}
								while(!(command instanceof InsertStringCommand || command instanceof Replace 
										|| command instanceof Delete 
										|| command instanceof CopyCommand || command instanceof PasteCommand)) {
									if (command instanceof RunCommand || command instanceof ConsoleOutputCommand || command instanceof ConsoleInput ||
											command instanceof RequestHelpCommand || command instanceof GetHelpCommand || command instanceof ExceptionCommand ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_LOST_FOCUS")) ||
											(command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals("ECLIPSE_CLOSED"))) {
										if (i > 0) {
											lastTime = curTime;
										}
										curTime = command.getTimestamp() + command.getStartTimestamp();
										if (lastTime - curTime > 5*60*1000) {
											writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
										}
										if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_LOST_FOCUS)) {
											writeOneLine(cw2, assign, curTime, REST_LOSEFOCUS, student);
										} else if (command instanceof ShellCommand && ((ShellCommand)command).getAttributesMap().get("type").equals(ECLIPSE_CLOSED)) {
											writeOneLine(cw2, assign, curTime, REST_ENDSESSION, student);
										} else {
											writeOneLine(cw2, assign, curTime, getEventType(command), student);
										}
									}
									if ((command instanceof ExceptionCommand || command instanceof EHExceptionCommand) && isException(command)) {
										if (command instanceof EHExceptionCommand) {
											ExceptionCommand ex = new ExceptionCommand(command.getDataMap().get("exceptionString"),"");
											ex.setTimestamp(command.getTimestamp());
											ex.setStartTimestamp(command.getStartTimestamp());
											if (i > 0) {
												lastTime = curTime;
											}
											curTime = command.getTimestamp() + command.getStartTimestamp();
											if (lastTime - curTime > 5*60*1000) {
												writeOneLine(cw2, assign, lastTime, REST_INSESSION, student);
											}
											writeOneLine(cw2, assign, curTime, getEventType(ex), student);
										}
										numCommands[8]++;
										list += "E";
									}
									i++;
									if (i+1 < commands.size()) {
										command = commands.get(i+1);
									} else {
										break;
									}
								}
								breakdownList.add(countConsecutiveCommands(list));
								list = "";
							}
						}
					}
				}
				if (!list.equals("")) {
					breakdownList.add(countConsecutiveCommands(list));
				}
				for(int i = 0; i < numCommands.length; i++) {
					retVal.add(i+5, numCommands[i]+"");
					sum[i] += numCommands[i];
					if (i > 1) {
						sum[9] += numCommands[i];
					}
				}
				for(int i = 0; i < breakdownList.size(); i++) {
					retVal.add(i+14, breakdownList.get(i));
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			List<String> retVal = new ArrayList<>();
			retVal.add("Sum");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			retVal.add("");
			for (int i = 0; i < sum.length; i++) {
				retVal.add(sum[i]+"");
			}
			String[] nextLine = retVal.toArray(new String[1]);
			cw.writeNext(nextLine);
			fw.close();
			cw.close();

			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void createDistributionData(String assign, File folder) {
		File csv = new File(folder,assign+"Distribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getHeader();
			cw.writeNext(header);
			
			String[] sum = new String[header.length];
			long[] restTimeSum = new long[REST.length];
			sum[0] = "Sum";
			for (int i = 1; i < sum.length; i++) {
				sum[i] = "";
			}
			int[] restSum = new int[REST.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				retVal.add(student);
				long totalTime = totalTimeSpent(nestedCommands);
				if (totalTime == 0) {
					continue;
				}
				long wallClockTime = wallClockTime(nestedCommands);
				retVal.add(convertToHourMinuteSecond(totalTime));
				retVal.add(convertToHourMinuteSecond(wallClockTime));

				long[] restTime = {0,0};
				for (int i = 0; i < REST.length; i++) {
					if (i < REST.length-1) {
						restTime = restTime(nestedCommands, REST[i], REST[i+1]);
					} else {
						restTime = restTime(nestedCommands, REST[i], Long.MAX_VALUE);
					}
					retVal.add(convertToHourMinuteSecond(totalTime - restTime[0]));
					retVal.add(convertToHourMinuteSecond(restTime[0]));
					retVal.add(restTime[1]+"");
					retVal.add(getTime(restTime[1] == 0? 0:1.0*restTime[2]/restTime[1]));
					restSum[i] += restTime[1];
					restTimeSum[i] += restTime[2];
				}
				
				String[] days = daysSpent(nestedCommands);
				if (days != null) {
					for (int i = 0; i < days.length; i++) {
						retVal.add(days[i]);
					}
				}
				
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			int sum2 = 0;
			for (int i = 0; i < restSum.length; i++) {
				sum[4*i+5] = restSum[i]+"";
				sum2 += restSum[i];
				sum[4*i+6] = getTime(restSum[i] == 0? 0:1.0*restTimeSum[i]/restSum[i]);
			}
			sum[1] = sum2+"";
			cw.writeNext(sum);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createPrevPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"PrevPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("prevType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createWebStats(String assign, File folder) {
		File csv = new File(folder,assign+"WebStats2.csv");
		FileWriter fw;
		File csv2 = new File(folder,assign+"WebSearches2.csv");
		FileWriter fw2;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			if (csv2.exists()) {
				csv2.delete();
			}
			csv.createNewFile();
			csv2.createNewFile();
			fw = new FileWriter(csv);
			fw2 = new FileWriter(csv2);
			CSVWriter cw = new CSVWriter(fw);
			CSVWriter cw2 = new CSVWriter(fw2);
			String[] header = {"Title", "URL", "# of Visits", "Provided?"};
			String[] header2 = {"ID", "Search Word", "Title", "URL", "Sequence", "Last Page of the Search?", "Pasted Text"};
			cw.writeNext(header);
			cw2.writeNext(header2);

			Map<String, Integer> urls = new HashMap<>();
			Map<String, String> titles = new HashMap<>();
//			Map<String, String> searchWords = new HashMap<>();
			Map<String, List<String>> searches = new LinkedHashMap<>();
			Map<String, List<String>> contents = new HashMap<>();
//			EHICommand lastPage = null;
			for (String student : data.keySet()) {
				EHICommand lastSearch = null;
//				if (!student.equals("16")) {
//					continue;
//				}
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (int i = 0; i < commands.size(); i++) {
						EHICommand command = commands.get(i);
						if (command instanceof WebCommand) {
							String url = command.getDataMap().get("URL");
							if (command.getAttributesMap().get("type").equals("Search")) {
								lastSearch = command;
								if (!searches.containsKey(lastSearch.getDataMap().get("keyword"))) {
									searches.put(lastSearch.getDataMap().get("keyword"), new ArrayList<>());
								}
							} 
							if (command.getAttributesMap().get("type").equals("Search Result") || command.getAttributesMap().get("type").equals("Stack Overflow")) {
								String searchWord = "null";
								if (lastSearch != null) {
									searchWord = lastSearch.getDataMap().get("keyword");
								}
								if (!searches.containsKey(searchWord)) {
									searches.put(searchWord, new ArrayList<>());
								}
								searches.get(searchWord).add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
									if (!url.contains("google.com")) {
//										list.add(readWebContent(url));
										list.add(readWebContent2(url));
										contents.put(url, list);
									}
								}
							}
							if (command.getAttributesMap().get("type").contains("Provided")) {
								if (!searches.containsKey("Provided")) {
									searches.put("Provided", new ArrayList<>());
								}
								searches.get("Provided").add(url);
								if (!contents.containsKey(url)) {
									List<String> list = new ArrayList<>();
//									list.add(readWebContent(url));
									list.add(readWebContent2(url));
									contents.put(url, list);
								}
							}
							urls.merge(url, 1, Integer::sum);
							titles.put(url, command.getDataMap().get("keyword"));
						}
						if (command instanceof PasteCommand) {
							outer:
							for (int j = i-1; j >= 0 && j > i-20; j--) {
								EHICommand command2 = commands.get(j);
								String pastedText = "";
								if (command2 instanceof InsertStringCommand || command2 instanceof Replace) {
									if (command2 instanceof InsertStringCommand) {
										pastedText = command2.getDataMap().get(InsertStringCommand.XML_Data_Tag);
									} else {
										pastedText = command2.getDataMap().get("insertedText");
									}
									if (pastedText.length() > 10) {
										for (String url : contents.keySet()) {
											List<String> list = contents.get(url);
											if (list.get(0).contains(pastedText.replaceAll("\\s", ""))) {
												list.add(pastedText);
												break outer;
											}
										}
									}
								}
							}
						}
					}
				}
				for (String s : searches.keySet()) {
					List<String> nextLine = new ArrayList<>();
					nextLine.add(student);
					nextLine.add(s);
					if (searches.get(s).size() == 0) {
						nextLine.add("No Result");
						cw2.writeNext(nextLine.toArray(new String[1]));
						continue;
					}
					for (int i = 0; i < searches.get(s).size(); i++) {
						String url = searches.get(s).get(i);
						nextLine.add(titles.get(url));
						nextLine.add(url);
						nextLine.add(i+1+"");
						nextLine.add(i == searches.get(s).size()-1 ? "Last" : "");
						if (contents.containsKey(url)) {
							List<String> list = contents.get(url);
							for (int j = 1; j < list.size(); j++) {
								nextLine.add(list.get(j));
							}
						}
						cw2.writeNext(nextLine.toArray(new String[1]));
						nextLine = new ArrayList<>();
						nextLine.add(student);
						nextLine.add("");
					}
				}
				searches.clear();
			}
			Map<String, Integer> sortedMap = new LinkedHashMap<>();
			urls.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
			for (String s : sortedMap.keySet()) {
				String[] nextLine = {titles.get(s), s, sortedMap.get(s)+"", isProvided(s)+""};
				cw.writeNext(nextLine);
			}
			fw.close();
			cw.close();
			
			fw2.close();
			cw2.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private void createNextPauseDistribution(String assign, File folder) {
		File csv = new File(folder,assign+"NextPauseDistribution.csv");
		FileWriter fw;
		try {
			if (csv.exists()) {
				csv.delete();
			}
			csv.createNewFile();
			fw = new FileWriter(csv);
			CSVWriter cw = new CSVWriter(fw);
			String[] header = getPauseHeader();
			cw.writeNext(header);
			
			int[] sum = new int[PauseCommand.TYPES.length];
			long[] sumPause = new long[sum.length];
			for (String student : data.keySet()) {
				System.out.println("Writing " + assign + " student " + student + " to " + csv.getName());
				List<List<EHICommand>> nestedCommands = data.get(student);
				List<String> retVal = new ArrayList<>();
				int[] numCommmands = new int[sum.length];
				long[] pauseTimes = new long[sum.length];
				retVal.add(student);
				for (List<EHICommand> commands : nestedCommands) {
					for (EHICommand command : commands) {
						if (command instanceof PauseCommand) {
							for (int i = 0; i < sum.length; i++) {
								if (command.getDataMap().get("nextType").equals(PauseCommand.TYPES[i])) {
									numCommmands[i]++;
									pauseTimes[i] += Long.parseLong(command.getDataMap().get("pause")); 
									break;
								}
							}
						}
					}
				}
				for (int i = 0; i < sum.length; i++) {
					retVal.add(numCommmands[i]+"");
					if (numCommmands[i] == 0) {
						retVal.add("0");
					} else {
						retVal.add(pauseTimes[i]/numCommmands[i]+"");
					}
					sum[i] += numCommmands[i];
					sumPause[i] += pauseTimes[i];
				}
				String[] nextLine = retVal.toArray(new String[1]);
				cw.writeNext(nextLine);
				System.out.println("written " + assign + " student " + student + "to " + csv.getName());
			}
			String[] nextLine = new String[header.length];
			nextLine[0] = "Sum";
			for (int i = 0; i < sum.length; i++) {
				nextLine[1+i*2] = sum[i]+"";
				if (sum[i] == 0) {
					nextLine[2+i*2] = 0+"";
				} else {
					nextLine[2+i*2] = sumPause[i]/sum[i]+"";
				}
			}
			cw.writeNext(nextLine);
			fw.close();
			cw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} 
	}
	
	private String[] getPauseHeader() {
		List<String> retVal = new ArrayList<>();
		retVal.add("ID");
		for (String s : PauseCommand.TYPES) {
			retVal.add(s);
			retVal.add("Avg. Time");
//			retVal.add("Longest Time");
//			retVal.add("Shortest Time");
		}
		return retVal.toArray(new String[1]);
	}
	
	private void writeOneLine(CSVWriter cw, String assign, long time, String type, String pid) {
		String[] nextLine = new String[4]; 
		nextLine[0] = assign + " " + pid;
		Date date = new Date(time);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		nextLine[1] = df.format(date);
		nextLine[2] = type;
		nextLine[3] = pid;
		if (nextLine != null) {
			cw.writeNext(nextLine);
		}
	}
	
	public List<List<EHICommand>> replayLogs(String projectPath, Analyzer analyzer){
		List<List<EHICommand>> nestedCommands = analyzer.convertXMLLogToObjects(projectPath+File.separator+"Rest");
		sortNestedCommands(nestedCommands);
		return nestedCommands;
	}

	private void maybeAddPauseCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur) {
		long rest = cur.getTimestamp()-last.getTimestamp();
		if (rest >= 1*ONE_SECOND) {
			String range = "";
			if (rest < 2*ONE_SECOND) {
				range = "1s-2s";
			} else if (rest < 5*ONE_SECOND) {
				range = "2s-5s";
			} else if (rest < 10*ONE_SECOND) {
				range = "5s-10s";
			} else if (rest < 20*ONE_SECOND) {
				range = "10s-20s";
			} else if (rest < 30*ONE_SECOND) {
				range = "20s-30s";
			} else if (rest < ONE_MIN) {
				range = "30s-1m";
			} else if (rest < TWO_MIN) {
				range = "1m-2m";
			} else if (rest < FIVE_MIN) {
				range = "2m-5m";
			} else if (rest < TEN_MIN) {
				range = "5m-10m";
			} else if (rest < 3*TEN_MIN) {
				range = "10m-30m";
			} else if (rest < 6*TEN_MIN) {
				range = "30m-60m";
			} else {
				range = ">1h";
			}
			PauseCommand rCommnad = new PauseCommand(last, cur, rest, range);
			rCommnad.setStartTimestamp(0);
			rCommnad.setTimestamp(last.getTimestamp()+1);
			newCommands.add(rCommnad);
		} 
		newCommands.add(cur);
	}
	
//	private EHICommand maybeAddWebCommand(List<EHICommand> newCommands, EHICommand last, EHICommand cur, EHICommand webCommand, Iterator<EHICommand> webCommandIterator, long startTimestamp) {
//		long timestamp = webCommand.getStartTimestamp() - startTimestamp;
//		boolean added = false;
//		while (webCommand != null && timestamp >= last.getTimestamp() && timestamp <= cur.getTimestamp()) {
//			webCommand.setStartTimestamp(0);
//			webCommand.setTimestamp(timestamp);
//			maybeAddPauseCommand(newCommands, last,	webCommand);
//			added = true;
//			if (webCommandIterator.hasNext()) {
//				last = webCommand;
//				webCommand = webCommandIterator.next();
//				timestamp = webCommand.getStartTimestamp() - startTimestamp;
//			} else {
//				break;
//			}
//		}
//		if (added) {
//			maybeAddPauseCommand(newCommands, last, cur);
//			return webCommand;
//		}
////		newCommands.add(webCommand);
////		maybeAddPauseCommand(newCommands, webCommand, cur);
//		return null;
//	}
	
	private EHICommand maybeAddWebCommandBeforeLogs(Iterator<EHICommand> iterator, long startTimestamp, List<EHICommand> commands) {
		if (iterator == null) {
			return null;
		}
		EHICommand webCommand = null;
		long timestamp = 0;
		while((webCommand = iterator.next()) != null && (timestamp = webCommand.getTimestamp() - startTimestamp) < 0) {
			webCommand.setStartTimestamp(0);
			webCommand.setTimestamp(timestamp);
			commands.add(webCommand);
		}
		return webCommand;
	}

	public String readWebContent(String aURL) {
		String content = "";
		Scanner sc = null;
		try {
			URL url = new URL(aURL);
//			System.out.println("accessing webpage " + aURL);
			URLConnection con = url.openConnection();
			con.setReadTimeout(5000);
			sc = new Scanner(con.getInputStream());
			StringBuffer sb = new StringBuffer();
			while (sc.hasNext()) {
				sb.append(sc.next());
			}
			content = sb.toString();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		if (content.equals("") && !aURL.substring(0,5).equals("https")) {
			aURL = aURL.replaceFirst("http", "https");
			return readWebContent(aURL);
		}
		
//		System.out.println("webpage content " + aURL + content);
//		return content.replaceAll("<[^>]*>", "").replaceAll("\\s", "");
		return content;
	}
	
	private boolean isProvided(String s) {
		for (String url : WebCommand.PROVIDED_URL) {
			if (s.equals(url)) {
				return true;
			}
		}
		return false;
	}
	
	private String readWebContent2(String url){
		try {
			 HttpURLConnection httpClient =(HttpURLConnection) new URL(url).openConnection();
		       httpClient.setRequestMethod("GET");
		       httpClient.setRequestProperty("User-Agent", "Mozilla/5.0");
		       int responseCode = httpClient.getResponseCode();
		       try (BufferedReader in = new BufferedReader(
		               new InputStreamReader(httpClient.getInputStream()))) {
		           StringBuilder response = new StringBuilder();
		           String line;
		           while ((line = in.readLine()) != null) {
		               response.append(line);
		           }
		           return response.toString();
		       }
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
       return "";
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="480" _type="Insert" date="Wed Feb 10 17:17:05 EST 2021" docASTNodeCount="5471" docActiveCodeLength="31728" docExpressionCount="3769" docLength="34119" length="6" offset="34085" repeat="3" starttimestamp="1612994614940" timestamp="810260" timestamp2="811001">
    <text><![CDATA[
		if]]></text>
  </DocumentChange>
  <DocumentChange __id="488" _type="Replace" date="Wed Feb 10 17:17:06 EST 2021" docASTNodeCount="5474" docActiveCodeLength="31765" docExpressionCount="3770" docLength="34156" endLine="974" insertionLength="39" int_docASTNodeCount="5471" int_docActiveCodeLength="31726" int_docExpressionCount="3769" int_docLength="34117" length="2" offset="34089" startLine="974" starttimestamp="1612994614940" timestamp="811097">
    <deletedText><![CDATA[if]]></deletedText>
    <insertedText><![CDATA[if (firstCommandAfterStart) {
			
		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="490" _type="Replace" date="Wed Feb 10 17:17:06 EST 2021" docASTNodeCount="5474" docActiveCodeLength="31744" docExpressionCount="3770" docLength="34135" endLine="974" insertionLength="1" int_docASTNodeCount="5474" int_docActiveCodeLength="31743" int_docExpressionCount="3770" int_docLength="34134" length="22" offset="34093" startLine="974" starttimestamp="1612994614940" timestamp="811613">
    <deletedText><![CDATA[firstCommandAfterStart]]></deletedText>
    <insertedText><![CDATA[r]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="493" _type="Insert" date="Wed Feb 10 17:17:06 EST 2021" docASTNodeCount="5474" docActiveCodeLength="31748" docExpressionCount="3770" docLength="34139" length="4" offset="34094" repeat="4" starttimestamp="1612994614940" timestamp="811827" timestamp2="812915">
    <text><![CDATA[espo]]></text>
  </DocumentChange>
  <DocumentChange __id="497" _type="Delete" date="Wed Feb 10 17:17:09 EST 2021" docASTNodeCount="5471" docActiveCodeLength="31722" docExpressionCount="3769" docLength="34113" endLine="977" length="26" offset="34087" repeat="3" startLine="974" starttimestamp="1612994614940" timestamp="814646" timestamp2="814992">
    <text><![CDATA[		if (respo) {
			
		}
]]></text>
  </DocumentChange>
  <DocumentChange __id="504" _type="Insert" date="Wed Feb 10 17:17:10 EST 2021" docASTNodeCount="5471" docActiveCodeLength="31723" docExpressionCount="3769" docLength="34114" length="1" offset="34087" starttimestamp="1612994614940" timestamp="815718">
    <text><![CDATA[`]]></text>
  </DocumentChange>
  <DocumentChange __id="506" _type="Delete" date="Wed Feb 10 17:17:11 EST 2021" docASTNodeCount="5471" docActiveCodeLength="31722" docExpressionCount="3769" docLength="34113" endLine="974" length="1" offset="34087" startLine="974" starttimestamp="1612994614940" timestamp="816578">
    <text><![CDATA[`]]></text>
  </DocumentChange>
  <DocumentChange __id="527" _type="Insert" date="Wed Feb 10 17:25:43 EST 2021" docASTNodeCount="5387" docActiveCodeLength="31725" docExpressionCount="3706" docLength="34116" length="3" offset="26243" repeat="3" starttimestamp="1612994614940" timestamp="1328664" timestamp2="1329048">
    <text><![CDATA[? :]]></text>
  </DocumentChange>
  <DocumentChange __id="533" _type="Delete" date="Wed Feb 10 17:25:44 EST 2021" docASTNodeCount="5387" docActiveCodeLength="31724" docExpressionCount="3706" docLength="34115" endLine="726" length="1" offset="26245" startLine="726" starttimestamp="1612994614940" timestamp="1329499">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <DocumentChange __id="535" _type="Insert" date="Wed Feb 10 17:25:45 EST 2021" docASTNodeCount="5387" docActiveCodeLength="31725" docExpressionCount="3706" docLength="34116" length="1" offset="26245" starttimestamp="1612994614940" timestamp="1330673">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <DocumentChange __id="538" _type="Delete" date="Wed Feb 10 17:25:46 EST 2021" docASTNodeCount="5387" docActiveCodeLength="31724" docExpressionCount="3706" docLength="34115" endLine="726" length="1" offset="26245" startLine="726" starttimestamp="1612994614940" timestamp="1331406">
    <text><![CDATA[T]]></text>
  </DocumentChange>
  <Command __id="536" _type="PauseCommand" date="Wed Feb 10 17:25:45 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="1330673">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1171]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="537" _type="InsertStringCommand" date="Wed Feb 10 17:25:45 EST 2021" starttimestamp="1612994614940" timestamp="1330681" timestamp2="1330681">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="539" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:25:46 EST 2021" starttimestamp="1612994614940" timestamp="1331409" />
  <Command __id="541" _type="InsertStringCommand" date="Wed Feb 10 17:25:47 EST 2021" starttimestamp="1612994614940" timestamp="1332224" timestamp2="1332224">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="543" _type="InsertStringCommand" date="Wed Feb 10 17:25:47 EST 2021" starttimestamp="1612994614940" timestamp="1332456" timestamp2="1332456">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="545" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:25:47 EST 2021" starttimestamp="1612994614940" timestamp="1332769" />
  <Command __id="547" _type="InsertStringCommand" date="Wed Feb 10 17:25:47 EST 2021" starttimestamp="1612994614940" timestamp="1332846" timestamp2="1332846">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="549" _type="InsertStringCommand" date="Wed Feb 10 17:25:48 EST 2021" starttimestamp="1612994614940" timestamp="1333174" timestamp2="1333174">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="551" _type="InsertStringCommand" date="Wed Feb 10 17:25:48 EST 2021" starttimestamp="1612994614940" timestamp="1333294" timestamp2="1333294">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="553" _type="InsertStringCommand" date="Wed Feb 10 17:25:48 EST 2021" starttimestamp="1612994614940" timestamp="1333586" timestamp2="1333586">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:25:48 EST 2021" starttimestamp="1612994614940" timestamp="1334057" />
  <Command __id="557" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:25:49 EST 2021" starttimestamp="1612994614940" timestamp="1334162" />
  <Command __id="559" _type="InsertStringCommand" date="Wed Feb 10 17:25:49 EST 2021" starttimestamp="1612994614940" timestamp="1334378" timestamp2="1334378">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="561" _type="InsertStringCommand" date="Wed Feb 10 17:25:49 EST 2021" starttimestamp="1612994614940" timestamp="1334457" timestamp2="1334457">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="563" _type="PauseCommand" date="Wed Feb 10 17:25:51 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="1336223">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1766]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="564" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:25:51 EST 2021" starttimestamp="1612994614940" timestamp="1336227" />
  <Command __id="566" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:25:51 EST 2021" starttimestamp="1612994614940" timestamp="1336372" />
  <Command __id="568" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:25:51 EST 2021" starttimestamp="1612994614940" timestamp="1336499" />
  <Command __id="570" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Feb 10 17:25:51 EST 2021" starttimestamp="1612994614940" timestamp="1336624" />
  <Command __id="572" _type="InsertStringCommand" date="Wed Feb 10 17:25:52 EST 2021" starttimestamp="1612994614940" timestamp="1337239" timestamp2="1337239">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="574" _type="InsertStringCommand" date="Wed Feb 10 17:25:52 EST 2021" starttimestamp="1612994614940" timestamp="1337742" timestamp2="1337742">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="576" _type="InsertStringCommand" date="Wed Feb 10 17:25:52 EST 2021" starttimestamp="1612994614940" timestamp="1337823" timestamp2="1337823">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="578" _type="InsertStringCommand" date="Wed Feb 10 17:25:52 EST 2021" starttimestamp="1612994614940" timestamp="1337974" timestamp2="1337974">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="580" _type="InsertStringCommand" date="Wed Feb 10 17:25:53 EST 2021" starttimestamp="1612994614940" timestamp="1338064" timestamp2="1338064">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="582" _type="InsertStringCommand" date="Wed Feb 10 17:25:53 EST 2021" starttimestamp="1612994614940" timestamp="1338147" timestamp2="1338147">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="584" _type="InsertStringCommand" date="Wed Feb 10 17:25:53 EST 2021" starttimestamp="1612994614940" timestamp="1338311" timestamp2="1338311">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="586" _type="InsertStringCommand" date="Wed Feb 10 17:25:53 EST 2021" starttimestamp="1612994614940" timestamp="1338464" timestamp2="1338464">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="587" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Feb 10 17:25:54 EST 2021" starttimestamp="1612994614940" timestamp="1339211" />
  <Command __id="589" _type="PauseCommand" date="Wed Feb 10 17:25:55 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="1340221">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1010]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="590" _type="InsertStringCommand" date="Wed Feb 10 17:25:55 EST 2021" starttimestamp="1612994614940" timestamp="1340229" timestamp2="1340229">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="592" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Feb 10 17:25:55 EST 2021" starttimestamp="1612994614940" timestamp="1340628" />
  <Command __id="594" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Feb 10 17:25:55 EST 2021" starttimestamp="1612994614940" timestamp="1340738" />
  <Command __id="596" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Feb 10 17:25:55 EST 2021" starttimestamp="1612994614940" timestamp="1340883" />
  <Command __id="598" _type="PauseCommand" date="Wed Feb 10 17:25:57 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="1342158">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1275]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="599" _type="InsertStringCommand" date="Wed Feb 10 17:25:57 EST 2021" starttimestamp="1612994614940" timestamp="1342163" timestamp2="1342163">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="600" _type="InsertStringCommand" date="Wed Feb 10 17:25:57 EST 2021" starttimestamp="1612994614940" timestamp="1342310" timestamp2="1342310">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="601" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Feb 10 17:25:57 EST 2021" starttimestamp="1612994614940" timestamp="1342964" />
  <Command __id="602" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Feb 10 17:25:58 EST 2021" starttimestamp="1612994614940" timestamp="1343076" />
  <Command __id="603" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Feb 10 17:25:58 EST 2021" starttimestamp="1612994614940" timestamp="1343244" />
  <Command __id="604" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Feb 10 17:25:58 EST 2021" starttimestamp="1612994614940" timestamp="1343653" />
  <Command __id="605" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:25:58 EST 2021" starttimestamp="1612994614940" timestamp="1343746" />
  <Command __id="606" _type="EclipseCommand" commandID="" date="Wed Feb 10 17:25:58 EST 2021" starttimestamp="1612994614940" timestamp="1343861" />
  <Command __id="608" _type="PauseCommand" date="Wed Feb 10 17:26:00 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="1345261">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1400]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="607" _type="ShellCommand" date="Wed Feb 10 17:26:00 EST 2021" starttimestamp="1612994614940" timestamp="1345261" type="ECLIPSE_MINIMIZED" />
  <Command __id="609" _type="ShellCommand" date="Wed Feb 10 17:26:00 EST 2021" starttimestamp="1612994614940" timestamp="1345268" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="611" _type="PauseCommand" date="Wed Feb 10 17:31:50 EST 2021" range="5m-10m" starttimestamp="1612994614940" timestamp="1696050">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[350782]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="610" _type="ShellCommand" date="Wed Feb 10 17:31:50 EST 2021" starttimestamp="1612994614940" timestamp="1696050" type="ECLIPSE_MAXIMIZED" />
  <Command __id="612" _type="ShellCommand" date="Wed Feb 10 17:31:51 EST 2021" starttimestamp="1612994614940" timestamp="1696092" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="614" _type="PauseCommand" date="Wed Feb 10 17:31:56 EST 2021" range="5s-10s" starttimestamp="1612994614940" timestamp="1701097">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5005]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="613" _type="ShellCommand" date="Wed Feb 10 17:31:56 EST 2021" starttimestamp="1612994614940" timestamp="1701097" type="ECLIPSE_MINIMIZED" />
  <Command __id="615" _type="ShellCommand" date="Wed Feb 10 17:31:56 EST 2021" starttimestamp="1612994614940" timestamp="1701103" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="617" _type="PauseCommand" date="Wed Feb 10 17:32:54 EST 2021" range="30s-1m" starttimestamp="1612994614940" timestamp="1759642">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[58539]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="616" _type="ShellCommand" date="Wed Feb 10 17:32:54 EST 2021" starttimestamp="1612994614940" timestamp="1759642" type="ECLIPSE_MAXIMIZED" />
  <Command __id="618" _type="ShellCommand" date="Wed Feb 10 17:32:54 EST 2021" starttimestamp="1612994614940" timestamp="1759684" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="620" _type="PauseCommand" date="Wed Feb 10 17:32:56 EST 2021" range="1s-2s" starttimestamp="1612994614940" timestamp="1761454">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1770]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="619" _type="MoveCaretCommand" caretOffset="6767" date="Wed Feb 10 17:32:56 EST 2021" docOffset="26255" starttimestamp="1612994614940" timestamp="1761454" />
